Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 0x10]
	<None(None)> StreamingLevelsToConsider;//[Offset: 0x98, Size: 0x50]
	FString StreamingLevelsPrefix;//[Offset: 0xe8, Size: 0x10]
	Level* CurrentLevelPendingVisibility;//[Offset: 0xf8, Size: 0x8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x100, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x108, Size: 0x8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x110, Size: 0x8]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x118, Size: 0x8]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x138, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x140, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x148, Size: 0x8]
	AISystemBase* AISystem;//[Offset: 0x150, Size: 0x8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x158, Size: 0x8]
	Level*[] levels;//[Offset: 0x160, Size: 0x10]
	LevelCollection[] LevelCollections;//[Offset: 0x170, Size: 0x10]
	Level* CurrentLevel;//[Offset: 0x188, Size: 0x8]
	GameInstance* OwningGameInstance;//[Offset: 0x190, Size: 0x8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x198, Size: 0x10]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x1a8, Size: 0x8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1b0, Size: 0x8]
	WorldComposition* WorldComposition;//[Offset: 0x798, Size: 0x8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ea, Size: 0x1]
	WorldPSCPool PSCPool;//[Offset: 0x810, Size: 0x58]
	void HandleTimelineScrubbed();// 0x25c2950

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x1395e00

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xc0, Size: 0x8]
	Model* Model;//[Offset: 0xc8, Size: 0x8]
	ModelComponent*[] ModelComponents;//[Offset: 0xd0, Size: 0x10]
	LevelActorContainer* ActorCluster;//[Offset: 0xe0, Size: 0x8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe8, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xec, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xf0, Size: 0x8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf8, Size: 0x8]
	NavigationObjectBase* NavListEnd;//[Offset: 0x100, Size: 0x8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x108, Size: 0x10]
	float LightmapTotalSize;//[Offset: 0x118, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0x11c, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x120, Size: 0x10]
	Guid[] StreamingTextureGuids;//[Offset: 0x130, Size: 0x10]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	Guid LevelBuildDataId;//[Offset: 0x1d4, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e8, Size: 0x8]
	IntVector LightBuildLevelOffset;//[Offset: 0x1f0, Size: 0xc]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 0x1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fc, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fc, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x248, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x258, Size: 0x10]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x278, Size: 0x10]

--------------------------------
Class: Model.Object

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x598, Size: 0x8]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x250, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x254, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x258, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x25c, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x25d, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x25e, Size: 0x1]
	enum LightmapType;//[Offset: 0x25f, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x268, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x268, Size: 0x1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x268, Size: 0x1]
	bool bCheckAsyncSceneOnMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x269, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x269, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x269, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x269, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x269, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x269, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x269, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x269, Size: 0x1]
	bool bRenderInMono;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26a, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26a, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x26a, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x26a, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x26a, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x26a, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x26a, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x26a, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26b, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26b, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x26b, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x26b, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x26b, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x26b, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x26b, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x26b, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26c, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x26c, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x26c, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x26c, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x26c, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x26c, Size: 0x1]
	Vector IndirectLightingPosition;//[Offset: 0x270, Size: 0xc]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27c, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27c, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27c, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27c, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27c, Size: 0x1]
	bool bIgnoreImpulseFromCharacter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27c, Size: 0x1]
	bool bApplyDamageToOwnerOnProjectileHit;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27c, Size: 0x1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27c, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27d, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27d, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27d, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27d, Size: 0x1]
	bool UpdateOnlyStencilValue;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27d, Size: 0x1]
	bool bDontModifyCustomDepth;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27d, Size: 0x1]
	bool bDontModifyStencil;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27d, Size: 0x1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x27e, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x280, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x281, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x282, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x284, Size: 0x4]
	int TranslucencySortPriority;//[Offset: 0x288, Size: 0x4]
	int VisibilityId;//[Offset: 0x28c, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0x294, Size: 0x4]
	float BoundsScale;//[Offset: 0x2a0, Size: 0x4]
	float LastSubmitTime;//[Offset: 0x2a4, Size: 0x4]
	float LastRenderTime;//[Offset: 0x2a8, Size: 0x4]
	float LastRenderTimeOnScreen;//[Offset: 0x2ac, Size: 0x4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x2b0, Size: 0x10]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x2c0, Size: 0x10]
	BodyInstance BodyInstance;//[Offset: 0x2e0, Size: 0x150]
	delegate OnComponentHit;//[Offset: 0x430, Size: 0x10]
	delegate OnComponentBeginOverlap;//[Offset: 0x440, Size: 0x10]
	delegate OnComponentEndOverlap;//[Offset: 0x450, Size: 0x10]
	delegate OnComponentWake;//[Offset: 0x460, Size: 0x10]
	delegate OnComponentSleep;//[Offset: 0x470, Size: 0x10]
	delegate OnBeginCursorOver;//[Offset: 0x490, Size: 0x10]
	delegate OnEndCursorOver;//[Offset: 0x4a0, Size: 0x10]
	delegate OnClicked;//[Offset: 0x4b0, Size: 0x10]
	delegate OnReleased;//[Offset: 0x4c0, Size: 0x10]
	delegate OnInputTouchBegin;//[Offset: 0x4d0, Size: 0x10]
	delegate OnInputTouchEnd;//[Offset: 0x4e0, Size: 0x10]
	delegate OnInputTouchEnter;//[Offset: 0x4f0, Size: 0x10]
	delegate OnInputTouchLeave;//[Offset: 0x500, Size: 0x10]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x520, Size: 0x8]
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x528, Size: 0x58]
	void WakeRigidBody(FName BoneName);// 0x258ce10
	void WakeAllRigidBodies();// 0x258cdf0
	void SetWalkableSlopeOverride(WalkableSlopeOverride NewOverride);// 0x258cd40
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x258cc70
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x258cbf0
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x258c9e0
	void SetSimulatePhysics(bool bSimulate);// 0x258c950
	void SetRenderInMono(bool bValue);// 0x258c8c0
	void SetRenderInMainPass(bool bValue);// 0x258c830
	void SetRenderCustomDepth(bool bValue);// 0x258c7a0
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x258c710
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x258c050
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x258c580
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x258c470
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x258c470
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x258c350
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x258c230
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x258c0e0
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x258c0e0
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x258bfc0
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x258bf30
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x258bea0
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x258bd10
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x258bc40
	void SetMassScale(FName BoneName, float InMassScale);// 0x258bb70
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x258ba70
	void SetLockedAxis(byte LockedAxis);// 0x258b9f0
	void SetLinearDamping(float InDamping);// 0x24ce070
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x258b860
	void SetEnableGravity(bool bGravityEnabled);// 0x258b7d0
	void SetDontModifyStencil(bool bValue);// 0x258b740
	void SetDontModifyCustomDepth(bool bValue);// 0x258b6b0
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x258b630
	void SetCustomDepthStencilValue(int Value);// 0x258b5b0
	void SetCullDistance(float NewCullDistance);// 0x258b530
	void SetConstraintMode(byte ConstraintMode);// 0x258b4b0
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x258b3f0
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x258b370
	void SetCollisionProfileName(FName InCollisionProfileName);// 0x258b2e0
	void SetCollisionObjectType(byte Channel);// 0x258b260
	void SetCollisionEnabled(byte NewType);// 0x258b1e0
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x258b110
	void SetCastShadow(bool NewCastShadow);// 0x258b080
	void SetBoundsScale(float NewBoundsScale);// 0x258b000
	void SetAngularDamping(float InDamping);// 0x24ceaa0
	void SetAllUseCCD(bool InUseCCD);// 0x258aa00
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x258a920
	void SetAllPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent);// 0x258a840
	void SetAllPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent);// 0x258a720
	void SetAllPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent);// 0x258a640
	void SetAllMassScale(float InMassScale);// 0x258a5c0
	void ScaleByMomentOfInertia(Vector InputVector, FName BoneName, Vector ReturnValue);// 0x258a4c0
	void PutRigidBodyToSleep(FName BoneName);// 0x258a3c0
	void K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, Vector HitLocation, Vector HitNormal, FName BoneName, HitResult OutHit, bool ReturnValue);// 0x258a050
	void K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, Vector HitLocation, Vector HitNormal, FName BoneName, HitResult OutHit, bool ReturnValue);// 0x2589d20
	void K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, Vector HitLocation, Vector HitNormal, FName BoneName, HitResult OutHit, bool ReturnValue);// 0x25899f0
	void K2_IsQueryCollisionEnabled(bool ReturnValue);// 0x25899b0
	void K2_IsPhysicsCollisionEnabled(bool ReturnValue);// 0x2589970
	void K2_IsCollisionEnabled(bool ReturnValue);// 0x2589930
	void K2_BoxOverlapComponent(Vector InBoxCentre, Box inBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, Vector HitLocation, Vector HitNormal, FName BoneName, HitResult OutHit, bool ReturnValue);// 0x25895f0
	void IsOverlappingComponent(PrimitiveComponent* OtherComp, bool ReturnValue);// 0x2589560
	void IsOverlappingActor(Actor* Other, bool ReturnValue);// 0x25894d0
	void IsGravityEnabled(bool ReturnValue);// 0x25894a0
	void IsAnyRigidBodyAwake(bool ReturnValue);// 0x2589470
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x2589220
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x2589150
	void GetWalkableSlopeOverride(WalkableSlopeOverride ReturnValue);// 0x2589110
	void GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName, Vector ReturnValue);// 0x2588fa0
	void GetPhysicsLinearVelocity(FName BoneName, Vector ReturnValue);// 0x2588f00
	void GetPhysicsAngularVelocityInRadians(FName BoneName, Vector ReturnValue);// 0x2588e60
	void GetPhysicsAngularVelocityInDegrees(FName BoneName, Vector ReturnValue);// 0x2588d90
	void GetPhysicsAngularVelocity(FName BoneName, Vector ReturnValue);// 0x2588d90
	void GetOverlappingComponents(PrimitiveComponent*[] OutOverlappingComponents);// 0x2588ce0
	void GetOverlappingActors(Actor*[] OverlappingActors, class Actor ClassFilter);// 0x2588bf0
	void GetNumMaterials(int ReturnValue);// 0x2588bc0
	void GetMaterialFromCollisionFaceIndex(int FaceIndex, int SectionIndex, MaterialInterface* ReturnValue);// 0x2588ae0
	void GetMaterial(int ElementIndex, MaterialInterface* ReturnValue);// 0x2588a40
	void GetMassScale(FName BoneName, float ReturnValue);// 0x25889a0
	void GetMass(float ReturnValue);// 0x2588960
	void GetLinearDamping(float ReturnValue);// 0x2588920
	void GetInertiaTensor(FName BoneName, Vector ReturnValue);// 0x2588870
	void GetGenerateOverlapEvents(bool ReturnValue);// 0x2588840
	void GetCollisionResponseToChannel(byte Channel, byte ReturnValue);// 0x25887b0
	void GetCollisionProfileName(FName ReturnValue);// 0x2588770
	void GetCollisionObjectType(byte ReturnValue);// 0x2588740
	void GetCollisionEnabled(byte ReturnValue);// 0x2588710
	void GetClosestPointOnCollision(Vector Point, Vector OutPointOnBody, FName BoneName, float ReturnValue);// 0x25885d0
	void GetCenterOfMass(FName BoneName, Vector ReturnValue);// 0x2588530
	void GetAngularDamping(float ReturnValue);// 0x2588180
	void CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName, MaterialInstanceDynamic* ReturnValue);// 0x2588070
	void CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent, MaterialInstanceDynamic* ReturnValue);// 0x2587fa0
	void CreateAndSetMaterialInstanceDynamic(int ElementIndex, MaterialInstanceDynamic* ReturnValue);// 0x2587f00
	void CopyArrayOfMoveIgnoreComponents(PrimitiveComponent*[] ReturnValue);// 0x2587e00
	void CopyArrayOfMoveIgnoreActors(Actor*[] ReturnValue);// 0x2587d80
	void ClearMoveIgnoreComponents();// 0x2587d30
	void ClearMoveIgnoreActors();// 0x2587d10
	void CanCharacterStepUp(Pawn* Pawn, bool ReturnValue);// 0x2587c70
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x2587a00
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x2587b20
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x2587a00
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x2587840
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x2587680
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x2587370
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x2587250
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x2587120
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x2586ff0
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x2586ed0
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x2586db0
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x2586c60
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x2586b40

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xf8, Size: 0x8]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0x100, Size: 0x10]
	Vector RelativeLocation;//[Offset: 0x13c, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x148, Size: 0xc]
	SceneComponent* AttachParent;//[Offset: 0x158, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0x160, Size: 0x10]
	FName AttachSocketName;//[Offset: 0x170, Size: 0x8]
	bool bReplicateDefaultProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x178, Size: 0x1]
	bool bReplicateAttachments;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x178, Size: 0x1]
	bool bReplicateTransform;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x178, Size: 0x1]
	Vector RelativeScale3D;//[Offset: 0x17c, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x1c0, Size: 0xc]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1cc, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1cc, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1cc, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1cc, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1cc, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1cc, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1cc, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1cd, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1cd, Size: 0x1]
	bool bIncludeChildrenWhileCalcBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1cd, Size: 0x1]
	bool bAbsoluteTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1cd, Size: 0x1]
	byte Mobility;//[Offset: 0x1ce, Size: 0x1]
	byte DetailMode;//[Offset: 0x1cf, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x210, Size: 0x10]
	void ToggleVisibility(bool bPropagateToChildren);// 0x25986f0
	void SnapTo(SceneComponent* InParent, FName InSocketName, bool ReturnValue);// 0x2598630
	void SetWorldScale3D(Vector NewScale);// 0x25984a0
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x25983d0
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x2598340
	void SetRelativeScale3D(Vector NewScale3D);// 0x25982b0
	void SetMobility(byte NewMobility);// 0x2598230
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x2598160
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x2597fc0
	void ResetRelativeTransform();// 0x2597fa0
	void OnRep_Visibility(bool OldValue);// 0x2597e10
	void OnRep_Transform();// 0x2597df0
	void OnRep_AttachSocketName();// 0x2597dd0
	void OnRep_AttachParent();// 0x2597dd0
	void OnRep_AttachChildren();// 0x2597db0
	void K2_SetWorldTransform(Transform NewTransform, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x2597bc0
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x2597a10
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x2597830
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x2597680
	void K2_SetRelativeTransform(Transform NewTransform, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x2597490
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x25972e0
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x2597100
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x2596f50
	void K2_GetComponentToWorld(Transform ReturnValue);// 0x2596ef0
	void K2_GetComponentScale(Vector ReturnValue);// 0x2596eb0
	void K2_GetComponentRotation(Rotator ReturnValue);// 0x2596e70
	void K2_GetComponentLocation(Vector ReturnValue);// 0x2596e30
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x2596ce0
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies, bool ReturnValue);// 0x2596b30
	void K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies, bool ReturnValue);// 0x25969e0
	void K2_AddWorldTransform(Transform DeltaTransform, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x25967f0
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x2596640
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x2596490
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x25962e0
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x2596130
	void K2_AddLocalTransform(Transform DeltaTransform, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x2595f40
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x2595d90
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x2595be0
	void IsVisible(bool ReturnValue);// 0x2595bb0
	void IsSimulatingPhysics(FName BoneName, bool ReturnValue);// 0x2595b10
	void IsAnySimulatingPhysics(bool ReturnValue);// 0xf3d5f0
	void GetUpVector(Vector ReturnValue);// 0x25959d0
	void GetSocketTransform(FName InSocketName, byte TransformSpace, Transform ReturnValue);// 0x25958d0
	void GetSocketRotation(FName InSocketName, Rotator ReturnValue);// 0x2595820
	void GetSocketQuaternion(FName InSocketName, Quat ReturnValue);// 0x2595780
	void GetSocketLocation(FName InSocketName, Vector ReturnValue);// 0x25956d0
	void GetShouldUpdatePhysicsVolume(bool ReturnValue);// 0x25956a0
	void GetRightVector(Vector ReturnValue);// 0x2595660
	void GetRelativeTransform(Transform ReturnValue);// 0x2595600
	void GetPhysicsVolume(PhysicsVolume* ReturnValue);// 0x25955d0
	void GetParentComponents(SceneComponent*[] Parents);// 0x2595520
	void GetNumChildrenComponents(int ReturnValue);// 0x25954f0
	void GetForwardVector(Vector ReturnValue);// 0x25767e0
	void GetComponentVelocity(Vector ReturnValue);// 0x25954b0
	void GetChildrenComponents(bool bIncludeAllDescendants, SceneComponent*[] Children);// 0x25953b0
	void GetChildComponent(int ChildIndex, SceneComponent* ReturnValue);// 0x2595320
	void GetAttachSocketName(FName ReturnValue);// 0x2595300
	void GetAttachParent(SceneComponent* ReturnValue);// 0x25952e0
	void GetAllSocketNames(FName[] ReturnValue);// 0x2595260
	void DoesSocketExist(FName InSocketName, bool ReturnValue);// 0x25951c0
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x25950f0

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x58]
	FName[] ComponentTags;//[Offset: 0x88, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x98, Size: 0x10]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa8, Size: 0x1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa8, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa9, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xaa, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xaa, Size: 0x1]
	enum CreationMethod;//[Offset: 0xac, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0xb0, Size: 0x10]
	delegate OnComponentActivated;//[Offset: 0xc0, Size: 0x10]
	delegate OnComponentDeactivated;//[Offset: 0xd0, Size: 0x10]
	void ToggleActive();// 0x1d1da60
	void SetTickGroup(byte NewTickGroup);// 0x2491590
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x2491610
	void SetIsReplicated(bool ShouldReplicate);// 0x2491500
	void SetComponentTickInterval(float TickInterval);// 0x2491480
	void SetComponentTickEnabled(bool bEnabled);// 0x24913f0
	void SetAutoActivate(bool bNewAutoActivate);// 0x248ce70
	void SetActive(bool bNewActive, bool bReset);// 0x2491320
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x2491290
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x2491200
	void ReceiveTick(float DeltaSeconds);// 0x1395e00
	void ReceiveEndPlay(byte EndPlayReason);// 0x1395e00
	void ReceiveBeginPlay();// 0x1395e00
	void OnRep_IsActive();// 0x1da3f50
	void K2_DestroyComponent(Object* Object);// 0x2491100
	void IsComponentTickEnabled(bool ReturnValue);// 0x24910d0
	void IsBeingDestroyed(bool ReturnValue);// 0x24910a0
	void IsActive(bool ReturnValue);// 0x2491070
	void GetOwner(Actor* ReturnValue);// 0x2491050
	void GetComponentTickInterval(float ReturnValue);// 0x2491020
	void Deactivate();// 0x1df5ed0
	void ComponentHasTag(FName Tag, bool ReturnValue);// 0x2490e10
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x2490cc0
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x2490c30
	void Activate(bool bReset);// 0x1d1e460

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x368, Size: 0x4]
	int Priority;//[Offset: 0x36c, Size: 0x4]
	float FluidFriction;//[Offset: 0x370, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x374, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x374, Size: 0x1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x330, Size: 0x1]
	Color BrushColor;//[Offset: 0x334, Size: 0x4]
	int PolyFlags;//[Offset: 0x338, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33c, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33c, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x33c, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x33c, Size: 0x1]
	Model* Brush;//[Offset: 0x340, Size: 0x8]
	BrushComponent* BrushComponent;//[Offset: 0x348, Size: 0x8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x358, Size: 0x10]

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x58]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x80, Size: 0x1]
	bool bReplicateDefaultProperties;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x80, Size: 0x1]
	bool bReplicateReplicateMovement;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x80, Size: 0x1]
	bool bReplicateRole;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x80, Size: 0x1]
	bool bReplicateOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x81, Size: 0x1]
	bool bReplicateInstigator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x81, Size: 0x1]
	bool bReplicateAttachments;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x81, Size: 0x1]
	bool bUseReplicationPause;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x81, Size: 0x1]
	bool bDoNotReplicateToOwner;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x81, Size: 0x1]
	bool bCheckIsNetRelevant;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x81, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x81, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x81, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x82, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x82, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x82, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x82, Size: 0x1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x82, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x82, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x82, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x82, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x83, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x83, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x83, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x83, Size: 0x1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x83, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x83, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x84, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x85, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x85, Size: 0x1]
	byte RemoteRole;//[Offset: 0x86, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0x88, Size: 0x34]
	float InitialLifeSpan;//[Offset: 0xbc, Size: 0x4]
	float CustomTimeDilation;//[Offset: 0xc0, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0xc8, Size: 0x40]
	Actor* Owner;//[Offset: 0x108, Size: 0x8]
	FName NetDriverName;//[Offset: 0x110, Size: 0x8]
	byte Role;//[Offset: 0x118, Size: 0x1]
	byte NetDormancy;//[Offset: 0x119, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x11a, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0x11b, Size: 0x1]
	int InputPriority;//[Offset: 0x11c, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0x120, Size: 0x8]
	float NetCullDistanceSquared;//[Offset: 0x128, Size: 0x4]
	int NetTag;//[Offset: 0x12c, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x130, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x134, Size: 0x4]
	float NetPriority;//[Offset: 0x138, Size: 0x4]
	bool bReplicateWhenReplicationIsReduced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1]
	float ReducedNetUpdateDeltaSecond;//[Offset: 0x140, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x148, Size: 0x8]
	Actor*[] Children;//[Offset: 0x150, Size: 0x10]
	SceneComponent* RootComponent;//[Offset: 0x160, Size: 0x8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x168, Size: 0x10]
	FName[] Layers;//[Offset: 0x180, Size: 0x10]
	ChildActorComponent* ParentComponent;//[Offset: 0x190, Size: 0x8]
	FName[] tags;//[Offset: 0x198, Size: 0x10]
	delegate OnTakeAnyDamage;//[Offset: 0x1a8, Size: 0x10]
	delegate OnTakePointDamage;//[Offset: 0x1b8, Size: 0x10]
	delegate OnTakeRadialDamage;//[Offset: 0x1c8, Size: 0x10]
	delegate OnActorBeginOverlap;//[Offset: 0x1d8, Size: 0x10]
	delegate OnActorEndOverlap;//[Offset: 0x1e8, Size: 0x10]
	delegate OnBeginCursorOver;//[Offset: 0x1f8, Size: 0x10]
	delegate OnEndCursorOver;//[Offset: 0x208, Size: 0x10]
	delegate OnClicked;//[Offset: 0x218, Size: 0x10]
	delegate OnReleased;//[Offset: 0x228, Size: 0x10]
	delegate OnInputTouchBegin;//[Offset: 0x238, Size: 0x10]
	delegate OnInputTouchEnd;//[Offset: 0x248, Size: 0x10]
	delegate OnInputTouchEnter;//[Offset: 0x258, Size: 0x10]
	delegate OnInputTouchLeave;//[Offset: 0x268, Size: 0x10]
	delegate OnActorHit;//[Offset: 0x278, Size: 0x10]
	delegate OnDestroyed;//[Offset: 0x288, Size: 0x10]
	delegate OnEndPlay;//[Offset: 0x298, Size: 0x10]
	ActorComponent*[] InstanceComponents;//[Offset: 0x308, Size: 0x10]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x318, Size: 0x10]
	void WasRecentlyRendered(float Tolerance, bool ReturnValue);// 0x248d160
	void UserConstructionScript();// 0x1395e00
	void TearOff();// 0x1da3f30
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x248d0a0
	void SetTickGroup(byte NewTickGroup);// 0x248cf90
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x248d010
	void SetReplicates(bool bInReplicates);// 0x248cf00
	void SetReplicateMovement(bool bInReplicateMovement);// 0x248ce70
	void SetOwner(Actor* NewOwner);// 0x101a2a0
	void SetNetDormancy(byte NewDormancy);// 0x248cdf0
	void SetLifeSpan(float InLifespan);// 0x248cd70
	void SetActorTickInterval(float TickInterval);// 0x248ccf0
	void SetActorTickEnabled(bool bEnabled);// 0x248cc60
	void SetActorScale3D(Vector NewScale3D);// 0x248cbd0
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x248cb40
	void SetActorHiddenInGame(bool bNewHidden);// 0x248cab0
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x248ca20
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x248c990
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x248c900
	void ReceiveTick(float DeltaSeconds);// 0x1395e00
	void ReceiveRadialDamage(float DamageReceived, DamageType* DamageType, Vector Origin, HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x1395e00
	void ReceivePointDamage(float Damage, DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, HitResult HitInfo);// 0x1395e00
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, HitResult Hit);// 0x1395e00
	void ReceiveEndPlay(byte EndPlayReason);// 0x1395e00
	void ReceiveDestroyed();// 0x1395e00
	void ReceiveBeginPlay();// 0x1395e00
	void ReceiveAnyDamage(float Damage, DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1395e00
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x1395e00
	void ReceiveActorOnInputTouchLeave(byte FingerIndex);// 0x1395e00
	void ReceiveActorOnInputTouchEnter(byte FingerIndex);// 0x1395e00
	void ReceiveActorOnInputTouchEnd(byte FingerIndex);// 0x1395e00
	void ReceiveActorOnInputTouchBegin(byte FingerIndex);// 0x1395e00
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x1395e00
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x1395e00
	void ReceiveActorEndCursorOver();// 0x1395e00
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x1395e00
	void ReceiveActorBeginCursorOver();// 0x1395e00
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x248c7f0
	void OnRep_ReplicateMovement();// 0x1da3f50
	void OnRep_ReplicatedMovement();// 0x10b6910
	void OnRep_Owner();// 0x248c7d0
	void OnRep_Instigator();// 0x248c7b0
	void OnRep_AttachmentReplication();// 0x248c790
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x248c600
	void MakeMIDForMaterial(MaterialInterface* Parent, MaterialInstanceDynamic* ReturnValue);// 0x248c570
	void K2_TeleportTo(Vector DestLocation, Rotator DestRotation, bool ReturnValue);// 0x248c480
	void K2_SetActorTransform(Transform NewTransform, bool bSweep, HitResult SweepHitResult, bool bTeleport, bool ReturnValue);// 0x248c290
	void K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics, bool ReturnValue);// 0x248c1b0
	void K2_SetActorRelativeTransform(Transform NewRelativeTransform, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x248bfc0
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x248be10
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x248bc60
	void K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport, bool ReturnValue);// 0x248ba70
	void K2_SetActorLocation(Vector NewLocation, bool bSweep, HitResult SweepHitResult, bool bTeleport, bool ReturnValue);// 0x248b8c0
	void K2_OnReset();// 0x1395e00
	void K2_OnEndViewTarget(PlayerController* PC);// 0x1395e00
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x1395e00
	void K2_GetRootComponent(SceneComponent* ReturnValue);// 0x248b8a0
	void K2_GetActorRotation(Rotator ReturnValue);// 0x248b7e0
	void K2_GetActorLocation(Vector ReturnValue);// 0x248b760
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x248b660
	void K2_DestroyComponent(ActorComponent* Component);// 0x248b5e0
	void K2_DestroyActor();// 0x248b5c0
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x248b400
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x248b240
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x248b0f0
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x248afa0
	void K2_AddActorWorldTransform(Transform DeltaTransform, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x248adb0
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x248ac00
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x248aa50
	void K2_AddActorLocalTransform(Transform NewTransform, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x248a860
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x248a6b0
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, HitResult SweepHitResult, bool bTeleport);// 0x248a500
	void IsOverlappingActor(Actor* Other, bool ReturnValue);// 0x248a470
	void IsChildActor(bool ReturnValue);// 0x248a440
	void IsActorTickEnabled(bool ReturnValue);// 0x248a410
	void IsActorBeingDestroyed(bool ReturnValue);// 0x248a3e0
	void HasAuthority(bool ReturnValue);// 0x248a3b0
	void GetVerticalDistanceTo(Actor* OtherActor, float ReturnValue);// 0x248a310
	void GetVelocity(Vector ReturnValue);// 0x248a2d0
	void GetTransform(Transform ReturnValue);// 0x248a280
	void GetTickableWhenPaused(bool ReturnValue);// 0x248a250
	void GetSquaredDistanceTo(Actor* OtherActor, float ReturnValue);// 0x248a1b0
	void GetRemoteRole(byte ReturnValue);// 0x248a190
	void GetParentComponent(ChildActorComponent* ReturnValue);// 0x248a160
	void GetParentActor(Actor* ReturnValue);// 0x248a130
	void GetOwner(Actor* ReturnValue);// 0x248a110
	void GetOverlappingComponents(PrimitiveComponent*[] OverlappingComponents);// 0x248a060
	void GetOverlappingActors(Actor*[] OverlappingActors, class Actor ClassFilter);// 0x2489f70
	void GetLocalRole(byte ReturnValue);// 0x2489f50
	void GetLifeSpan(float ReturnValue);// 0x2489f10
	void GetInstigatorController(Controller* ReturnValue);// 0x2489ee0
	void GetInstigator(Pawn* ReturnValue);// 0x2489eb0
	void GetInputVectorAxisValue(Key InputAxisKey, Vector ReturnValue);// 0x2489da0
	void GetInputAxisValue(FName InputAxisName, float ReturnValue);// 0x2489d00
	void GetInputAxisKeyValue(Key InputAxisKey, float ReturnValue);// 0x2489bf0
	void GetHorizontalDotProductTo(Actor* OtherActor, float ReturnValue);// 0x2489b50
	void GetHorizontalDistanceTo(Actor* OtherActor, float ReturnValue);// 0x2489ab0
	void GetGameTimeSinceCreation(float ReturnValue);// 0x2489a80
	void GetDotProductTo(Actor* OtherActor, float ReturnValue);// 0x24899e0
	void GetDistanceTo(Actor* OtherActor, float ReturnValue);// 0x2489940
	void GetComponentsByTag(class ActorComponent ComponentClass, FName Tag, ActorComponent*[] ReturnValue);// 0x2489840
	void GetComponentsByClass(class ActorComponent ComponentClass, ActorComponent*[] ReturnValue);// 0x2489760
	void GetComponentByClass(class ActorComponent ComponentClass, ActorComponent* ReturnValue);// 0x24896d0
	void GetAttachParentSocketName(FName ReturnValue);// 0x24895e0
	void GetAttachParentActor(Actor* ReturnValue);// 0x24895b0
	void GetAttachedActors(Actor*[] OutActors);// 0x2489620
	void GetAllChildActors(Actor*[] ChildActors, bool bIncludeDescendants);// 0x24894b0
	void GetActorUpVector(Vector ReturnValue);// 0x2489440
	void GetActorTimeDilation(float ReturnValue);// 0x2489410
	void GetActorTickInterval(float ReturnValue);// 0x24893e0
	void GetActorSphereBoundsRadius(bool bOnlyCollidingComponents, float ReturnValue);// 0x2489340
	void GetActorScale3D(Vector ReturnValue);// 0x2489300
	void GetActorRightVector(Vector ReturnValue);// 0x2489290
	void GetActorRelativeScale3D(Vector ReturnValue);// 0x2489250
	void GetActorForwardVector(Vector ReturnValue);// 0x24891e0
	void GetActorEyesViewPoint(Vector OutLocation, Rotator OutRotation);// 0x24890f0
	void GetActorEnableCollision(bool ReturnValue);// 0x24890c0
	void GetActorBounds(bool bOnlyCollidingComponents, Vector Origin, Vector BoxExtent);// 0x2488f90
	void ForceNetUpdate();// 0x2488f70
	void FlushNetDormancy();// 0x2488f50
	void EnableInput(PlayerController* PlayerController);// 0x2488ec0
	void DisableInput(PlayerController* PlayerController);// 0x2488e30
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x2488da0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x2488d10
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x2488c80
	void AddComponent(FName TemplateName, bool bManualAttachment, Transform RelativeTransform, Object* ComponentTemplateContext, ActorComponent* ReturnValue);// 0x2488ac0
	void ActorHasTag(FName Tag, bool ReturnValue);// 0x2488a30

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x580, Size: 0x8]
	BodySetup* BrushBodySetup;//[Offset: 0x588, Size: 0x8]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 0x58]
	FName BoneName;//[Offset: 0x80, Size: 0x8]
	byte PhysicsType;//[Offset: 0x88, Size: 0x1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 0x1]
	byte CollisionReponse;//[Offset: 0x8b, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x8c, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x90, Size: 0x8]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x98, Size: 0x10]
	BodyInstance DefaultInstance;//[Offset: 0x110, Size: 0x150]
	Vector BuildScale3D;//[Offset: 0x268, Size: 0xc]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	float Radius;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4]
	FName Name;//[Offset: 0x10, Size: 0x8]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float X;//[Offset: 0x48, Size: 0x4]
	float Y;//[Offset: 0x4c, Size: 0x4]
	float Z;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius;//[Offset: 0x48, Size: 0x4]
	float Length;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10]
	Box ElemBox;//[Offset: 0x40, Size: 0x1c]
	Transform Transform;//[Offset: 0x60, Size: 0x30]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0xc]
	Vector Max;//[Offset: 0xc, Size: 0xc]
	byte IsValid;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius0;//[Offset: 0x48, Size: 0x4]
	float Radius1;//[Offset: 0x4c, Size: 0x4]
	float Length;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	float Restitution;//[Offset: 0x30, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	float Density;//[Offset: 0x38, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x3c, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 0x8]
	byte SurfaceType;//[Offset: 0x50, Size: 0x1]
	float TireFrictionScale;//[Offset: 0x54, Size: 0x4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 0x10]
	LinearColor DebugColor;//[Offset: 0x68, Size: 0x10]
	float AbsorptionValue;//[Offset: 0x78, Size: 0x4]
	float Thickness;//[Offset: 0x7c, Size: 0x4]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 0x8]
	float FrictionScale;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BodyInstance
	byte ObjectType;//[Offset: 0x6, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1]
	enum SleepFamily;//[Offset: 0xa, Size: 0x1]
	byte DOFMode;//[Offset: 0xb, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x20, Size: 0x8]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 0x30]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 0x4]
	float MassInKgOverride;//[Offset: 0x5c, Size: 0x4]
	float LinearDamping;//[Offset: 0x68, Size: 0x4]
	float AngularDamping;//[Offset: 0x6c, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 0xc]
	Vector COMNudge;//[Offset: 0x7c, Size: 0xc]
	float MassScale;//[Offset: 0x88, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 0xc]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa8, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb8, Size: 0x8]
	float MaxAngularVelocity;//[Offset: 0xc0, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xc4, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc8, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0xcc, Size: 0x4]
	int PositionSolverIterationCount;//[Offset: 0xd0, Size: 0x4]
	int VelocitySolverIterationCount;//[Offset: 0xd4, Size: 0x4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	float TickInterval;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc]
	FName AttachSocket;//[Offset: 0x30, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x160, Size: 0x10]
	void WasControllerKeyJustReleased(Key Key, bool ReturnValue);// 0x24f8bd0
	void WasControllerKeyJustPressed(Key Key, bool ReturnValue);// 0x24f8bd0
	void IsControllerKeyDown(Key Key, bool ReturnValue);// 0x24f8bd0
	void GetTouchState(int FingerIndex, float LocationX, float LocationY, bool bIsCurrentlyPressed);// 0x24f8a50
	void GetControllerVectorKeyState(Key Key, Vector ReturnValue);// 0x24f84e0
	void GetControllerMouseDelta(float DeltaX, float DeltaY);// 0x24f8400
	void GetControllerKeyTimeDown(Key Key, float ReturnValue);// 0x24f81d0
	void GetControllerAnalogStickState(byte WhichStick, float StickX, float StickY);// 0x24f82e0
	void GetControllerAnalogKeyState(Key Key, float ReturnValue);// 0x24f81d0

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10]
	void SetMouseSensitivity(float SensitivityX, float SensitivityY);// 0x258bde0
	void SetBind(FName BindName, FString Command);// 0x258aa90
	void InvertAxisKey(Key AxisKey);// 0x2589370
	void InvertAxis(FName AxisName);// 0x25892f0
	void ClearSmoothing();// 0x2587d60

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x20]
	FString Command;//[Offset: 0x20, Size: 0x10]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x30, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x30, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8]
	byte ScanCode;//[Offset: 0x8, Size: 0x1]
	bool bExtendedScanCode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x338, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x338, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x33c, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x340, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x341, Size: 0x1]
	byte RemoteViewPitch;//[Offset: 0x342, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x348, Size: 0x8]
	PlayerState* PlayerState;//[Offset: 0x350, Size: 0x8]
	Controller* LastHitBy;//[Offset: 0x360, Size: 0x8]
	Controller* Controller;//[Offset: 0x368, Size: 0x8]
	Vector ControlInputVector;//[Offset: 0x374, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x380, Size: 0xc]
	void SpawnDefaultController();// 0xf22840
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x2572330
	void ReceiveUnpossessed(Controller* OldController);// 0x1395e00
	void ReceivePossessed(Controller* NewController);// 0x1395e00
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x2571900
	void OnRep_PlayerState();// 0x24ca0e0
	void OnRep_Controller();// 0x24ca0c0
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x25716c0
	void K2_GetMovementInputVector(Vector ReturnValue);// 0x2571590
	void IsPlayerControlled(bool ReturnValue);// 0x2571690
	void IsMoveInputIgnored(bool ReturnValue);// 0x2571630
	void IsLocallyControlled(bool ReturnValue);// 0x24e5bc0
	void IsControlled(bool ReturnValue);// 0x2571600
	void GetPendingMovementInputVector(Vector ReturnValue);// 0x2571590
	void GetNavAgentLocation(Vector ReturnValue);// 0x25714d0
	void GetMovementComponent(PawnMovementComponent* ReturnValue);// 0x24cddc0
	static void GetMovementBaseActor(Pawn* Pawn, Actor* ReturnValue);// 0x2571450
	void GetLastMovementInputVector(Vector ReturnValue);// 0x2571410
	void GetControlRotation(Rotator ReturnValue);// 0x25712e0
	void GetController(Controller* ReturnValue);// 0x2571320
	void GetBaseAimRotation(Rotator ReturnValue);// 0x2571100
	void DetachFromControllerPendingDestroy();// 0x24ca470
	void ConsumeMovementInputVector(Vector ReturnValue);// 0x25710c0
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x2570be0
	void AddControllerYawInput(float Val);// 0x2570a80
	void AddControllerRollInput(float Val);// 0x2570a00
	void AddControllerPitchInput(float Val);// 0x2570980

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x338, Size: 0x8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x348, Size: 0x10]
	FName StateName;//[Offset: 0x358, Size: 0x8]
	Pawn* Pawn;//[Offset: 0x360, Size: 0x8]
	Character* Character;//[Offset: 0x370, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x378, Size: 0x8]
	Rotator ControlRotation;//[Offset: 0x398, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a4, Size: 0x1]
	bool bIsPlayerController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a4, Size: 0x1]
	void UnPossess();// 0xfa1680
	void StopMovement();// 0x24ca470
	void SetInitialLocationAndRotation(Vector NewLocation, Rotator NewRotation);// 0x24ca380
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x24ca2f0
	void SetIgnoreLookInput(bool bNewLookInput);// 0x24ca260
	void SetControlRotation(Rotator NewRotation);// 0x24ca1d0
	void ResetIgnoreMoveInput();// 0x10502b0
	void ResetIgnoreLookInput();// 0x24ca1b0
	void ResetIgnoreInputFlags();// 0x24ca190
	void ReceiveInstigatedAnyDamage(float Damage, DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x1395e00
	void Possess(Pawn* InPawn);// 0x24ca100
	void OnRep_PlayerState();// 0x24ca0e0
	void OnRep_Pawn();// 0x24ca0c0
	void LineOfSightTo(Actor* Other, Vector ViewPoint, bool bAlternateChecks, bool ReturnValue);// 0x24c9fa0
	void K2_GetPawn(Pawn* ReturnValue);// 0x24c9f70
	void IsPlayerController(bool ReturnValue);// 0x24c9f40
	void IsMoveInputIgnored(bool ReturnValue);// 0x24c9f10
	void IsLookInputIgnored(bool ReturnValue);// 0x24c9ee0
	void IsLocalPlayerController(bool ReturnValue);// 0x24c9e90
	void IsLocalController(bool ReturnValue);// 0x24c9e60
	void GetViewTarget(Actor* ReturnValue);// 0x24c9e30
	void GetDesiredRotation(Rotator ReturnValue);// 0x24c9a60
	void GetControlRotation(Rotator ReturnValue);// 0x24c12d0
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x24c8e40
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x24c8d60
	void CastToPlayerController(PlayerController* ReturnValue);// 0x24c8d30

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x330, Size: 0x4]
	FString PlayerName;//[Offset: 0x338, Size: 0x10]
	int PlayerId;//[Offset: 0x358, Size: 0x4]
	byte Ping;//[Offset: 0x35c, Size: 0x1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35e, Size: 0x1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x360, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x360, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x364, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 0x1]
	int StartTime;//[Offset: 0x370, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x378, Size: 0x8]
	FString SavedNetworkAddress;//[Offset: 0x388, Size: 0x10]
	UniqueNetIdRepl UniqueId;//[Offset: 0x398, Size: 0x28]
	Pawn* PawnPrivate;//[Offset: 0x3c8, Size: 0x8]
	FString PlayerNamePrivate;//[Offset: 0x3e8, Size: 0x10]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x1395e00
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x1395e00
	void OnRep_UniqueId();// 0x429e30
	void OnRep_Score();// 0xf3d810
	void OnRep_PlayerName();// 0x45e170
	void OnRep_PlayerId();// 0xf26860
	void OnRep_bIsInactive();// 0xf22330
	void GetPlayerName(FString ReturnValue);// 0x2589090

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x390, Size: 0x8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x398, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x3a0, Size: 0x8]
	BasedMovementInfo BasedMovement;//[Offset: 0x3a8, Size: 0x30]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x3d8, Size: 0x30]
	float AnimRootMotionTranslationScale;//[Offset: 0x408, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x40c, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x420, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x430, Size: 0x4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x434, Size: 0x4]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x43c, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x440, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x440, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x440, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x440, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x440, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x440, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x440, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x440, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x441, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x441, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x441, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x444, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x448, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x44c, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x450, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x454, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x458, Size: 0x4]
	int JumpCurrentCountPreJump;//[Offset: 0x45c, Size: 0x4]
	delegate OnReachedJumpApex;//[Offset: 0x468, Size: 0x10]
	delegate MovementModeChangedDelegate;//[Offset: 0x488, Size: 0x10]
	delegate OnCharacterMovementUpdated;//[Offset: 0x498, Size: 0x10]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x4a8, Size: 0xf8]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x5a0, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x5e0, Size: 0x10]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x5f0, Size: 0x158]
	void UnCrouch(bool bClientSimulation);// 0x24bfa60
	void StopJumping();// 0x24bfa40
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x24bf9b0
	void ServerMoveVault(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, uint16 CompressedMoveFlags, byte ClientRoll, View(UInt32Property) View, Vector_NetQuantize10 VaultActorStartLocation, byte VaultActorRotationYaw, uint16 VaultActorPackedSpeed, Vector_NetQuantize10 VaultHitLocation, Vector_NetQuantize10 VaultEndLocation, bool bVaultBlendIntoFalling, byte VaultInfo, byte ClientMovementMode);// 0x24bf220
	void ServerMoveOldVault(float Timestamp, float TimeAlongVault, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, uint16 CompressedMoveFlags, byte ClientRoll, View(UInt32Property) View, Vector_NetQuantize10 VaultActorStartLocation, byte VaultActorRotationYaw, uint16 VaultActorPackedSpeed, Vector_NetQuantize10 VaultHitLocation, Vector_NetQuantize10 VaultEndLocation, bool bVaultBlendIntoFalling, byte VaultInfo, byte ClientMovementMode);// 0x24becf0
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, uint16 OldMoveFlags);// 0x24beb80
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, uint16 CompressedMoveFlags, byte ClientRoll, View(UInt32Property) View, byte ClientMovementMode);// 0x24be900
	void ServerMoveDualVault(float TimeStamp0, Vector_NetQuantize10 InAccel0, uint16 CompressedMoveFlags0, View0(UInt32Property) View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, View(UInt32Property) View, Vector_NetQuantize10 VaultActorStartLocation, byte VaultActorRotationYaw, uint16 VaultActorPackedSpeed, Vector_NetQuantize10 VaultHitLocation, Vector_NetQuantize10 VaultEndLocation, bool bVaultBlendIntoFalling, byte VaultInfo, byte ClientMovementMode);// 0x24be2b0
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, uint16 PendingFlags, View0(UInt32Property) View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, uint16 NewFlags, byte ClientRoll, View(UInt32Property) View, byte ClientMovementMode);// 0x24bdef0
	void ServerMoveDualHybridVault(float TimeStamp0, Vector_NetQuantize10 InAccel0, uint16 CompressedMoveFlags0, View0(UInt32Property) View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, View(UInt32Property) View, Vector_NetQuantize10 VaultActorStartLocation, byte VaultActorRotationYaw, uint16 VaultActorPackedSpeed, Vector_NetQuantize10 VaultHitLocation, Vector_NetQuantize10 VaultEndLocation, bool bVaultBlendIntoFalling, byte VaultInfo, byte ClientMovementMode);// 0x24bd8a0
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, uint16 PendingFlags, View0(UInt32Property) View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, uint16 NewFlags, byte ClientRoll, View(UInt32Property) View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x24bd450
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, uint16 PendingFlags, View0(UInt32Property) View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, uint16 NewFlags, byte ClientRoll, View(UInt32Property) View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x24bd000
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, uint16 CompressedMoveFlags, byte ClientRoll, View(UInt32Property) View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x24bccf0
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x24bcc50
	void PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName, float ReturnValue);// 0x24bcb40
	void OnWalkingOffLedge(Vector PreviousFloorImpactNormal, Vector PreviousFloorContactNormal, Vector PreviousLocation, float TimeDelta);// 0x24bc9a0
	void OnRep_RootMotion();// 0x24bc980
	void OnRep_ReplicatedBasedMovement();// 0xfd5510
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x24bc960
	void OnRep_IsCrouched();// 0x24bc940
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1395e00
	void OnLanded(HitResult Hit);// 0x1395e00
	void OnJumped();// 0x24bc920
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x24bc800
	void K2_UpdateCustomMovement(float DeltaTime);// 0x1395e00
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1395e00
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x1395e00
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1395e00
	void Jump();// 0x24bb140
	void IsPlayingRootMotion(bool ReturnValue);// 0x24bb110
	void IsPlayingNetworkedRootMotionMontage(bool ReturnValue);// 0x24bb0e0
	void IsJumpProvidingForce(bool ReturnValue);// 0x24bb0b0
	void GetCurrentMontage(AnimMontage* ReturnValue);// 0x24baa20
	void GetBaseTranslationOffset(Vector ReturnValue);// 0x24ba9f0
	void GetBaseRotationOffsetRotator(Rotator ReturnValue);// 0x24ba9a0
	void GetAnimRootMotionTranslationScale(float ReturnValue);// 0x24ba970
	void Crouch(bool bClientSimulation);// 0x24ba8e0
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x24ba590
	void ClientCheatWalk();// 0x24ba570
	void ClientCheatGhost();// 0x24ba550
	void ClientCheatFly();// 0x24ba530
	void ClientAdjustVaultPosition(float Timestamp, Vector ServerLoc, byte ServerMovementMode, float TimeAlongCurve, byte VaultInfo, bool bBlendIntoFalling, Vector_NetQuantize10 Start_ActorLocation, byte ActorRotationYaw, uint16 Movespeed, Vector_NetQuantize10 HitLocation, Vector_NetQuantize10 EndLocation);// 0x24ba1e0
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x24b9df0
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x24b9b00
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x24b9890
	void ClientAckGoodMove(float Timestamp);// 0x24b9810
	void CanJumpInternal(bool ReturnValue);// 0x24b97e0
	void CanJump(bool ReturnValue);// 0x24b97b0
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x24b96d0

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x720, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x728, Size: 0x8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x730, Size: 0x8]
	AnimInstance*[] SubInstances;//[Offset: 0x738, Size: 0x10]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x748, Size: 0x8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x750, Size: 0x18]
	Vector RootBoneTranslation;//[Offset: 0x778, Size: 0xc]
	Vector LineCheckBoundsScale;//[Offset: 0x784, Size: 0xc]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x7b0, Size: 0x10]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x7c0, Size: 0x10]
	float GlobalAnimRateScale;//[Offset: 0x7f0, Size: 0x4]
	enum UseAsyncScene;//[Offset: 0x7f4, Size: 0x1]
	byte KinematicBonesUpdateType;//[Offset: 0x7f5, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x7f6, Size: 0x1]
	byte AnimationMode;//[Offset: 0x7f8, Size: 0x1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7fa, Size: 0x1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7fa, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7fa, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7fa, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7fa, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7fb, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7fb, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7fb, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7fb, Size: 0x1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7fb, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7fc, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7fc, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7fc, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7fc, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7fc, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7fc, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7fc, Size: 0x1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7fd, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7fd, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7fd, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7fd, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7fd, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7fd, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7fd, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7fd, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7fe, Size: 0x1]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7fe, Size: 0x1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7fe, Size: 0x1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7fe, Size: 0x1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7fe, Size: 0x1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7fe, Size: 0x1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7fe, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x800, Size: 0x2]
	float ClothBlendWeight;//[Offset: 0x804, Size: 0x4]
	float EdgeStiffness;//[Offset: 0x808, Size: 0x4]
	float BendingStiffness;//[Offset: 0x80c, Size: 0x4]
	float AreaStiffness;//[Offset: 0x810, Size: 0x4]
	float VolumeStiffness;//[Offset: 0x814, Size: 0x4]
	float StrainLimitingStiffness;//[Offset: 0x818, Size: 0x4]
	float ShapeTargetStiffness;//[Offset: 0x81c, Size: 0x4]
	FName[] DisallowedAnimCurves;//[Offset: 0x820, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x830, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x840, Size: 0x10]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x850, Size: 0x8]
	float TeleportDistanceThreshold;//[Offset: 0x950, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0x954, Size: 0x4]
	UInt32Property LastPoseTickFrame;//[Size: 0x4]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0x9c0, Size: 0x8]
	delegate OnAnimInitialized;//[Offset: 0xa80, Size: 0x10]
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x259e970
	void ToggleDisablePostProcessBlueprint();// 0x259e950
	void TermBodiesBelow(FName ParentBoneName);// 0x259e8d0
	void SuspendClothingSimulation();// 0x259e8b0
	void Stop();// 0x259e890
	void SnapshotPose(PoseSnapshot Snapshot);// 0x259e7c0
	void SetUpdateAnimationInEditor(bool NewUpdateState);// 0xf4a120
	void SetTeleportRotationThreshold(float Threshold);// 0x259e740
	void SetTeleportDistanceThreshold(float Threshold);// 0x259e6c0
	void SetPosition(float InPos, bool bFireNotifies);// 0x259e5f0
	void SetPlayRate(float Rate);// 0x259e570
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x259e4f0
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x259e3e0
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x259e2d0
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x259e240
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x259e130
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x259e070
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x259dfe0
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x259df50
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x259de80
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x259dd70
	void SetClothMaxDistanceScale(float Scale);// 0x259dcf0
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x259dc20
	void SetAnimationMode(byte InAnimationMode);// 0x259dba0
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x259db20
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x259d9d0
	void SetAllowedAnimCurvesEvaluation(FName[] List, bool bAllow);// 0x259d8d0
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x259d840
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x259d720
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x259d600
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x259d4a0
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x259d410
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x259d340
	void SetAllBodiesBelowSimulatePhysics(FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x259d220
	void SetAllBodiesBelowPhysicsBlendWeight(FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x259d0b0
	void ResumeClothingSimulation();// 0x259d090
	void ResetClothTeleportMode();// 0x259d070
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x259cff0
	void ResetAllowedAnimCurveEvaluation();// 0x259cfd0
	void ResetAllBodiesSimulatePhysics();// 0x259cfb0
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x259cee0
	void Play(bool bLooping);// 0x259ce50
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x259ccb0
	void K2_SetAnimInstanceClass(class Object NewClass);// 0x10e4490
	void K2_GetClosestPointOnPhysicsAsset(Vector WorldPosition, Vector ClosestWorldPosition, Vector Normal, FName BoneName, float Distance, bool ReturnValue);// 0x259ca80
	void IsPlaying(bool ReturnValue);// 0x259c990
	void IsClothingSimulationSuspended(bool ReturnValue);// 0x259c960
	void IsBodyGravityEnabled(FName BoneName, bool ReturnValue);// 0x259c8d0
	void HasValidAnimationInstance(bool ReturnValue);// 0x259c8a0
	void GetTeleportRotationThreshold(float ReturnValue);// 0x259c870
	void GetTeleportDistanceThreshold(float ReturnValue);// 0x259c870
	void GetSubInstanceByName(FName InName, AnimInstance* ReturnValue);// 0x259c7e0
	void GetSkeletalCenterOfMass(Vector ReturnValue);// 0x259c710
	void GetPostProcessInstance(AnimInstance* ReturnValue);// 0x259c6e0
	void GetPosition(float ReturnValue);// 0x259c6b0
	void GetPlayRate(float ReturnValue);// 0x259c680
	void GetMorphTarget(FName MorphTargetName, float ReturnValue);// 0x259c550
	void GetDisablePostProcessBlueprint(bool ReturnValue);// 0x259c4d0
	void GetDisableAnimCurves(bool ReturnValue);// 0x259c4a0
	void GetCurrentJointAngles(FName InBoneName, float Swing1Angle, float TwistAngle, float Swing2Angle);// 0x259c320
	void GetClothMaxDistanceScale(float ReturnValue);// 0x259c2c0
	void GetClothingSimulationInteractor(ClothingSimulationInteractor* ReturnValue);// 0x259c2f0
	void GetBoneMass(FName BoneName, bool bScaleMass, float ReturnValue);// 0x259c1a0
	void GetAnimInstance(AnimInstance* ReturnValue);// 0x259c140
	void GetAnimationMode(byte ReturnValue);// 0x259c170
	void GetAllowedAnimCurveEvaluate(bool ReturnValue);// 0x259c110
	void ForceClothNextUpdateTeleportAndReset();// 0x259c0f0
	void ForceClothNextUpdateTeleport();// 0x259c0d0
	void FindConstraintBoneName(int ConstraintIndex, FName ReturnValue);// 0x259bee0
	void ClearMorphTargets();// 0x259bec0
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x259bd90
	void BindClothToMasterPoseComponent();// 0x259bd70
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x259bca0
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x259bb30
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x259b9c0
	void AccumulateAllBodiesBelowPhysicsBlendWeight(FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x259b8a0

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x5a8, Size: 0x8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x5b0, Size: 0x8]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x660, Size: 0x8]
	int ForcedLodModel;//[Offset: 0x668, Size: 0x4]
	int MinLodModel;//[Offset: 0x66c, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x67c, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x680, Size: 0x10]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x6a0, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6a1, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6a1, Size: 0x1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6a1, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6a1, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6a1, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6a1, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6a1, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6a2, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6a2, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6a2, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6a2, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6a2, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6a2, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6a2, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6a2, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6a3, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6a3, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6a3, Size: 0x1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6a3, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d0, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x6d4, Size: 0x4]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x6e0, Size: 0x1c]
	void UnHideBoneByName(FName BoneName);// 0x25a3410
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, Vector OutPosition, Rotator OutRotation);// 0x25a3250
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, Vector OutPosition, Rotator OutRotation);// 0x25a3090
	void ShowMaterialSection(int MaterialID, bool bShow, int LODIndex);// 0x25a2f90
	void ShowAllMaterialSections(int LODIndex);// 0x25a2f10
	void SetVertexColorOverride_LinearColor(int LODIndex, LinearColor[] VertexColors);// 0x25a2e30
	void SetSkinWeightOverride(int LODIndex, SkelMeshSkinWeightInfo[] SkinWeights);// 0x25a2d50
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x25a2c80
	void SetRenderStatic(bool bNewValue);// 0x25a2bf0
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x25a2b20
	void SetMinLOD(int InNewMinLOD);// 0x25a2aa0
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x25a29d0
	void SetForcedLOD(int InNewForcedLOD);// 0x25a2950
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x25a28c0
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x25a2830
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x25a27b0
	void IsMaterialSectionShown(int MaterialID, int LODIndex, bool ReturnValue);// 0x25a26f0
	void IsBoneHiddenByName(FName BoneName, bool ReturnValue);// 0x25a2660
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x25a2480
	void GetSocketBoneName(FName InSocketName, FName ReturnValue);// 0x25a2350
	void GetRefPosePosition(int BoneIndex, Vector ReturnValue);// 0x25a22b0
	void GetParentBone(FName BoneName, FName ReturnValue);// 0x25a2220
	void GetNumLODs(int ReturnValue);// 0x25a21f0
	void GetNumBones(int ReturnValue);// 0x25a21c0
	void GetDeltaTransformFromRefPose(FName BoneName, FName BaseName, Transform ReturnValue);// 0x25a20c0
	void GetBoneName(int BoneIndex, FName ReturnValue);// 0x25a2030
	void GetBoneIndex(FName BoneName, int ReturnValue);// 0x25a1fa0
	void FindClosestBone_K2(Vector TestLocation, Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset, FName ReturnValue);// 0x25a1e10
	void ClearVertexColorOverride(int LODIndex);// 0x25a1d90
	void ClearSkinWeightOverride(int LODIndex);// 0x25a1d10
	void BoneIsChildOf(FName BoneName, FName ParentBoneName, bool ReturnValue);// 0x25a1c50

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x580, Size: 0x10]
	void SetVectorParameterValueOnMaterials(FName ParameterName, Vector ParameterValue);// 0x255a080
	void SetScalarParameterValueOnMaterials(FName ParameterName, float ParameterValue);// 0x2559fb0
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x2559cd0
	void IsMaterialSlotNameValid(FName MaterialSlotName, bool ReturnValue);// 0x2559970
	void GetMeshName(FString ReturnValue);// 0x25598f0
	void GetMaterialSlotNames(FName[] ReturnValue);// 0x25597f0
	void GetMaterials(MaterialInterface*[] ReturnValue);// 0x2559870
	void GetMaterialIndex(FName MaterialSlotName, int ReturnValue);// 0x2559750

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x48, Size: 0x8]
	BoxSphereBounds ImportedBounds;//[Offset: 0x50, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x6c, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0x88, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x94, Size: 0xc]
	SkeletalMaterial[] Materials;//[Offset: 0xa0, Size: 0x10]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xb0, Size: 0x10]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xc0, Size: 0x10]
	PerPlatformInt MinLOD;//[Offset: 0xd0, Size: 0x4]
	byte SkelMirrorAxis;//[Offset: 0xd4, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0xd5, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd6, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd6, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd6, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd6, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd6, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0xd8, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0xe0, Size: 0x8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0xe8, Size: 0x8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0xf0, Size: 0x10]
	MorphTarget*[] MorphTargets;//[Offset: 0x100, Size: 0x10]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x280, Size: 0x8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x288, Size: 0x10]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x298, Size: 0x30]
	AssetUserData*[] AssetUserData;//[Offset: 0x2c8, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x2d8, Size: 0x10]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0xf8c2c0
	void NumSockets(int ReturnValue);// 0x259cc80
	void IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections, bool ReturnValue);// 0x259c9c0
	void GetSocketByIndex(int Index, SkeletalMeshSocket* ReturnValue);// 0x259c750
	void GetNodeMappingContainer(Blueprint* SourceAsset, NodeMappingContainer* ReturnValue);// 0x259c5f0
	void GetImportedBounds(BoxSphereBounds ReturnValue);// 0x259c500
	void GetBounds(BoxSphereBounds ReturnValue);// 0x259c270
	void FindSocketAndIndex(FName InSocketName, int OutIndex, SkeletalMeshSocket* ReturnValue);// 0x259c000
	void FindSocket(FName InSocketName, SkeletalMeshSocket* ReturnValue);// 0x259bf70

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 0x50]
	BlendProfile*[] BlendProfiles;//[Offset: 0x268, Size: 0x10]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x278, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x350, Size: 0x10]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void InitializeSocketFromLocation(SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x25a2540
	void GetSocketLocation(SkeletalMeshComponent* SkelComp, Vector ReturnValue);// 0x25a23e0

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x18]
	float BlendScale;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8]
	Texture2D* AlternativeMask;//[Offset: 0x48, Size: 0x8]
	byte[] AlternativeMaskData;//[Offset: 0x50, Size: 0x10]
	float AlternativeMaskPercentage;//[Offset: 0x60, Size: 0x4]
	PhysicalMaterial* PhysAlternativeMaterial;//[Offset: 0x68, Size: 0x8]
	byte AlternativeMaskType;//[Offset: 0x70, Size: 0x1]
	byte LocalUVSet;//[Offset: 0x71, Size: 0x1]
	LinearColor WorldUVOffset;//[Offset: 0x74, Size: 0x10]
	LinearColor WorldUVSize;//[Offset: 0x84, Size: 0x10]
	enum RenderStage;//[Offset: 0x94, Size: 0x1]
	bool bNeutralizeMotionBlurVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x9c, Size: 0x14]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0xb0, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0xc0, Size: 0x10]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0x2556ad0
	void GetPhysicalMaterial(PhysicalMaterial* ReturnValue);// 0x1d1cb60
	void GetPhysicalAlternativeMaterial(PhysicalMaterial* ReturnValue);// 0x1d1cb30
	void GetBaseMaterial(Material* ReturnValue);// 0x25566f0

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x4, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x14, Size: 0x10]
	LinearColor BoundaryColorBleed;//[Offset: 0x24, Size: 0x10]
	float ExtinctionScale;//[Offset: 0x34, Size: 0x4]
	float NormalScale;//[Offset: 0x38, Size: 0x4]
	float ScatteringDistribution;//[Offset: 0x3c, Size: 0x4]
	float IOR;//[Offset: 0x40, Size: 0x4]
	float Roughness0;//[Offset: 0x44, Size: 0x4]
	float Roughness1;//[Offset: 0x48, Size: 0x4]
	float LobeMix;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: Texture2D.Texture.Object
	int StreamingIndex;//[Offset: 0x160, Size: 0x4]
	int LevelIndex;//[Offset: 0x164, Size: 0x4]
	int FirstResourceMemMip;//[Offset: 0x168, Size: 0x4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16c, Size: 0x1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16c, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16c, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16c, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16c, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16c, Size: 0x1]
	byte AddressX;//[Offset: 0x16d, Size: 0x1]
	byte AddressY;//[Offset: 0x16e, Size: 0x1]
	IntPoint ImportedSize;//[Offset: 0x170, Size: 0x8]
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x178, Size: 0x8]
	void Blueprint_GetSizeY(int ReturnValue);// 0x25bada0
	void Blueprint_GetSizeX(int ReturnValue);// 0x25bad70

--------------------------------
Class: Texture.Object
	TextureSource Source;//[Offset: 0x30, Size: 0xa8]
	Guid LightingGuid;//[Offset: 0xd8, Size: 0x10]
	int LODBias;//[Offset: 0xe8, Size: 0x4]
	int NumCinematicMipLevels;//[Offset: 0xec, Size: 0x4]
	byte CompressionSettings;//[Offset: 0xf0, Size: 0x1]
	byte Filter;//[Offset: 0xf1, Size: 0x1]
	byte LODGroup;//[Offset: 0xf2, Size: 0x1]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf3, Size: 0x1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf3, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf3, Size: 0x1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf3, Size: 0x1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf3, Size: 0x1]
	int CachedCombinedLODBias;//[Offset: 0xf4, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0xf8, Size: 0x10]

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TextureSource
	Guid ID;//[Offset: 0x80, Size: 0x10]
	int SizeX;//[Offset: 0x90, Size: 0x4]
	int SizeY;//[Offset: 0x94, Size: 0x4]
	int NumSlices;//[Offset: 0x98, Size: 0x4]
	int NumMips;//[Offset: 0x9c, Size: 0x4]
	bool bPNGCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bGuidIsHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	byte Format;//[Offset: 0xa2, Size: 0x1]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	float EmissiveBoost;//[Offset: 0x4, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x8, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0xc, Size: 0x4]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0xd8, Size: 0x8]
	ScalarMaterialInput Metallic;//[Offset: 0xe0, Size: 0x10]
	ScalarMaterialInput Specular;//[Offset: 0xf8, Size: 0x10]
	VectorMaterialInput Normal;//[Offset: 0x110, Size: 0x10]
	ColorMaterialInput EmissiveColor;//[Offset: 0x128, Size: 0x10]
	byte MaterialDomain;//[Offset: 0x140, Size: 0x1]
	byte BlendMode;//[Offset: 0x141, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0x142, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0x143, Size: 0x1]
	byte ShadingModel;//[Offset: 0x144, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x148, Size: 0x4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x150, Size: 0x10]
	ScalarMaterialInput Refraction;//[Offset: 0x168, Size: 0x10]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x180, Size: 0x18]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x1a0, Size: 0x10]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b8, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1b8, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1b8, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1b8, Size: 0x1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1b8, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1b8, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1b8, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1b8, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b9, Size: 0x1]
	int NumCustomizedUVs;//[Offset: 0x1bc, Size: 0x4]
	byte TranslucencyLightingMode;//[Offset: 0x1c0, Size: 0x1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1c4, Size: 0x4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c8, Size: 0x1]
	float TranslucentShadowDensityScale;//[Offset: 0x1cc, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d0, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1d4, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1d8, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x1dc, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e0, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x1f0, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 0x1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f4, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f4, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f4, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f4, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f4, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f5, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f5, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f5, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f5, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f5, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f5, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f5, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f5, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f6, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f6, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f6, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f6, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f6, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f6, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f6, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f6, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f7, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f7, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f7, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f7, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f7, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f7, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x1f8, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 0x1]
	float MaxDisplacement;//[Offset: 0x200, Size: 0x4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 0x1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 0x1]
	MaterialExpression*[] Expressions;//[Offset: 0x208, Size: 0x10]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x218, Size: 0x10]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x228, Size: 0x10]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x238, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x238, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x238, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x238, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x238, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x238, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x238, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x239, Size: 0x1]
	UInt32Property UsageFlagWarnings;//[Size: 0x4]
	byte BlendableLocation;//[Offset: 0x240, Size: 0x1]
	int BlendablePriority;//[Offset: 0x244, Size: 0x4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	byte RefractionMode;//[Offset: 0x249, Size: 0x1]
	float RefractionDepthBias;//[Offset: 0x24c, Size: 0x4]
	Guid StateId;//[Offset: 0x250, Size: 0x10]
	bool[] CachedQualityLevelsUsed;//[Offset: 0x278, Size: 0x10]
	Texture*[] ExpressionTextureReferences;//[Offset: 0x300, Size: 0x10]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x28, Size: 0x8]
	MaterialFunction* Function;//[Offset: 0x30, Size: 0x8]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: MaterialFunction.MaterialFunctionInterface.Object
	FString Description;//[Offset: 0x40, Size: 0x10]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bPrefixParameterNames;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x58, Size: 0x10]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	byte MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x18, Size: 0x20]
	BoneReference[] BonesToRemove;//[Offset: 0x38, Size: 0x10]
	AnimSequence* BakePose;//[Offset: 0x48, Size: 0x8]
	FString SourceImportFilename;//[Offset: 0x50, Size: 0x10]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	float NumOfTrianglesPercentage;//[Offset: 0x0, Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x4, Size: 0x4]
	byte ReductionMethod;//[Offset: 0x8, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0x9, Size: 0x1]
	byte TextureImportance;//[Offset: 0xa, Size: 0x1]
	byte ShadingImportance;//[Offset: 0xb, Size: 0x1]
	byte SkinningImportance;//[Offset: 0xc, Size: 0x1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x10, Size: 0x4]
	float NormalsThreshold;//[Offset: 0x14, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x18, Size: 0x4]
	int BaseLOD;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10]
	byte AdditiveAnimType;//[Offset: 0x164, Size: 0x1]
	byte RefPoseType;//[Offset: 0x165, Size: 0x1]
	AnimSequence* RefPoseSeq;//[Offset: 0x168, Size: 0x8]
	int RefFrameIndex;//[Offset: 0x170, Size: 0x4]
	int EncodingPkgVersion;//[Offset: 0x174, Size: 0x4]
	FName RetargetSource;//[Offset: 0x178, Size: 0x8]
	enum Interpolation;//[Offset: 0x180, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x182, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x183, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x188, Size: 0x10]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10]
	float SequenceLength;//[Offset: 0x90, Size: 0x4]
	float RateScale;//[Offset: 0x94, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10]
	void GetPlayLength(float ReturnValue);// 0x24a0f00

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]
	FName NotifyName;//[Offset: 0x40, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]
	float Duration;//[Offset: 0x58, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	byte NotifyTriggerType;//[Offset: 0xa2, Size: 0x1]
	int TrackIndex;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8]
	int SlotIndex;//[Offset: 0x10, Size: 0x4]
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]
	byte LinkMethod;//[Offset: 0x18, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4]
	float SegmentLength;//[Offset: 0x20, Size: 0x4]
	float LinkValue;//[Offset: 0x24, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimNotify.Object
	void Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, bool ReturnValue);// 0x1395e00
	void GetNotifyName(FString ReturnValue);// 0x249cef0

--------------------------------
Class: AnimNotifyState.Object
	void Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime, bool ReturnValue);// 0x1395e00
	void Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, bool ReturnValue);// 0x1395e00
	void Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration, bool ReturnValue);// 0x1395e00
	void GetNotifyName(FString ReturnValue);// 0x249cef0

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x38]
	float BlendInTime;//[Offset: 0xe0, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xe8, Size: 0x38]
	float BlendOutTime;//[Offset: 0x120, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0x124, Size: 0x4]
	FName SyncGroup;//[Offset: 0x128, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0x130, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0x138, Size: 0x20]
	CompositeSection[] CompositeSections;//[Offset: 0x158, Size: 0x10]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x168, Size: 0x10]
	BranchingPoint[] BranchingPoints;//[Offset: 0x178, Size: 0x10]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 0x1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18a, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x18b, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x190, Size: 0x10]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x1a0, Size: 0x10]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1b0, Size: 0x28]
	FName TimeStretchCurveName;//[Offset: 0x1d8, Size: 0x8]
	void GetDefaultBlendOutTime(float ReturnValue);// 0x249ced0
	void GetDefaultBlendInTime(float ReturnValue);// 0x249ceb0

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	enum BlendOption;//[Offset: 0x0, Size: 0x1]
	CurveFloat* CustomCurve;//[Offset: 0x8, Size: 0x8]
	float BlendTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x70]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	void GetFloatValue(float InTime, float ReturnValue);// 0x24c9aa0

--------------------------------
Class: CurveBase.Object
	void GetValueRange(float MinValue, float MaxValue);// 0x24c9cb0
	void GetTimeRange(float MinTime, float MaxTime);// 0x24c9bd0

--------------------------------
Class: RichCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x58, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x59, Size: 0x1]
	float DefaultValue;//[Offset: 0x5c, Size: 0x4]
	RichCurveKey[] Keys;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float StartTime;//[Offset: 0x38, Size: 0x4]
	FName NextSectionName;//[Offset: 0x40, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]
	float StartPos;//[Offset: 0x8, Size: 0x4]
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]
	int LoopingCount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]
	float DisplayTime;//[Offset: 0x38, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x20, Size: 0x70]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0x10]
	int CurveTypeFlags;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x108, Size: 0x8]
	BodySetup*[] BodySetup;//[Offset: 0x110, Size: 0x10]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x288, Size: 0x10]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1b8]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 0x10]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 0x104]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8]
	Vector Pos1;//[Offset: 0x30, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc]
	Vector Pos2;//[Offset: 0x54, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x104]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x104]
	FName ProfileName;//[Offset: 0x108, Size: 0x8]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<NodeItem,None(None)> SourceItems;//[Offset: 0x28, Size: 0x50]
	<NodeItem,None(None)> TargetItems;//[Offset: 0x78, Size: 0x50]
	<FName,None(None)> SourceToTarget;//[Offset: 0xc8, Size: 0x50]
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28]
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8]
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10]
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10]
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10]
	AnimNotifyQueue NotifyQueue;//[Offset: 0xf8, Size: 0x70]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x168, Size: 0x10]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x2497870
	void TryGetPawnOwner(Pawn* ReturnValue);// 0x2497840
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x2497770
	void SnapshotPose(PoseSnapshot Snapshot);// 0x24976a0
	void SetRootMotionMode(byte Value);// 0xf366d0
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x24975d0
	void SavePoseSnapshot(FName SnapshotName);// 0x2497540
	void ResetDynamics(enum InTeleportType);// 0x24974c0
	void PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt, AnimMontage* ReturnValue);// 0x2497280
	void PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float ReturnValue);// 0x24970c0
	void Montage_Stop(float InBlendOutTime, AnimMontage* Montage);// 0x2496ff0
	void Montage_SetPosition(AnimMontage* Montage, float NewPosition);// 0x2496f20
	void Montage_SetPlayRate(AnimMontage* Montage, float NewPlayRate);// 0x2496e50
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, AnimMontage* Montage);// 0x2496d50
	void Montage_Resume(AnimMontage* Montage);// 0x2496cd0
	void Montage_PlayScaled(AnimMontage* MontageToPlay, float InDuration, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages, float ReturnValue);// 0x2496b40
	void Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages, bool bScaleBlendDuration, float ReturnValue);// 0x2496970
	void Montage_Pause(AnimMontage* Montage);// 0x24968f0
	void Montage_JumpToSectionsEnd(FName SectionName, AnimMontage* Montage);// 0x2496830
	void Montage_JumpToSection(FName SectionName, AnimMontage* Montage);// 0x2496770
	void Montage_IsPlaying(AnimMontage* Montage, bool ReturnValue);// 0x24966e0
	void Montage_IsActive(AnimMontage* Montage, bool ReturnValue);// 0x2496650
	void Montage_GetPosition(AnimMontage* Montage, float ReturnValue);// 0x24965b0
	void Montage_GetPlayRate(AnimMontage* Montage, float ReturnValue);// 0x2496510
	void Montage_GetIsStopped(AnimMontage* Montage, bool ReturnValue);// 0x2496480
	void Montage_GetCurrentSection(AnimMontage* Montage, FName ReturnValue);// 0x24963f0
	void Montage_GetBlendTime(AnimMontage* Montage, float ReturnValue);// 0x2496350
	void Montage_FreezeAndBlend(AnimMontage* MontageToPlay, AlphaBlend InBlend);// 0x2496270
	void Montage_Freeze(AnimMontage* MontageToPlay, float InDuration);// 0x24961a0
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x24960d0
	void IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder, bool ReturnValue);// 0x2495f80
	void IsPlayingSlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, bool ReturnValue);// 0x2495ec0
	void IsAnyMontagePlaying(bool ReturnValue);// 0x2495e90
	void HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName, bool ReturnValue);// 0x2495dd0
	void GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, float OutMarkerTime, bool ReturnValue);// 0x2495cc0
	void GetSyncGroupPosition(FName InSyncGroupName, MarkerSyncAnimPosition ReturnValue);// 0x2495c10
	void GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex, float ReturnValue);// 0x2495b50
	void GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex, float ReturnValue);// 0x2495a90
	void GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex, float ReturnValue);// 0x24959d0
	void GetRelevantAnimTime(int MachineIndex, int StateIndex, float ReturnValue);// 0x2495910
	void GetRelevantAnimLength(int MachineIndex, int StateIndex, float ReturnValue);// 0x2495850
	void GetOwningComponent(SkeletalMeshComponent* ReturnValue);// 0x2495820
	void GetOwningActor(Actor* ReturnValue);// 0x24957f0
	void GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex, float ReturnValue);// 0x2495730
	void GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex, float ReturnValue);// 0x2495670
	void GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex, float ReturnValue);// 0x24955b0
	void GetInstanceStateWeight(int MachineIndex, int StateIndex, float ReturnValue);// 0x24954f0
	void GetInstanceMachineWeight(int MachineIndex, float ReturnValue);// 0x2495460
	void GetInstanceCurrentStateElapsedTime(int MachineIndex, float ReturnValue);// 0x24953d0
	void GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex, float ReturnValue);// 0x2495340
	void GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex, float ReturnValue);// 0x24952b0
	void GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex, float ReturnValue);// 0x2495220
	void GetInstanceAssetPlayerTime(int AssetPlayerIndex, float ReturnValue);// 0x2495190
	void GetInstanceAssetPlayerLength(int AssetPlayerIndex, float ReturnValue);// 0x2495100
	void GetCurveValue(FName CurveName, float ReturnValue);// 0x2495060
	void GetCurrentStateName(int MachineIndex, FName ReturnValue);// 0x2494fd0
	void GetCurrentActiveMontage(AnimMontage* ReturnValue);// 0x2494fa0
	void GetAllCurveNames(FName[] OutNames);// 0x2494ef0
	void GetActiveCurveNames(enum CurveType, FName[] OutNames);// 0x2494e00
	void ClearMorphTargets();// 0x2494de0
	void CalculateDirection(Vector Velocity, Rotator BaseRotation, float ReturnValue);// 0x2494ce0
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x1395e00
	void BlueprintPostEvaluateAnimation();// 0x1395e00
	void BlueprintInitializeAnimation();// 0x1395e00
	void BlueprintBeginPlay();// 0x1395e00

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10]
	<AnimNotifyArray,None(None)> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10]
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x20, Size: 0x20]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	class Object* ParentClass;//[Offset: 0x58, Size: 0x8]
	Object* PRIVATE_InnermostPreviousCDO;//[Offset: 0x60, Size: 0x8]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x70, Size: 0x8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x78, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x88, Size: 0x10]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 0x8]
	byte BlueprintType;//[Offset: 0xa0, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0xa4, Size: 0x4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bLegacyGeneratedClassIsAuthoritative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x50]
	FName AttachToName;//[Offset: 0x88, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x90, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x98, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa8, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb8, Size: 0x10]
	Guid VariableGuid;//[Offset: 0xc8, Size: 0x10]
	FName InternalVariableName;//[Offset: 0xd8, Size: 0x8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4]
	byte LengthMode;//[Offset: 0x2c, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bValidatedAsWired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x38, Size: 0x10]
	TTFloatTrack[] FloatTracks;//[Offset: 0x48, Size: 0x10]
	TTVectorTrack[] VectorTracks;//[Offset: 0x58, Size: 0x10]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x68, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x78, Size: 0x10]
	Guid TimelineGuid;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: TTEventTrack.TTTrackBase
	CurveFloat* CurveKeys;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x0, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TTFloatTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: TTVectorTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x70]
	void GetVectorValue(float InTime, Vector ReturnValue);// 0x24c9d90

--------------------------------
Class: TTLinearColorTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x70]
	float AdjustHue;//[Offset: 0x1f0, Size: 0x4]
	float AdjustSaturation;//[Offset: 0x1f4, Size: 0x4]
	float AdjustBrightness;//[Offset: 0x1f8, Size: 0x4]
	float AdjustBrightnessCurve;//[Offset: 0x1fc, Size: 0x4]
	float AdjustVibrance;//[Offset: 0x200, Size: 0x4]
	float AdjustMinAlpha;//[Offset: 0x204, Size: 0x4]
	float AdjustMaxAlpha;//[Offset: 0x208, Size: 0x4]
	void GetLinearColorValue(float InTime, LinearColor ReturnValue);// 0x24c9b30
	void GetClampedLinearColorValue(float InTime, LinearColor ReturnValue);// 0x24c91d0

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float SavedPosition;//[Offset: 0xc, Size: 0x4]
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractor.Object
	void PhysicsAssetUpdated();// 0x1da3f50
	void ClothConfigUpdated();// 0x1da3f30

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x188, Size: 0x8]
	WW3VaultCurve VaultStruct;//[Offset: 0x190, Size: 0x70]
	float GravityScale;//[Offset: 0x200, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x204, Size: 0x4]
	float JumpVelocityMultiplier;//[Offset: 0x208, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x20c, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x210, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x214, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x218, Size: 0x4]
	byte MovementMode;//[Offset: 0x21c, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x21d, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x21e, Size: 0x1]
	float GroundFriction;//[Offset: 0x220, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x24c, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x250, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x254, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x258, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x25c, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x260, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x264, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x268, Size: 0x4]
	float BrakingFriction;//[Offset: 0x26c, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x270, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x274, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x278, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x27c, Size: 0x4]
	float AirControl;//[Offset: 0x280, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x284, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x288, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x28c, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x290, Size: 0x4]
	float Buoyancy;//[Offset: 0x294, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x298, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x29c, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x2a0, Size: 0xc]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ac, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ac, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ac, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ac, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2ac, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2ac, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2ac, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ad, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ad, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ad, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ad, Size: 0x1]
	bool bUpdateVelocityToMatchLocationChange;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2ad, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2ad, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2ad, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ae, Size: 0x1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ae, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ae, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2ae, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2ae, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2ae, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2ae, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2af, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x2b0, Size: 0x8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x2b8, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x2bc, Size: 0x4]
	float Mass;//[Offset: 0x2c0, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x2c4, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x2c8, Size: 0x4]
	float PushForceFactor;//[Offset: 0x2cc, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x2d0, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x2d4, Size: 0x4]
	float MinTouchForce;//[Offset: 0x2d8, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x2dc, Size: 0x4]
	float RepulsionForce;//[Offset: 0x2e0, Size: 0x4]
	Vector Acceleration;//[Offset: 0x2e4, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x2f0, Size: 0x10]
	Vector LastUpdateLocation;//[Offset: 0x300, Size: 0xc]
	Vector LastUpdateVelocity;//[Offset: 0x30c, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x318, Size: 0x4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x31c, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x320, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x324, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x330, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x33c, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x34c, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x350, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x354, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x358, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x35c, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x360, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x364, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x368, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x36c, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x370, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x374, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x378, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x37c, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x380, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x384, Size: 0x4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x388, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x38c, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x390, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x394, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x398, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x39c, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x3a0, Size: 0x98]
	byte DefaultLandMovementMode;//[Offset: 0x438, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x439, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x43a, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x43b, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x43b, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x43b, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x43b, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x43b, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x43b, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x43b, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x43b, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x43c, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x43c, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x43c, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x43c, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x43c, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x43c, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x43c, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x43c, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x43d, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x43d, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x43d, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x43d, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x43d, Size: 0x1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x43d, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x43d, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x43e, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x43e, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x43e, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x43e, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x43e, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x450, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x454, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x460, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x464, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x468, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x46c, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x470, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x474, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x520, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x524, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x528, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x52c, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x530, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x534, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x538, Size: 0x58]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x5a8, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x5b0, Size: 0xf8]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x740, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0x780, Size: 0xc]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x24c1f30
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x24c1eb0
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x24c1df0
	void SetGroupsToIgnoreMask(NavAvoidanceMask GroupMask);// 0x24c1d60
	void SetGroupsToIgnore(int GroupFlags);// 0x24c1ce0
	void SetGroupsToAvoidMask(NavAvoidanceMask GroupMask);// 0x24c1c50
	void SetGroupsToAvoid(int GroupFlags);// 0x24c1bd0
	void SetAvoidanceGroupMask(NavAvoidanceMask GroupMask);// 0x24c1b40
	void SetAvoidanceGroup(int GroupFlags);// 0x24c1ac0
	void SetAvoidanceEnabled(bool bEnable);// 0x24c1a30
	void K2_GetWalkableFloorZ(float ReturnValue);// 0x24c1a00
	void K2_GetWalkableFloorAngle(float ReturnValue);// 0x24c19d0
	void K2_GetModifiedMaxAcceleration(float ReturnValue);// 0x24c1990
	void K2_FindFloor(Vector CapsuleLocation, FindFloorResult FloorResult);// 0x24c1850
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, FindFloorResult FloorResult);// 0x24c1660
	void IsWalking(bool ReturnValue);// 0xf1d400
	void IsWalkable(HitResult Hit, bool ReturnValue);// 0x24c1590
	void GetValidPerchRadius(float ReturnValue);// 0x24c1560
	void GetPerchRadiusThreshold(float ReturnValue);// 0x24c1530
	void GetMovementBase(PrimitiveComponent* ReturnValue);// 0x24c1500
	void GetMinAnalogSpeed(float ReturnValue);// 0x24c14c0
	void GetMaxJumpHeightWithJumpTime(float ReturnValue);// 0x24c1480
	void GetMaxJumpHeight(float ReturnValue);// 0x24c1440
	void GetMaxBrakingDeceleration(float ReturnValue);// 0x24c1400
	void GetMaxAcceleration(float ReturnValue);// 0x24c13c0
	void GetLastUpdateVelocity(Vector ReturnValue);// 0x24c1390
	void GetLastUpdateRotation(Rotator ReturnValue);// 0x24c1340
	void GetLastUpdateLocation(Vector ReturnValue);// 0x24c1310
	void GetImpartedMovementBaseVelocity(Vector ReturnValue);// 0x24c12d0
	void GetCurrentAcceleration(Vector ReturnValue);// 0x24c1290
	void GetCharacterOwner(Character* ReturnValue);// 0x24c1270
	void GetAnalogInputModifier(float ReturnValue);// 0x24c1240
	void DisableMovement();// 0x24c1220
	void ClearAccumulatedForces();// 0x24c1200
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult);// 0x24c1010
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x24c0eb0
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x24c0dd0
	void AddForce(Vector Force);// 0x24c0d40

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x170, Size: 0x8]
	void K2_GetInputVector(Vector ReturnValue);// 0x2571550
	void IsMoveInputIgnored(bool ReturnValue);// 0x2571660
	void GetPendingInputVector(Vector ReturnValue);// 0x2571550
	void GetPawnOwner(Pawn* ReturnValue);// 0x2571520
	void GetLastInputVector(Vector ReturnValue);// 0x25713d0
	void ConsumeInputVector(Vector ReturnValue);// 0x2571080
	void AddInputVector(Vector WorldVector, bool bForce);// 0x2570b00

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0x130, Size: 0x30]
	float FixedPathBrakingDistance;//[Offset: 0x160, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x164, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x164, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x164, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x165, Size: 0x1]
	Object* PathFollowingComp;//[Offset: 0x168, Size: 0x8]
	void StopMovementKeepPathing();// 0x255df50
	void StopActiveMovement();// 0x255df30
	void IsSwimming(bool ReturnValue);// 0x255d700
	void IsMovingOnGround(bool ReturnValue);// 0xf1d400
	void IsFlying(bool ReturnValue);// 0x255d6d0
	void IsFalling(bool ReturnValue);// 0x255d6a0
	void IsCrouching(bool ReturnValue);// 0x24a7920

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xf0, Size: 0x8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xf8, Size: 0x8]
	Vector Velocity;//[Offset: 0x104, Size: 0xc]
	Vector PlaneConstraintNormal;//[Offset: 0x110, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0x11c, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x128, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x128, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x128, Size: 0x1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x128, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x128, Size: 0x1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x128, Size: 0x1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x128, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0x12b, Size: 0x1]
	void StopMovementImmediately();// 0x10b6a10
	void SnapUpdatedComponentToPlane();// 0x255df10
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x255dd40
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x255dcb0
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x255dc20
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x255db40
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x255dab0
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x255da30
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x255d9a0
	void K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, HitResult OutHit, bool bSweep, bool bTeleport, bool ReturnValue);// 0x255d7b0
	void K2_GetModifiedMaxSpeed(float ReturnValue);// 0x255d770
	void K2_GetMaxSpeedModifier(float ReturnValue);// 0x255d730
	void IsExceedingMaxSpeed(float MaxSpeed, bool ReturnValue);// 0x255d610
	void GetPlaneConstraintOrigin(Vector ReturnValue);// 0x255d5d0
	void GetPlaneConstraintNormal(Vector ReturnValue);// 0x255d590
	void GetPlaneConstraintAxisSetting(enum ReturnValue);// 0x255d570
	void GetPhysicsVolume(PhysicsVolume* ReturnValue);// 0x255d540
	void GetMaxSpeed(float ReturnValue);// 0x255d500
	void GetGravityZ(float ReturnValue);// 0x255d4c0
	void ConstrainNormalToPlane(Vector Normal, Vector ReturnValue);// 0x255d410
	void ConstrainLocationToPlane(Vector Location, Vector ReturnValue);// 0x255d360
	void ConstrainDirectionToPlane(Vector Direction, Vector ReturnValue);// 0x255d2b0

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	int FaceIndex;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4]
	int Item;//[Offset: 0x5c, Size: 0x4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x8]
	Actor* Actor;//[Offset: 0x68, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 0x8]
	FName BoneName;//[Offset: 0x78, Size: 0x8]
	FName MyBoneName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: WW3VaultCurve
	CurveVector* VaultCurve;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0x10, Size: 0x88]

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0xe9, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0xec, Size: 0xc]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x598, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x59c, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x24bf8a0
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x24bf7d0
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x24bf700
	void GetUnscaledCapsuleSize_WithoutHemisphere(float OutRadius, float OutHalfHeightWithoutHemisphere);// 0x24bafc0
	void GetUnscaledCapsuleSize(float OutRadius, float OutHalfHeight);// 0x24baed0
	void GetUnscaledCapsuleRadius(float ReturnValue);// 0x24baeb0
	void GetUnscaledCapsuleHalfHeight_WithoutHemisphere(float ReturnValue);// 0x24bae80
	void GetUnscaledCapsuleHalfHeight(float ReturnValue);// 0x24bae60
	void GetShapeScale(float ReturnValue);// 0x24bad40
	void GetScaledCapsuleSize_WithoutHemisphere(float OutRadius, float OutHalfHeightWithoutHemisphere);// 0x24bac20
	void GetScaledCapsuleSize(float OutRadius, float OutHalfHeight);// 0x24bab10
	void GetScaledCapsuleRadius(float ReturnValue);// 0x24baad0
	void GetScaledCapsuleHalfHeight_WithoutHemisphere(float ReturnValue);// 0x24baa80
	void GetScaledCapsuleHalfHeight(float ReturnValue);// 0x24baa50

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x580, Size: 0x8]
	Color ShapeColor;//[Offset: 0x588, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58c, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58c, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58c, Size: 0x1]
	class NavAreaBase* AreaClass;//[Offset: 0x590, Size: 0x8]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x158]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float Position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0xf8]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x140, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x14c, Size: 0xc]

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4]
	float DamageFalloff;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x3b0, Size: 0x8]
	Pawn* AcknowledgedPawn;//[Offset: 0x3b8, Size: 0x8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x3c0, Size: 0x8]
	HUD* MyHUD;//[Offset: 0x3c8, Size: 0x8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x3d0, Size: 0x8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x3d8, Size: 0x8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	Rotator TargetViewRotation;//[Offset: 0x3e4, Size: 0xc]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x3fc, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x408, Size: 0x10]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x418, Size: 0x10]
	float LastSpectatorStateSynchTime;//[Offset: 0x42c, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x430, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x43c, Size: 0xc]
	int ClientCap;//[Offset: 0x448, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x450, Size: 0x8]
	class CheatManager* CheatClass;//[Offset: 0x458, Size: 0x8]
	PlayerInput* PlayerInput;//[Offset: 0x460, Size: 0x8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x468, Size: 0x10]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4e8, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x4ec, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x528, Size: 0x8]
	NetConnection* NetConnection;//[Offset: 0x530, Size: 0x8]
	float InputYawScale;//[Offset: 0x544, Size: 0x4]
	float InputPitchScale;//[Offset: 0x548, Size: 0x4]
	float InputRollScale;//[Offset: 0x54c, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x550, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x550, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x550, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x550, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x550, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x550, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x554, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x558, Size: 0x10]
	byte DefaultMouseCursor;//[Offset: 0x568, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x569, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x56a, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x56b, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x56c, Size: 0x4]
	uint16 SeamlessTravelCount;//[Offset: 0x570, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x572, Size: 0x2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x5e8, Size: 0x8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5f0, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x608, Size: 0x8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x660, Size: 0x8]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x670, Size: 0xc]
	void WasInputKeyJustReleased(Key Key, bool ReturnValue);// 0x25814b0
	void WasInputKeyJustPressed(Key Key, bool ReturnValue);// 0x25813b0
	void ToggleSpeaking(bool bInSpeaking);// 0x2581320
	void SwitchLevel(FString URL);// 0x2581280
	void StopHapticEffect(enum Hand);// 0x2581200
	void StartFire(byte FireModeNum);// 0x2581180
	void SetVirtualJoystickVisibility(bool bVisible);// 0x25810f0
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x2580f70
	void SetName(FString S);// 0x2580ed0
	void SetMouseLocation(int X, int Y);// 0x2580e10
	void SetMouseCursorWidget(byte cursor, UserWidget* CursorWidget);// 0x2580d50
	void SetHapticsByValue(float Frequency, float Amplitude, enum Hand);// 0x2580c50
	void SetDisableHaptics(bool bNewDisabled);// 0x2580bc0
	void SetControllerLightColor(Color Color);// 0x2580b50
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x2580990
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x2580870
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x25807a0
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x2580670
	void ServerViewPrevPlayer();// 0x2580620
	void ServerViewNextPlayer();// 0x25805d0
	void ServerVerifyViewTarget();// 0x2580580
	void ServerUpdateMultipleLevelsVisibility(UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x25804c0
	void ServerUpdateLevelVisibility(FName PackageName, bool bIsVisible);// 0x25803d0
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x25802b0
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x2580140
	void ServerToggleAILogging();// 0x25800f0
	void ServerShortTimeout();// 0x25800a0
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x257ffe0
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x257feb0
	void ServerRestartPlayer();// 0x257fe60
	void ServerPause();// 0x257fe10
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x257fd60
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x257fbf0
	void ServerCheckClientPossessionReliable();// 0x257fba0
	void ServerCheckClientPossession();// 0x257fb50
	void ServerChangeName(FString S);// 0x257fa90
	void ServerCamera(FName NewMode);// 0x257f9d0
	void ServerAcknowledgePossession(Pawn* P);// 0x257f910
	void SendToConsole(FString Command);// 0x257f870
	void RestartLevel();// 0x257f850
	void ProjectWorldLocationToScreen(Vector WorldLocation, Vector2D ScreenLocation, bool bPlayerViewportRelative, bool ReturnValue);// 0x257f720
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x257f5d0
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x257f340
	void Pause();// 0x257f320
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x257f290
	void LocalTravel(FString URL);// 0x257f1f0
	void IsInputKeyDown(Key Key, bool ReturnValue);// 0x257f0f0
	void GetViewportSize(int SizeX, int SizeY);// 0x257f010
	void GetSpectatorPawn(SpectatorPawn* ReturnValue);// 0x257eff0
	void GetMousePosition(float LocationX, float LocationY, bool ReturnValue);// 0x257ef00
	void GetInputVectorKeyState(Key Key, Vector ReturnValue);// 0x257edf0
	void GetInputTouchState(byte FingerIndex, float LocationX, float LocationY, bool bIsCurrentlyPressed);// 0x257ec70
	void GetInputMouseDelta(float DeltaX, float DeltaY);// 0x257eb90
	void GetInputMotionState(Vector Tilt, Vector RotationRate, Vector Gravity, Vector Acceleration);// 0x257ea00
	void GetInputKeyTimeDown(Key Key, float ReturnValue);// 0x257e8f0
	void GetInputAnalogStickState(byte WhichStick, float StickX, float StickY);// 0x257e7d0
	void GetInputAnalogKeyState(Key Key, float ReturnValue);// 0x257e6c0
	void GetHUD(HUD* ReturnValue);// 0x257dd50
	void GetHitResultUnderFingerForObjects(byte FingerIndex, byte[] ObjectTypes, bool bTraceComplex, HitResult HitResult, bool ReturnValue);// 0x257e500
	void GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, HitResult HitResult, bool ReturnValue);// 0x257e360
	void GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, HitResult HitResult, bool ReturnValue);// 0x257e1c0
	void GetHitResultUnderCursorForObjects(byte[] ObjectTypes, bool bTraceComplex, HitResult HitResult, bool ReturnValue);// 0x257e040
	void GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, HitResult HitResult, bool ReturnValue);// 0x257dee0
	void GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, HitResult HitResult, bool ReturnValue);// 0x257dd80
	void GetFocalLocation(Vector ReturnValue);// 0x257dd10
	void FOV(float NewFOV);// 0x257dc90
	void EnableCheats();// 0x257dc70
	void DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, Vector WorldLocation, Vector WorldDirection, bool ReturnValue);// 0x257daf0
	void DeprojectMousePositionToWorld(Vector WorldLocation, Vector WorldDirection, bool ReturnValue);// 0x257d9f0
	void ConsoleKey(Key Key);// 0x257d8f0
	void ClientWasKicked(FText KickReason);// 0x257d830
	void ClientVoiceHandshakeComplete();// 0x257d810
	void ClientUpdateMultipleLevelsStreamingStatus(UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x24bcc50
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x257d660
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x257d540
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x257d3d0
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x257d260
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x257d100
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x257d030
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x257cf60
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x1d22be0
	void ClientStartOnlineSession();// 0x24ba530
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x257ced0
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x257cdb0
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x257cd20
	void ClientSetHUD(class HUD NewHUDClass);// 0x257cc90
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x257cb90
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x257ca20
	void ClientSetCameraMode(FName NewCamMode);// 0x257c990
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x257c800
	void ClientSetBlockOnAsyncLoading();// 0xf64ad0
	void ClientReturnToMainMenuWithTextReason(FText ReturnReason);// 0x257c740
	void ClientReturnToMainMenu(FString ReturnReason);// 0x257c6a0
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x257c610
	void ClientRestart(Pawn* NewPawn);// 0x257c580
	void ClientReset();// 0xf64a30
	void ClientRepObjRef(Object* Object);// 0x257c4f0
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x257c370
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x257c220
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x257c110
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x257bfc0
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x257bec0
	void ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);// 0x257bd60
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x257bc00
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x257b960
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x257b840
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x257b720
	void ClientIgnoreMoveInput(bool bIgnore);// 0x257b690
	void ClientIgnoreLookInput(bool bIgnore);// 0x257b600
	void ClientGotoState(FName NewState);// 0x257b570
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x257b4a0
	void ClientForceGarbageCollection();// 0x257b480
	void ClientFlushLevelStreaming();// 0x257b460
	void ClientEndOnlineSession();// 0x24ba570
	void ClientEnableNetworkVoice(bool bEnable);// 0x257b3d0
	void ClientCommitMapChange();// 0x257b3b0
	void ClientClearCameraLensEffects();// 0xf64710
	void ClientCapBandwidth(int Cap);// 0x257b320
	void ClientCancelPendingMapChange();// 0x257b300
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x257b1e0
	void ClearAudioListenerOverride();// 0x257b1c0
	void ClearAudioListenerAttenuationOverride();// 0x257b1a0
	void CanRestartPlayer(bool ReturnValue);// 0x257b170
	void Camera(FName NewMode);// 0x257b0e0
	void AddYawInput(float Val);// 0x257b060
	void AddRollInput(float Val);// 0x257afe0
	void AddPitchInput(float Val);// 0x257af60
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x257aed0

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x330, Size: 0x8]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 0x1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x338, Size: 0x1]
	int CurrentTargetIndex;//[Offset: 0x33c, Size: 0x4]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x340, Size: 0x1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x340, Size: 0x1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x340, Size: 0x1]
	Actor*[] PostRenderedActors;//[Offset: 0x348, Size: 0x10]
	FName[] DebugDisplay;//[Offset: 0x360, Size: 0x10]
	FName[] ToggledDebugCategories;//[Offset: 0x370, Size: 0x10]
	Canvas* Canvas;//[Offset: 0x380, Size: 0x8]
	Canvas* DebugCanvas;//[Offset: 0x388, Size: 0x8]
	DebugTextInfo[] DebugTextList;//[Offset: 0x390, Size: 0x10]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x3a0, Size: 0x8]
	Actor* ShowDebugTargetActor;//[Offset: 0x3a8, Size: 0x8]
	void ShowHUD();// 0xf3d810
	void ShowDebugToggleSubCategory(FName Category);// 0x24f45e0
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x24f4560
	void ShowDebug(FName DebugType);// 0xfa1520
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x24f43d0
	void RemoveAllDebugStrings();// 0x24f43b0
	void ReceiveHitBoxRelease(FName BoxName);// 0x1395e00
	void ReceiveHitBoxEndCursorOver(FName BoxName);// 0x1395e00
	void ReceiveHitBoxClick(FName BoxName);// 0x1395e00
	void ReceiveHitBoxBeginCursorOver(FName BoxName);// 0x1395e00
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x1395e00
	void Project(Vector Location, Vector ReturnValue);// 0x24f3f30
	void PreviousDebugTarget();// 0x24ee240
	void NextDebugTarget();// 0x24f3bf0
	void GetTextSize(FString Text, float OutWidth, float OutHeight, Font* Font, float Scale);// 0x24f3430
	void GetOwningPlayerController(PlayerController* ReturnValue);// 0x5f7120
	void GetOwningPawn(Pawn* ReturnValue);// 0x24f3400
	void GetActorsInSelectionRectangle(class Actor ClassFilter, Vector2D FirstPoint, Vector2D SecondPoint, Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x24f31f0
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x24f3060
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x24f2c40
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x24f2a20
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x24f2870
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x24f25b0
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x24f23b0
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x24f2020
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x24f1e40
	void Deproject(float ScreenX, float ScreenY, Vector WorldPosition, Vector WorldDirection);// 0x24f1cd0
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x24f19c0
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x24f1640

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4]
	float OrgY;//[Offset: 0x2c, Size: 0x4]
	float ClipX;//[Offset: 0x30, Size: 0x4]
	float ClipY;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	int SizeX;//[Offset: 0x40, Size: 0x4]
	int SizeY;//[Offset: 0x44, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8]
	void K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale, Vector2D ReturnValue);// 0x24bc6e0
	void K2_StrLen(Font* RenderFont, FString RenderText, Vector2D ReturnValue);// 0x24bc600
	void K2_Project(Vector WorldLocation, Vector ReturnValue);// 0x24bc550
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x24bc430
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x24bc1b0
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x24bbe30
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x24bbca0
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x24bbb80
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x24bb960
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x24bb810
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x24bb6c0
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x24bb280
	void K2_Deproject(Vector2D ScreenPosition, Vector WorldOrigin, Vector WorldDirection);// 0x24bb160

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10]
	int IsRemapped;//[Offset: 0x58, Size: 0x4]
	float EmScale;//[Offset: 0x5c, Size: 0x4]
	float Ascent;//[Offset: 0x60, Size: 0x4]
	float Descent;//[Offset: 0x64, Size: 0x4]
	float Leading;//[Offset: 0x68, Size: 0x4]
	int Kerning;//[Offset: 0x6c, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xb0]
	int NumCharacters;//[Offset: 0x120, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0x128, Size: 0x10]
	float ScalingFactor;//[Offset: 0x138, Size: 0x4]
	int LegacyFontSize;//[Offset: 0x13c, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x140, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x148, Size: 0x38]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10]
	float Height;//[Offset: 0x10, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	byte CharacterSet;//[Offset: 0x18, Size: 0x1]
	FString Chars;//[Offset: 0x20, Size: 0x10]
	FString UnicodeRange;//[Offset: 0x30, Size: 0x10]
	FString CharsFilePath;//[Offset: 0x40, Size: 0x10]
	FString CharsFileWildcard;//[Offset: 0x50, Size: 0x10]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x64, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x78, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x7c, Size: 0x4]
	int XPadding;//[Offset: 0x80, Size: 0x4]
	int YPadding;//[Offset: 0x84, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x88, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x8c, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x90, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x94, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	int Kerning;//[Offset: 0x9c, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0xa4, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10]
	enum Hinting;//[Offset: 0x10, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1]
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]
	float ScalingFactor;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10]
	FString Cultures;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0xc]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 0xc]
	FString DebugText;//[Offset: 0x20, Size: 0x10]
	float TimeRemaining;//[Offset: 0x30, Size: 0x4]
	float Duration;//[Offset: 0x34, Size: 0x4]
	Color TextColor;//[Offset: 0x38, Size: 0x4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 0xc]
	Font* Font;//[Offset: 0x50, Size: 0x8]
	float FontScale;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x330, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x338, Size: 0x8]
	float DefaultFOV;//[Offset: 0x348, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x350, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x358, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x3a0, Size: 0x540]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x8e0, Size: 0x540]
	TViewTarget ViewTarget;//[Offset: 0xe20, Size: 0x550]
	TViewTarget PendingViewTarget;//[Offset: 0x1370, Size: 0x550]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x18e0, Size: 0x540]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x1e20, Size: 0x540]
	CameraModifier*[] ModifierList;//[Offset: 0x2360, Size: 0x10]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x2370, Size: 0x10]
	float FreeCamDistance;//[Offset: 0x2380, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x2384, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x2390, Size: 0xc]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x23b0, Size: 0x10]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x23c0, Size: 0x8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x23c8, Size: 0x8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2408, Size: 0x10]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2428, Size: 0x10]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2438, Size: 0x10]
	CameraActor* AnimCameraActor;//[Offset: 0x2448, Size: 0x8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2450, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2450, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2450, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2450, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2451, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x2454, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x2458, Size: 0x4]
	float ViewYawMin;//[Offset: 0x245c, Size: 0x4]
	float ViewYawMax;//[Offset: 0x2460, Size: 0x4]
	float ViewRollMin;//[Offset: 0x2464, Size: 0x4]
	float ViewRollMax;//[Offset: 0x2468, Size: 0x4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x2577fa0
	void StopCameraFade();// 0x2577f80
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x2577eb0
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x2577de0
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x2577d10
	void StopAllCameraShakes(bool bImmediately);// 0x104bcb0
	void StopAllCameraAnims(bool bImmediate);// 0x2577c80
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x2577ab0
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x2577790
	void RemoveCameraModifier(CameraModifier* ModifierToRemove, bool ReturnValue);// 0x2577470
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x25773e0
	void PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot, CameraShake* ReturnValue);// 0x2577270
	void PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot, CameraAnimInst* ReturnValue);// 0x2576f90
	void PhotographyCameraModify(Vector NewCameraLocation, Vector PreviousCameraLocation, Vector OriginalCameraLocation, Vector ResultCameraLocation);// 0x2576e10
	void OnPhotographySessionStart();// 0xf26860
	void OnPhotographySessionEnd();// 0xf22330
	void OnPhotographyMultiPartCaptureStart();// 0x45e170
	void OnPhotographyMultiPartCaptureEnd();// 0xf3d810
	void GetOwningPlayerController(PlayerController* ReturnValue);// 0x2576770
	void GetFOVAngle(float ReturnValue);// 0x24c1440
	void GetCameraRotation(Rotator ReturnValue);// 0x2576450
	void GetCameraLocation(Vector ReturnValue);// 0x2576410
	void FindCameraModifierByClass(class CameraModifier ModifierClass, CameraModifier* ReturnValue);// 0x2576370
	void ClearCameraLensEffects();// 0x2576350
	void BlueprintUpdateCamera(Actor* CameraTarget, Vector NewCameraLocation, Rotator NewCameraRotation, float NewCameraFOV, bool ReturnValue);// 0x1395e00
	void AddNewCameraModifier(class CameraModifier ModifierClass, CameraModifier* ReturnValue);// 0x25762b0
	void AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass, EmitterCameraLensEffectBase* ReturnValue);// 0x2576210

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x530]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float FOV;//[Offset: 0x18, Size: 0x4]
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4]
	float OrthoWidth;//[Offset: 0x20, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4]
	float AspectRatio;//[Offset: 0x2c, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x34, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x38, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x4e0]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x520, Size: 0x8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldMaxBokehSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldMethod;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldColorThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldSizeThreshold;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bOverride_MotionBlurCharacterAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	byte BloomMethod;//[Offset: 0x15, Size: 0x1]
	byte AutoExposureMethod;//[Offset: 0x16, Size: 0x1]
	byte DepthOfFieldMethod;//[Offset: 0x17, Size: 0x1]
	float WhiteTemp;//[Offset: 0x18, Size: 0x4]
	float WhiteTint;//[Offset: 0x1c, Size: 0x4]
	Vector4 ColorSaturation;//[Offset: 0x20, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0x30, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0x40, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0x50, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0x60, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0x70, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0x80, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0x90, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0xb0, Size: 0x10]
	Vector4 ColorSaturationMidtones;//[Offset: 0xc0, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0xf0, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x150, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x160, Size: 0x4]
	float ColorCorrectionShadowsMax;//[Offset: 0x164, Size: 0x4]
	float BlueCorrection;//[Offset: 0x168, Size: 0x4]
	float ExpandGamut;//[Offset: 0x16c, Size: 0x4]
	float FilmSlope;//[Offset: 0x170, Size: 0x4]
	float FilmToe;//[Offset: 0x174, Size: 0x4]
	float FilmShoulder;//[Offset: 0x178, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x17c, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x180, Size: 0x4]
	LinearColor FilmWhitePoint;//[Offset: 0x184, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x194, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x1a4, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x1a8, Size: 0x4]
	float FilmSaturation;//[Offset: 0x1ac, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1b0, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1c0, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1d0, Size: 0x10]
	float FilmContrast;//[Offset: 0x1e0, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x1e4, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x1e8, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x1ec, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x1f0, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x200, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x204, Size: 0x4]
	float BloomIntensity;//[Offset: 0x208, Size: 0x4]
	float BloomThreshold;//[Offset: 0x20c, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x210, Size: 0x4]
	float Bloom1Size;//[Offset: 0x214, Size: 0x4]
	float Bloom2Size;//[Offset: 0x218, Size: 0x4]
	float Bloom3Size;//[Offset: 0x21c, Size: 0x4]
	float Bloom4Size;//[Offset: 0x220, Size: 0x4]
	float Bloom5Size;//[Offset: 0x224, Size: 0x4]
	float Bloom6Size;//[Offset: 0x228, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x22c, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x23c, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x24c, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x25c, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x26c, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x27c, Size: 0x10]
	float BloomConvolutionSize;//[Offset: 0x28c, Size: 0x4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x290, Size: 0x8]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x298, Size: 0x8]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2a0, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2a4, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2a8, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x2ac, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x2b0, Size: 0x8]
	float BloomDirtMaskIntensity;//[Offset: 0x2b8, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2bc, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x2cc, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x2dc, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x2e0, Size: 0x8]
	float CameraShutterSpeed;//[Offset: 0x2e8, Size: 0x4]
	float CameraISO;//[Offset: 0x2ec, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x2f0, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x2f4, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x2f8, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x2fc, Size: 0x4]
	float AutoExposureLowPercent;//[Offset: 0x300, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x304, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x308, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x30c, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x310, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x314, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x318, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x31c, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x320, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x324, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x328, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x338, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x33c, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x340, Size: 0x8]
	LinearColor LensFlareTints;//[Offset: 0x348, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x3c8, Size: 0x4]
	float GrainJitter;//[Offset: 0x3cc, Size: 0x4]
	float GrainIntensity;//[Offset: 0x3d0, Size: 0x4]
	float AmbientOcclusionIntensity;//[Offset: 0x3d4, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x3d8, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x3dc, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e0, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x3e4, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x3e8, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x3ec, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x3f0, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x3f4, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x3f8, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x3fc, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x400, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x404, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x408, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x418, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x41c, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x420, Size: 0x8]
	float DepthOfFieldSensorWidth;//[Offset: 0x428, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x42c, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x430, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x434, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x438, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x43c, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x440, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x444, Size: 0x4]
	float DepthOfFieldMaxBokehSize;//[Offset: 0x448, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x44c, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x450, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x454, Size: 0x4]
	Texture* DepthOfFieldBokehShape;//[Offset: 0x458, Size: 0x8]
	float DepthOfFieldColorThreshold;//[Offset: 0x460, Size: 0x4]
	float DepthOfFieldSizeThreshold;//[Offset: 0x464, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x468, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x46c, Size: 0x4]
	float DepthOfFieldWeight;//[Offset: 0x470, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x474, Size: 0x4]
	float MotionBlurCharacterAmount;//[Offset: 0x478, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x47c, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x480, Size: 0x4]
	float LPVIntensity;//[Offset: 0x484, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x488, Size: 0x4]
	float LPVSize;//[Offset: 0x48c, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x490, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x494, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x498, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x49c, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4a0, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4a4, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4a8, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4ac, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4b0, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4b4, Size: 0x4]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4b8, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x4bc, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4c0, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x4c4, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x4c8, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x4cc, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x4d0, Size: 0x10]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TextureCube.Texture.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x530]
	PlayerState* PlayerState;//[Offset: 0x540, Size: 0x8]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	byte Priority;//[Offset: 0x2c, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8]
	float AlphaInTime;//[Offset: 0x38, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4]
	float Alpha;//[Offset: 0x40, Size: 0x4]
	void IsDisabled(bool ReturnValue);// 0x1d1d230
	void GetViewTarget(Actor* ReturnValue);// 0x24b59d0
	void EnableModifier();// 0x1df5e20
	void DisableModifier(bool bImmediate);// 0x24b5710
	void BlueprintModifyPostProcess(float DeltaTime, float PostProcessBlendWeight, PostProcessSettings PostProcessSettings);// 0x1395e00
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, Vector NewViewLocation, Rotator NewViewRotation, float NewFOV);// 0x1395e00

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x380, Size: 0x8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x388, Size: 0x8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x390, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x3a0, Size: 0x30]
	float BaseFOV;//[Offset: 0x3d0, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d4, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d4, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x3d8, Size: 0x10]
	float DistFromCamera;//[Offset: 0x3e8, Size: 0x4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x330, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x338, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x340, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x350, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x360, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x370, Size: 0x10]
	void ToggleActive();// 0x24d2370
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x24d22a0
	void SetTemplate(ParticleSystem* NewTemplate);// 0x1057540
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x24d21e0
	void SetFloatParameter(FName ParameterName, float Param);// 0x24d2110
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x24d2040
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x24d1f80
	void OnRep_bCurrentlyActive();// 0x45e170
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0xf2f7e0
	void IsActive(bool ReturnValue);// 0x24d1f50
	void Deactivate();// 0x24d1f30
	void Activate();// 0x24d1f10

--------------------------------
Class: ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x580, Size: 0x8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x588, Size: 0x10]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x598, Size: 0x10]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a8, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a9, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a9, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a9, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a9, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5aa, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5aa, Size: 0x1]
	byte LODMethod;//[Offset: 0x5ad, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x5ae, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x5b0, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x5c0, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x5d0, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x5e0, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x5f0, Size: 0x10]
	Vector OldPosition;//[Offset: 0x600, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x60c, Size: 0xc]
	float WarmupTime;//[Offset: 0x618, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x61c, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x624, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x62c, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x650, Size: 0x10]
	float CustomTimeDilation;//[Offset: 0x668, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x6c0, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x6c8, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x6d0, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x6d1, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x6d2, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x700, Size: 0x10]
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x256ddb0
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x256dc60
	void SetTemplate(ParticleSystem* NewTemplate);// 0x256dbe0
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x256db20
	void SetFloatParameter(FName ParameterName, float Param);// 0x256da50
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x256d980
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x256d8b0
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x256d7a0
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x256d6a0
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x256d590
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x256d480
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x256d380
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x256d270
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x256d1a0
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x256cee0
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x256d000
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x256ce20
	void ReleaseToPool();// 0x256ce00
	void GetNumActiveParticles(int ReturnValue);// 0x256cdd0
	void GetNamedMaterial(FName InName, MaterialInterface* ReturnValue);// 0x256cd30
	void GetBeamTargetTangent(int EmitterIndex, int TargetIndex, Vector OutTangentPoint, bool ReturnValue);// 0x256cc20
	void GetBeamTargetStrength(int EmitterIndex, int TargetIndex, float OutTargetStrength, bool ReturnValue);// 0x256cb00
	void GetBeamTargetPoint(int EmitterIndex, int TargetIndex, Vector OutTargetPoint, bool ReturnValue);// 0x256c9f0
	void GetBeamSourceTangent(int EmitterIndex, int SourceIndex, Vector OutTangentPoint, bool ReturnValue);// 0x256c8e0
	void GetBeamSourceStrength(int EmitterIndex, int SourceIndex, float OutSourceStrength, bool ReturnValue);// 0x256c7c0
	void GetBeamSourcePoint(int EmitterIndex, int SourceIndex, Vector OutSourcePoint, bool ReturnValue);// 0x256c6b0
	void GetBeamEndPoint(int EmitterIndex, Vector OutEndPoint, bool ReturnValue);// 0x256c5d0
	void GenerateParticleEvent(FName InEventName, float InEmitterTime, Vector InLocation, Vector InDirection, Vector InVelocity);// 0x256c420
	void EndTrails();// 0x256c400
	void CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial, MaterialInstanceDynamic* ReturnValue);// 0x256c330
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x256c150

--------------------------------
Class: ParticleSystem.Object
	byte SystemUpdateMode;//[Offset: 0x28, Size: 0x1]
	float UpdateTime_FPS;//[Offset: 0x2c, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x30, Size: 0x4]
	float WarmupTime;//[Offset: 0x34, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x38, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	float LODDistanceCheckTime;//[Offset: 0x64, Size: 0x4]
	byte LODMethod;//[Offset: 0x68, Size: 0x1]
	float[] LODDistances;//[Offset: 0x70, Size: 0x10]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x88, Size: 0x10]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	Box FixedRelativeBoundingBox;//[Offset: 0x9c, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0xb8, Size: 0x4]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbc, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xbc, Size: 0x1]
	float Delay;//[Offset: 0xc0, Size: 0x4]
	float DelayLow;//[Offset: 0xc4, Size: 0x4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	UInt32Property MinTimeBetweenTicks;//[Size: 0x4]
	enum InsignificantReaction;//[Offset: 0xd4, Size: 0x1]
	float InsignificanceDelay;//[Offset: 0xd8, Size: 0x4]
	enum MaxSignificanceLevel;//[Offset: 0xdc, Size: 0x1]
	UInt32Property MaxPoolSize;//[Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xe4, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xf0, Size: 0x4]
	byte OcclusionBoundsMethod;//[Offset: 0xf4, Size: 0x1]
	Box CustomOcclusionBounds;//[Offset: 0xf8, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0x118, Size: 0x10]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0x128, Size: 0x10]
	void ContainsEmitterType(class Object TypeData, bool ReturnValue);// 0x256c2a0

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8]
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10]
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4]
	UInt32Property DetailModeBitmask;//[Size: 0x4]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8]
	Vector EmitterOrigin;//[Offset: 0x38, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x44, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x50, Size: 0x1]
	float MinFacingCameraBlendDistance;//[Offset: 0x54, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x58, Size: 0x4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 0x1]
	byte SortMode;//[Offset: 0x60, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64, Size: 0x1]
	float EmitterDuration;//[Offset: 0x68, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0x6c, Size: 0x4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1]
	int EmitterLoops;//[Offset: 0x74, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x78, Size: 0x38]
	byte ParticleBurstMethod;//[Offset: 0xb0, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0xb8, Size: 0x10]
	float EmitterDelay;//[Offset: 0xc8, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0xcc, Size: 0x4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd0, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0xd4, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xd8, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xdc, Size: 0x4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1]
	float RandomImageTime;//[Offset: 0xe4, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xe8, Size: 0x4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xec, Size: 0x1]
	Vector MacroUVPosition;//[Offset: 0xf0, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xfc, Size: 0x4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	int MaxDrawCount;//[Offset: 0x104, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0x108, Size: 0x1]
	Texture2D* CutoutTexture;//[Offset: 0x110, Size: 0x8]
	byte BoundingMode;//[Offset: 0x118, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0x119, Size: 0x1]
	float AlphaThreshold;//[Offset: 0x11c, Size: 0x4]
	byte EmitterNormalsMode;//[Offset: 0x120, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0x124, Size: 0xc]
	Vector NormalsCylinderDirection;//[Offset: 0x130, Size: 0xc]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13c, Size: 0x1]
	FName[] NamedMaterialOverrides;//[Offset: 0x140, Size: 0x10]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	byte LODValidity;//[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 0x4]
	float MaxValue;//[Offset: 0x2c, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x28]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: DistributionLookupTable
	byte Op;//[Offset: 0x0, Size: 0x1]
	byte EntryCount;//[Offset: 0x1, Size: 0x1]
	byte EntryStride;//[Offset: 0x2, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x3, Size: 0x1]
	float TimeScale;//[Offset: 0x4, Size: 0x4]
	float TimeBias;//[Offset: 0x8, Size: 0x4]
	float[] Values;//[Offset: 0x10, Size: 0x10]
	byte LockFlag;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x38, Size: 0x38]
	RawDistributionFloat RateScale;//[Offset: 0x70, Size: 0x38]
	byte ParticleBurstMethod;//[Offset: 0xa8, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0xb0, Size: 0x10]
	RawDistributionFloat BurstScale;//[Offset: 0xc0, Size: 0x38]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x38, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x40, Size: 0x50]
	OrbitOptions OffsetOptions;//[Offset: 0x90, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x98, Size: 0x50]
	OrbitOptions RotationOptions;//[Offset: 0xe8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xf0, Size: 0x50]
	OrbitOptions RotationRateOptions;//[Offset: 0x140, Size: 0x4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 0x4]
	float MaxValue;//[Offset: 0x2c, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x30, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x3c, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x30, Size: 0x1]
	FName EventName;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10]
	int ActiveTab;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10]
	float ViewStartInput;//[Offset: 0x20, Size: 0x4]
	float ViewEndInput;//[Offset: 0x24, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8]
	Color CurveColor;//[Offset: 0x8, Size: 0x4]
	FString CurveName;//[Offset: 0x10, Size: 0x10]
	int bHideCurve;//[Offset: 0x20, Size: 0x4]
	int bColorCurve;//[Offset: 0x24, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4]
	int bClamp;//[Offset: 0x2c, Size: 0x4]
	float ClampLow;//[Offset: 0x30, Size: 0x4]
	float ClampHigh;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x2556dc0
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x2556d00
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x2556c30
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x25569c0
	void K2_GetVectorParameterValue(FName ParameterName, LinearColor ReturnValue);// 0x2556920
	void K2_GetTextureParameterValue(FName ParameterName, Texture* ReturnValue);// 0x2556890
	void K2_GetScalarParameterValue(FName ParameterName, float ReturnValue);// 0x25567f0
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x2556720
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x2556670
	void CopyInterpParameters(MaterialInstance* Source);// 0x25565f0

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0xd8, Size: 0x8]
	MaterialInterface* Parent;//[Offset: 0xe0, Size: 0x8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xf0, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x100, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x110, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 0x10]
	bool bOverrideBaseProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x134, Size: 0x14]
	Texture*[] PermutationTextureReferences;//[Offset: 0x170, Size: 0x10]
	StaticParameterSet StaticParameters;//[Offset: 0x180, Size: 0x40]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x8]
	int FontPage;//[Offset: 0x18, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x8, Size: 0x4]
	byte BlendMode;//[Offset: 0xc, Size: 0x1]
	byte ShadingModel;//[Offset: 0xd, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: StaticSwitchParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: StaticComponentMaskParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: StaticTerrainLayerWeightParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMaterialLayersParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	MaterialLayersFunctions Value;//[Offset: 0x10, Size: 0x40]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x54, Size: 0x10]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10]
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10]
	FString KeyString;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	CameraShake*[] ActiveShakes;//[Offset: 0x48, Size: 0x10]
	float SplitScreenShakeScale;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float OscillationDuration;//[Offset: 0x2c, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x30, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0x38, Size: 0x60]
	VOscillator LocOscillation;//[Offset: 0x98, Size: 0x60]
	FOscillator FOVOscillation;//[Offset: 0xf8, Size: 0x20]
	float AnimPlayRate;//[Offset: 0x118, Size: 0x4]
	float AnimScale;//[Offset: 0x11c, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x120, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x124, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x128, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0x130, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x150, Size: 0x8]
	float ShakeScale;//[Offset: 0x1d8, Size: 0x4]
	float OscillatorTimeRemaining;//[Offset: 0x1dc, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x1e0, Size: 0x8]
	void ReceiveStopShake(bool bImmediately);// 0x1395e00
	void ReceivePlayShake(float Scale);// 0x1395e00
	void ReceiveIsFinished(bool ReturnValue);// 0x5d2740
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, MinimalViewInfo POV, MinimalViewInfo ModifiedPOV);// 0x1395e00

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0x20]
	FOscillator Yaw;//[Offset: 0x20, Size: 0x20]
	FOscillator Roll;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	bool bUseCustomCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	CurveFloat* CustomCurve;//[Offset: 0x10, Size: 0x8]
	byte InitialOffset;//[Offset: 0x18, Size: 0x1]
	enum Waveform;//[Offset: 0x19, Size: 0x1]
	bool bOneDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	bool bRandomInitialValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0x20]
	FOscillator Y;//[Offset: 0x20, Size: 0x20]
	FOscillator Z;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8]
	float AnimLength;//[Offset: 0x30, Size: 0x4]
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	float BaseFOV;//[Offset: 0x54, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x4e0]
	float BasePostProcessBlendWeight;//[Offset: 0x540, Size: 0x4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10]
	FName GroupName;//[Offset: 0x40, Size: 0x8]
	Color GroupColor;//[Offset: 0x48, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8]
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1]
	FString TrackTitle;//[Offset: 0x58, Size: 0x10]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8]
	float PlayRate;//[Offset: 0x50, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8]
	byte PlaySpace;//[Offset: 0x78, Size: 0x1]
	void Stop(bool bImmediate);// 0x24b61b0
	void SetScale(float NewDuration);// 0x24b60a0
	void SetDuration(float NewDuration);// 0x24b5d20

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8]
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8]
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4]
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	byte RotMode;//[Offset: 0xc4, Size: 0x1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x330, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x338, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x340, Size: 0x8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 0x1]
	float AspectRatio;//[Offset: 0x354, Size: 0x4]
	float FOVAngle;//[Offset: 0x358, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x35c, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x360, Size: 0x4e0]
	void GetAutoActivatePlayerIndex(int ReturnValue);// 0x24b57a0

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x248, Size: 0x4]
	float OrthoWidth;//[Offset: 0x24c, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x250, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x254, Size: 0x4]
	float AspectRatio;//[Offset: 0x258, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25c, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25c, Size: 0x1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25c, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25c, Size: 0x1]
	enum CameraPilotingModeOverride;//[Offset: 0x25d, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x25e, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x290, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2c0, Size: 0x4e0]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x24b6120
	void SetProjectionMode(byte InProjectionMode);// 0x24b6020
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x24b5fa0
	void SetOrthoWidth(float InOrthoWidth);// 0x24b5f20
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x24b5ea0
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x24b5e20
	void SetFieldOfView(float InFieldOfView);// 0x24b5da0
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x24b5c90
	void SetAspectRatio(float InAspectRatio);// 0x24b5b30
	void RemoveBlendable(interface classNone InBlendableObject);// 0x24b5a00
	void GetCameraView(float DeltaTime, MinimalViewInfo DesiredView);// 0x24b57d0
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x24b55c0

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8]
	void Walk();// 0x1df5e20
	void ViewSelf();// 0x24c58f0
	void ViewPlayer(FString S);// 0x24c5850
	void ViewClass(class Actor DesiredClass);// 0x2488e30
	void ViewActor(FName ActorName);// 0x2488ec0
	void UpdateSafeArea();// 0x5d2c60
	void ToggleServerStatReplicatorUpdateStatNet();// 0x5d2c60
	void ToggleServerStatReplicatorClientOverwrite();// 0x5d2c60
	void ToggleDebugCamera();// 0x24c5830
	void ToggleAILogging();// 0x10ff940
	void TestCollisionDistance();// 0x24c5810
	void Teleport();// 0xf54b90
	void Summon(FString ClassName);// 0x24c5770
	void StreamLevelOut(FName PackageName);// 0x24c56e0
	void StreamLevelIn(FName PackageName);// 0x24c5650
	void SpawnServerStatReplicator();// 0x5d2c60
	void Slomo(float NewTimeDilation);// 0x24c55d0
	void SetWorldOrigin();// 0x5d2c60
	void SetMouseSensitivityToDefault();// 0x24c55b0
	void ServerToggleAILogging();// 0x24c54e0
	void ReceiveInitCheatManager();// 0x1395e00
	void ReceiveEndPlay();// 0x1395e00
	void PlayersOnly();// 0x24c54c0
	void OnlyLoadLevel(FName PackageName);// 0x24c5430
	void LogLoc();// 0x24c5410
	void InvertMouse();// 0x24c53f0
	void God();// 0x24c53d0
	void Ghost();// 0x248c790
	void FreezeFrame(float Delay);// 0x24c5350
	void Fly();// 0x248c7d0
	void FlushLog();// 0x24c5330
	void EnableDebugCamera();// 0x1001500
	void DumpVoiceMutingState();// 0x24c5310
	void DumpPartyState();// 0x24c52f0
	void DumpOnlineSessionState();// 0x24c52d0
	void DumpChatState();// 0x24c52b0
	void DisableDebugCamera();// 0x10b69b0
	void DestroyTarget();// 0xfcc390
	void DestroyServerStatReplicator();// 0x5d2c60
	void DestroyPawns(class Pawn aClass);// 0x1d15970
	void DestroyAllPawnsExceptTarget();// 0xfcc3b0
	void DestroyAll(class Actor aClass);// 0x1d03ed0
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x24c51e0
	void DebugCapsuleSweepPawn();// 0x24c51c0
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x24c5130
	void DebugCapsuleSweepClear();// 0x24c5110
	void DebugCapsuleSweepChannel(byte Channel);// 0x24c5090
	void DebugCapsuleSweepCapture();// 0x24c5070
	void DebugCapsuleSweep();// 0x24c5050
	void DamageTarget(float DamageAmount);// 0x24c4fd0
	void CheatScript(FString ScriptName);// 0xfd9db0
	void ChangeSize(float F);// 0x24c4f50
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, FString GoString, FString LocString);// 0x24c4d90
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x24c4bc0
	void BugIt(FString ScreenShotDescription);// 0x24c4b20

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x680, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x680, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x688, Size: 0x8]
	float SpeedScale;//[Offset: 0x6b0, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x6b4, Size: 0x4]
	float InitialAccel;//[Offset: 0x6b8, Size: 0x4]
	float InitialDecel;//[Offset: 0x6bc, Size: 0x4]
	void ToggleDisplay();// 0x24cea80
	void ShowDebugSelectedInfo();// 0x24cea60
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x24ce8e0
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x1395e00
	void ReceiveOnActorSelected(Actor* NewSelectedActor, Vector SelectHitLocation, Vector SelectHitNormal, HitResult Hit);// 0x1395e00
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x1395e00
	void GetSelectedActor(Actor* ReturnValue);// 0x24cdf40

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x580, Size: 0x4]
	float FrustumAngle;//[Offset: 0x584, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x588, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x58c, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x590, Size: 0x4]
	Texture* Texture;//[Offset: 0x598, Size: 0x8]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10]
	float Duration;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x78]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x70]
	CurveFloat* ExternalCurve;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10]
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10]
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8]
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8]
	int MaxPacket;//[Offset: 0xa0, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x158, Size: 0x28]
	double LastReceiveTime;//[Offset: 0x1e8, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x17c0, Size: 0x10]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1930, Size: 0x8]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10]
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x5c, Size: 0x4]
	int MaxClientRate;//[Offset: 0x60, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x64, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x68, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x6c, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x70, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x74, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x78, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x7c, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10]
	World* World;//[Offset: 0x128, Size: 0x8]
	Package* WorldPackage;//[Offset: 0x130, Size: 0x8]
	class Object* NetConnectionClass;//[Offset: 0x158, Size: 0x8]
	class Object* ReplicationDriverClass;//[Offset: 0x160, Size: 0x8]
	Property* RoleProperty;//[Offset: 0x168, Size: 0x8]
	Property* RemoteRoleProperty;//[Offset: 0x170, Size: 0x8]
	FName NetDriverName;//[Offset: 0x178, Size: 0x8]
	Channel*[] ActorChannelPool;//[Offset: 0x1c0, Size: 0x10]
	float Time;//[Offset: 0x1d8, Size: 0x4]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x670, Size: 0x8]

--------------------------------
Class: Package.Object

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10]
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4]
	float ActivationDelay;//[Offset: 0x48, Size: 0x4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float StartupDelay;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8]
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8]
	Vector2D Center;//[Offset: 0x10, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x18, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8]
	Key MainInputKey;//[Offset: 0x38, Size: 0x20]
	Key AltInputKey;//[Offset: 0x58, Size: 0x20]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x390, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x394, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x398, Size: 0x8]
	SphereComponent* CollisionComponent;//[Offset: 0x3a0, Size: 0x8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x3a8, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b0, Size: 0x1]
	void TurnAtRate(float Rate);// 0x24ceaa0
	void MoveUp_World(float Val);// 0x24ce0f0
	void MoveRight(float Val);// 0x24ce070
	void MoveForward(float Val);// 0x24cdff0
	void LookUpAtRate(float Rate);// 0x24cdf70

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x598, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x25afb30
	void GetUnscaledSphereRadius(float ReturnValue);// 0x24bae60
	void GetShapeScale(float ReturnValue);// 0x25ae4d0
	void GetScaledSphereRadius(float ReturnValue);// 0x25ae480

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x5a8, Size: 0x4]
	int PreviousLODLevel;//[Offset: 0x5ac, Size: 0x4]
	int MinLOD;//[Offset: 0x5b0, Size: 0x4]
	int SubDivisionStepSize;//[Offset: 0x5b4, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x5b8, Size: 0x8]
	Color WireframeColorOverride;//[Offset: 0x5c0, Size: 0x4]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c4, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c4, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c4, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c4, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5c4, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5c4, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5c4, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5c4, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c5, Size: 0x1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c5, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c5, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c5, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x5c8, Size: 0x4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x5cc, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x5d0, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x5d4, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x5d8, Size: 0x10]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x5e8, Size: 0x10]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x5f8, Size: 0x18]
	void SetStaticMesh(StaticMesh* NewMesh, bool ReturnValue);// 0x573490
	void SetReverseCulling(bool ReverseCulling);// 0x25b77a0
	void SetForcedLodModel(int NewForcedLodModel);// 0x25b7480
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x25b7380
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x25b7300
	void GetLocalBounds(Vector Min, Vector Max);// 0x25b6ff0

--------------------------------
Class: StaticMesh.Object
	StaticMeshSourceModel[] SourceModels;//[Offset: 0x48, Size: 0x10]
	PerPlatformInt MinLOD;//[Offset: 0x58, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0x5c, Size: 0x4]
	StaticMaterial[] StaticMaterials;//[Offset: 0x60, Size: 0x10]
	float LightmapUVDensity;//[Offset: 0x70, Size: 0x4]
	int LightMapResolution;//[Offset: 0x74, Size: 0x4]
	int LightMapCoordinateIndex;//[Offset: 0x78, Size: 0x4]
	enum StaticMeshType;//[Offset: 0x7c, Size: 0x1]
	int StaticMeshSortPriority;//[Offset: 0x80, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x84, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x88, Size: 0x8]
	int LODForCollision;//[Offset: 0x90, Size: 0x4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x94, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x94, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x94, Size: 0x1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xb0, Size: 0x10]
	Vector PositiveBoundsExtension;//[Offset: 0xd0, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xdc, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0xe8, Size: 0x1c]
	int ElementToIgnoreForTexFactor;//[Offset: 0x104, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x108, Size: 0x10]
	Object* EditableMesh;//[Offset: 0x118, Size: 0x8]
	NavCollisionBase* NavCollision;//[Offset: 0x120, Size: 0x8]
	void GetNumSections(int InLOD, int ReturnValue);// 0x25b3120
	void GetNumMaterials(int ReturnValue);// 0x25b30f0
	void GetNumLODs(int ReturnValue);// 0x25b30c0
	void GetMaterialIndex(FName MaterialSlotName, int ReturnValue);// 0x25b3030
	void GetMaterial(int MaterialIndex, MaterialInterface* ReturnValue);// 0x25b2fa0
	void GetBounds(BoxSphereBounds ReturnValue);// 0x25b2df0
	void GetBoundingBox(Box ReturnValue);// 0x25b2da0

--------------------------------
Class: StaticMeshSourceModel
	MeshBuildSettings BuildSettings;//[Offset: 0x8, Size: 0x30]
	MeshReductionSettings ReductionSettings;//[Offset: 0x38, Size: 0x24]
	float LODDistance;//[Offset: 0x5c, Size: 0x4]
	PerPlatformFloat ScreenSize;//[Offset: 0x60, Size: 0x4]
	FString SourceImportFilename;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: MeshBuildSettings
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bBuildReversedIndexBuffer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGenerateDistanceFieldAsIfTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	int MinLightmapResolution;//[Offset: 0x4, Size: 0x4]
	int SrcLightmapIndex;//[Offset: 0x8, Size: 0x4]
	int DstLightmapIndex;//[Offset: 0xc, Size: 0x4]
	float BuildScale;//[Offset: 0x10, Size: 0x4]
	Vector BuildScale3D;//[Offset: 0x14, Size: 0xc]
	float DistanceFieldResolutionScale;//[Offset: 0x20, Size: 0x4]
	StaticMesh* DistanceFieldReplacementMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MeshReductionSettings
	float PercentTriangles;//[Offset: 0x0, Size: 0x4]
	float MaxDeviation;//[Offset: 0x4, Size: 0x4]
	float PixelError;//[Offset: 0x8, Size: 0x4]
	float WeldingThreshold;//[Offset: 0xc, Size: 0x4]
	float HardAngleThreshold;//[Offset: 0x10, Size: 0x4]
	byte SilhouetteImportance;//[Offset: 0x14, Size: 0x1]
	byte TextureImportance;//[Offset: 0x15, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x16, Size: 0x1]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17, Size: 0x1]
	int BaseLODModel;//[Offset: 0x18, Size: 0x4]
	bool bGenerateUniqueLightmapUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bKeepSymmetry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bVisibilityAided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool bCullOccluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	byte VisibilityAggressiveness;//[Offset: 0x20, Size: 0x1]
	byte VertexColorImportance;//[Offset: 0x21, Size: 0x1]

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]
	FString Tag;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMeshComponentLODInfo
	PaintedVertex[] PaintedVertices;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: PaintedVertex
	Vector Position;//[Offset: 0x0, Size: 0xc]
	Vector4 Normal;//[Offset: 0x10, Size: 0x10]
	Color Color;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: StreamingTextureBuildInfo
	UInt32Property PackedRelativeBox;//[Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x108, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x118, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x128, Size: 0x28]
	delegate ForegroundColorDelegate;//[Offset: 0x150, Size: 0x10]
	Margin Padding;//[Offset: 0x160, Size: 0x10]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x170, Size: 0x10]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x180, Size: 0x10]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x190, Size: 0x10]
	WidgetTree* WidgetTree;//[Offset: 0x1a0, Size: 0x8]
	int Priority;//[Offset: 0x1a8, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ac, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ac, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1ac, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1ac, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1ac, Size: 0x1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1ac, Size: 0x1]
	enum TickFrequency;//[Offset: 0x1ad, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x1b0, Size: 0x8]
	void UnregisterInputComponent();// 0x1d17bf0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x1395e00
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x1d17b20
	void StopListeningForAllInputActions();// 0x1d17b00
	void StopAnimationsAndLatentActions();// 0x1d17ae0
	void StopAnimation(WidgetAnimation* InAnimation);// 0x1d17a60
	void StopAllAnimations();// 0x1d17a40
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x1d173f0
	void SetPlaybackSpeed(WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x1d17320
	void SetPadding(Margin InPadding);// 0x1d17290
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x1d17210
	void SetNumLoopsToPlay(WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x1d17050
	void SetInputActionPriority(int NewPriority);// 0x1d16a70
	void SetInputActionBlocking(bool bShouldBlock);// 0x1d169e0
	void SetForegroundColor(SlateColor InForegroundColor);// 0x1d167e0
	void SetDesiredSizeInViewport(Vector2D Size);// 0x1d16460
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x1d16360
	void SetAnchorsInViewport(Anchors Anchors);// 0x1d15fa0
	void SetAlignmentInViewport(Vector2D Alignment);// 0x1d15f20
	void ReverseAnimation(WidgetAnimation* InAnimation);// 0x1d15ea0
	void RemoveFromViewport();// 0x1d15e80
	void RegisterInputComponent();// 0x1d15e60
	void PreConstruct(bool IsDesignTime);// 0x1395e00
	void PlaySound(SoundBase* SoundToPlay);// 0x1d15de0
	void PlayAnimationTo(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x1d15c30
	void PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x1d15aa0
	void PauseAnimation(WidgetAnimation* InAnimation, float ReturnValue);// 0x1d15a00
	void OnTouchStarted(Geometry MyGeometry, PointerEvent InTouchEvent, EventReply ReturnValue);// 0x1395e00
	void OnTouchMoved(Geometry MyGeometry, PointerEvent InTouchEvent, EventReply ReturnValue);// 0x1395e00
	void OnTouchGesture(Geometry MyGeometry, PointerEvent GestureEvent, EventReply ReturnValue);// 0x1395e00
	void OnTouchForceChanged(Geometry MyGeometry, PointerEvent InTouchEvent, EventReply ReturnValue);// 0x1395e00
	void OnTouchEnded(Geometry MyGeometry, PointerEvent InTouchEvent, EventReply ReturnValue);// 0x1395e00
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x1395e00
	void OnPreviewMouseButtonDown(Geometry MyGeometry, PointerEvent MouseEvent, EventReply ReturnValue);// 0x1395e00
	void OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent, EventReply ReturnValue);// 0x1395e00
	void OnPaint(PaintContext Context);// 0x1395e00
	void OnMouseWheel(Geometry MyGeometry, PointerEvent MouseEvent, EventReply ReturnValue);// 0x1395e00
	void OnMouseMove(Geometry MyGeometry, PointerEvent MouseEvent, EventReply ReturnValue);// 0x1395e00
	void OnMouseLeave(PointerEvent MouseEvent);// 0x1395e00
	void OnMouseEnter(Geometry MyGeometry, PointerEvent MouseEvent);// 0x1395e00
	void OnMouseCaptureLost();// 0x1395e00
	void OnMouseButtonUp(Geometry MyGeometry, PointerEvent MouseEvent, EventReply ReturnValue);// 0x1395e00
	void OnMouseButtonDown(Geometry MyGeometry, PointerEvent MouseEvent, EventReply ReturnValue);// 0x1395e00
	void OnMouseButtonDoubleClick(Geometry InMyGeometry, PointerEvent InMouseEvent, EventReply ReturnValue);// 0x1395e00
	void OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent, EventReply ReturnValue);// 0x1395e00
	void OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent, EventReply ReturnValue);// 0x1395e00
	void OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent, EventReply ReturnValue);// 0x1395e00
	void OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent, EventReply ReturnValue);// 0x1395e00
	void OnInitialized();// 0x1395e00
	void OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent, EventReply ReturnValue);// 0x1395e00
	void OnFocusLost(FocusEvent InFocusEvent);// 0x1395e00
	void OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation, bool ReturnValue);// 0x1395e00
	void OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation, bool ReturnValue);// 0x1395e00
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1395e00
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1395e00
	void OnDragDetected(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1395e00
	void OnDragCancelled(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1395e00
	void OnAnimationStarted(WidgetAnimation* Animation);// 0x1d15970
	void OnAnimationFinished(WidgetAnimation* Animation);// 0x1d158e0
	void OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent, EventReply ReturnValue);// 0x1395e00
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x1395e00
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x1d15770
	void IsPlayingAnimation(bool ReturnValue);// 0x1d15740
	void IsListeningForInputAction(FName ActionName, bool ReturnValue);// 0x1d156b0
	void IsInViewport(bool ReturnValue);// 0x1d15260
	void IsInteractable(bool ReturnValue);// 0x1395e00
	void IsAnyAnimationPlaying(bool ReturnValue);// 0x1d15680
	void IsAnimationPlayingForward(WidgetAnimation* InAnimation, bool ReturnValue);// 0x1d155f0
	void IsAnimationPlaying(WidgetAnimation* InAnimation, bool ReturnValue);// 0x1d15560
	void GetOwningPlayerPawn(Pawn* ReturnValue);// 0x1d15350
	void GetIsVisible(bool ReturnValue);// 0x1d15260
	void GetAnimationCurrentTime(WidgetAnimation* InAnimation, float ReturnValue);// 0x1d15160
	void GetAnchorsInViewport(Anchors ReturnValue);// 0x1d15120
	void GetAlignmentInViewport(Vector2D ReturnValue);// 0x1d150e0
	void Destruct();// 0x1395e00
	void Construct();// 0x1395e00
	void CancelLatentActions();// 0x1d15000
	void AddToViewport(int ZOrder);// 0x1d14f80
	void AddToPlayerScreen(int ZOrder, bool ReturnValue);// 0x1d14ef0

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10]
	FText ToolTipText;//[Offset: 0x40, Size: 0x18]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 0x1]
	byte cursor;//[Offset: 0xb5, Size: 0x1]
	enum Clipping;//[Offset: 0xb6, Size: 0x1]
	enum Visibility;//[Offset: 0xb7, Size: 0x1]
	float RenderOpacity;//[Offset: 0xb8, Size: 0x4]
	WidgetNavigation* Navigation;//[Offset: 0xc0, Size: 0x8]
	PropertyBinding*[] NativeBindings;//[Offset: 0xf0, Size: 0x10]
	void SetVisibility(enum InVisibility);// 0x1d1ee90
	void SetUserFocus(PlayerController* PlayerController);// 0x1d1ecf0
	void SetToolTipText(FText InToolTipText);// 0x1d1ec20
	void SetToolTip(Widget* Widget);// 0x1d1eba0
	void SetRenderTranslation(Vector2D Translation);// 0x1d1eb20
	void SetRenderTransformPivot(Vector2D Pivot);// 0x1d1eaa0
	void SetRenderTransform(WidgetTransform InTransform);// 0x1d1e9c0
	void SetRenderShear(Vector2D Shear);// 0x1d1e940
	void SetRenderScale(Vector2D Scale);// 0x1d1e8c0
	void SetRenderOpacity(float InOpacity);// 0x1d1e840
	void SetRenderAngle(float Angle);// 0x1d1e7c0
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x1d1e6b0
	void SetKeyboardFocus();// 0x1d1e4f0
	void SetIsEnabled(bool bInIsEnabled);// 0x1d1e460
	void SetCursor(byte InCursor);// 0x1d1ddb0
	void SetClipping(enum InClipping);// 0x1d1dd30
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x1d1dac0
	void ResetCursor();// 0x1d1da80
	void RemoveFromParent();// 0x1d1da60
	void OnReply__DelegateSignature(EventReply ReturnValue);// 0x1395e00
	void OnPointerEvent__DelegateSignature(Geometry MyGeometry, PointerEvent MouseEvent, EventReply ReturnValue);// 0x1395e00
	void IsVisible(bool ReturnValue);// 0x1d1d260
	void IsHovered(bool ReturnValue);// 0x1d1d230
	void InvalidateLayoutAndVolatility();// 0x1d1d1e0
	void HasUserFocusedDescendants(PlayerController* PlayerController, bool ReturnValue);// 0x1d1d150
	void HasUserFocus(PlayerController* PlayerController, bool ReturnValue);// 0x1d1d0c0
	void HasMouseCaptureByUser(int UserIndex, int PointerIndex, bool ReturnValue);// 0x1d1d000
	void HasMouseCapture(bool ReturnValue);// 0x1d1cfd0
	void HasKeyboardFocus(bool ReturnValue);// 0x1d1cfa0
	void HasFocusedDescendants(bool ReturnValue);// 0x1d1cf70
	void HasAnyUserFocus(bool ReturnValue);// 0x1d1cf40
	void GetWidget__DelegateSignature(Widget* ReturnValue);// 0x1395e00
	void GetVisibility(enum ReturnValue);// 0x1d1cea0
	void GetText__DelegateSignature(FText ReturnValue);// 0x1395e00
	void GetSlateVisibility__DelegateSignature(enum ReturnValue);// 0x1395e00
	void GetSlateColor__DelegateSignature(SlateColor ReturnValue);// 0x1395e00
	void GetSlateBrush__DelegateSignature(SlateBrush ReturnValue);// 0x1395e00
	void GetRenderOpacity(float ReturnValue);// 0x1d1cbc0
	void GetParent(PanelWidget* ReturnValue);// 0x1d1cb90
	void GetOwningPlayer(PlayerController* ReturnValue);// 0x1d1cb60
	void GetOwningLocalPlayer(LocalPlayer* ReturnValue);// 0x1d1cb30
	void GetMouseCursor__DelegateSignature(byte ReturnValue);// 0x1395e00
	void GetLinearColor__DelegateSignature(LinearColor ReturnValue);// 0x1395e00
	void GetIsEnabled(bool ReturnValue);// 0x1d1c980
	void GetInt32__DelegateSignature(int ReturnValue);// 0x1395e00
	void GetFloat__DelegateSignature(float ReturnValue);// 0x1395e00
	void GetDesiredSize(Vector2D ReturnValue);// 0x1d1c330
	void GetClipping(enum ReturnValue);// 0x1d1c300
	void GetCheckBoxState__DelegateSignature(enum ReturnValue);// 0x1395e00
	void GetCachedGeometry(Geometry ReturnValue);// 0x1d1c2c0
	void GetBool__DelegateSignature(bool ReturnValue);// 0x1395e00
	void GenerateWidgetForString__DelegateSignature(FString Item, Widget* ReturnValue);// 0x1395e00
	void GenerateWidgetForObject__DelegateSignature(Object* Item, Widget* ReturnValue);// 0x1395e00
	void ForceVolatile(bool bForce);// 0x1d1baf0
	void ForceLayoutPrepass();// 0x1d1bad0

--------------------------------
Class: Visual.Object

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8]
	Widget* Content;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x100, Size: 0x10]
	void RemoveChildAt(int Index, bool ReturnValue);// 0x1d0da70
	void RemoveChild(Widget* Content, bool ReturnValue);// 0x1d0d9e0
	void HasChild(Widget* Content, bool ReturnValue);// 0x1d0d540
	void HasAnyChildren(bool ReturnValue);// 0x1d0d510
	void GetChildrenCount(int ReturnValue);// 0x1d0d300
	void GetChildIndex(Widget* Content, int ReturnValue);// 0x1d0d270
	void GetChildAt(int Index, Widget* ReturnValue);// 0x1d0d1e0
	void ClearChildren();// 0x1d0cd70
	void AddChild(Widget* Content, PanelSlot* ReturnValue);// 0x1d0cce0

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x370, Size: 0x8]

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	delegate OnAnimationStarted;//[Offset: 0x348, Size: 0x10]
	delegate OnAnimationFinished;//[Offset: 0x358, Size: 0x10]
	MovieScene* MovieScene;//[Offset: 0x368, Size: 0x8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x370, Size: 0x10]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	FString DisplayLabel;//[Offset: 0x388, Size: 0x10]
	void GetStartTime(float ReturnValue);// 0x1d1cd60
	void GetEndTime(float ReturnValue);// 0x1d1c520

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;//[Offset: 0x50, Size: 0x2f0]
	enum DefaultCompletionMode;//[Offset: 0x340, Size: 0x1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1]

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x80, Size: 0x10]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x90, Size: 0x8]
	MovieSceneFrameRange SelectionRange;//[Offset: 0x98, Size: 0x10]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xa8, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0xb8, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0xc0, Size: 0x8]
	enum EvaluationType;//[Offset: 0xc8, Size: 0x1]
	enum ClockSource;//[Offset: 0xc9, Size: 0x1]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	FName[] tags;//[Offset: 0x30, Size: 0x10]
	Guid Guid;//[Offset: 0x40, Size: 0x10]
	FString Name;//[Offset: 0x50, Size: 0x10]
	Object* ObjectTemplate;//[Offset: 0x60, Size: 0x8]
	Guid[] ChildPossessables;//[Offset: 0x68, Size: 0x10]
	enum Ownership;//[Offset: 0x78, Size: 0x1]
	FName LevelName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: MovieScenePossessable
	FName[] tags;//[Offset: 0x0, Size: 0x10]
	Guid Guid;//[Offset: 0x10, Size: 0x10]
	FString Name;//[Offset: 0x20, Size: 0x10]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8]
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0x10]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneEvaluationTrack,None(None)> Tracks;//[Offset: 0x0, Size: 0x50]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 0x30]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 0xa0]
	Guid SequenceSignature;//[Offset: 0x170, Size: 0x10]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0x180, Size: 0x4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x188, Size: 0xa8]
	MovieSceneTrackFieldData TrackFieldData;//[Offset: 0x230, Size: 0x60]
	MovieSceneSubSectionFieldData SubSectionFieldData;//[Offset: 0x290, Size: 0x60]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneEvaluationTrackSegments Segments;//[Offset: 0x18, Size: 0x20]
	MovieSceneTrack* SourceTrack;//[Offset: 0x38, Size: 0x8]
	SectionEvaluationDataTree EvaluationTree;//[Offset: 0x40, Size: 0x60]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0xa0, Size: 0x10]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0xb0, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0xe8, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationTrackSegments
	int[] SegmentIdentifierToIndex;//[Offset: 0x0, Size: 0x10]
	MovieSceneSegment[] SortedSegments;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: SectionEvaluationDataTree

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 0x4]
	int NumInitPtrs;//[Offset: 0x4, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	MovieSceneSegmentIdentifier SegmentID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceID
	UInt32Property Value;//[Size: 0x4]

--------------------------------
Class: MovieSceneTrackIdentifier
	UInt32Property Value;//[Size: 0x4]

--------------------------------
Class: MovieSceneSegmentIdentifier
	int IdentifierIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10]
	<SubTemplateSerialNumbers(UInt32Property),None(None)> SubTemplateSerialNumbers;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	UInt32Property EvaluationIndex;//[Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	UInt32Property SectionIndex;//[Size: 0x4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<MovieSceneSubSequenceData,None(None)> SubSequences;//[Offset: 0x0, Size: 0x50]
	<MovieSceneSequenceHierarchyNode,None(None)> Hierarchy;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 0xc]
	FrameRate TickResolution;//[Offset: 0x24, Size: 0x8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x2c, Size: 0x4]
	MovieSceneFrameRange PlayRange;//[Offset: 0x30, Size: 0x10]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x40, Size: 0x10]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x50, Size: 0x10]
	int HierarchicalBias;//[Offset: 0x60, Size: 0x4]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x68, Size: 0x18]
	Guid SubSectionSignature;//[Offset: 0x88, Size: 0x10]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0x98, Size: 0xc]

--------------------------------
Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	UInt32Property Value;//[Size: 0x4]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<MovieSceneTrackIdentifier,None(None)> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50]
	<MovieSceneFrameRange,None(None)> SubSectionRanges;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: MovieSceneTrackFieldData

--------------------------------
Class: MovieSceneSubSectionFieldData

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x28]
	WidgetNavigationData Down;//[Offset: 0x50, Size: 0x28]
	WidgetNavigationData Left;//[Offset: 0x78, Size: 0x28]
	WidgetNavigationData Right;//[Offset: 0xa0, Size: 0x28]
	WidgetNavigationData Next;//[Offset: 0xc8, Size: 0x28]
	WidgetNavigationData Previous;//[Offset: 0xf0, Size: 0x28]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x8, Size: 0x8]
	Widget* Widget;//[Offset: 0x10, Size: 0x8]
	delegate CustomDelegate;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28]
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10]
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0x10, Size: 0x8]
	Field* Field;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: EventReply

--------------------------------
Class: Geometry

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8]
	Margin Margin;//[Offset: 0x10, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x20, Size: 0x28]
	Object* ResourceObject;//[Offset: 0x48, Size: 0x8]
	FName ResourceName;//[Offset: 0x50, Size: 0x8]
	Box2D UVRegion;//[Offset: 0x58, Size: 0x14]
	byte DrawAs;//[Offset: 0x6c, Size: 0x1]
	byte Tiling;//[Offset: 0x6d, Size: 0x1]
	byte Mirroring;//[Offset: 0x6e, Size: 0x1]
	byte ImageType;//[Offset: 0x6f, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int ControllerId;//[Offset: 0x108, Size: 0x4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10]
	World* World;//[Offset: 0x78, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x80, Size: 0x8]
	void SSSwapControllers();// 0x1da3f50
	void ShowTitleSafeArea();// 0x1da3f30
	void SetConsoleTarget(int PlayerIndex);// 0x24ee4c0

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8]
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10]
	FString ClientGameToken;//[Offset: 0x80, Size: 0x10]
	void ReceiveShutdown();// 0x1395e00
	void ReceiveInit();// 0x1395e00
	void HandleTravelError(byte FailureType);// 0x1395e00
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x1395e00
	void DebugRemovePlayer(int ControllerId);// 0x24dd680
	void DebugCreatePlayer(int ControllerId);// 0x24dd5f0

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 0x8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bIgnoreFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	bool bHasVirtualizeWhenSilent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x30, Size: 0x1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x30, Size: 0x1]
	SoundConcurrency* SoundConcurrencySettings;//[Offset: 0x38, Size: 0x8]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0x40, Size: 0x10]
	float Duration;//[Offset: 0x50, Size: 0x4]
	float MaxDistance;//[Offset: 0x54, Size: 0x4]
	float TotalSamples;//[Offset: 0x58, Size: 0x4]
	float Priority;//[Offset: 0x5c, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x60, Size: 0x8]
	SoundSubmix* SoundSubmixObject;//[Offset: 0x68, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x70, Size: 0x10]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x80, Size: 0x8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x88, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x2c]
	SoundClass*[] ChildClasses;//[Offset: 0x58, Size: 0x10]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x68, Size: 0x10]
	SoundClass* ParentClass;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float StereoBleed;//[Offset: 0x8, Size: 0x4]
	float LFEBleed;//[Offset: 0xc, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x10, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x14, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x18, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x20, Size: 0x4]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	byte OutputTarget;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float EQPriority;//[Offset: 0x2c, Size: 0x4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x38]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x68, Size: 0x10]
	float InitialDelay;//[Offset: 0x78, Size: 0x4]
	float FadeInTime;//[Offset: 0x7c, Size: 0x4]
	float Duration;//[Offset: 0x80, Size: 0x4]
	float FadeOutTime;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: AudioEQEffect
	float FrequencyCenter0;//[Offset: 0x8, Size: 0x4]
	float Gain0;//[Offset: 0xc, Size: 0x4]
	float Bandwidth0;//[Offset: 0x10, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x14, Size: 0x4]
	float Gain1;//[Offset: 0x18, Size: 0x4]
	float Bandwidth1;//[Offset: 0x1c, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x20, Size: 0x4]
	float Gain2;//[Offset: 0x24, Size: 0x4]
	float Bandwidth2;//[Offset: 0x28, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x2c, Size: 0x4]
	float Gain3;//[Offset: 0x30, Size: 0x4]
	float Bandwidth3;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4]
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x8, Size: 0x1]
	float VolumeScale;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x2a8]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa0, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa0, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa0, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa1, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa1, Size: 0x1]
	byte SpatializationAlgorithm;//[Offset: 0xa2, Size: 0x1]
	enum AbsorptionMethod;//[Offset: 0xa3, Size: 0x1]
	byte OcclusionTraceChannel;//[Offset: 0xa4, Size: 0x1]
	enum ReverbSendMethod;//[Offset: 0xa5, Size: 0x1]
	float OmniRadius;//[Offset: 0xa8, Size: 0x4]
	float StereoSpread;//[Offset: 0xac, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0xb0, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0xb4, Size: 0x4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xb8, Size: 0x78]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x130, Size: 0x78]
	float LPFFrequencyAtMin;//[Offset: 0x1a8, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x1ac, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x1b0, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x1b4, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x1b8, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x1bc, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x1c0, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x1c4, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x1c8, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x1cc, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x1d0, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x1d4, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x1d8, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x1dc, Size: 0x4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x1e0, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x1e4, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x1e8, Size: 0x4]
	float ReverbWetLevelMin;//[Offset: 0x1ec, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x1f0, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x1f4, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x1f8, Size: 0x4]
	float ManualReverbSendLevel;//[Offset: 0x1fc, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x200, Size: 0x78]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x278, Size: 0x30]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1]
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4]
	Vector AttenuationShapeExtents;//[Offset: 0x10, Size: 0xc]
	float ConeOffset;//[Offset: 0x1c, Size: 0x4]
	float FalloffDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x78]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmix.Object
	SoundSubmix*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10]
	SoundSubmix* ParentSubmix;//[Offset: 0x38, Size: 0x8]
	enum ChannelFormat;//[Offset: 0x40, Size: 0x1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10]
	AmbisonicsSubmixSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4]
	delegate OnSubmixRecordedFileDone;//[Offset: 0x68, Size: 0x10]
	void StopRecordingOutput(Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x25b06c0
	void StopEnvelopeFollowing(Object* WorldContextObject);// 0x25b0640
	void StartRecordingOutput(Object* WorldContextObject, float ExpectedDuration);// 0x25b0570
	void StartEnvelopeFollowing(Object* WorldContextObject);// 0x25b04f0
	void AddEnvelopeFollowerDelegate(Object* WorldContextObject, delegate OnSubmixEnvelopeBP);// 0x25abdf0

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: AmbisonicsSubmixSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0xa8, Size: 0x4]
	int StreamingPriority;//[Offset: 0xac, Size: 0x4]
	enum SampleRateQuality;//[Offset: 0xb0, Size: 0x1]
	byte SoundGroup;//[Offset: 0xb2, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb3, Size: 0x1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb3, Size: 0x1]
	bool bMature;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb3, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bVirtualizeWhenSilent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	FString SpokenText;//[Offset: 0xc8, Size: 0x10]
	float SubtitlePriority;//[Offset: 0xd8, Size: 0x4]
	float Volume;//[Offset: 0xdc, Size: 0x4]
	float Pitch;//[Offset: 0xe0, Size: 0x4]
	int NumChannels;//[Offset: 0xe4, Size: 0x4]
	int SampleRate;//[Offset: 0xe8, Size: 0x4]
	SubtitleCue[] Subtitles;//[Offset: 0xf0, Size: 0x10]
	LocalizedSubtitle[] LocalizedSubtitles;//[Offset: 0x100, Size: 0x10]
	CurveTable* Curves;//[Offset: 0x110, Size: 0x8]
	CurveTable* InternalCurves;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: LocalizedSubtitle
	FString LanguageExt;//[Offset: 0x0, Size: 0x10]
	SubtitleCue[] Subtitles;//[Offset: 0x10, Size: 0x10]
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: SoundSubmixSendInfo
	float SendLevel;//[Offset: 0x0, Size: 0x4]
	SoundSubmix* SoundSubmix;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	float SendLevel;//[Offset: 0x0, Size: 0x4]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x208, Size: 0x1]
	float SourceBusDuration;//[Offset: 0x20c, Size: 0x4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1]

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10]
	Object* Payload;//[Offset: 0x38, Size: 0x8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8]
	enum Pivot;//[Offset: 0x48, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8]
	delegate OnDrop;//[Offset: 0x58, Size: 0x10]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10]
	delegate OnDragged;//[Offset: 0x78, Size: 0x10]
	void Drop(PointerEvent PointerEvent);// 0x1d036e0
	void Dragged(PointerEvent PointerEvent);// 0x1d035b0
	void DragCancelled(PointerEvent PointerEvent);// 0x1d03480

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x330, Size: 0x8]
	FName MatineeControllerName;//[Offset: 0x338, Size: 0x8]
	float PlayRate;//[Offset: 0x340, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x348, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34c, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34c, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34c, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34c, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x34c, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x34c, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x34c, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x34c, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x350, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x354, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x354, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x354, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x354, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x358, Size: 0x10]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x370, Size: 0x10]
	CameraCutInfo[] CameraCuts;//[Offset: 0x380, Size: 0x10]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x390, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x390, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x390, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x390, Size: 0x1]
	float InterpPosition;//[Offset: 0x394, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x39c, Size: 0x1]
	delegate OnPlay;//[Offset: 0x3a0, Size: 0x10]
	delegate OnStop;//[Offset: 0x3b0, Size: 0x10]
	delegate OnPause;//[Offset: 0x3c0, Size: 0x10]
	void Stop();// 0xf22330
	void SetPosition(float NewPosition, bool bJump);// 0x2559ee0
	void SetLoopingState(bool bNewLooping);// 0x2559e50
	void Reverse();// 0xf26860
	void Play();// 0x45e170
	void Pause();// 0x429e30
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x2559620
	void ChangePlaybackDirection();// 0xf26e50

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4]
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8]
	float EdSectionStart;//[Offset: 0x48, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Timestamp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x248, Size: 0x8]
	Actor* ChildActor;//[Offset: 0x250, Size: 0x8]
	Actor* ChildActorTemplate;//[Offset: 0x258, Size: 0x8]
	void SetChildActorClass(class Actor InClass);// 0x24c5530

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: PrimitiveComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x1395e00
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x25424b0
	void RemoteEvent(FName EventName, bool ReturnValue);// 0x2542410
	void LevelReset();// 0x1395e00

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x338, Size: 0x8]
	BillboardComponent* GoodSprite;//[Offset: 0x340, Size: 0x8]
	BillboardComponent* BadSprite;//[Offset: 0x348, Size: 0x8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 0x1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x580, Size: 0x8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x588, Size: 0x1]
	float ScreenSize;//[Offset: 0x58c, Size: 0x4]
	float U;//[Offset: 0x590, Size: 0x4]
	float UL;//[Offset: 0x594, Size: 0x4]
	float V;//[Offset: 0x598, Size: 0x4]
	float VL;//[Offset: 0x59c, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x24adc90
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x24adb10
	void SetSprite(Texture2D* NewSprite);// 0x24ada80

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x338, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x338, Size: 0x1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x338, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x338, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x338, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x338, Size: 0x1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x340, Size: 0x8]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x348, Size: 0x8]
	float KillZ;//[Offset: 0x350, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x358, Size: 0x8]
	float WorldGravityZ;//[Offset: 0x360, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x364, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x368, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x370, Size: 0x8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x378, Size: 0x8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x380, Size: 0x8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x388, Size: 0x4]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 0x1]
	Vector DefaultColorScale;//[Offset: 0x390, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x39c, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x3a0, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x3a4, Size: 0x4]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a8, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a8, Size: 0x1]
	int VisibilityCellSize;//[Offset: 0x3ac, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x3b0, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b4, Size: 0x1]
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x3b8, Size: 0x54]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x410, Size: 0x20]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x430, Size: 0x24]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x458, Size: 0x8]
	float WorldToMeters;//[Offset: 0x460, Size: 0x4]
	float MonoCullingDistance;//[Offset: 0x464, Size: 0x4]
	BookMark* BookMarks;//[Offset: 0x468, Size: 0x8]
	float TimeDilation;//[Offset: 0x4b8, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x4bc, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x4c0, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x4c4, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x4c8, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x4cc, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x4d0, Size: 0x4]
	PlayerState* Pauser;//[Offset: 0x4d8, Size: 0x8]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4e0, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4e0, Size: 0x1]
	NetViewer[] ReplicationViewers;//[Offset: 0x4e8, Size: 0x10]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 0x1]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x4fc, Size: 0x24]
	AssetUserData*[] AssetUserData;//[Offset: 0x520, Size: 0x10]
	int MaxNumberOfBookmarks;//[Offset: 0x530, Size: 0x4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x538, Size: 0x8]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x540, Size: 0x10]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x550, Size: 0x8]
	void OnRep_WorldGravityZ();// 0xf3d810

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x330, Size: 0x10]
	class GameSession* GameSessionClass;//[Offset: 0x340, Size: 0x8]
	class GameStateBase* GameStateClass;//[Offset: 0x348, Size: 0x8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x350, Size: 0x8]
	class PlayerState* PlayerStateClass;//[Offset: 0x358, Size: 0x8]
	class HUD* HUDClass;//[Offset: 0x360, Size: 0x8]
	class Pawn* DefaultPawnClass;//[Offset: 0x368, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x370, Size: 0x8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x378, Size: 0x8]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x380, Size: 0x8]
	GameSession* GameSession;//[Offset: 0x388, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x390, Size: 0x8]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x398, Size: 0x8]
	FText DefaultPlayerName;//[Offset: 0x3a0, Size: 0x18]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b8, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b8, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3b8, Size: 0x1]
	void StartPlay();// 0x24eae20
	void SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot, Pawn* ReturnValue);// 0x24e9090
	void SpawnDefaultPawnAtTransform(Controller* NewPlayer, Transform SpawnTransform, Pawn* ReturnValue);// 0x24e8f70
	void ShouldReset(Actor* ActorToReset, bool ReturnValue);// 0x24e8a90
	void ReturnToMainMenuHost();// 0x24e7f20
	void RestartPlayerAtTransform(Controller* NewPlayer, Transform SpawnTransform);// 0x24e7e00
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x24e7d30
	void RestartPlayer(Controller* NewPlayer);// 0x24e7ca0
	void ResetLevel();// 0x24e7c80
	void PlayerCanRestart(PlayerController* Player, bool ReturnValue);// 0x24e76b0
	void MustSpectate(PlayerController* NewPlayerController, bool ReturnValue);// 0x24e67b0
	void K2_PostLogin(PlayerController* NewPlayer);// 0x1395e00
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x1395e00
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x1395e00
	void K2_OnLogout(Controller* ExitingController);// 0x1395e00
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x1395e00
	void K2_FindPlayerStart(Controller* Player, FString IncomingName, Actor* ReturnValue);// 0x24e5e80
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x24e5d30
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0xf2f7e0
	void HasMatchStarted(bool ReturnValue);// 0x24e5bc0
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x24e5a90
	void GetNumSpectators(int ReturnValue);// 0x24e5030
	void GetNumPlayers(int ReturnValue);// 0x24e5000
	void GetDefaultPawnClassForController(Controller* InController, class Object ReturnValue);// 0x24e4a40
	void FindPlayerStart(Controller* Player, FString IncomingName, Actor* ReturnValue);// 0x24e3ed0
	void ChoosePlayerStart(Controller* Player, Actor* ReturnValue);// 0x24e32d0
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x24e31b0
	void CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget, bool ReturnValue);// 0x24e30c0

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x330, Size: 0x4]
	int MaxPlayers;//[Offset: 0x334, Size: 0x4]
	int MaxPartySize;//[Offset: 0x338, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x33c, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d, Size: 0x1]
	FName SessionName;//[Offset: 0x340, Size: 0x8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x330, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x338, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x340, Size: 0x8]
	PlayerState*[] PlayerArray;//[Offset: 0x348, Size: 0x10]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x35c, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x360, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x364, Size: 0x4]
	void OnRep_SpectatorClass();// 0x429ef0
	void OnRep_ReplicatedWorldTimeSeconds();// 0x24ee240
	void OnRep_ReplicatedHasBegunPlay();// 0x24ee220
	void OnRep_GameModeClass();// 0x24ca0e0
	void HasMatchStarted(bool ReturnValue);// 0x24ee010
	void HasBegunPlay(bool ReturnValue);// 0x24edfe0
	void GetServerWorldTimeSeconds(float ReturnValue);// 0x24edf10
	void GetPlayerStartTime(Controller* Controller, float ReturnValue);// 0x24eda50
	void GetPlayerRespawnDelay(Controller* Controller, float ReturnValue);// 0x24ed9b0

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1]
	UInt32Property Channels;//[Size: 0x4]
	UInt32Property InRate;//[Size: 0x4]
	UInt32Property OutRate;//[Size: 0x4]
	UInt32Property OutSaturation;//[Size: 0x4]
	UInt32Property MaxPacketOverhead;//[Size: 0x4]
	UInt32Property InRateClientMax;//[Size: 0x4]
	UInt32Property InRateClientMin;//[Size: 0x4]
	UInt32Property InRateClientAvg;//[Size: 0x4]
	UInt32Property InPacketsClientMax;//[Size: 0x4]
	UInt32Property InPacketsClientMin;//[Size: 0x4]
	UInt32Property InPacketsClientAvg;//[Size: 0x4]
	UInt32Property OutRateClientMax;//[Size: 0x4]
	UInt32Property OutRateClientMin;//[Size: 0x4]
	UInt32Property OutRateClientAvg;//[Size: 0x4]
	UInt32Property OutPacketsClientMax;//[Size: 0x4]
	UInt32Property OutPacketsClientMin;//[Size: 0x4]
	UInt32Property OutPacketsClientAvg;//[Size: 0x4]
	UInt32Property NetNumClients;//[Size: 0x4]
	UInt32Property InPackets;//[Size: 0x4]
	UInt32Property OutPackets;//[Size: 0x4]
	UInt32Property InBunches;//[Size: 0x4]
	UInt32Property OutBunches;//[Size: 0x4]
	UInt32Property OutLoss;//[Size: 0x4]
	UInt32Property InLoss;//[Size: 0x4]
	UInt32Property VoiceBytesSent;//[Size: 0x4]
	UInt32Property VoiceBytesRecv;//[Size: 0x4]
	UInt32Property VoicePacketsSent;//[Size: 0x4]
	UInt32Property VoicePacketsRecv;//[Size: 0x4]
	UInt32Property PercentInVoice;//[Size: 0x4]
	UInt32Property PercentOutVoice;//[Size: 0x4]
	UInt32Property NumActorChannels;//[Size: 0x4]
	UInt32Property NumConsideredActors;//[Size: 0x4]
	UInt32Property PrioritizedActors;//[Size: 0x4]
	UInt32Property NumRelevantActors;//[Size: 0x4]
	UInt32Property NumRelevantDeletedActors;//[Size: 0x4]
	UInt32Property NumReplicatedActorAttempts;//[Size: 0x4]
	UInt32Property NumReplicatedActors;//[Size: 0x4]
	UInt32Property NumActors;//[Size: 0x4]
	UInt32Property NumNetActors;//[Size: 0x4]
	UInt32Property NumDormantActors;//[Size: 0x4]
	UInt32Property NumInitiallyDormantActors;//[Size: 0x4]
	UInt32Property NumNetGUIDsAckd;//[Size: 0x4]
	UInt32Property NumNetGUIDsPending;//[Size: 0x4]
	UInt32Property NumNetGUIDsUnAckd;//[Size: 0x4]
	UInt32Property ObjPathBytes;//[Size: 0x4]
	UInt32Property NetGUIDOutRate;//[Size: 0x4]
	UInt32Property NetGUIDInRate;//[Size: 0x4]
	UInt32Property NetSaturated;//[Size: 0x4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	int AdjustedNetSpeed;//[Offset: 0x330, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x334, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x338, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x33c, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x340, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x348, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x34c, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x350, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x354, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x358, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x35c, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x360, Size: 0x4]
	float MoveRepSize;//[Offset: 0x364, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x368, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x36c, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x370, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x374, Size: 0x4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x378, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x37c, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x380, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x384, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x388, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x38c, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x390, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x398, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x3a0, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x3a4, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x3a8, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x3ac, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b1, Size: 0x1]

--------------------------------
Class: LightmassWorldInfoSettings
	float StaticLightingLevelScale;//[Offset: 0x0, Size: 0x4]
	int NumIndirectLightingBounces;//[Offset: 0x4, Size: 0x4]
	int NumSkyLightingBounces;//[Offset: 0x8, Size: 0x4]
	float IndirectLightingQuality;//[Offset: 0xc, Size: 0x4]
	float IndirectLightingSmoothness;//[Offset: 0x10, Size: 0x4]
	Color EnvironmentColor;//[Offset: 0x14, Size: 0x4]
	float EnvironmentIntensity;//[Offset: 0x18, Size: 0x4]
	float EmissiveBoost;//[Offset: 0x1c, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x20, Size: 0x4]
	byte VolumeLightingMethod;//[Offset: 0x24, Size: 0x1]
	float VolumetricLightmapDetailCellSize;//[Offset: 0x28, Size: 0x4]
	float VolumetricLightmapMaximumBrickMemoryMb;//[Offset: 0x2c, Size: 0x4]
	float VolumetricLightmapSphericalHarmonicSmoothing;//[Offset: 0x30, Size: 0x4]
	float VolumeLightSamplePlacementScale;//[Offset: 0x34, Size: 0x4]
	bool bUseAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bGenerateAmbientOcclusionMaterialMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	float DirectIlluminationOcclusionFraction;//[Offset: 0x3c, Size: 0x4]
	float IndirectIlluminationOcclusionFraction;//[Offset: 0x40, Size: 0x4]
	float OcclusionExponent;//[Offset: 0x44, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x48, Size: 0x4]
	float MaxOcclusionDistance;//[Offset: 0x4c, Size: 0x4]
	bool bVisualizeMaterialDiffuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bVisualizeAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	bool bCompressLightmaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	byte ReverbType;//[Offset: 0x4, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8]
	float Volume;//[Offset: 0x18, Size: 0x4]
	float FadeTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x28, Size: 0x4]
	float Diffusion;//[Offset: 0x2c, Size: 0x4]
	float Gain;//[Offset: 0x30, Size: 0x4]
	float GainHF;//[Offset: 0x34, Size: 0x4]
	float DecayTime;//[Offset: 0x38, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x3c, Size: 0x4]
	float ReflectionsGain;//[Offset: 0x40, Size: 0x4]
	float ReflectionsDelay;//[Offset: 0x44, Size: 0x4]
	float LateGain;//[Offset: 0x48, Size: 0x4]
	float LateDelay;//[Offset: 0x4c, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 0x4]
	float RoomRolloffFactor;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BookMark.BookmarkBase.Object
	Vector Location;//[Offset: 0x28, Size: 0xc]
	Rotator Rotation;//[Offset: 0x34, Size: 0xc]
	FString[] HiddenLevels;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* InViewer;//[Offset: 0x8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc]
	Vector ViewDir;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c]
	UInt32Property MBPNumSubdivs;//[Size: 0x4]

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0x10]
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30]
	int LevelLODIndex;//[Offset: 0xb0, Size: 0x4]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb6, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb6, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb6, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb6, Size: 0x1]
	bool bAlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb6, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb6, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb7, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb7, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb7, Size: 0x1]
	LinearColor LevelColor;//[Offset: 0xb8, Size: 0x10]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xc8, Size: 0x10]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xd8, Size: 0x4]
	delegate OnLevelLoaded;//[Offset: 0x140, Size: 0x10]
	delegate OnLevelUnloaded;//[Offset: 0x150, Size: 0x10]
	delegate OnLevelShown;//[Offset: 0x160, Size: 0x10]
	delegate OnLevelHidden;//[Offset: 0x170, Size: 0x10]
	Level* LoadedLevel;//[Offset: 0x180, Size: 0x8]
	Level* PendingUnloadLevel;//[Offset: 0x188, Size: 0x8]
	void ShouldBeLoaded(bool ReturnValue);// 0x25470a0
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x2546e80
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x24ed550
	void SetLevelLODIndex(int LODIndex);// 0x2546890
	void IsStreamingStatePending(bool ReturnValue);// 0x2545b50
	void IsLevelVisible(bool ReturnValue);// 0x2545b20
	void IsLevelLoaded(bool ReturnValue);// 0x2545af0
	void GetWorldAssetPackageFName(FName ReturnValue);// 0x2545a80
	void GetLevelScriptActor(LevelScriptActor* ReturnValue);// 0x25458d0
	void CreateInstance(FString UniqueInstanceName, LevelStreaming* ReturnValue);// 0x25457f0

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x368, Size: 0x10]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x378, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x37c, Size: 0x1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<RollbackNetStartupActorInfo,None(None)> RollbackNetStartupActors;//[Offset: 0x7a0, Size: 0x50]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0xb94, Size: 0x4]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc8, Size: 0x1]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8]
	Level* Level;//[Offset: 0x28, Size: 0x8]
	Object*[] ObjReferences;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4]
	void RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight, bool ReturnValue);// 0x24ad9b0
	void GetObjectCount(int ReturnValue);// 0x24ad980
	void GetNewAvoidanceUID(int ReturnValue);// 0x24ad950
	void GetAvoidanceVelocityForComponent(MovementComponent* MovementComp, Vector ReturnValue);// 0x24ad8b0

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]
	<None(None)> levels;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x48, Size: 0x10]
	double TilesStreamingTimeThreshold;//[Offset: 0x58, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: WorldPSCPool
	<PSCPool,None(None)> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10]
	ParticleSystemComponent*[] InUseComponents_Auto;//[Offset: 0x10, Size: 0x10]
	ParticleSystemComponent*[] InUseComponents_Manual;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: WW3WorldSetting.WorldSettings.Info.Actor.Object
	bool bSkipSpectatorMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 0x1]
	class Actor* PlayerOutdoorWeatherParticleManager;//[Offset: 0x560, Size: 0x8]
	ParticleSystem* PlayerIndoorDustParticle;//[Offset: 0x568, Size: 0x8]
	WW3WeatherMaskRenderer* WeatherMaskRenderer;//[Offset: 0x570, Size: 0x8]
	float AngleOffsetToNorth;//[Offset: 0x578, Size: 0x4]
	<WW3StringArray,None(None)> LoadingScreenWaitingLevels;//[Offset: 0x580, Size: 0x50]
	WW3LevelLoadingObserver* LevelLoadingObserver;//[Offset: 0x5d0, Size: 0x8]

--------------------------------
Class: WW3WeatherMaskRenderer.Actor.Object
	SceneCaptureComponent2D* RenderCamera;//[Offset: 0x330, Size: 0x8]
	StaticMeshComponent* BottomPlane;//[Offset: 0x338, Size: 0x8]
	TextureRenderTarget2D* WeatherMaskRenderTarget;//[Offset: 0x340, Size: 0x8]
	enum WeatherMaskType;//[Offset: 0x348, Size: 0x1]
	PhysicalMaterial* WeatherMaskPhysicalMaterial;//[Offset: 0x350, Size: 0x8]
	void PrepareWeatherMask();// 0x1103660

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x2e0, Size: 0x1]
	float FOVAngle;//[Offset: 0x2e4, Size: 0x4]
	float OrthoWidth;//[Offset: 0x2e8, Size: 0x4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x2f0, Size: 0x8]
	byte CaptureSource;//[Offset: 0x2f8, Size: 0x1]
	byte CompositeMode;//[Offset: 0x2f9, Size: 0x1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x300, Size: 0x4e0]
	float PostProcessBlendWeight;//[Offset: 0x7e0, Size: 0x4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e4, Size: 0x1]
	Matrix CustomProjectionMatrix;//[Offset: 0x7f0, Size: 0x40]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x830, Size: 0x1]
	Vector ClipPlaneBase;//[Offset: 0x834, Size: 0xc]
	Vector ClipPlaneNormal;//[Offset: 0x840, Size: 0xc]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84c, Size: 0x1]
	void CaptureScene();// 0x2595010
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x2594ec0

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x248, Size: 0x1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x250, Size: 0x10]
	Actor*[] HiddenActors;//[Offset: 0x260, Size: 0x10]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x270, Size: 0x10]
	Actor*[] ShowOnlyActors;//[Offset: 0x280, Size: 0x10]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 0x1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292, Size: 0x1]
	float LODDistanceFactor;//[Offset: 0x294, Size: 0x4]
	float MaxViewDistanceOverride;//[Offset: 0x298, Size: 0x4]
	int CaptureSortPriority;//[Offset: 0x29c, Size: 0x4]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x2a0, Size: 0x10]
	FString ProfilingEventName;//[Offset: 0x2c0, Size: 0x10]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x25985b0
	void ShowOnlyActorComponents(Actor* InActor);// 0x2598530
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x25980e0
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x2597f20
	void RemoveShowOnlyActorComponents(Actor* InActor);// 0x2597ea0
	void HideComponent(PrimitiveComponent* InComponent);// 0x2595a90
	void HideActorComponents(Actor* InActor);// 0x2595a10
	void ClearShowOnlyComponents(PrimitiveComponent* InComponent);// 0x2595070
	void ClearHiddenComponents();// 0x2595050

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0x168, Size: 0x4]
	int SizeY;//[Offset: 0x16c, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0x170, Size: 0x10]
	byte AddressX;//[Offset: 0x180, Size: 0x1]
	byte AddressY;//[Offset: 0x181, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x182, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x182, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x182, Size: 0x1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x182, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0x183, Size: 0x1]
	byte OverrideFormat;//[Offset: 0x184, Size: 0x1]

--------------------------------
Class: TextureRenderTarget.Texture.Object
	float TargetGamma;//[Offset: 0x160, Size: 0x4]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: WW3StringArray
	FString[] Array;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3LevelLoadingObserver.ActorComponent.Object

--------------------------------
Class: LightmassImportanceVolume.Volume.Brush.Actor.Object

--------------------------------
Class: KillZVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: BlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: WW3SatelliteMapContainer.Actor.Object
	<WW3SatelliteMapGenerator*,None(None)> SatelliteMapGenerators;//[Offset: 0x330, Size: 0x50]

--------------------------------
Class: WW3SatelliteMapGenerator.Actor.Object
	class WW3GameplayMapTextures* GameplayMapTexturesClass;//[Offset: 0x330, Size: 0x8]
	WW3MapTextureOffsetSettings MapTextureOffsetSettings;//[Offset: 0x338, Size: 0xc]
	CanvasRenderTarget2D* MapRenderTargetTexture;//[Offset: 0x348, Size: 0x8]
	CanvasRenderTarget2D* MapDepthRenderTargetTexture;//[Offset: 0x350, Size: 0x8]
	float SatelliteAltitude;//[Offset: 0x358, Size: 0x4]
	float SurfaceSize;//[Offset: 0x35c, Size: 0x4]
	SceneComponent* Root;//[Offset: 0x360, Size: 0x8]
	SceneComponent* SceneCaptureRoot;//[Offset: 0x368, Size: 0x8]
	SceneCaptureComponent2D* SceneCapture;//[Offset: 0x370, Size: 0x8]
	byte CaptureSource;//[Offset: 0x378, Size: 0x1]
	BillboardComponent* Sprite;//[Offset: 0x380, Size: 0x8]
	StaticMeshComponent* SceneCapturePreviewMesh;//[Offset: 0x388, Size: 0x8]
	CameraComponent* SceneCapturePreviewCamera;//[Offset: 0x390, Size: 0x8]
	Material* MaterialForDepthEnriching;//[Offset: 0x398, Size: 0x8]
	Material* MaterialForContours;//[Offset: 0x3a0, Size: 0x8]
	WW3StrikeUsableMaskMDC* StrikeUsableMaskMDC;//[Offset: 0x3b8, Size: 0x8]

--------------------------------
Class: WW3GameplayMapTextures.Object
	WW3TeamBasedBakedMapSettings TeamBasedBakedMapSettings;//[Offset: 0x28, Size: 0x130]
	bool bUseAlphaFromRedChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	bool bGenerateStrikeMasksBinaryData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]
	float NormalkMapTextureScale;//[Offset: 0x15c, Size: 0x4]
	float ChunksMapTextureScale;//[Offset: 0x160, Size: 0x4]

--------------------------------
Class: WW3TeamBasedBakedMapSettings
	<Texture2D*,None(None)> TeamBasedMapTextures;//[Offset: 0x0, Size: 0x50]
	<WW3TeamBasedMapChunkTextures,None(None)> TeamBasedMapChunkTextures;//[Offset: 0x50, Size: 0x50]
	<WW3StrikeUsableMaskTypeTexture,None(None)> TeamBasedStrikeUsableTextures;//[Offset: 0xa0, Size: 0x50]
	Texture2D* DefaultMapTexture;//[Offset: 0xf0, Size: 0x8]
	Texture2D* DefaultStrikeMaskTexture;//[Offset: 0xf8, Size: 0x28]
	Texture2D*[] DefaultMapChunkTextures;//[Offset: 0x120, Size: 0x10]

--------------------------------
Class: WW3TeamBasedMapChunkTextures
	Texture2D*[] MapChunkTextures;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3StrikeUsableMaskTypeTexture
	<Texture2D*,None(None)> StrikeUsableMaskTypeTextures;//[Offset: 0x0, Size: 0x50]
	<WW3MaskBinaryData,None(None)> MaskDataForStrikes;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: WW3MaskBinaryData
	bool[] BinaryData;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3MapTextureOffsetSettings
	Vector2D PixelDisplacement;//[Offset: 0x0, Size: 0x8]
	float Scale;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CanvasRenderTarget2D.TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	delegate OnCanvasRenderTargetUpdate;//[Offset: 0x190, Size: 0x10]
	World* World;//[Offset: 0x1a0, Size: 0x8]
	bool bShouldClearRenderTargetOnReceiveUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	void UpdateResource();// 0x1da3f50
	void ReceiveUpdate(Canvas* Canvas, int Width, int Height);// 0x1395e00
	void GetSize(int Width, int Height);// 0x24bad80
	static void CreateCanvasRenderTarget2D(Object* WorldContextObject, class CanvasRenderTarget2D CanvasRenderTarget2DClass, int Width, int Height, CanvasRenderTarget2D* ReturnValue);// 0x24ba7b0

--------------------------------
Class: WW3StrikeUsableMaskMDC.WW3MapDrawingComponent.ActorComponent.Object
	Texture2D* StrikeMaskTexture;//[Offset: 0x238, Size: 0x8]

--------------------------------
Class: WW3MapDrawingComponent.ActorComponent.Object
	<bool,None(None)> ShouldCreateWidgetForMapModeMap;//[Offset: 0xf0, Size: 0x50]
	<class WW3GameplayMapWidget,None(None)> MapWidgetClasses;//[Offset: 0x140, Size: 0x50]
	class WW3GameplayMapWidget* DefaultGameplayMapWidgetClass;//[Offset: 0x190, Size: 0x28]
	Vector2D Alignment;//[Offset: 0x1b8, Size: 0x8]
	Vector2D DesiredWidgetScale;//[Offset: 0x1c0, Size: 0x8]
	int8 Layer;//[Offset: 0x1c8, Size: 0x1]
	bool bShouldUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 0x1]
	bool bTransformIsMapPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca, Size: 0x1]
	bool bScaleAccordingToOwningGameplayMapSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb, Size: 0x1]
	bool bShouldStayOnMinimapEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 0x1]
	<WW3GameplayMapWidget*,None(None)> GameplayMapWidgets;//[Offset: 0x1d0, Size: 0x50]

--------------------------------
Class: WW3GameplayMapWidget.UserWidget.Widget.Visual.Object
	WW3MapDrawingComponent* WidgetMDCOwner;//[Offset: 0x210, Size: 0x8]
	interface class None* MapContainer;//[Offset: 0x218, Size: 0x10]
	Image* WidgetImage;//[Offset: 0x228, Size: 0x8]
	Object* OwningObject;//[Offset: 0x230, Size: 0x8]
	void UpdateWidget_BP();// 0x1395e00
	void OnSetBrushFromTexture_BP(Texture2D* Texture);// 0x1395e00
	void OnSetBrushFromMaterial_BP(MaterialInterface* InMaterialInterface);// 0x1395e00
	void OnRightMouseButtonDown_BP(Geometry InGeometry, PointerEvent PointerEvent);// 0x1395e00
	void OnQuickMapOpened_BP();// 0x1395e00
	void OnMouseUnHover_BP();// 0x1395e00
	void OnMouseHover_BP();// 0x1395e00
	void OnLeftMouseButtonUp_BP(Geometry InGeometry, PointerEvent PointerEvent);// 0x1395e00
	void OnLeftMouseButtonDown_BP(Geometry InGeometry, PointerEvent PointerEvent);// 0x1395e00
	void GetUMGImage(Image* ReturnValue);// 0x1395e00

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x100, Size: 0x88]
	delegate BrushDelegate;//[Offset: 0x188, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x198, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1a8, Size: 0x10]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1b8, Size: 0x10]
	void SetOpacity(float InOpacity);// 0x1d05230
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x1d04530
	void SetBrushTintColor(SlateColor TintColor);// 0x1d04440
	void SetBrushSize(Vector2D DesiredSize);// 0x1d043c0
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x1d042f0
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x1d04220
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x1d040e0
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x1d04050
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x1d03f60
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x1d03ed0
	void SetBrush(SlateBrush InBrush);// 0x1d03d50
	void GetDynamicMaterial(MaterialInstanceDynamic* ReturnValue);// 0x1d03900

--------------------------------
Class: Texture2DDynamic.Texture.Object
	byte Format;//[Offset: 0x168, Size: 0x1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x368, Size: 0x4]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: NavLinkProxy.Actor.Object
	NavigationLink[] PointLinks;//[Offset: 0x340, Size: 0x10]
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x350, Size: 0x10]
	NavLinkCustomComponent* SmartLinkComp;//[Offset: 0x360, Size: 0x8]
	bool bSmartLinkIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	delegate OnSmartLinkReached;//[Offset: 0x370, Size: 0x10]
	void SetSmartLinkEnabled(bool bEnabled);// 0x2745d00
	void ResumePathFollowing(Actor* Agent);// 0x2745bb0
	void ReceiveSmartLinkReached(Actor* Agent, Vector Destination);// 0x1395e00
	void IsSmartLinkEnabled(bool ReturnValue);// 0x2745870
	void HasMovingAgents(bool ReturnValue);// 0x2745840

--------------------------------
Class: NavigationLink.NavigationLinkBase
	Vector Left;//[Offset: 0x38, Size: 0xc]
	Vector Right;//[Offset: 0x44, Size: 0xc]

--------------------------------
Class: NavigationLinkBase
	float LeftProjectHeight;//[Offset: 0x0, Size: 0x4]
	float MaxFallDownLength;//[Offset: 0x4, Size: 0x4]
	byte Direction;//[Offset: 0x8, Size: 0x1]
	float SnapRadius;//[Offset: 0x10, Size: 0x4]
	float SnapHeight;//[Offset: 0x14, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x18, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 0x1]
	bool bUseSnapHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	bool bSnapToCheapestArea;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1]
	bool bCustomFlag0;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1]
	bool bCustomFlag1;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 0x1]
	bool bCustomFlag2;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20, Size: 0x1]
	bool bCustomFlag3;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20, Size: 0x1]
	bool bCustomFlag4;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20, Size: 0x1]
	bool bCustomFlag5;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x20, Size: 0x1]
	bool bCustomFlag6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]
	bool bCustomFlag7;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 0x1]
	class NavAreaBase* AreaClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: NavigationSegmentLink.NavigationLinkBase
	Vector LeftStart;//[Offset: 0x38, Size: 0xc]
	Vector LeftEnd;//[Offset: 0x44, Size: 0xc]
	Vector RightStart;//[Offset: 0x50, Size: 0xc]
	Vector RightEnd;//[Offset: 0x5c, Size: 0xc]

--------------------------------
Class: NavLinkCustomComponent.NavRelevantComponent.ActorComponent.Object
	UInt32Property NavLinkUserId;//[Size: 0x4]
	class NavArea* EnabledAreaClass;//[Offset: 0x130, Size: 0x8]
	class NavArea* DisabledAreaClass;//[Offset: 0x138, Size: 0x8]
	Vector LinkRelativeStart;//[Offset: 0x140, Size: 0xc]
	Vector LinkRelativeEnd;//[Offset: 0x14c, Size: 0xc]
	byte LinkDirection;//[Offset: 0x158, Size: 0x1]
	bool bLinkEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15c, Size: 0x1]
	bool bNotifyWhenEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15c, Size: 0x1]
	bool bNotifyWhenDisabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15c, Size: 0x1]
	bool bCreateBoxObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15c, Size: 0x1]
	Vector ObstacleOffset;//[Offset: 0x160, Size: 0xc]
	Vector ObstacleExtent;//[Offset: 0x16c, Size: 0xc]
	class NavArea* ObstacleAreaClass;//[Offset: 0x178, Size: 0x8]
	float BroadcastRadius;//[Offset: 0x180, Size: 0x4]
	float BroadcastInterval;//[Offset: 0x184, Size: 0x4]
	byte BroadcastChannel;//[Offset: 0x188, Size: 0x1]

--------------------------------
Class: NavRelevantComponent.ActorComponent.Object
	bool bAttachToOwnersRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x114, Size: 0x1]
	Object* CachedNavParent;//[Offset: 0x118, Size: 0x8]
	void SetNavigationRelevancy(bool bRelevant);// 0x26ab1a0

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x30, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x3c, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x41, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x41, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x41, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x41, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x41, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x41, Size: 0x1]

--------------------------------
Class: WW3DynamicAudioBankManager.Actor.Object

--------------------------------
Class: PrecomputedVisibilityVolume.Volume.Brush.Actor.Object

--------------------------------
Class: DecalActor.Actor.Object
	DecalComponent* decal;//[Offset: 0x330, Size: 0x8]
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x24ce270
	void GetDecalMaterial(MaterialInterface* ReturnValue);// 0x24cde20
	void CreateDynamicMaterialInstance(MaterialInstanceDynamic* ReturnValue);// 0x24cddc0

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x248, Size: 0x8]
	int SortOrder;//[Offset: 0x250, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x254, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x258, Size: 0x4]
	float FadeDuration;//[Offset: 0x25c, Size: 0x4]
	float FadeInDuration;//[Offset: 0x260, Size: 0x4]
	float FadeInStartDelay;//[Offset: 0x264, Size: 0x4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1]
	Vector DecalSize;//[Offset: 0x26c, Size: 0xc]
	void SetSortOrder(int Value);// 0x24ce9e0
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x24ce750
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x24ce640
	void SetFadeIn(float StartDelay, float Duaration);// 0x24ce580
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x24ce2f0
	void GetFadeStartDelay(float ReturnValue);// 0x24cdf10
	void GetFadeInStartDelay(float ReturnValue);// 0x24cdee0
	void GetFadeInDuration(float ReturnValue);// 0x24cdeb0
	void GetFadeDuration(float ReturnValue);// 0x24cde80
	void GetDecalMaterial(MaterialInterface* ReturnValue);// 0x24cde50
	void CreateDynamicMaterialInstance(MaterialInstanceDynamic* ReturnValue);// 0x24cddf0

--------------------------------
Class: bp_Vault_01_C.WW3VaultObject.Actor.Object
	void UserConstructionScript();// 0x1395e00
	WW3VaultComponent* WW3Vault;//[Offset: 0x330, Size: 0x8]
	TextRenderComponent* Vault2;//[Offset: 0x338, Size: 0x8]
	TextRenderComponent* Vault;//[Offset: 0x340, Size: 0x8]
	StaticMeshComponent* sm_VaultCollision_2m;//[Offset: 0x348, Size: 0x8]

--------------------------------
Class: WW3VaultObject.Actor.Object

--------------------------------
Class: WW3VaultComponent.ActorComponent.Object
	enum VaultInfo;//[Offset: 0xf0, Size: 0x1]
	bool bIsWindowBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	bool bOverrideHeightCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2, Size: 0x1]
	float HeightCheck;//[Offset: 0xf4, Size: 0x4]
	bool bOverrideSlideLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	float SlideLength;//[Offset: 0xfc, Size: 0x4]
	bool bOverrideCollisionErrorMargin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	float CollisionErrorMargin;//[Offset: 0x104, Size: 0x4]
	bool bMaximumApproachAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	float MaximumAngle;//[Offset: 0x10c, Size: 0x4]
	bool bOnlyFrontBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x580, Size: 0x18]
	MaterialInterface* TextMaterial;//[Offset: 0x598, Size: 0x8]
	Font* Font;//[Offset: 0x5a0, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x5a8, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x5a9, Size: 0x1]
	Color TextRenderColor;//[Offset: 0x5ac, Size: 0x4]
	float XScale;//[Offset: 0x5b0, Size: 0x4]
	float YScale;//[Offset: 0x5b4, Size: 0x4]
	float WorldSize;//[Offset: 0x5b8, Size: 0x4]
	float InvDefaultSize;//[Offset: 0x5bc, Size: 0x4]
	float HorizSpacingAdjust;//[Offset: 0x5c0, Size: 0x4]
	float VertSpacingAdjust;//[Offset: 0x5c4, Size: 0x4]
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c8, Size: 0x1]
	void SetYScale(float Value);// 0x5f75d0
	void SetXScale(float Value);// 0x25b7dd0
	void SetWorldSize(float Value);// 0x25b7d50
	void SetVertSpacingAdjust(float Value);// 0x25b7c50
	void SetVerticalAlignment(byte Value);// 0x25b7cd0
	void SetTextRenderColor(Color Value);// 0x25b7ad0
	void SetTextMaterial(MaterialInterface* Material);// 0x25b7a50
	void SetText(FString Value);// 0x25b79b0
	void SetHorizSpacingAdjust(float Value);// 0x25b75a0
	void SetHorizontalAlignment(byte Value);// 0x25b7620
	void SetFont(Font* Value);// 0x25b7400
	void K2_SetText(FText Value);// 0x25b7210
	void GetTextWorldSize(Vector ReturnValue);// 0x25b7160
	void GetTextLocalSize(Vector ReturnValue);// 0x25b7120

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x330, Size: 0x8]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x339, Size: 0x1]
	void SetMobility(byte InMobility);// 0x25b3b50

--------------------------------
Class: SpotLight.Light.Actor.Object
	SpotLightComponent* SpotLightComponent;//[Offset: 0x340, Size: 0x8]
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x25b3bd0
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x25b3a50

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x330, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	void ToggleEnabled();// 0x25470d0
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x2546ce0
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x2546be0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x2546ae0
	void SetLightColor(LinearColor NewLightColor);// 0x2546910
	void SetEnabled(bool bSetEnabled);// 0x25465f0
	void SetCastShadows(bool bNewValue);// 0x25463b0
	void SetBrightness(float NewBrightness);// 0x2546330
	void SetAffectTranslucentLighting(bool bNewValue);// 0x2546020
	void OnRep_bEnabled();// 0xf3d810
	void IsEnabled(bool ReturnValue);// 0x2545ac0
	void GetLightColor(LinearColor ReturnValue);// 0x2545900
	void GetBrightness(float ReturnValue);// 0x25458a0

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x270, Size: 0x4]
	float MaxDrawDistance;//[Offset: 0x274, Size: 0x4]
	float MaxDistanceFadeRange;//[Offset: 0x278, Size: 0x4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27c, Size: 0x1]
	int ShadowMapChannel;//[Offset: 0x280, Size: 0x4]
	float MinRoughness;//[Offset: 0x288, Size: 0x4]
	float SpecularScale;//[Offset: 0x28c, Size: 0x4]
	float ShadowResolutionScale;//[Offset: 0x290, Size: 0x4]
	float ShadowBias;//[Offset: 0x294, Size: 0x4]
	float ShadowSharpen;//[Offset: 0x298, Size: 0x4]
	float ContactShadowLength;//[Offset: 0x29c, Size: 0x4]
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 0x1]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a0, Size: 0x1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a0, Size: 0x1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a0, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a0, Size: 0x1]
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a0, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x2a4, Size: 0x1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x2a8, Size: 0x8]
	Vector LightFunctionScale;//[Offset: 0x2b0, Size: 0xc]
	TextureLightProfile* IESTexture;//[Offset: 0x2c0, Size: 0x8]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1]
	float IESBrightnessScale;//[Offset: 0x2cc, Size: 0x4]
	float LightFunctionFadeDistance;//[Offset: 0x2d0, Size: 0x4]
	float DisabledBrightness;//[Offset: 0x2d4, Size: 0x4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8, Size: 0x1]
	float BloomScale;//[Offset: 0x2dc, Size: 0x4]
	float BloomThreshold;//[Offset: 0x2e0, Size: 0x4]
	Color BloomTint;//[Offset: 0x2e4, Size: 0x4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	float RayStartOffsetDepthScale;//[Offset: 0x2ec, Size: 0x4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x2547020
	void SetTransmission(bool bNewValue);// 0x2546f90
	void SetTemperature(float NewTemperature);// 0x2546f10
	void SetShadowBias(float NewValue);// 0x2546e00
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x2546d70
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x2546c60
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x2546b60
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x2546a60
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x2546990
	void SetIntensity(float NewIntensity);// 0x2546810
	void SetIndirectLightingIntensity(float NewIntensity);// 0x2546790
	void SetIESTexture(TextureLightProfile* NewValue);// 0x2546710
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0x2546680
	void SetEnableLightShaftBloom(bool bNewValue);// 0x2546560
	void SetBloomTint(Color NewValue);// 0x25462c0
	void SetBloomThreshold(float NewValue);// 0x2546240
	void SetBloomScale(float NewValue);// 0x25461c0
	void SetAffectTranslucentLighting(bool bNewValue);// 0x25460b0
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x2545f90

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x248, Size: 0x10]
	float Brightness;//[Offset: 0x258, Size: 0x4]
	float Intensity;//[Offset: 0x25c, Size: 0x4]
	Color LightColor;//[Offset: 0x260, Size: 0x4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 0x1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x264, Size: 0x1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x264, Size: 0x1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x264, Size: 0x1]
	bool bTransmission;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x264, Size: 0x1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x264, Size: 0x1]
	float IndirectLightingIntensity;//[Offset: 0x268, Size: 0x4]
	float VolumetricScatteringIntensity;//[Offset: 0x26c, Size: 0x4]
	void SetCastVolumetricShadow(bool bNewValue);// 0x25464d0
	void SetCastShadows(bool bNewValue);// 0x2546440
	void GetLightColor(LinearColor ReturnValue);// 0x2545940

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.Object
	float Brightness;//[Offset: 0x198, Size: 0x4]
	float TextureMultiplier;//[Offset: 0x19c, Size: 0x4]

--------------------------------
Class: SpotLightComponent.PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float InnerConeAngle;//[Offset: 0x3a8, Size: 0x4]
	float OuterConeAngle;//[Offset: 0x3ac, Size: 0x4]
	float LightShaftConeAngle;//[Offset: 0x3b0, Size: 0x4]
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x25b3c50
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x25b3ad0

--------------------------------
Class: PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x390, Size: 0x1]
	float LightFalloffExponent;//[Offset: 0x394, Size: 0x4]
	float SourceRadius;//[Offset: 0x398, Size: 0x4]
	float SoftSourceRadius;//[Offset: 0x39c, Size: 0x4]
	float SourceLength;//[Offset: 0x3a0, Size: 0x4]
	void SetSourceRadius(float bNewValue);// 0x258cb70
	void SetSourceLength(float NewValue);// 0x258caf0
	void SetSoftSourceRadius(float bNewValue);// 0x258ca70
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x258b970

--------------------------------
Class: LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	enum IntensityUnits;//[Offset: 0x378, Size: 0x1]
	float Radius;//[Offset: 0x37c, Size: 0x4]
	float AttenuationRadius;//[Offset: 0x380, Size: 0x4]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x384, Size: 0xc]
	void SetAttenuationRadius(float NewRadius);// 0x2546140
	static void GetUnitsConversionFactor(enum SrcUnits, enum TargetUnits, float CosHalfConeAngle, float ReturnValue);// 0x2545980

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 0x4]
	float ShadowExponent;//[Offset: 0x4, Size: 0x4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: BP_RestoreBox_01_C.WW3GadgetSpawnBox.Actor.Object
	void UserConstructionScript();// 0x1395e00
	StaticMeshComponent* StaticMesh;//[Offset: 0x460, Size: 0x8]

--------------------------------
Class: WW3GadgetSpawnBox.Actor.Object
	class WW3GadgetThrowableRestore* MedKitTemplate;//[Offset: 0x338, Size: 0x8]
	class WW3GadgetThrowableRestore* AmmoPackTemplate;//[Offset: 0x340, Size: 0x8]
	class WW3GadgetThrowableRestore* EquipmentPackTemplate;//[Offset: 0x348, Size: 0x8]
	class WW3GadgetThrowableRestore* ArmorPackTemplate;//[Offset: 0x350, Size: 0x8]
	WW3ActorMarker* MarkerComponent;//[Offset: 0x358, Size: 0x8]
	bool bUseInWarzoneSmall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	bool bUseInWarzoneMedium;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 0x1]
	bool bUseInWarzoneLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x362, Size: 0x1]
	bool bUseInWarzoneX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x363, Size: 0x1]
	bool bUseInReconSmall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]
	bool bUseInReconMedium;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 0x1]
	bool bUseInReconLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x366, Size: 0x1]
	bool bUseInReconX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x367, Size: 0x1]
	bool bUseInTDMSmall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	bool bUseInTDMMedium;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 0x1]
	bool bUseInTDMLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36a, Size: 0x1]
	bool bUseInTDMX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36b, Size: 0x1]
	bool bUseInTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 0x1]
	bool bUseInFUBARSmall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36d, Size: 0x1]
	bool bUseInFUBARMedium;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36e, Size: 0x1]
	bool bUseInFUBARLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36f, Size: 0x1]
	bool bUseInFUBARX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	enum FirstGadgetType;//[Offset: 0x371, Size: 0x1]
	float FirstGadgetDelayBetweenSpawns;//[Offset: 0x374, Size: 0x4]
	Transform FirstGadgetPosition;//[Offset: 0x380, Size: 0x30]
	enum SecondGadgetType;//[Offset: 0x3b0, Size: 0x1]
	float SecondGadgetDelayBetweenSpawns;//[Offset: 0x3b4, Size: 0x4]
	Transform SecondGadgetPosition;//[Offset: 0x3c0, Size: 0x30]
	enum ThirdGadgetType;//[Offset: 0x3f0, Size: 0x1]
	float ThirdGadgetDelayBetweenSpawns;//[Offset: 0x3f4, Size: 0x4]
	Transform ThirdGadgetPosition;//[Offset: 0x400, Size: 0x30]
	WW3GadgetThrowableRestore* FirstSpawnedGadget;//[Offset: 0x440, Size: 0x8]
	WW3GadgetThrowableRestore* SecondSpawnedGadget;//[Offset: 0x448, Size: 0x8]
	WW3GadgetThrowableRestore* ThirdSpawnedGadget;//[Offset: 0x450, Size: 0x8]
	void OnThirdGadgetDestroyed(Actor* InDestroyedActor);// 0xfbf7d0
	void OnSecondGadgetDestroyed(Actor* InDestroyedActor);// 0xfbf750
	void OnFirstGadgetDestroyed(Actor* InDestroyedActor);// 0xfbf380

--------------------------------
Class: WW3GadgetThrowableRestore.WW3GadgetThrowable.Actor.Object
	float InteractionTime;//[Offset: 0x4d8, Size: 0x4]
	class ShooterExplosionEffect* DestroyedEffect;//[Offset: 0x4e0, Size: 0x28]
	WW3RestoreComponentNew* RestoreComponentPointer;//[Offset: 0x508, Size: 0x8]
	WW3AkComponent* AudioComponent;//[Offset: 0x510, Size: 0x8]
	void OnRestoreComponentPercentageLeftChanged(byte NewPercantage);// 0xfbf6d0

--------------------------------
Class: WW3GadgetThrowable.Actor.Object
	StaticMeshComponent* GadgetMesh;//[Offset: 0x3a0, Size: 0x8]
	enum AttachType;//[Offset: 0x3a8, Size: 0x1]
	enum AttachTraceType;//[Offset: 0x3a9, Size: 0x1]
	byte[] TraceObjectTypes;//[Offset: 0x3b0, Size: 0x10]
	WW3NoiseManagerActor* NoiseManager;//[Offset: 0x3c0, Size: 0x8]
	float AttachTraceSize;//[Offset: 0x3c8, Size: 0x4]
	float AdditionalHeightModifier;//[Offset: 0x3cc, Size: 0x4]
	Transform AttachModifier;//[Offset: 0x3d0, Size: 0x30]
	bool bOnlyYawRotationAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	bool bReadCameraForwardVector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 0x1]
	bool bIsConsumeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x402, Size: 0x1]
	bool bCanBlockExplosionDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x403, Size: 0x1]
	WW3MontagePoseSplit InteractionCompleteAnimations;//[Offset: 0x408, Size: 0x28]
	WW3StatisticsTrackingComponent* StatsTrackingComponent;//[Offset: 0x430, Size: 0x8]
	<FName,None(None)> ActorAndSocketToAttachIn;//[Offset: 0x438, Size: 0x50]
	class WW3ProgressableMarker* MarkerClass;//[Offset: 0x490, Size: 0x8]
	int8 Team;//[Offset: 0x498, Size: 0x1]
	enum GadgetSlotType;//[Offset: 0x499, Size: 0x1]
	PlayerController* OwningController;//[Offset: 0x4a0, Size: 0x8]
	WW3ProgressableMarker* MarkerComponent;//[Offset: 0x4a8, Size: 0x8]
	WW3PlayerState* Cached_PlayerState;//[Offset: 0x4b0, Size: 0x8]
	WW3PlayerState* Destroyer_PlayerState;//[Offset: 0x4b8, Size: 0x8]
	class WW3InventoryItem* InventoryItemClass;//[Offset: 0x4c0, Size: 0x8]
	void OnHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComponent, Vector NormalImpulse, HitResult Hit);// 0xfbf400
	void OnAttachParentCharacterDied();// 0xfbf030

--------------------------------
Class: ShooterExplosionEffect.Actor.Object
	ParticleSystem* ExplosionFX;//[Offset: 0x330, Size: 0x28]
	ParticleSystem*[] ExplosionFXArray;//[Offset: 0x358, Size: 0x10]
	Vector ExplosionFXScale;//[Offset: 0x368, Size: 0xc]
	WW3CameraShakeParams CameraShake;//[Offset: 0x378, Size: 0x30]
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x3a8, Size: 0x8]
	enum ForceFeedbackEffectType;//[Offset: 0x3b0, Size: 0x1]
	ParticleSystem* SelectedExplosionParticle;//[Offset: 0x3b8, Size: 0x28]
	ParticleSystemComponent* SpawnedParticleSystem;//[Offset: 0x3f8, Size: 0x8]
	PointLightComponent* ExplosionLight;//[Offset: 0x400, Size: 0x8]
	float ExplosionLightFadeOut;//[Offset: 0x408, Size: 0x4]
	float MinLifeTime;//[Offset: 0x40c, Size: 0x4]
	AkAudioEvent* ExplosionSoundAk;//[Offset: 0x410, Size: 0x8]
	AkAudioEvent* ExplosionSoundAk_Short;//[Offset: 0x418, Size: 0x8]
	bool bUseShortExplosionSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	enum ExplosionSoundDistance;//[Offset: 0x421, Size: 0x1]
	bool bDisableAnyAudioLateReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x422, Size: 0x1]
	DecalData decal;//[Offset: 0x428, Size: 0x30]
	HitResult SurfaceHit;//[Offset: 0x458, Size: 0x88]
	bool bForceOverrideWorldRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 0x1]
	Rotator ForcedWorldRotation;//[Offset: 0x4e4, Size: 0xc]

--------------------------------
Class: WW3CameraShakeParams
	class CameraShake* CameraShake;//[Offset: 0x0, Size: 0x8]
	float BaseStrength;//[Offset: 0x8, Size: 0x4]
	float InnerRadius;//[Offset: 0xc, Size: 0x4]
	float OuterRadius;//[Offset: 0x10, Size: 0x4]
	bool bShouldIncrementAdrenaline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	CurveFloat* CharacterShakeStrengthToAdrenalineCurve;//[Offset: 0x18, Size: 0x8]
	CurveFloat* VehicleShakeStrengthToAdrenalineCurve;//[Offset: 0x20, Size: 0x8]
	CurveFloat* FalloffCurve;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AkAudioEvent.Object
	AkAudioBank* RequiredBank;//[Offset: 0x28, Size: 0x8]
	float MaxAttenuationRadius;//[Offset: 0x30, Size: 0x4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	float MinimumDuration;//[Offset: 0x38, Size: 0x4]
	float MaximumDuration;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: AkAudioBank.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: DecalData
	MaterialInterface* DecalMaterial;//[Offset: 0x0, Size: 0x28]
	float DecalSize;//[Offset: 0x28, Size: 0x4]
	float LifeSpan;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: WW3RestoreComponentNew.SceneComponent.ActorComponent.Object
	byte PercentageLeft;//[Offset: 0x260, Size: 0x1]
	int8 SavedTeam;//[Offset: 0x261, Size: 0x1]
	float RestoreAmountPerSingleTry;//[Offset: 0x264, Size: 0x4]
	int RestoringAmountMax;//[Offset: 0x268, Size: 0x4]
	WW3RestorePoints TeamMemberRestore;//[Offset: 0x270, Size: 0x8]
	WW3RestorePoints SquadMemberRestore;//[Offset: 0x278, Size: 0x8]
	enum RestoreComponentType;//[Offset: 0x280, Size: 0x1]
	WW3AkComponent* RestoreSoundComponent;//[Offset: 0x288, Size: 0x8]
	void OnRep_PercentageLeft();// 0x1079a30

--------------------------------
Class: WW3RestorePoints
	enum ScoreType;//[Offset: 0x0, Size: 0x1]
	float ValuePerRestoreUnit;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WW3AkComponent.AkComponent.SceneComponent.ActorComponent.Object
	WW3AkComponentAttachDataCache AttachDataCache;//[Offset: 0x4c0, Size: 0x30]
	WW3AudioSingleton* CachedAudioSingleton;//[Offset: 0x4f0, Size: 0x8]
	bool bOverrideAudibleDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 0x1]
	<float,None(None)> AudibleDistancesForGameplaySounds;//[Offset: 0x500, Size: 0x50]
	<float,None(None)> AudibleDistancesForCosmeticSounds;//[Offset: 0x550, Size: 0x50]
	enum OcclusionRefreshRate;//[Offset: 0x5a0, Size: 0x1]
	enum AudibleDistance;//[Offset: 0x5a1, Size: 0x1]
	enum SoundPriority;//[Offset: 0x5a2, Size: 0x1]
	bool bCalculateFloorDifference;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a3, Size: 0x1]
	interface class None* AttachmentInstance;//[Offset: 0x670, Size: 0x10]
	void SyncContinuousEvents();// 0xf2b740
	void StopContinuousEvent(int ID);// 0xf2b6c0
	void StopAllContinuousEvents();// 0xf2b6a0
	void SetAudioPriority(enum InPriority);// 0xf2b470
	void SetAudibleDistance(enum InAudibleDistance);// 0xf2b3f0
	void PostEventAsLooped(AkAudioEvent* AkEvent, int ReturnValue);// 0xf2af50
	void PostEventAsContinuous(AkAudioEvent* AkEvent, float EventDuration, float StartPosition, int ReturnValue);// 0xf2ae50
	void GetComponentAudibleDistance(float ReturnValue);// 0xf2ad00

--------------------------------
Class: AkComponent.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	float EmitterZOffset;//[Offset: 0x254, Size: 0x4]
	float AudiableSquaredDistance;//[Offset: 0x258, Size: 0x4]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x260, Size: 0x8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x268, Size: 0x10]
	int EarlyReflectionOrder;//[Offset: 0x278, Size: 0x4]
	float EarlyReflectionBusSendGain;//[Offset: 0x27c, Size: 0x4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x280, Size: 0x4]
	byte OcclusionCollisionChannel;//[Offset: 0x284, Size: 0x1]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28c, Size: 0x1]
	float roomReverbAuxBusGain;//[Offset: 0x290, Size: 0x4]
	int diffractionMaxEdges;//[Offset: 0x294, Size: 0x4]
	int diffractionMaxPaths;//[Offset: 0x298, Size: 0x4]
	float diffractionMaxPathLength;//[Offset: 0x29c, Size: 0x4]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 0x1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a0, Size: 0x1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a0, Size: 0x1]
	bool DrawGeometricDiffraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a0, Size: 0x1]
	bool DrawSoundPropagation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a0, Size: 0x1]
	bool bUseMultiplePositions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	float AttenuationScalingFactor;//[Offset: 0x2c4, Size: 0x4]
	float OcclusionRefreshInterval;//[Offset: 0x2c8, Size: 0x4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x2d0, Size: 0x8]
	FString EventName;//[Offset: 0x2d8, Size: 0x10]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x545a10
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x545630
	void Stop();// 0x5451d0
	void SetUseSpatialAudio(bool bNewValue);// 0x544ce0
	void SetSwitch(FString SwitchGroup, FString SwitchState);// 0x544a80
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x5449f0
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x544560
	void SetOutputBusVolume(float BusVolume);// 0x5443b0
	void SetMultiplePositions(Transform[] Positions);// 0x544080
	void SetListeners(AkComponent*[] Listeners);// 0x543e10
	void SetAttenuationScalingFactor(float Value);// 0x543bb0
	void PostTrigger(FString Trigger);// 0x5438e0
	void PostAssociatedAkEventWithoutCallback(int ReturnValue);// 0x543110
	void PostAssociatedAkEventAndWaitForEnd(LatentActionInfo LatentInfo, int ReturnValue);// 0x543050
	void PostAssociatedAkEvent(int CallbackMask, delegate PostEventCallback, int ReturnValue);// 0x542f40
	void PostAkEventWithCallback(AkAudioEvent* AkEvent, int CallbackMask, delegate PostEventCallback, FString in_EventName, int ReturnValue);// 0x542bb0
	void PostAkEventByName(FString in_EventName, int ReturnValue);// 0x542b00
	void PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, LatentActionInfo LatentInfo, int ReturnValue);// 0x5429b0
	void PostAkEvent(AkAudioEvent* AkEvent, FString in_EventName, int ReturnValue);// 0x5428c0
	void GetRTPCValue(FString RTPC, float ReturnValue);// 0x542180
	void GetAttenuationRadius(float ReturnValue);// 0x5420c0
	void BP_PostEventByEventObject(AkAudioEvent* InEventObject, int ReturnValue);// 0x541bc0

--------------------------------
Class: AkAuxBus.Object
	AkAudioBank* RequiredBank;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WW3AkComponentAttachDataCache
	SceneComponent* AttachParent;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WW3AudioSingleton.Object
	AkAudioBank*[] AudioBanks_AlwaysLoaded;//[Offset: 0x28, Size: 0x10]
	AkAudioBank*[] AudioBanks_Gameplay;//[Offset: 0x38, Size: 0x10]
	<WW3PerMapBanks,None(None)> AudioBanks_PerMap;//[Offset: 0x48, Size: 0x50]
	<WW3PerMapBanks,None(None)> AudioBanks_PerMode;//[Offset: 0x98, Size: 0x50]
	bool bGenerateBanksTextFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bFillDynamicAudioBanks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	DataTable* BarksDataTable;//[Offset: 0xf0, Size: 0x8]
	DataTable* CentralRadioDataTable;//[Offset: 0xf8, Size: 0x8]
	AkAudioBank*[] DynamicAudioBanks;//[Offset: 0x100, Size: 0x10]
	<AkAudioBank*,None(None)> FPPItemsBanks;//[Offset: 0x110, Size: 0x50]
	<AkAudioBank*,None(None)> TPPItemsBanks;//[Offset: 0x160, Size: 0x50]
	WW3CommanderAudioBank[] CommanderAudioBanks;//[Offset: 0x1b0, Size: 0x10]
	WW3GlobalAudioSettings Settings;//[Offset: 0x1c0, Size: 0xf8]
	AkAudioEvent* EnterBattleZoneSound;//[Offset: 0x2b8, Size: 0x8]
	AkAudioEvent* ExitBattleZoneSound;//[Offset: 0x2c0, Size: 0x8]
	AkAudioEvent* ActionUnavailableSound;//[Offset: 0x2c8, Size: 0x8]
	AkAudioEvent* PlayRagdollHitSound;//[Offset: 0x2d0, Size: 0x8]
	AkAudioEvent* EnterReconMissionSound;//[Offset: 0x2d8, Size: 0x8]
	AkAudioEvent* PositiveXPPointsSound;//[Offset: 0x2e0, Size: 0x8]
	AkAudioEvent* NegativeXPPointsSound;//[Offset: 0x2e8, Size: 0x8]
	AkAudioEvent* SniperShotAdditionalEvent;//[Offset: 0x2f0, Size: 0x8]
	AkAudioEvent* OtherWeaponsAdditionalEvent;//[Offset: 0x2f8, Size: 0x8]
	AkAudioEvent* DogTagPickedUp;//[Offset: 0x300, Size: 0x8]
	AkAudioEvent* CapturePointScoreLeftSound;//[Offset: 0x308, Size: 0x8]
	AkAudioEvent* CapturePointDepletedSound;//[Offset: 0x310, Size: 0x8]
	AkAudioEvent* NewCapturePointSound;//[Offset: 0x318, Size: 0x8]
	WW3SoundEffect StartRunSound;//[Offset: 0x320, Size: 0x10]
	WW3SoundEffect StopRunSound;//[Offset: 0x330, Size: 0x10]
	WW3SoundEffect CrouchSound;//[Offset: 0x340, Size: 0x10]
	WW3SoundEffect ProneStandupSound;//[Offset: 0x350, Size: 0x10]
	WW3SoundEffect JumpSound;//[Offset: 0x360, Size: 0x10]
	WW3SoundEffect DeadlyJumpSound;//[Offset: 0x370, Size: 0x10]
	WW3SoundEffect VaultSound;//[Offset: 0x380, Size: 0x10]
	WW3SoundEffect ProneToOnBackTransitionSound;//[Offset: 0x390, Size: 0x10]
	WW3SoundEffect OnBackToProneTransitionSound;//[Offset: 0x3a0, Size: 0x10]
	WW3SoundEffect CharacterNoiseSound;//[Offset: 0x3b0, Size: 0x10]
	WW3SoundEffect MeleeSound;//[Offset: 0x3c0, Size: 0x10]
	AkAudioEvent* OnEnemySpottedSound;//[Offset: 0x3d0, Size: 0x8]
	AkAudioEvent* OnGadgetAutoRegenerate;//[Offset: 0x3d8, Size: 0x8]
	AkAudioEvent* OnGadgetUseFailed;//[Offset: 0x3e0, Size: 0x8]
	AkAudioEvent* NoGrenadesPostAction;//[Offset: 0x3e8, Size: 0x8]
	AkAudioEvent* NoGadgetsPostAction;//[Offset: 0x3f0, Size: 0x8]
	AkAudioEvent* OnEarRingingSound;//[Offset: 0x3f8, Size: 0x8]
	AkAudioEvent* OnEarRingingSoundReset;//[Offset: 0x400, Size: 0x8]
	AkAudioEvent* FootstepsPlayerBreathStart;//[Offset: 0x408, Size: 0x8]
	AkAudioEvent* FootstepsPlayerBreathStop;//[Offset: 0x410, Size: 0x8]
	WW3SoundEffect BreathingFastStart;//[Offset: 0x418, Size: 0x10]
	WW3SoundEffect BreathingFastStop;//[Offset: 0x428, Size: 0x10]
	WW3SoundEffect BreathingSlowStart;//[Offset: 0x438, Size: 0x10]
	WW3SoundEffect BreathingSlowStop;//[Offset: 0x448, Size: 0x10]
	WW3SoundEffect CoughingStart;//[Offset: 0x458, Size: 0x10]
	WW3SoundEffect CoughingStop;//[Offset: 0x468, Size: 0x10]
	WW3SoundEffect CoughSingle;//[Offset: 0x478, Size: 0x10]
	float CoughSingleDuration;//[Offset: 0x488, Size: 0x4]
	float CoughSingleCooldown;//[Offset: 0x48c, Size: 0x4]
	WW3SoundEffect TakeBreath;//[Offset: 0x490, Size: 0x10]
	WW3SoundEffect ReleaseBreath;//[Offset: 0x4a0, Size: 0x10]
	WW3SoundEffect AbortBreath;//[Offset: 0x4b0, Size: 0x10]
	WW3SoundEffect TargetingBreathingStart;//[Offset: 0x4c0, Size: 0x10]
	WW3SoundEffect TargetingBreathingStop;//[Offset: 0x4d0, Size: 0x10]
	enum[] TargetingMagnifications;//[Offset: 0x4e0, Size: 0x10]
	float TargetingDelay;//[Offset: 0x4f0, Size: 0x4]
	CurveFloat* BreathingFastCurve;//[Offset: 0x4f8, Size: 0x8]
	CurveFloat* BreathingSlowCurve;//[Offset: 0x500, Size: 0x8]
	CurveFloat* BreathingSlowCrouchCurve;//[Offset: 0x508, Size: 0x8]
	CurveFloat* BreathingFastEndCurve;//[Offset: 0x510, Size: 0x8]
	CurveFloat* BreathingSlowEndCurve;//[Offset: 0x518, Size: 0x8]
	CurveFloat* BreathingSlowCrouchEndCurve;//[Offset: 0x520, Size: 0x8]
	AkAudioEvent* MovementState_Owner_Crouch;//[Offset: 0x528, Size: 0x8]
	AkAudioEvent* MovementState_Owner_CrouchWalk;//[Offset: 0x530, Size: 0x8]
	AkAudioEvent* MovementState_Owner_CrouchSprint;//[Offset: 0x538, Size: 0x8]
	AkAudioEvent* MovementState_Owner_OnBack;//[Offset: 0x540, Size: 0x8]
	AkAudioEvent* MovementState_Owner_Prone;//[Offset: 0x548, Size: 0x8]
	AkAudioEvent* MovementState_Owner_Sprint;//[Offset: 0x550, Size: 0x8]
	AkAudioEvent* MovementState_Owner_SprintTurbo;//[Offset: 0x558, Size: 0x8]
	AkAudioEvent* MovementState_Owner_Stand;//[Offset: 0x560, Size: 0x8]
	AkAudioEvent* MovementState_Owner_Walk;//[Offset: 0x568, Size: 0x8]
	AkAudioEvent* MovementState_Owner_Slide;//[Offset: 0x570, Size: 0x8]
	AkAudioEvent* MovementState_Owner_InSeat;//[Offset: 0x578, Size: 0x8]
	AkAudioEvent* MovementState_Owner_Knockdown;//[Offset: 0x580, Size: 0x8]
	AkAudioEvent* MovementState_Ally_Crouch;//[Offset: 0x588, Size: 0x8]
	AkAudioEvent* MovementState_Ally_CrouchWalk;//[Offset: 0x590, Size: 0x8]
	AkAudioEvent* MovementState_Ally_CrouchSprint;//[Offset: 0x598, Size: 0x8]
	AkAudioEvent* MovementState_Ally_OnBack;//[Offset: 0x5a0, Size: 0x8]
	AkAudioEvent* MovementState_Ally_Prone;//[Offset: 0x5a8, Size: 0x8]
	AkAudioEvent* MovementState_Ally_Sprint;//[Offset: 0x5b0, Size: 0x8]
	AkAudioEvent* MovementState_Ally_SprintTurbo;//[Offset: 0x5b8, Size: 0x8]
	AkAudioEvent* MovementState_Ally_Stand;//[Offset: 0x5c0, Size: 0x8]
	AkAudioEvent* MovementState_Ally_Walk;//[Offset: 0x5c8, Size: 0x8]
	AkAudioEvent* MovementState_Ally_Slide;//[Offset: 0x5d0, Size: 0x8]
	AkAudioEvent* MovementState_Ally_InSeat;//[Offset: 0x5d8, Size: 0x8]
	AkAudioEvent* MovementState_Ally_Knockdown;//[Offset: 0x5e0, Size: 0x8]
	AkAudioEvent* MovementState_Enemy_Crouch;//[Offset: 0x5e8, Size: 0x8]
	AkAudioEvent* MovementState_Enemy_CrouchWalk;//[Offset: 0x5f0, Size: 0x8]
	AkAudioEvent* MovementState_Enemy_CrouchSprint;//[Offset: 0x5f8, Size: 0x8]
	AkAudioEvent* MovementState_Enemy_OnBack;//[Offset: 0x600, Size: 0x8]
	AkAudioEvent* MovementState_Enemy_Prone;//[Offset: 0x608, Size: 0x8]
	AkAudioEvent* MovementState_Enemy_Sprint;//[Offset: 0x610, Size: 0x8]
	AkAudioEvent* MovementState_Enemy_SprintTurbo;//[Offset: 0x618, Size: 0x8]
	AkAudioEvent* MovementState_Enemy_Stand;//[Offset: 0x620, Size: 0x8]
	AkAudioEvent* MovementState_Enemy_Walk;//[Offset: 0x628, Size: 0x8]
	AkAudioEvent* MovementState_Enemy_Slide;//[Offset: 0x630, Size: 0x8]
	AkAudioEvent* MovementState_Enemy_InSeat;//[Offset: 0x638, Size: 0x8]
	AkAudioEvent* MovementState_Enemy_Knockdown;//[Offset: 0x640, Size: 0x8]
	AkAudioEvent* WeaponState_Ally_Aim;//[Offset: 0x648, Size: 0x8]
	AkAudioEvent* WeaponState_Ally_AimStop;//[Offset: 0x650, Size: 0x8]
	AkAudioEvent* WeaponState_Ally_Reload;//[Offset: 0x658, Size: 0x8]
	AkAudioEvent* WeaponState_Ally_Shooting;//[Offset: 0x660, Size: 0x8]
	AkAudioEvent* WeaponState_Enemy_Aim;//[Offset: 0x668, Size: 0x8]
	AkAudioEvent* WeaponState_Enemy_AimStop;//[Offset: 0x670, Size: 0x8]
	AkAudioEvent* WeaponState_Enemy_Reload;//[Offset: 0x678, Size: 0x8]
	AkAudioEvent* WeaponState_Enemy_Shooting;//[Offset: 0x680, Size: 0x8]
	CurveFloat* PlayerBreathEnterCurve;//[Offset: 0x688, Size: 0x8]
	CurveFloat* PlayerBreathLeaveCurve;//[Offset: 0x690, Size: 0x8]
	WW3SoundEffect CharacterTransitionTest1;//[Offset: 0x698, Size: 0x10]
	WW3SoundEffect CharacterTransitionTest2;//[Offset: 0x6a8, Size: 0x10]
	WW3SoundEffect CharacterTransitionTest3;//[Offset: 0x6b8, Size: 0x10]
	WW3SoundEffect CharacterTransitionTest4;//[Offset: 0x6c8, Size: 0x10]
	WW3SoundEffect CharacterTransitionTest5;//[Offset: 0x6d8, Size: 0x10]
	WW3SoundEffect CharacterTransitionTest6;//[Offset: 0x6e8, Size: 0x10]
	WW3SoundEffect CharacterTransitionTest7;//[Offset: 0x6f8, Size: 0x10]
	WW3SoundEffect CharacterTransitionTest8;//[Offset: 0x708, Size: 0x10]
	WW3SoundEffect CharacterTransitionTest9;//[Offset: 0x718, Size: 0x10]
	WW3SoundEffect CharacterTransitionTest10;//[Offset: 0x728, Size: 0x10]
	WW3SoundEffect CharacterTransitionSounds1;//[Offset: 0x738, Size: 0x10]
	WW3SoundEffect CharacterTransitionSounds2;//[Offset: 0x748, Size: 0x10]
	WW3SoundEffect CharacterTransitionSounds3;//[Offset: 0x758, Size: 0x10]
	WW3SoundEffect CharacterTransitionSounds4;//[Offset: 0x768, Size: 0x10]
	WW3SoundEffect CharacterTransitionSounds5;//[Offset: 0x778, Size: 0x10]
	WW3SoundEffect CharacterTransitionSounds6;//[Offset: 0x788, Size: 0x10]
	WW3SoundEffect CharacterTransitionSounds7;//[Offset: 0x798, Size: 0x10]
	WW3SoundEffect CharacterTransitionSounds8;//[Offset: 0x7a8, Size: 0x10]
	WW3SoundEffect CharacterTransitionSounds9;//[Offset: 0x7b8, Size: 0x10]
	WW3SoundEffect CharacterTransitionSounds10;//[Offset: 0x7c8, Size: 0x10]
	WW3SoundEffect SlideStart;//[Offset: 0x7d8, Size: 0x10]
	WW3SoundEffect SlideStop;//[Offset: 0x7e8, Size: 0x10]
	WW3SoundEffect RadioEquip;//[Offset: 0x7f8, Size: 0x10]
	WW3SoundEffect RadioUnequip;//[Offset: 0x808, Size: 0x10]
	WW3SoundEffect RadioUse1;//[Offset: 0x818, Size: 0x10]
	WW3SoundEffect RadioUse2;//[Offset: 0x828, Size: 0x10]
	WW3SoundEffect TabletEquip;//[Offset: 0x838, Size: 0x10]
	WW3SoundEffect TabletUnequip;//[Offset: 0x848, Size: 0x10]
	WW3SoundEffect TabletUse1;//[Offset: 0x858, Size: 0x10]
	WW3SoundEffect TabletUse2;//[Offset: 0x868, Size: 0x10]
	WW3SoundEffect PackUse1;//[Offset: 0x878, Size: 0x10]
	WW3SoundEffect PackUse2;//[Offset: 0x888, Size: 0x10]
	WW3SoundEffect KnockdownStarted;//[Offset: 0x898, Size: 0x10]
	WW3SoundEffect KnockdownEnded;//[Offset: 0x8a8, Size: 0x10]
	AkAudioEvent* LocalKnockdownEnded_Revived;//[Offset: 0x8b8, Size: 0x8]
	AkAudioEvent* LocalKnockdownEnded_Died;//[Offset: 0x8c0, Size: 0x8]
	WW3SoundEffect GenericClothLong;//[Offset: 0x8c8, Size: 0x10]
	WW3SoundEffect GenericClothMedium;//[Offset: 0x8d8, Size: 0x10]
	WW3SoundEffect GenericClothShort;//[Offset: 0x8e8, Size: 0x10]
	WW3SoundEffect GenericActionsFast;//[Offset: 0x8f8, Size: 0x10]
	WW3SoundEffect GenericActionsMedium;//[Offset: 0x908, Size: 0x10]
	WW3SoundEffect GenericActionsSlow;//[Offset: 0x918, Size: 0x10]
	WW3SoundEffect GenericActionsVerySlow;//[Offset: 0x928, Size: 0x10]
	WW3SoundEffect GenericActionsUltraSlow;//[Offset: 0x938, Size: 0x10]
	WW3SoundEffect BodyfallKickFront;//[Offset: 0x948, Size: 0x10]
	WW3SoundEffect BodyfallKickBackward;//[Offset: 0x958, Size: 0x10]
	WW3SoundEffect StepsGeneric;//[Offset: 0x968, Size: 0x10]
	WW3SoundEffect ActionsHandGun;//[Offset: 0x978, Size: 0x10]
	WW3SoundEffect ActionsGun;//[Offset: 0x988, Size: 0x10]
	WW3SoundEffect ActionsGrenadeDeEquip;//[Offset: 0x998, Size: 0x10]
	WW3SoundEffect ActionsGrenadePull;//[Offset: 0x9a8, Size: 0x10]
	WW3SoundEffect ActionsGrenadeThrow;//[Offset: 0x9b8, Size: 0x10]
	WW3SoundEffect ActionsAiming;//[Offset: 0x9c8, Size: 0x10]
	WW3SoundEffect ActionsAimingStop;//[Offset: 0x9d8, Size: 0x10]
	WW3SoundEffect ActionsCrawlingFrontInit;//[Offset: 0x9e8, Size: 0x10]
	WW3SoundEffect ActionsCrawlingFront;//[Offset: 0x9f8, Size: 0x10]
	WW3SoundEffect ActionsCrawlingBackInit;//[Offset: 0xa08, Size: 0x10]
	WW3SoundEffect ActionsCrawlingBack;//[Offset: 0xa18, Size: 0x10]
	WW3SoundEffect ActionsCrawlingAsideInit;//[Offset: 0xa28, Size: 0x10]
	WW3SoundEffect ActionsCrawlingAside;//[Offset: 0xa38, Size: 0x10]
	WW3SoundEffect ActionsCrawlingReviveFrontInit;//[Offset: 0xa48, Size: 0x10]
	WW3SoundEffect ActionsCrawlingReviveFront;//[Offset: 0xa58, Size: 0x10]
	WW3SoundEffect ActionsCrawlingReviveBackInit;//[Offset: 0xa68, Size: 0x10]
	WW3SoundEffect ActionsCrawlingReviveBack;//[Offset: 0xa78, Size: 0x10]
	WW3SoundEffect ActionsCrawlingReviveAsideInit;//[Offset: 0xa88, Size: 0x10]
	WW3SoundEffect ActionsCrawlingReviveAside;//[Offset: 0xa98, Size: 0x10]
	WW3SoundEffect ActionsCrawlingBackwardBackInit;//[Offset: 0xaa8, Size: 0x10]
	WW3SoundEffect ActionsCrawlingBackwardBack;//[Offset: 0xab8, Size: 0x10]
	WW3SoundEffect ActionsCrawlingBackwardAsideInit;//[Offset: 0xac8, Size: 0x10]
	WW3SoundEffect ActionsCrawlingBackwardAside;//[Offset: 0xad8, Size: 0x10]
	WW3SoundEffect ActionsFallingProne;//[Offset: 0xae8, Size: 0x10]
	WW3SoundEffect ActionsFallingBack;//[Offset: 0xaf8, Size: 0x10]
	WW3SoundEffect ActionsJumping;//[Offset: 0xb08, Size: 0x10]
	WW3SoundEffect ActionsLanding;//[Offset: 0xb18, Size: 0x10]
	WW3SoundEffect ActionsLandingMedium;//[Offset: 0xb28, Size: 0x10]
	WW3SoundEffect ActionsLandingHard;//[Offset: 0xb38, Size: 0x10]
	WW3SoundEffect ActionsClimbingInit;//[Offset: 0xb48, Size: 0x10]
	WW3SoundEffect ActionsClimbing;//[Offset: 0xb58, Size: 0x10]
	WW3SoundEffect ActionsHighClimbingInit;//[Offset: 0xb68, Size: 0x10]
	WW3SoundEffect ActionsHighClimbing;//[Offset: 0xb78, Size: 0x10]
	WW3SoundEffect ActionsVaultingInit;//[Offset: 0xb88, Size: 0x10]
	WW3SoundEffect ActionsVaulting;//[Offset: 0xb98, Size: 0x10]
	WW3SoundEffect ActionsPropping;//[Offset: 0xba8, Size: 0x10]
	WW3SoundEffect ActionsGrabbing;//[Offset: 0xbb8, Size: 0x10]
	WW3SoundEffect ActionsGroundTurning;//[Offset: 0xbc8, Size: 0x10]
	WW3SoundEffect ActionsPulling;//[Offset: 0xbd8, Size: 0x10]
	WW3SoundEffect ActionsMeele;//[Offset: 0xbe8, Size: 0x10]
	WW3SoundEffect ActionsWeaponChecking;//[Offset: 0xbf8, Size: 0x10]
	WW3SoundEffect ActionsSwinging;//[Offset: 0xc08, Size: 0x10]
	WW3SoundEffect ActionsSliding;//[Offset: 0xc18, Size: 0x10]
	WW3SoundEffect ActionsSlidingStart;//[Offset: 0xc28, Size: 0x10]
	WW3SoundEffect ActionsSlidingStop;//[Offset: 0xc38, Size: 0x10]
	WW3SoundEffect TransitionStandOnBack;//[Offset: 0xc48, Size: 0x10]
	WW3SoundEffect TransitionCrouchProne;//[Offset: 0xc58, Size: 0x10]
	WW3SoundEffect TransitionProneCrouch;//[Offset: 0xc68, Size: 0x10]
	WW3SoundEffect TransitionCrouchOnBack;//[Offset: 0xc78, Size: 0x10]
	WW3SoundEffect TransitionStandCrouch;//[Offset: 0xc88, Size: 0x10]
	WW3SoundEffect TransitionCrouchStand;//[Offset: 0xc98, Size: 0x10]
	WW3SoundEffect TransitionProneStand;//[Offset: 0xca8, Size: 0x10]
	WW3SoundEffect TransitionStandProne;//[Offset: 0xcb8, Size: 0x10]
	WW3SoundEffect TransitionOnBackStand;//[Offset: 0xcc8, Size: 0x10]
	WW3SoundEffect TransitionOnBackCrouch;//[Offset: 0xcd8, Size: 0x10]
	WW3SoundEffect NonVerbalBreathsInhaling;//[Offset: 0xce8, Size: 0x10]
	WW3SoundEffect NonVerbalBreathsExhaling;//[Offset: 0xcf8, Size: 0x10]
	WW3SoundEffect NonVerbalEffortShort;//[Offset: 0xd08, Size: 0x10]
	WW3SoundEffect NonVerbalEffortLong;//[Offset: 0xd18, Size: 0x10]
	WW3SoundEffect NonVerbalPainShort;//[Offset: 0xd28, Size: 0x10]
	WW3SoundEffect NonVerbalPainLong;//[Offset: 0xd38, Size: 0x10]
	enum NonVerbalDeath;//[Offset: 0xd48, Size: 0x2]
	AkAudioEvent* SpectatorNextPlayer;//[Offset: 0xd50, Size: 0x8]
	AkAudioEvent* SpectatorAmbientStart;//[Offset: 0xd58, Size: 0x8]
	AkAudioEvent* SpectatorAmbientStop;//[Offset: 0xd60, Size: 0x8]
	<WW3PostfixesArray,None(None)> BarksVoiceSetsPostfixes;//[Offset: 0xd68, Size: 0x50]
	<WW3RadioCommanderPostfixesArray,None(None)> RadioCommanderLanguagePostfixes;//[Offset: 0xdb8, Size: 0x50]
	AkAudioEvent* ObjectiveReceived;//[Offset: 0xe08, Size: 0x8]
	AkAudioEvent* ObjectiveRemoved;//[Offset: 0xe10, Size: 0x8]
	AkAudioEvent* ObjectiveCompleted;//[Offset: 0xe18, Size: 0x8]
	AkAudioEvent* ObjectiveFailed;//[Offset: 0xe20, Size: 0x8]
	WW3SoundEffect OnHealthRequired;//[Offset: 0xe28, Size: 0x10]
	WW3SoundEffect OnAmmoRequired;//[Offset: 0xe38, Size: 0x10]
	WW3SoundEffect OnArmorRequired;//[Offset: 0xe48, Size: 0x10]
	WW3SoundEffect OnMinesRequired;//[Offset: 0xe58, Size: 0x10]
	WW3SoundEffect OnDronesRequired;//[Offset: 0xe68, Size: 0x10]
	WW3SoundEffect OnEquipmentRequired;//[Offset: 0xe78, Size: 0x10]
	AkAudioEvent* TargetCapturePointChanged;//[Offset: 0xe88, Size: 0x8]
	WW3SoundEffect OnRestoreStarted;//[Offset: 0xe90, Size: 0x10]
	WW3SoundEffect OnRestoreFailed;//[Offset: 0xea0, Size: 0x10]
	AkAudioEvent* OnHealthRestored;//[Offset: 0xeb0, Size: 0x8]
	WW3SoundEffect OnHealthFull;//[Offset: 0xeb8, Size: 0x10]
	AkAudioEvent* OnAmmoRestored;//[Offset: 0xec8, Size: 0x8]
	WW3SoundEffect OnAmmoFull;//[Offset: 0xed0, Size: 0x10]
	AkAudioEvent* OnArmorRestored;//[Offset: 0xee0, Size: 0x8]
	WW3SoundEffect OnArmorFull;//[Offset: 0xee8, Size: 0x10]
	AkAudioEvent* OnMinesRestored;//[Offset: 0xef8, Size: 0x8]
	WW3SoundEffect OnMinesFull;//[Offset: 0xf00, Size: 0x10]
	AkAudioEvent* OnDronesRestored;//[Offset: 0xf10, Size: 0x8]
	WW3SoundEffect OnDronesFull;//[Offset: 0xf18, Size: 0x10]
	AkAudioEvent* OnEquipmentRestored;//[Offset: 0xf28, Size: 0x8]
	WW3SoundEffect OnEquipmentFull;//[Offset: 0xf30, Size: 0x10]
	WW3CharacterNotifications CharacterSoundNotifications;//[Offset: 0xf40, Size: 0x280]
	AkAudioEvent* ChangeAudioTypeNotification;//[Offset: 0x11c0, Size: 0x8]
	WW3SoundEffect VehicleVestSoundNorifications;//[Offset: 0x11c8, Size: 0x10]
	WW3SoundEffect VehicleHeadwearSoundNorifications;//[Offset: 0x11d8, Size: 0x10]
	AkAudioEvent* VehicleDealingDamageNotification;//[Offset: 0x11e8, Size: 0x8]
	AkAudioEvent* VehicleTakingDamageNotification;//[Offset: 0x11f0, Size: 0x8]
	AkAudioEvent* StartLoadingGameMusicEvent;//[Offset: 0x11f8, Size: 0x8]
	AkAudioEvent* EndLoadingGameMusicEvent;//[Offset: 0x1200, Size: 0x8]
	AkAudioEvent* MenuClickEvent;//[Offset: 0x1208, Size: 0x8]
	AkAudioEvent* MenuHoverEvent;//[Offset: 0x1210, Size: 0x8]
	AkAudioEvent* MenuBackEvent;//[Offset: 0x1218, Size: 0x8]
	AkAudioEvent* Query;//[Offset: 0x1220, Size: 0x8]
	AkAudioEvent* MenuErrorEvent;//[Offset: 0x1228, Size: 0x8]
	AkAudioEvent* ShowLocationPickerEvent;//[Offset: 0x1230, Size: 0x8]
	AkAudioEvent* HideLocationPickerEvent;//[Offset: 0x1238, Size: 0x8]
	AkAudioEvent* DeployScreenMusic;//[Offset: 0x1240, Size: 0x8]
	AkAudioEvent* DeployScreenMusicEnd;//[Offset: 0x1248, Size: 0x8]
	AkAudioEvent* DeployScreenRespawnFailedCPContested;//[Offset: 0x1250, Size: 0x8]
	AkAudioEvent* DeployScreenRespawnFailedSoldierVehicle;//[Offset: 0x1258, Size: 0x8]
	AkAudioEvent* OnEscMenuShow;//[Offset: 0x1260, Size: 0x8]
	AkAudioEvent* OnEscMenuHide;//[Offset: 0x1268, Size: 0x8]
	AkAudioEvent* OnInitialLoadoutsMenuShow;//[Offset: 0x1270, Size: 0x8]
	AkAudioEvent* OnInitialLoadoutsMenuHide;//[Offset: 0x1278, Size: 0x8]
	AkAudioEvent* OnKillScreenMenuShow;//[Offset: 0x1280, Size: 0x8]
	AkAudioEvent* OnKillScreenMenuHide;//[Offset: 0x1288, Size: 0x8]
	AkAudioEvent* OnKillScreenBlinkEvent;//[Offset: 0x1290, Size: 0x8]
	AkAudioEvent* OnKillScreenClickIsNotAllowedEvent;//[Offset: 0x1298, Size: 0x8]
	AkAudioEvent* TDMRoundSummaryScreenPointsCounterEvent;//[Offset: 0x12a0, Size: 0x8]
	AkAudioEvent* ChatReceivedMessage;//[Offset: 0x12a8, Size: 0x8]
	AkAudioEvent* APSDetectedMissileNotifications;//[Offset: 0x12b0, Size: 0x8]
	AkAudioEvent* APSDestroyedMissileNotifications;//[Offset: 0x12b8, Size: 0x8]
	AkAudioEvent* APSReadyToShootNotifications;//[Offset: 0x12c0, Size: 0x8]
	AkAudioEvent* APSActivatedNotification;//[Offset: 0x12c8, Size: 0x8]
	AkAudioEvent* APSDeactivatedNotification;//[Offset: 0x12d0, Size: 0x8]
	AkAudioEvent* VehicleAlternativeVisionSound;//[Offset: 0x12d8, Size: 0x8]
	AkAudioEvent* VehicleZoomSound;//[Offset: 0x12e0, Size: 0x8]
	AkAudioEvent* VehicleCameraChangeSound;//[Offset: 0x12e8, Size: 0x8]
	AkAudioEvent* VehicleNextVisionSound;//[Offset: 0x12f0, Size: 0x8]
	AkAudioEvent* VehicleSeatChangeSound;//[Offset: 0x12f8, Size: 0x8]
	AkAudioEvent* VehicleChangeAmmoTypeSound;//[Offset: 0x1300, Size: 0x8]
	AkAudioEvent* VehicleCamera_InFPP;//[Offset: 0x1308, Size: 0x8]
	AkAudioEvent* VehicleCamera_InTPP;//[Offset: 0x1310, Size: 0x8]
	AkAudioEvent* VehicleCamera_OutTPP;//[Offset: 0x1318, Size: 0x8]
	AkAudioEvent* KlaxonPressed;//[Offset: 0x1320, Size: 0x8]
	AkAudioEvent* KlaxonReleased;//[Offset: 0x1328, Size: 0x8]
	AkAudioEvent* VehicleChangeFireTypeSound;//[Offset: 0x1330, Size: 0x8]
	AkAudioEvent* VehicleChangeShootingModeSound;//[Offset: 0x1338, Size: 0x8]
	AkAudioEvent* VehicleReadyToShootSound;//[Offset: 0x1340, Size: 0x8]
	AkAudioEvent* VehicleExitSound;//[Offset: 0x1348, Size: 0x8]
	AkAudioEvent* RemoteVehicleEnterSound;//[Offset: 0x1350, Size: 0x8]
	AkAudioEvent* RemoteVehicleExitSound;//[Offset: 0x1358, Size: 0x8]
	AkAudioEvent* VehicleDetonationBeginSound;//[Offset: 0x1360, Size: 0x8]
	AkAudioEvent* VehicleDetonationEndSound;//[Offset: 0x1368, Size: 0x8]
	AkAudioEvent* VehicleLocalDetonationBeginSound;//[Offset: 0x1370, Size: 0x8]
	AkAudioEvent* VehicleLocalDetonationEndSound;//[Offset: 0x1378, Size: 0x8]
	AkAudioEvent* HunterModeTurnedOnSound;//[Offset: 0x1380, Size: 0x8]
	AkAudioEvent* KillerModeTurnedOnSound;//[Offset: 0x1388, Size: 0x8]
	AkAudioEvent* RCWSSeatTakenSound;//[Offset: 0x1390, Size: 0x8]
	AkAudioEvent* PeryscopeMoveBegin;//[Offset: 0x1398, Size: 0x8]
	AkAudioEvent* PeryscopeMoveEnd;//[Offset: 0x13a0, Size: 0x8]
	AkAudioEvent* NewStrikeAvailable;//[Offset: 0x13a8, Size: 0x8]
	AkAudioEvent* VehicleCriticalHealthStateStart;//[Offset: 0x13b0, Size: 0x8]
	AkAudioEvent* VehicleCriticalHealthStateStop;//[Offset: 0x13b8, Size: 0x8]
	AkAudioEvent* FirstStrikeSireneSound;//[Offset: 0x13c0, Size: 0x8]
	float ThresholdForSuspensionSmallImpact;//[Offset: 0x13c8, Size: 0x4]
	float ThresholdForSuspensionBigImpact;//[Offset: 0x13cc, Size: 0x4]
	<AkAudioEvent*,None(None)> AttachmentDestroyedSound;//[Offset: 0x13d0, Size: 0x50]
	<AkAudioEvent*,None(None)> AttachmentRestoredSound;//[Offset: 0x1420, Size: 0x50]
	<AkAudioEvent*,None(None)> AttachmentFullyRepairedSound;//[Offset: 0x1470, Size: 0x50]
	AkAudioEvent* AirVehicleTurboStartedEvent;//[Offset: 0x14c0, Size: 0x8]
	AkAudioEvent* AirVehicleTurboStoppedEvent;//[Offset: 0x14c8, Size: 0x8]
	AkAudioEvent* MissileLockingSound;//[Offset: 0x14d0, Size: 0x8]
	AkAudioEvent* MissileLockedSound;//[Offset: 0x14d8, Size: 0x8]
	AkAudioEvent* MissileIncomingSound;//[Offset: 0x14e0, Size: 0x8]
	AkAudioEvent* MissileLockOffSound;//[Offset: 0x14e8, Size: 0x8]
	float LockingPingTime;//[Offset: 0x14f0, Size: 0x4]
	float LockedPingTime;//[Offset: 0x14f4, Size: 0x4]
	float IncomingMissilePingTime;//[Offset: 0x14f8, Size: 0x4]
	<AkAudioEvent*,None(None)> PassingByBulletSounds;//[Offset: 0x1500, Size: 0x50]
	float PassingByBulletSoundDuration;//[Offset: 0x1550, Size: 0x4]
	float PassingByBulletSoundVelocityMagnitude;//[Offset: 0x1554, Size: 0x4]
	AkAudioEvent* GainLeader;//[Offset: 0x1558, Size: 0x8]
	AkAudioEvent* LooseLeader;//[Offset: 0x1560, Size: 0x8]
	AkAudioEvent* OnHoverSound;//[Offset: 0x1568, Size: 0x8]
	AkAudioEvent* OnRadialMenuOpened;//[Offset: 0x1570, Size: 0x8]
	AkAudioEvent* OnSubmenuOptionSelected;//[Offset: 0x1578, Size: 0x8]
	AkAudioEvent* OnFinalOptionSelected;//[Offset: 0x1580, Size: 0x8]
	AkAudioEvent* OnReturnOptionSelected;//[Offset: 0x1588, Size: 0x8]
	AkAudioEvent* OnUnavailableOptionSelected;//[Offset: 0x1590, Size: 0x8]
	AkAudioEvent* VictorySound;//[Offset: 0x1598, Size: 0x8]
	AkAudioEvent* DefeatSound;//[Offset: 0x15a0, Size: 0x8]
	AkAudioEvent* DrawSound;//[Offset: 0x15a8, Size: 0x8]
	AkAudioEvent* UndefinedSound;//[Offset: 0x15b0, Size: 0x8]
	AkAudioEvent* WarzoneBeginMatch;//[Offset: 0x15b8, Size: 0x8]
	WW3WarzoneEndingSound EndingSongFirst;//[Offset: 0x15c0, Size: 0x10]
	WW3WarzoneEndingSound EndingSongMoar;//[Offset: 0x15d0, Size: 0x10]
	AkAudioEvent* WarzoneMatchStart;//[Offset: 0x15e0, Size: 0x8]
	AkAudioEvent* WarzoneMatchStop;//[Offset: 0x15e8, Size: 0x8]
	AkAudioEvent* WarzoneMatchWin;//[Offset: 0x15f0, Size: 0x8]
	AkAudioEvent* WarzoneMatchDefeat;//[Offset: 0x15f8, Size: 0x8]
	AkAudioEvent* CameraStartPointStart;//[Offset: 0x1600, Size: 0x8]
	AkAudioEvent* CameraStartPointStop;//[Offset: 0x1608, Size: 0x8]
	AkAudioEvent* TDMCountdownBeep;//[Offset: 0x1610, Size: 0x8]
	AkAudioEvent* TDMRoundStart;//[Offset: 0x1618, Size: 0x8]
	AkAudioEvent* TDMRoundStop;//[Offset: 0x1620, Size: 0x8]
	AkAudioEvent* TDMRoundLast5Start;//[Offset: 0x1628, Size: 0x8]
	AkAudioEvent* TDMRoundLast5Stop;//[Offset: 0x1630, Size: 0x8]
	AkAudioEvent* TDMRoundWin;//[Offset: 0x1638, Size: 0x8]
	AkAudioEvent* TDMRoundDefeat;//[Offset: 0x1640, Size: 0x8]
	AkAudioEvent* TDMMatchWin;//[Offset: 0x1648, Size: 0x8]
	AkAudioEvent* TDMMatchDefeat;//[Offset: 0x1650, Size: 0x8]
	AkAudioEvent* HVTCountdownTick;//[Offset: 0x1658, Size: 0x8]
	AkAudioEvent* HVTCountdownGo;//[Offset: 0x1660, Size: 0x8]
	AkAudioEvent* HVTMusicTransmission;//[Offset: 0x1668, Size: 0x8]
	AkAudioEvent* HVTMusicTransmissionStop;//[Offset: 0x1670, Size: 0x8]
	AkAudioEvent* HVTTransmissionStart;//[Offset: 0x1678, Size: 0x8]
	AkAudioEvent* HVTTransmissionEnd;//[Offset: 0x1680, Size: 0x8]
	AkAudioEvent* HVTTimeTick;//[Offset: 0x1688, Size: 0x8]
	AkAudioEvent* HVTOpenCaseBig3D;//[Offset: 0x1690, Size: 0x8]
	AkAudioEvent* HVTOpenCaseBig2D;//[Offset: 0x1698, Size: 0x8]
	AkAudioEvent* HVTOpenCaseMedium3D;//[Offset: 0x16a0, Size: 0x8]
	AkAudioEvent* HVTOpenCaseMedium2D;//[Offset: 0x16a8, Size: 0x8]
	AkAudioEvent* HVTOpenCaseSmall3D;//[Offset: 0x16b0, Size: 0x8]
	AkAudioEvent* HVTOpenCaseSmall2D;//[Offset: 0x16b8, Size: 0x8]
	AkAudioEvent* HVTBodyTake;//[Offset: 0x16c0, Size: 0x8]
	AkAudioEvent* HVTKillTick;//[Offset: 0x16c8, Size: 0x8]
	AkAudioEvent* HVTKillAllyTick;//[Offset: 0x16d0, Size: 0x8]
	AkAudioEvent* HVTKillEnemyTick;//[Offset: 0x16d8, Size: 0x8]
	AkAudioEvent* HVTAntennaPlacement;//[Offset: 0x16e0, Size: 0x8]
	AkAudioEvent* HVTMusicRoundEnd;//[Offset: 0x16e8, Size: 0x8]
	AkAudioEvent* HVTMusicMatchStart;//[Offset: 0x16f0, Size: 0x8]
	AkAudioEvent* HVTMusicRoundStart;//[Offset: 0x16f8, Size: 0x8]
	AkAudioEvent* HVTMusicMatchEnd;//[Offset: 0x1700, Size: 0x8]
	AkAudioEvent* HVTPickup;//[Offset: 0x1708, Size: 0x8]
	AkAudioEvent* HVTTransmitionFailedGlobal;//[Offset: 0x1710, Size: 0x8]
	AkAudioEvent* HVTTransmitionInterupt;//[Offset: 0x1718, Size: 0x8]
	AkAudioEvent* HVTTransmitionSuccessGlobal;//[Offset: 0x1720, Size: 0x8]
	AkAudioEvent* HVTRadarStart;//[Offset: 0x1728, Size: 0x8]
	AkAudioEvent* HVTRadarStop;//[Offset: 0x1730, Size: 0x8]
	AkAudioEvent* HVTComputerInit;//[Offset: 0x1738, Size: 0x8]
	AkAudioEvent* HVTComputerInitStop;//[Offset: 0x1740, Size: 0x8]
	AkAudioEvent* HVTCaptured;//[Offset: 0x1748, Size: 0x8]
	AkAudioEvent* HVTComputerInitFinish;//[Offset: 0x1750, Size: 0x8]
	AkAudioEvent* HVTTransmissionZone;//[Offset: 0x1758, Size: 0x8]
	AkAudioEvent* HVTAntennaPlacementEnemy;//[Offset: 0x1760, Size: 0x8]
	AkAudioEvent* HVTShieldPlacement3D;//[Offset: 0x1768, Size: 0x8]
	AkAudioEvent* HVTShieldPlacement2D;//[Offset: 0x1770, Size: 0x8]
	AkAudioEvent* ReconBeginMatch;//[Offset: 0x1778, Size: 0x8]
	AkAudioEvent* ReconRadiationZoneWarningStop;//[Offset: 0x1780, Size: 0x8]
	AkAudioEvent* ReconRadiationZoneWarningLast;//[Offset: 0x1788, Size: 0x8]
	AkAudioEvent* ReconRadiationZoneWarningFirst;//[Offset: 0x1790, Size: 0x8]
	AkAudioEvent* ReconRadiationZoneWarningSecond;//[Offset: 0x1798, Size: 0x8]
	AkAudioEvent* ReconSpectatorSpawn;//[Offset: 0x17a0, Size: 0x8]
	AkAudioEvent* ReconEnterRadiationZone;//[Offset: 0x17a8, Size: 0x8]
	AkAudioEvent* ReconLeaveRadiationZone;//[Offset: 0x17b0, Size: 0x8]
	AkAudioEvent* NotificationLevelUp;//[Offset: 0x17b8, Size: 0x8]
	AkAudioEvent* NotificationUnlocked;//[Offset: 0x17c0, Size: 0x8]
	class WW3AudioMediatorData[] AudioMediatorDatas;//[Offset: 0x17c8, Size: 0x10]
	class WW3AudioMediatorData* AudioMediatorDefault;//[Offset: 0x17d8, Size: 0x8]
	WW3ActorRTPCCache[] RTPC_Cache;//[Offset: 0x17e8, Size: 0x10]

--------------------------------
Class: WW3PerMapBanks
	AkAudioBank*[] Banks;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: WW3CommanderAudioBank
	enum CommanderLanguage;//[Offset: 0x0, Size: 0x1]
	AkAudioBank* CommanderBank;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WW3GlobalAudioSettings
	<float,None(None)> AudibleDistancesForGameplaySounds;//[Offset: 0x0, Size: 0x50]
	<float,None(None)> AudibleDistancesForCosmeticSounds;//[Offset: 0x50, Size: 0x50]
	float DefaultOcclusionInterval;//[Offset: 0xa0, Size: 0x4]
	<float,None(None)> RefreshIntervals;//[Offset: 0xa8, Size: 0x50]

--------------------------------
Class: WW3SoundEffect
	AkAudioEvent* Sound2DAk;//[Offset: 0x0, Size: 0x8]
	AkAudioEvent* Sound3DAk;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WW3PostfixesArray
	WW3Postfix[] PostFixes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3Postfix
	enum PostFixLanguage;//[Offset: 0x0, Size: 0x1]
	FString PostFix;//[Offset: 0x8, Size: 0x10]
	FString MenuFullName;//[Offset: 0x18, Size: 0x10]
	bool IsHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: WW3RadioCommanderPostfixesArray
	WW3RadioCommanderPostfix[] PostFixes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3RadioCommanderPostfix
	FString PostFix;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3CharacterNotifications
	AkAudioEvent* SpawnSoundNotifications;//[Offset: 0x0, Size: 0x8]
	WW3SoundNotifications DieSoundNotification;//[Offset: 0x8, Size: 0x18]
	WW3SoundNotifications BulletHit;//[Offset: 0x20, Size: 0x18]
	WW3SoundNotifications BulletKill;//[Offset: 0x38, Size: 0x18]
	WW3SoundNotifications ExplosiveHit;//[Offset: 0x50, Size: 0x18]
	WW3SoundNotifications ExplosiveKill;//[Offset: 0x68, Size: 0x18]
	WW3SoundNotifications HeadshotHit;//[Offset: 0x80, Size: 0x18]
	WW3SoundNotifications HeadshotKill;//[Offset: 0x98, Size: 0x18]
	WW3SoundNotifications VehicleRunOver;//[Offset: 0xb0, Size: 0x18]
	WW3SoundNotifications VehicleRunOverKill;//[Offset: 0xc8, Size: 0x18]
	WW3SoundNotifications FireDamage;//[Offset: 0xe0, Size: 0x18]
	WW3SoundNotifications FireDamageKill;//[Offset: 0xf8, Size: 0x18]
	WW3SoundNotifications MeleeSound;//[Offset: 0x110, Size: 0x18]
	WW3SoundNotifications MeleeSoundKill;//[Offset: 0x128, Size: 0x18]
	WW3SoundNotifications LightBodyArmorHit;//[Offset: 0x140, Size: 0x18]
	WW3SoundNotifications MediumBodyArmorHit;//[Offset: 0x158, Size: 0x18]
	WW3SoundNotifications HeavyBodyArmorHit;//[Offset: 0x170, Size: 0x18]
	WW3SoundNotifications LightBodyArmorDestroy;//[Offset: 0x188, Size: 0x18]
	WW3SoundNotifications MediumBodyArmorDestroy;//[Offset: 0x1a0, Size: 0x18]
	WW3SoundNotifications HeavyBodyArmorDestroy;//[Offset: 0x1b8, Size: 0x18]
	WW3SoundNotifications LightHeadArmorHit;//[Offset: 0x1d0, Size: 0x18]
	WW3SoundNotifications MediumHeadArmorHit;//[Offset: 0x1e8, Size: 0x18]
	WW3SoundNotifications HeavyHeadArmorHit;//[Offset: 0x200, Size: 0x18]
	WW3SoundNotifications LightHeadArmorDestroy;//[Offset: 0x218, Size: 0x18]
	WW3SoundNotifications MediumHeadArmorDestroy;//[Offset: 0x230, Size: 0x18]
	WW3SoundNotifications HeavyHeadArmorDestroy;//[Offset: 0x248, Size: 0x18]
	WW3SoundEffect LeanBegin;//[Offset: 0x260, Size: 0x10]
	WW3SoundEffect LeanEnd;//[Offset: 0x270, Size: 0x10]

--------------------------------
Class: WW3SoundNotifications
	AkAudioEvent* AffectedNotification;//[Offset: 0x0, Size: 0x8]
	AkAudioEvent* InstigatorNotification;//[Offset: 0x8, Size: 0x8]
	AkAudioEvent* EveryoneElseNotification;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: WW3WarzoneEndingSound
	AkAudioEvent* Sound;//[Offset: 0x0, Size: 0x8]
	float Score;//[Offset: 0x8, Size: 0x4]
	float RemainingTime;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WW3AudioMediatorData.Object
	enum AudioMediatorGameMode;//[Offset: 0x28, Size: 0x1]
	enum AudioMediatorMapEnum;//[Offset: 0x29, Size: 0x1]
	AkAudioEvent* SDW3_Game_Start;//[Offset: 0x30, Size: 0x8]
	AkAudioEvent* SDW3_Game_Stop;//[Offset: 0x38, Size: 0x8]
	AkAudioEvent* SDW3_FirstBloodForUs;//[Offset: 0x40, Size: 0x8]
	AkAudioEvent* SDW3_FirstBloodForThem;//[Offset: 0x48, Size: 0x8]
	AkAudioEvent* SDW3_1stPointForUs;//[Offset: 0x50, Size: 0x8]
	AkAudioEvent* SDW3_1stPointForThem;//[Offset: 0x58, Size: 0x8]
	AkAudioEvent* SDW3_PointNextUs;//[Offset: 0x60, Size: 0x8]
	AkAudioEvent* SDW3_PointNextThem;//[Offset: 0x68, Size: 0x8]
	AkAudioEvent* SDW3_CapturePointCaptureStart;//[Offset: 0x70, Size: 0x8]
	AkAudioEvent* SDW3_CapturePointCaptureStop;//[Offset: 0x78, Size: 0x8]
	AkAudioEvent* SDW3_VictorySound;//[Offset: 0x80, Size: 0x8]
	AkAudioEvent* SDW3_DefeatSound;//[Offset: 0x88, Size: 0x8]
	AkAudioEvent* SDW3_DrawSound;//[Offset: 0x90, Size: 0x8]
	AkAudioEvent* SDW3_RoundVictorySound;//[Offset: 0x98, Size: 0x8]
	AkAudioEvent* SDW3_RoundDefeatSound;//[Offset: 0xa0, Size: 0x8]
	AkAudioEvent* SDW3_RoundDrawSound;//[Offset: 0xa8, Size: 0x8]
	AkAudioEvent* SDW3_MatchVictorySound;//[Offset: 0xb0, Size: 0x8]
	AkAudioEvent* SDW3_MatchDefeatSound;//[Offset: 0xb8, Size: 0x8]
	AkAudioEvent* SDW3_MatchDrawSound;//[Offset: 0xc0, Size: 0x8]
	AkAudioEvent* SDW3_WinLooseScreenVictorySound;//[Offset: 0xc8, Size: 0x8]
	AkAudioEvent* SDW3_WinLooseScreenDefeatSound;//[Offset: 0xd0, Size: 0x8]
	AkAudioEvent* SDW3_GainLeader;//[Offset: 0xd8, Size: 0x8]
	AkAudioEvent* SDW3_LooseLeader;//[Offset: 0xe0, Size: 0x8]
	AkAudioEvent* SDW3_NotificationLevelUp;//[Offset: 0xe8, Size: 0x8]
	AkAudioEvent* SDW3_NotificationUnlocked;//[Offset: 0xf0, Size: 0x8]
	AkAudioEvent* SDW3_MapIsLoading;//[Offset: 0xf8, Size: 0x8]
	AkAudioEvent* SDW3_MapLoadingEnd;//[Offset: 0x100, Size: 0x8]
	AkAudioEvent* SDW3_MapLoadingFalse;//[Offset: 0x108, Size: 0x8]
	AkAudioEvent* SDW3_InHub;//[Offset: 0x110, Size: 0x8]
	AkAudioEvent* SDW3_WaitingForPlayers;//[Offset: 0x118, Size: 0x8]
	AkAudioEvent* SDW3_CountingStart;//[Offset: 0x120, Size: 0x8]
	AkAudioEvent* SDW3_CountingTick;//[Offset: 0x128, Size: 0x8]
	AkAudioEvent* SDW3_CountingEnd;//[Offset: 0x130, Size: 0x8]
	AkAudioEvent* SDW3_InProgress;//[Offset: 0x138, Size: 0x8]
	AkAudioEvent* SDW3_RoundEndStage1;//[Offset: 0x140, Size: 0x8]
	AkAudioEvent* SDW3_RoundEndStage2;//[Offset: 0x148, Size: 0x8]
	AkAudioEvent* SDW3_RoundEndStage3;//[Offset: 0x150, Size: 0x8]
	AkAudioEvent* SDW3_RoundEndStage3Stop;//[Offset: 0x158, Size: 0x8]
	AkAudioEvent* SDW3_SummaryScreen;//[Offset: 0x160, Size: 0x8]
	AkAudioEvent* SDW3_CountingTickMatchInProgress;//[Offset: 0x168, Size: 0x8]
	AkAudioEvent* UndefinedSound;//[Offset: 0x170, Size: 0x8]

--------------------------------
Class: WW3ActorRTPCCache
	Actor* Actor;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: WW3NoiseManagerActor.WW3NoiseManager.SceneComponent.ActorComponent.Object

--------------------------------
Class: WW3NoiseManager.SceneComponent.ActorComponent.Object
	int AffectedChannels;//[Offset: 0x298, Size: 0x4]
	float CurrentNoiseValue;//[Offset: 0x29c, Size: 0x4]
	float CurrentFriendlyNoiseValue;//[Offset: 0x2a0, Size: 0x4]
	byte CurrentNoiseValueReplicated;//[Offset: 0x2a4, Size: 0x1]
	byte CurrentFriendlyNoiseValueReplicated;//[Offset: 0x2a5, Size: 0x1]
	bool bBlockSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a6, Size: 0x1]
	int8 Team;//[Offset: 0x2a9, Size: 0x1]
	void OnRep_CurrentNoiseValueReplicated();// 0x102c420
	void OnRep_CurrentFriendlyNoiseValueReplicated();// 0x102c400

--------------------------------
Class: WW3MontagePoseSplit
	AnimMontage* Stand;//[Offset: 0x0, Size: 0x8]
	AnimMontage* Crouch;//[Offset: 0x8, Size: 0x8]
	AnimMontage* Prone;//[Offset: 0x10, Size: 0x8]
	AnimMontage* OnBack;//[Offset: 0x18, Size: 0x8]
	AnimMontage* Knockdown;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: WW3StatisticsTrackingComponent.ActorComponent.Object
	enum TrackingCategory;//[Offset: 0xf0, Size: 0x1]
	enum CareerCategory;//[Offset: 0xf1, Size: 0x1]

--------------------------------
Class: WW3ProgressableMarker.WW3ActorMarker.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WW3ActorMarker.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum MarkerConfig;//[Offset: 0x6e0, Size: 0x1]
	WW3ActorMarkerMDC* MarkerMapDrawingComponent;//[Offset: 0x6e8, Size: 0x8]
	Vector Offset;//[Offset: 0x6f0, Size: 0xc]
	WW3MarkerConfig* MarkerConfigPointer;//[Offset: 0x700, Size: 0x8]
	WW3VehicleCompassWidget* CompassWhichContainsThisMarker;//[Offset: 0x710, Size: 0x8]
	WW3MarkerSettingsForRelationship RelationshipSetting;//[Offset: 0x718, Size: 0xe0]
	WW3CameraComponent* Camera;//[Offset: 0x7f8, Size: 0x8]
	WW3GamePlayerController* SavedPlayerController;//[Offset: 0x818, Size: 0x8]
	WW3MarkerWidget* SavedMarkerWidget;//[Offset: 0x820, Size: 0x8]
	float DistanceToCamera;//[Offset: 0x828, Size: 0x4]
	bool bShouldApplyScreenRestrictions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x894, Size: 0x1]
	bool bShouldShowArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x895, Size: 0x1]
	WW3MarkedForData[] MarkedForData;//[Offset: 0x8b8, Size: 0x10]
	int8[] MarkedForReplicated;//[Offset: 0x8d0, Size: 0x10]
	Texture* IconTextureOverride;//[Offset: 0x920, Size: 0x8]
	Texture* RevertedIconTextureOverride;//[Offset: 0x928, Size: 0x8]
	WW3VehicleCompassMarker* SavedCompassWidget;//[Offset: 0x930, Size: 0x8]
	class WW3ActorMarkerMDC* MarkerMapDrawingComponentClass;//[Offset: 0x938, Size: 0x28]
	WW3GamePlayerController* ClPrerequisite_PlayerController;//[Offset: 0x968, Size: 0x8]
	WW3MarkersSingleton* Prerequisite_MarkersSingleton;//[Offset: 0x970, Size: 0x8]
	WW3MarkerWidget* Prerequisite_MarkerWidget;//[Offset: 0x978, Size: 0x8]
	class WW3MarkerConfig* Prerequisite_MarkerConfigClass;//[Offset: 0x980, Size: 0x28]
	Actor* Prerequisite_Owner;//[Offset: 0x9a8, Size: 0x8]
	WW3MarkerConfig* Prerequisite_MarkerConfig;//[Offset: 0x9b0, Size: 0x8]
	WW3ActorPool* Prerequisite_ActorPool;//[Offset: 0x9b8, Size: 0x8]
	WW3GameState* Prerequisite_GameState;//[Offset: 0x9c0, Size: 0x8]
	WW3PlayerMap* ClPrerequisite_PlayerMap;//[Offset: 0x9c8, Size: 0x8]
	WW3AssetManager* Prerequisite_AssetManager;//[Offset: 0x9d0, Size: 0x8]
	Texture* Prerequisite_CurrentTexture;//[Offset: 0x9d8, Size: 0x28]
	Texture2D* Prerequisite_CurrentIconTexture;//[Offset: 0xa00, Size: 0x28]
	Texture2D* Prerequisite_MapIconTexture;//[Offset: 0xa28, Size: 0x28]
	class WW3ActorMarkerMDC* ClPrerequisite_MapDrawingComponentClass;//[Offset: 0xa50, Size: 0x28]
	WW3ActorMarkerMDC* ClPrerequisite_MapDrawingComponent;//[Offset: 0xa78, Size: 0x8]
	class WW3MarkerConfig* Prerequisite_MarkerConfigClass_BeingLoaded;//[Offset: 0xad0, Size: 0x28]
	Texture* Prerequisite_CurrentTexture_BeingLoaded;//[Offset: 0xaf8, Size: 0x28]
	Texture2D* Prerequisite_CurrentIconTexture_BeingLoaded;//[Offset: 0xb20, Size: 0x28]
	Texture2D* Prerequisite_MapIconTexture_BeingLoaded;//[Offset: 0xb48, Size: 0x28]
	class WW3ActorMarkerMDC* Prerequisite_MapDrawingComponentClass_BeingLoaded;//[Offset: 0xb70, Size: 0x28]
	class WW3MarkerConfig* Prerequisite_MarkerConfigClass_Loaded;//[Offset: 0xb98, Size: 0x28]
	Texture* Prerequisite_CurrentTexture_Loaded;//[Offset: 0xbc0, Size: 0x28]
	Texture2D* Prerequisite_CurrentIconTexture_Loaded;//[Offset: 0xbe8, Size: 0x28]
	Texture2D* Prerequisite_MapIconTexture_Loaded;//[Offset: 0xc10, Size: 0x28]
	class WW3ActorMarkerMDC* Prerequisite_MapDrawingComponentClass_Loaded;//[Offset: 0xc38, Size: 0x28]
	Vector2D CurrentPositionOnScreen;//[Offset: 0xc60, Size: 0x8]
	void Multicast_OnMarkedByEnemy(int8 InTeam, bool bShowMarkMessage);// 0xf26790
	void Mark(Actor* Instigator, bool bInMarkOnMap, bool bInMarkInWorld, bool bShowMarkMessage, enum MarkedType, int8 TeamOverride, bool ReturnValue);// 0xf265b0
	void GetIsOccluded(bool ReturnValue);// 0xf26590
	void GetFirstLocalPawn(World* World, Pawn* ReturnValue);// 0xf26500
	void GetCachedCompassWidget(WW3VehicleCompassMarker* ReturnValue);// 0xf264d0

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x5a8, Size: 0x1]
	enum TimingPolicy;//[Offset: 0x5a9, Size: 0x1]
	class UserWidget* WidgetClass;//[Offset: 0x5b0, Size: 0x8]
	IntPoint DrawSize;//[Offset: 0x5b8, Size: 0x8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c1, Size: 0x1]
	float RedrawTime;//[Offset: 0x5c4, Size: 0x4]
	IntPoint CurrentDrawSize;//[Offset: 0x5d0, Size: 0x8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 0x1]
	Vector2D Pivot;//[Offset: 0x5dc, Size: 0x8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e4, Size: 0x1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e5, Size: 0x1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e6, Size: 0x1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x5e8, Size: 0x8]
	LinearColor BackgroundColor;//[Offset: 0x5f0, Size: 0x10]
	LinearColor TintColorAndOpacity;//[Offset: 0x600, Size: 0x10]
	float OpacityFromTexture;//[Offset: 0x610, Size: 0x4]
	enum BlendMode;//[Offset: 0x614, Size: 0x1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x615, Size: 0x1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x616, Size: 0x1]
	UserWidget* Widget;//[Offset: 0x618, Size: 0x8]
	BodySetup* BodySetup;//[Offset: 0x640, Size: 0x8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x648, Size: 0x8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x650, Size: 0x8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x658, Size: 0x8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x660, Size: 0x8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x668, Size: 0x8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x670, Size: 0x8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x678, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x680, Size: 0x8]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 0x1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x689, Size: 0x1]
	FName SharedLayerName;//[Offset: 0x690, Size: 0x8]
	int LayerZOrder;//[Offset: 0x698, Size: 0x4]
	enum GeometryMode;//[Offset: 0x69c, Size: 0x1]
	float CylinderArcAngle;//[Offset: 0x6a0, Size: 0x4]
	void SetWidget(UserWidget* Widget);// 0x1d22be0
	void SetTintColorAndOpacity(LinearColor NewTintColorAndOpacity);// 0x1d229e0
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x1d227b0
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x1d22720
	void SetDrawSize(Vector2D Size);// 0x1d224a0
	void SetBackgroundColor(LinearColor NewBackgroundColor);// 0x1d22360
	void RequestRedraw();// 0xf64730
	void GetUserWidgetObject(UserWidget* ReturnValue);// 0x1d216f0
	void GetRenderTarget(TextureRenderTarget2D* ReturnValue);// 0x1d216c0
	void GetOwnerPlayer(LocalPlayer* ReturnValue);// 0x1d215e0
	void GetMaterialInstance(MaterialInstanceDynamic* ReturnValue);// 0x1d21390
	void GetDrawSize(Vector2D ReturnValue);// 0x1d21210

--------------------------------
Class: WW3ActorMarkerMDC.WW3MapDrawingComponent.ActorComponent.Object
	WW3ActorMarker* ActorMarkerOwner;//[Offset: 0x238, Size: 0x8]
	bool bShouldUseVisibilityFromWorldMarker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]

--------------------------------
Class: WW3MarkerConfig.Object
	WW3MarkerSettings MarkerSettings;//[Offset: 0x30, Size: 0x190]

--------------------------------
Class: WW3MarkerSettings
	bool bRadialMenuAvailableAtAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	class WW3RadialEntityConfig* RadialConfig;//[Offset: 0x8, Size: 0x8]
	CurveFloat* SizeOverDistanceCurve;//[Offset: 0x10, Size: 0x8]
	CurveFloat* OpacityOverDistanceCurve;//[Offset: 0x18, Size: 0x8]
	float ScaleMultiplier;//[Offset: 0x20, Size: 0x4]
	float WorldSpaceInteractMaxDistance;//[Offset: 0x24, Size: 0x4]
	FText DefaultInteractName;//[Offset: 0x28, Size: 0x18]
	Texture* Texture;//[Offset: 0x40, Size: 0x28]
	Texture2D* IconTexture;//[Offset: 0x68, Size: 0x28]
	class WW3ActorMarkerMDC* MarkerMapDrawingComponentClass;//[Offset: 0x90, Size: 0x28]
	class WW3ActorMarkerMDC* ReconMapDrawingComponentClass;//[Offset: 0xb8, Size: 0x28]
	bool bShouldCreateMapDrawingComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	class WW3MarkerWidget* MarkerWidgetClass;//[Offset: 0xe8, Size: 0x8]
	class WW3VehicleCompassMarker* CompassMarkerWidgetClass;//[Offset: 0xf0, Size: 0x8]
	Vector2D Pivot;//[Offset: 0xf8, Size: 0x8]
	MaterialInstance* MaterialInstance;//[Offset: 0x100, Size: 0x8]
	MaterialInstance* MapMaterialInstance;//[Offset: 0x108, Size: 0x8]
	float MarkedTime;//[Offset: 0x110, Size: 0x4]
	float APSReducedMarkedTime;//[Offset: 0x114, Size: 0x4]
	float PostMapMarkAssistTime;//[Offset: 0x118, Size: 0x4]
	bool bPointsForMarking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	float MapScale;//[Offset: 0x120, Size: 0x4]
	bool CenterScreenOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	bool bShouldDropOpacityWithPlayerADSing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 0x1]
	float OpacityWhilePlayerADSing;//[Offset: 0x128, Size: 0x4]
	bool bShouldDropScaleWithPlayerADSing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	float ScaleMultiplierWhilePlayerADSing;//[Offset: 0x130, Size: 0x4]
	float MapMaterialIconScale;//[Offset: 0x134, Size: 0x4]
	bool bShouldGetOwnerFromOwnerForRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	<WW3MarkerSettingsForRelationship,None(None)> SettingsPerRelationship;//[Offset: 0x140, Size: 0x50]

--------------------------------
Class: WW3RadialEntityConfig.Object
	class WW3RadialEntityConfig[] EntitiesToOpen;//[Offset: 0x28, Size: 0x10]
	SlateBrush icon;//[Offset: 0x38, Size: 0x88]
	FText Name;//[Offset: 0xc0, Size: 0x18]
	enum RadioCommandToPlay;//[Offset: 0xd8, Size: 0x2]
	WW3RadialMenu* Owner;//[Offset: 0xe0, Size: 0x8]
	bool bIsLeaderConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	class UserWidget* EntitiesTemplateOverride;//[Offset: 0xf0, Size: 0x8]
	void IsFinalEntity(bool ReturnValue);// 0x5d2740
	void GoDeeper(WW3PlayerController* OwningController);// 0x105f2a0
	void ExecuteBP(WW3PlayerController* OwningController);// 0x1395e00
	void Execute(WW3PlayerController* OwningController);// 0x105f210
	void AlternativeExecute(WW3PlayerController* OwningController);// 0x105f0a0

--------------------------------
Class: WW3RadialMenu.UserWidget.Widget.Visual.Object
	class UserWidget* EntitiesTemplate;//[Offset: 0x208, Size: 0x8]
	WW3RadialCommandEntity*[] entities;//[Offset: 0x210, Size: 0x10]
	CanvasPanel* EntitiesCanvas;//[Offset: 0x220, Size: 0x8]
	class WW3RadialEntityConfig* ConfigsTemplate;//[Offset: 0x228, Size: 0x8]
	class WW3RadialEntityConfig* StartConfigsTemplate;//[Offset: 0x230, Size: 0x8]
	class WW3RadialEntityConfig[] PreviousConfigsTemplates;//[Offset: 0x238, Size: 0x10]
	WW3ActorMarker* FocusedActorMarker;//[Offset: 0x248, Size: 0x8]
	CurveFloat* AnimationCurve;//[Offset: 0x250, Size: 0x8]
	float AnimationTime;//[Offset: 0x258, Size: 0x4]
	float PreviousBackgroundImageAnimationTargetScale;//[Offset: 0x25c, Size: 0x4]
	float AnimationAlpha;//[Offset: 0x260, Size: 0x4]
	float AnimationRealTimeAlpha;//[Offset: 0x264, Size: 0x4]
	TextBlock* CurrentOptionNameTextPointer;//[Offset: 0x268, Size: 0x8]
	TextBlock* PreviousOptionNameTextPointer;//[Offset: 0x270, Size: 0x8]
	CanvasPanelSlot* CurrentOptionNameTextCanvasPanelSlot;//[Offset: 0x278, Size: 0x8]
	CanvasPanelSlot* PreviousOptionNameTextCanvasPanelSlot;//[Offset: 0x280, Size: 0x8]
	WW3RadialMenuDefaultCentralTextsProperties CurrentTextDefaultProperties;//[Offset: 0x288, Size: 0x8]
	WW3RadialMenuDefaultCentralTextsProperties PreviousTextDefaultProperties;//[Offset: 0x290, Size: 0x8]
	float[] InnerCirclesPerCurrentDepthTargetScales;//[Offset: 0x298, Size: 0x10]
	Image*[] InnerCirclesPerCurrentDepth;//[Offset: 0x2a8, Size: 0x10]
	Texture2D*[] TexturesPerOptionsAmount;//[Offset: 0x2b8, Size: 0x10]
	Texture2D*[] BackgroundTexturesPerOptionsAmount;//[Offset: 0x2c8, Size: 0x10]
	Texture2D*[] HoveredCirclePartTexturesPerOptionsAmount;//[Offset: 0x2d8, Size: 0x10]
	Image* BackgroundImage;//[Offset: 0x2e8, Size: 0x8]
	Image* PreviousBackgroundImage;//[Offset: 0x2f0, Size: 0x8]
	Widget* BackgroundWidget;//[Offset: 0x2f8, Size: 0x8]
	float MouseMoveDeltaMultiplier;//[Offset: 0x300, Size: 0x4]
	float MaxMouseMoveDeltaToAccept;//[Offset: 0x304, Size: 0x4]
	float AnalogStickThreshold;//[Offset: 0x308, Size: 0x4]
	Widget* RotationWidget;//[Offset: 0x310, Size: 0x8]
	Image* CurrentRotationImage;//[Offset: 0x318, Size: 0x8]
	Widget* HoveredRotationWidget;//[Offset: 0x320, Size: 0x8]
	Image* CurrentHoveredRotationImage;//[Offset: 0x328, Size: 0x8]
	float CurrentSelectionAngle;//[Offset: 0x330, Size: 0x4]
	float CurrentHoveredAngle;//[Offset: 0x334, Size: 0x4]
	float TargetHoveredAngle;//[Offset: 0x338, Size: 0x4]
	float RotationDotOffsetPerOptionsAmount;//[Offset: 0x340, Size: 0x4]
	CurveFloat* FinalOptionFadeOutAnimationCurve;//[Offset: 0x348, Size: 0x8]
	CurveFloat* EverythingElseFadeOutAnimationCurve;//[Offset: 0x350, Size: 0x8]

--------------------------------
Class: WW3RadialCommandEntity.UserWidget.Widget.Visual.Object
	float PaddingWhileHovered;//[Offset: 0x208, Size: 0x4]
	float PaddingInterpolationSpeedWhileHover;//[Offset: 0x20c, Size: 0x4]
	float PaddingInterpolationSpeedWhileUnhover;//[Offset: 0x210, Size: 0x4]
	float ButtonTextOpacityWhileNotAvailable;//[Offset: 0x214, Size: 0x4]
	float ButtonTextOpacityWhileAvailable;//[Offset: 0x218, Size: 0x4]
	<Vector2D,None(None)> AdditionalOffsetPerAngle;//[Offset: 0x220, Size: 0x50]
	class WW3RadialEntityConfig* ConfigClass;//[Offset: 0x278, Size: 0x8]
	Image* MainButton;//[Offset: 0x290, Size: 0x8]
	FText ReturnButtonText;//[Offset: 0x298, Size: 0x18]
	FText EscButtonText;//[Offset: 0x2b0, Size: 0x18]
	FText FirstButtonText;//[Offset: 0x2c8, Size: 0x18]
	FText SecondButtonText;//[Offset: 0x2e0, Size: 0x18]
	FText ThirdButtonText;//[Offset: 0x2f8, Size: 0x18]
	FText FourthButtonText;//[Offset: 0x310, Size: 0x18]
	FText FifthButtonText;//[Offset: 0x328, Size: 0x18]
	FText SixthButtonText;//[Offset: 0x340, Size: 0x18]
	Image* ButtonIndexBackroundImage;//[Offset: 0x358, Size: 0x8]
	Image* ReturnButtonImage;//[Offset: 0x360, Size: 0x8]
	Widget* RotatingWidget;//[Offset: 0x368, Size: 0x8]
	Widget* ButtonWidget;//[Offset: 0x370, Size: 0x8]
	Vector2D TextPositionModification;//[Offset: 0x378, Size: 0x8]
	TextBlock* MainText;//[Offset: 0x380, Size: 0x8]
	TextBlock* ButtonText;//[Offset: 0x388, Size: 0x8]
	LinearColor EnabledColorText;//[Offset: 0x390, Size: 0x10]
	LinearColor DisabledColorText;//[Offset: 0x3a0, Size: 0x10]
	LinearColor EnabledAndFinalColorButton;//[Offset: 0x3b0, Size: 0x10]
	LinearColor EnabledColorButton;//[Offset: 0x3c0, Size: 0x10]
	LinearColor DisabledColorButton;//[Offset: 0x3d0, Size: 0x10]
	LinearColor FinalOptionButtonBackgroundColor;//[Offset: 0x3e0, Size: 0x10]
	LinearColor DisabledOptionButtonBackgroundColor;//[Offset: 0x3f0, Size: 0x10]
	LinearColor HoveredTargetColorButton;//[Offset: 0x400, Size: 0x10]
	void GetMainText(TextBlock* ReturnValue);// 0x105b230

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x120, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x138, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x148, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x170, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x180, Size: 0x58]
	Vector2D ShadowOffset;//[Offset: 0x1d8, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x1e0, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x1f0, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x200, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x205, Size: 0x1]
	void SetText(FText InText);// 0xf232d0
	void SetShadowOffset(Vector2D InShadowOffset);// 0x1d175b0
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x1d17530
	void SetOpacity(float InOpacity);// 0x1d17190
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x1d16ed0
	void SetJustification(byte InJustification);// 0x1d16bc0
	void SetFont(SlateFontInfo InFontInfo);// 0x1d165e0
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x1d16270
	void SetAutoWrapText(bool InAutoTextWrap);// 0x1d161e0
	void GetText(FText ReturnValue);// 0x1d15400
	void GetDynamicOutlineMaterial(MaterialInstanceDynamic* ReturnValue);// 0x1d15230
	void GetDynamicFontMaterial(MaterialInstanceDynamic* ReturnValue);// 0x1d15200

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x100, Size: 0x3]
	byte Justification;//[Offset: 0x103, Size: 0x1]
	enum WrappingPolicy;//[Offset: 0x104, Size: 0x1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x105, Size: 0x1]
	float WrapTextAt;//[Offset: 0x108, Size: 0x4]
	Margin Margin;//[Offset: 0x10c, Size: 0x10]
	float LineHeightPercentage;//[Offset: 0x11c, Size: 0x4]

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8]
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x28]
	FName TypefaceFontName;//[Offset: 0x48, Size: 0x8]
	int Size;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4]
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x8]
	LinearColor OutlineColor;//[Offset: 0x10, Size: 0x10]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	void AddChildToCanvas(Widget* Content, CanvasPanelSlot* ReturnValue);// 0x1cfe8f0

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x28]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int ZOrder;//[Offset: 0x64, Size: 0x4]
	void SetZOrder(int InZOrder);// 0x1d00ec0
	void SetSize(Vector2D InSize);// 0x1d00a60
	void SetPosition(Vector2D InPosition);// 0x1d00800
	void SetOffsets(Margin InOffset);// 0x1d00420
	void SetMinimum(Vector2D InMinimumAnchors);// 0x1d00320
	void SetMaximum(Vector2D InMaximumAnchors);// 0x1d002a0
	void SetLayout(AnchorData InLayoutData);// 0x1d00080
	void SetAutoSize(bool InbAutoSize);// 0x1cff560
	void SetAnchors(Anchors InAnchors);// 0x1cff440
	void SetAlignment(Vector2D InAlignment);// 0x1cff3c0
	void GetZOrder(int ReturnValue);// 0x1cff230
	void GetSize(Vector2D ReturnValue);// 0x1cfef90
	void GetPosition(Vector2D ReturnValue);// 0x1cfeed0
	void GetOffsets(Margin ReturnValue);// 0x1cfed90
	void GetLayout(AnchorData ReturnValue);// 0x1cfed00
	void GetAutoSize(bool ReturnValue);// 0x1cfec70
	void GetAnchors(Anchors ReturnValue);// 0x1cfec30
	void GetAlignment(Vector2D ReturnValue);// 0x1cfebf0

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]
	Anchors Anchors;//[Offset: 0x10, Size: 0x10]
	Vector2D Alignment;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: WW3RadialMenuDefaultCentralTextsProperties

--------------------------------
Class: WW3PlayerController.WW3PlayerControllerBase.ShooterPlayerController.PlayerController.Controller.Actor.Object
	bool bClearStrikesOnStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 0x1]
	bool bUseReducingNetworkWhileDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ea, Size: 0x1]
	bool bUsesUSA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7eb, Size: 0x1]
	class WW3PlayerMap* MinimapClass;//[Offset: 0x7f0, Size: 0x8]
	class WW3CentralRadio* CentralRadioClass;//[Offset: 0x7f8, Size: 0x8]
	class WW3CommandMenu* CommandMenuClass;//[Offset: 0x800, Size: 0x8]
	class WW3LocalObjectiveSystem* LocalObjectiveSystemClass;//[Offset: 0x808, Size: 0x8]
	class WW3BarkSystem* BarkSystemClass;//[Offset: 0x810, Size: 0x8]
	class WW3TargetCapturePointLineMDC* TargetCapturePointLineMDCClass;//[Offset: 0x818, Size: 0x8]
	class WW3AudioPrioritySystem* AudioPrioritySystemClass;//[Offset: 0x820, Size: 0x8]
	WW3PlayerMap* PlayerMapComponent;//[Offset: 0x828, Size: 0x8]
	WW3WeatherEffectsManager* WeatherEffectsManager;//[Offset: 0x830, Size: 0x8]
	WW3ScreensManager* ScreensManager;//[Offset: 0x838, Size: 0x8]
	WW3WorldPositionMarkersPCManager* WorldPositionMarkersManager;//[Offset: 0x840, Size: 0x8]
	WW3AntiFloodComponent* RadioTimeoutComponent;//[Offset: 0x848, Size: 0x8]
	WW3GlobalSatelliteSupportSystem* GSSSReference;//[Offset: 0x850, Size: 0x8]
	WW3SquadManagerRequester* SquadManagerRequester;//[Offset: 0x858, Size: 0x8]
	WW3PlayerCustomDepthController* CustomDepthController;//[Offset: 0x860, Size: 0x8]
	CurveFloat* DefaultBlendInFOVCurve;//[Offset: 0x880, Size: 0x8]
	CurveFloat* DefaultBlendOutFOVCurve;//[Offset: 0x888, Size: 0x8]
	WW3SuppressAndAdrenalineWidget* SuppressAndAdrenalineWidget;//[Offset: 0x890, Size: 0x8]
	WW3AudioMediator* AudioMediator;//[Offset: 0x898, Size: 0x8]
	TimerHandle MarkKeyPressedTimerHandle_T;//[Offset: 0xa28, Size: 0x8]
	bool bIsASEActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa34, Size: 0x1]
	WW3InGameCustomizationDataManager* InGameCustomizationDataManager;//[Offset: 0xa38, Size: 0x8]
	WW3ActionReplicator* ActionReplicator;//[Offset: 0xa58, Size: 0x8]
	WW3VoiceChatManagerComponent* VoiceChatManagerComponent;//[Offset: 0xa60, Size: 0x8]
	WW3CommandMenu* CommandMenu;//[Offset: 0xa70, Size: 0x8]
	WW3PlayerProfileData PlayerProfile;//[Offset: 0xa80, Size: 0x280]
	int BindedInitialStartPoint;//[Offset: 0xd04, Size: 0x4]
	WW3PerformanceDataManager* ClientPerformanceDataManager;//[Offset: 0xe30, Size: 0x8]
	uint16 PlayerLifeCounter;//[Offset: 0xe48, Size: 0x2]
	WW3ReplicatedInGameCustomizationData ReplicatedInGameCustomizationData;//[Offset: 0xe50, Size: 0x10]
	WW3InGameCustomizationData CurrentInGameCustomizationData;//[Offset: 0xe60, Size: 0x108]
	WW3InGameCustomizationData CurrentModifiedInGameCustomizationData;//[Offset: 0xf68, Size: 0x108]
	WW3LoadoutsCabinet* UsingLoadoutsCabinet;//[Offset: 0x1088, Size: 0x8]
	WW3CentralRadio* CentralRadio;//[Offset: 0x10a0, Size: 0x8]
	WW3LocalObjectiveSystem* LocalObjectiveSystem;//[Offset: 0x10a8, Size: 0x8]
	WW3BarkSystem* BarkSystem;//[Offset: 0x10b0, Size: 0x8]
	WW3AmbientEmittersManager* AmbientEmittersManager;//[Offset: 0x10b8, Size: 0x8]
	WW3AudioPrioritySystem* AudioPrioritySystem;//[Offset: 0x10c0, Size: 0x8]
	WW3AkComponent* RadioAkComponent;//[Offset: 0x10c8, Size: 0x8]
	WW3TargetCapturePointLineMDC* TargetCapturePointLineMDC;//[Offset: 0x10d0, Size: 0x8]
	bool bHasEnoughSpaceToSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1110, Size: 0x1]
	WW3Character* CharacterToSpawnOn;//[Offset: 0x1118, Size: 0x8]
	WW3PlayerController*[] PlayersToReplicateProfileFrom;//[Offset: 0x1128, Size: 0x10]
	uint16[] ZeroTeamOperators;//[Offset: 0x11d0, Size: 0x10]
	uint16[] FirstTeamOperators;//[Offset: 0x11e0, Size: 0x10]
	FString[] ZeroTeamWeapons;//[Offset: 0x11f0, Size: 0x10]
	FString[] FirstTeamWeapons;//[Offset: 0x1200, Size: 0x10]
	uint16[] ZeroTeamGrenades;//[Offset: 0x1210, Size: 0x10]
	uint16[] FirstTeamGrenades;//[Offset: 0x1220, Size: 0x10]
	uint16[] ZeroTeamGadgets;//[Offset: 0x1230, Size: 0x10]
	uint16[] FirstTeamGadgets;//[Offset: 0x1240, Size: 0x10]
	void ShowCrosshair(bool bShowCrosshair);// 0x1043b20
	void SetWeaponProxyMesh(bool bIsProxy);// 0x1043a90
	void Server_TryConfirmHelpRequest(WW3Character* InSenderCharacter);// 0x1043910
	void Server_SynchAttachmentSkins(byte Index);// 0x1043860
	void Server_SummaryPlayTauntAnimation(int InTauntIdx);// 0x10437a0
	void Server_SetProfileMainStrikesLoadoutIndex(int InIndex);// 0x10436e0
	void Server_SetProfileMainEquipmentLoadoutIndex(int InIndex, bool ReloadWeaponData);// 0x10435e0
	void Server_SetProfileMainCharacterLoadoutIndex(int InIndex);// 0x1043520
	void Server_SetProfileLoadoutWeapon(enum WeaponSlot, int InLoadout, WW3CustomizationSource CustomizationSource);// 0x10433d0
	void Server_SetProfileLoadoutStrike(enum StrikeSlot, int InLoadout, WW3CustomizationSource CustomizationSource);// 0x1043280
	void Server_SetProfileLoadoutGadget(enum SlotType, int InLoadout, uint16 InGadgetID, enum InItemType);// 0x1043100
	void Server_SetProfileLoadoutCamouflage(int InLoadout, int NewCamo);// 0x1043000
	void Server_SetProfileLoadoutArmor(enum SlotType, int InLoadout, uint16 NewArmor);// 0x1042ed0
	void Server_SetMinimapViewDistance(float NewMinimapViewDistance);// 0x1042e20
	void Server_SetDefaultBotWeaponBlueprints(FString[] TeamWeapons, int8 InTeamIndex);// 0x1042cf0
	void Server_SetDefaultBotOperatorBlueprints(uint16[] TeamOperators, int8 InTeamIndex);// 0x1042be0
	void Server_SetDefaultBotGrenades(uint16[] TeamGrenades, int8 InTeamIndex);// 0x1042ad0
	void Server_SetDefaultBotGadgets(uint16[] TeamGadgets, int8 InTeamIndex);// 0x10429c0
	void Server_SendMessageToLocalChat(FText InMessage, enum ChatChannel);// 0x1042890
	void Server_SendMessageToChat(WW3PlayerState* InPlayer, FText InMessage, enum ChatChannel);// 0x1042720
	void Server_RequestObjectiveForGadgetUse(WW3Character* GadgetOwner);// 0x1042660
	void Server_OnInteractFinished(WW3Character* InCharacter, Actor* InUsableActor, InClientInventoryID(UInt64Property) InClientInventoryID, bool bWillModifyInventory);// 0x10424e0
	void Server_OnClientFOVChanged(byte InClientVerticalFOVPacked);// 0x1042430
	void Server_OnClientAspectRatioChanged(float InClientAspectRatio);// 0x1042380
	void Server_InstantUpdatePlayerWeaponLoadout(InClientInventoryID(UInt64Property) InClientInventoryID, InInventoryOverrideId(UInt32Property) InInventoryOverrideId);// 0x1042280
	void Server_InstantUpdatePlayerStrikeLoadout();// 0x1042230
	void Server_InstantUpdatePlayerGadget(enum GadgetSlotType, int Amount);// 0x1042130
	void Server_HideLoadoutsCabinetMenu(int InSelectedEquipmentLoadout, int InSelectedStrikesLoadout, InClientInventoryID(UInt64Property) InClientInventoryID);// 0x1042000
	void Server_EnableEnoughSpaceToSpawnCheck(WW3Character* NewCharacterToSpawnOn);// 0x1041f40
	void Server_ClientReceivedServerStartDate();// 0x1041ef0
	void Server_ChooseSecondTeam();// 0x1041ea0
	void Server_ChooseFirstTeam();// 0x1041e50
	void Server_ChooseAnyTeam();// 0x1041e00
	void Server_CheatDebug_LogSpawningOnVehicleInfo();// 0x1041db0
	void Server_ChangeCurrentInventoryConfig(int8 InventoryConfigIndex);// 0x1041d00
	void Server_BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x1041ae0
	void Server_BroadcastRadioCommand(enum CommandType, enum CommandTarget, int8 CallerTeam, int8 TargetGroupIndex);// 0x1041960
	void Server_AskForPunishPlayer(FString PlayerUniqueID);// 0x10418a0
	void Server_AddStrikeUseObjective(class WW3StrikeUseObjective GameObjectiveClass, enum StrikeType, WW3PlayerState* TartgetActor, Vector InRequestedLocationForStrike);// 0x1041700
	void Server_AddOrForcePlayerToReplicateProfileFrom(WW3PlayerState* InPlayerStateToReplicate);// 0x1041640
	void Server_AddObjective(class WW3GameObjective GameObjectiveClass, Object* ObjectiveTargetActor);// 0x1041540
	void Server_AddGadgetUseObjective(class WW3GadgetUseObjective GameObjectiveClass, enum InType, WW3PlayerState* TartgetActor);// 0x1041410
	void Sensitivity(float Value);// 0xf4a1b0
	void SendSummaryScreenData(uint16 SummarySinglePacketMaxSize, byte SummaryMaxNumPacketsPerCall, bool ReturnValue);// 0x1041350
	void SendPlayersProfileData(uint16 SinglePacketMaxSize, byte MaxNumPacketsPerCall, bool ReturnValue);// 0x1041290
	void SavePlayerProfile(bool bForceSteamSave, bool bForceFirstTimeSendMessage);// 0x10411c0
	void SaveCustomConfigs(WW3GameInstance* GameInstance, bool bForceSendMessage);// 0x10410f0
	void SaveCurrentAccountConfig(WW3GameInstance* GameInstance, bool bForceSendMessage);// 0x10410f0
	void OnServerRecievedPlayerProfile();// 0x10410d0
	void OnRep_InGameCustomizationData();// 0x10410b0
	void OnMarkKeyPressedTimerCompleted();// 0x1041090
	void OnAseStateChanged();// 0x1040eb0
	void LoadPlayerProfile();// 0x1040e90
	void IsEnoughSpaceCheckEnabled(bool ReturnValue);// 0x1040e40
	void GetWW3LocalObjectiveSystem(WW3LocalObjectiveSystem* ReturnValue);// 0x1040d90
	void GetHasEnoughSpaceToSpawnOn(bool ReturnValue);// 0x1040d70
	void FPPFOV(float NewFOV);// 0x1040c60
	void CreateSuppressAndAdrenalineWidget(WW3SuppressAndAdrenalineWidget* ReturnValue);// 0x1395e00
	void ClientGetServerID(FString InServerID, FString InServerName);// 0x103dc10
	void Client_SummaryScreenFadeOutCamera();// 0x1040c40
	void Client_SummaryScreenDataReplicationStarted(InDataArraySize(UInt32Property) InDataArraySize);// 0x1040bb0
	void Client_SummaryPlayTauntAnimation(InSteamID(UInt64Property) InSteamID, int InTauntIdx);// 0x1040ae0
	void Client_StartDominationMatch();// 0x1040ac0
	void Client_ShowWinLooseScreen(enum InMatchResult);// 0x1040a40
	void Client_ShowLoadoutsCabinetMenu(WW3LoadoutsCabinet* InCabinet);// 0x10409b0
	void Client_ShowInfantryWidget();// 0x1040990
	void Client_ShowHitByEnemyNotificationOnHUD(byte InDamageTaken, Vector_NetQuantize100 InInstigatorLocation);// 0x10408c0
	void Client_ShowExplosionDebugLine(Vector Origin, ExplosiveDamageParams ExplosionParams);// 0x1040790
	void Client_ShowEnemyHitNotificationOnHUD(enum HitType);// 0x1040710
	void Client_SetupKillScreen(WW3SimplifiedTakenHitInfo[] SimplifiedHitInfo, enum DeathType, enum InLastMarkType, uint16 InDeathCauserItemID);// 0x10405c0
	void Client_SetServerPerformanceIconsStatus(enum NewStatus);// 0x1040540
	void Client_SetLastPostDeathCameraTargetLocation(Vector_NetQuantize100 InLocation);// 0x10404b0
	void Client_SendSummaryScreenData(byte[] InData);// 0x1040410
	void Client_SendServerPerformanceMeasuredLevel(enum InLevel);// 0x1040390
	void Client_SendServerPerformanceMeasure(WW3PerformanceMeasurePeriod InMeasurePeriod);// 0x1040280
	void Client_SendPostDeathCameraKillerReplicatedPausedFlagValue(bool bInValue);// 0x10401f0
	void Client_SendPlayersProfileData(InForReplicatedPlayer(UInt32Property) InForReplicatedPlayer, byte[] InData);// 0x1040110
	void Client_SendPlayerProfileLevel(WW3PlayerState* InPlayerWhoChangedLevel, int InNewLevel);// 0x1040040
	void Client_SendOptimizationReport(WW3OptimizationReport InReport);// 0x103ff90
	void Client_SendLatestServerPerformanceData(byte InPerfPercentage);// 0x103ff10
	void Client_SendCreateStrikeResultFailed(enum InResult, WW3InventoryGadgetStrike* InGadgetStrike);// 0x103fe40
	void Client_SendBotsReport(WW3BotsDebugData InBotsDebugData);// 0x103fc90
	void Client_Restart();// 0x103fc70
	void Client_ReplicateProfileFromNextPlayerInList(LocalPlayer(UInt32Property) LocalPlayer, ReplicatedPlayer(UInt32Property) ReplicatedPlayer);// 0x103fbb0
	void Client_ReceiveServerStartDate(DateTime InDateTime);// 0x103fb30
	void Client_ReceiveMessageForChat(WW3PlayerState* InPlayer, FText InMessage, enum ChatChannel);// 0x103f9f0
	void Client_PosTip(enum TipType);// 0x103f970
	void Client_PlayRadioCommand(enum CommandType);// 0x103f8c0
	void Client_PlayerCantBeSpawned();// 0x103f950
	void Client_OnTeamSwitch();// 0x103f8a0
	void Client_OnServerVersionOfPackDestroyed(InPackID(UInt64Property) InPackID);// 0x103f810
	void Client_OnLocalPlayerCollectedDogTag();// 0x103f7f0
	void Client_OnInGameCustomizationApplySucceeded(uint16 InRequestID);// 0x103f760
	void Client_OnInGameCustomizationApplyFailed(uint16 InRequestID, InClientInventoryID(UInt64Property) InClientInventoryID, bool bWillModifyInventory);// 0x103f660
	void Client_OnFinishProjectileTV(Rotator Rotation);// 0x103f5e0
	void Client_OnFailedToModifyInventory(InClientInventoryID(UInt64Property) InClientInventoryID);// 0x103f550
	void Client_LoadoutsCabinetChangesApproved(int InSelectedEquipmentLoadout, int InSelectedStrikesLoadout);// 0x103f490
	void Client_InstantUpdatePlayerWeaponLoadoutFailed(InClientInventoryID(UInt64Property) InClientInventoryID);// 0x103f400
	void Client_InitSummaryScreenData();// 0x103f3e0
	void Client_ForceClearCurrentPlayersProfileReplication();// 0x103f3c0
	void Client_FinishPlayersProfileData();// 0x103f3a0
	void Client_DrawDebugSphereTraceMulti(Vector Start, Vector End, float Radius, byte DrawDebugType, bool bHit, HitResult[] OutHits, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x103f100
	void Client_DrawDebugSphere(Vector Center, float Radius, int Segments, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x103eec0
	void Client_DrawDebugLineFull(Vector LineStart, Vector LineEnd, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x103ecd0
	void Client_DrawDebugLine(Vector InStart, Vector InEnd, float InDuration, Color InColor);// 0x103eb90
	void Client_DrawDebugHitResults(HitResult[] Hits);// 0x103eaf0
	void Client_DrawDebugHitResult(HitResult Hit);// 0x103ea50
	void Client_DrawDebugCapsule(Vector Center, float HalfHeight, float Radius, Quat Rotation, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x103e7d0
	void Client_DrawDebugBoxTraceMulti(Vector Start, Vector End, Vector HalfSize, Rotator Orientation, byte DrawDebugType, bool bHit, HitResult[] OutHits, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x103e4d0
	void Client_DrawDebugBox(Vector Center, Vector Extent, Quat Rotation, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x103e2a0
	void Client_CheatDebug_LogSpawningOnVehicleInfo(FString InMessage);// 0x103e200
	void Client_ApplyOverridenInventory(InInventoryOverrideId(UInt32Property) InInventoryOverrideId);// 0x103e170
	void Client_AddVehicleMessageToDeathList(WW3Vehicle* DestroyedVehicle, enum VehicleType);// 0x103e0a0
	void Client_AddStrikePoints(int Value);// 0x103e010
	void Client_AddOnScreenDebugMessage(Key(UInt64Property) Key, float TimeToDisplay, Color DisplayColor, FString DebugMessage, bool bNewerOnTop, Vector2D TextScale);// 0x103de40
	void Client_AddMessageToDeathList(WW3PlayerState* Killer, WW3PlayerState* Victim, enum DeathType, enum HitBoneType);// 0x103dd00
	void CheatTestKeyGetter(FString Name);// 0x103db30
	void CheatAddChatMessage(FString Message);// 0xfd9db0

--------------------------------
Class: WW3PlayerControllerBase.ShooterPlayerController.PlayerController.Controller.Actor.Object
	class WW3Inputs[] InputsArray;//[Offset: 0x6b0, Size: 0x10]
	class WW3PlayerEffectsController* PlayerEffectsControllerClass;//[Offset: 0x6c0, Size: 0x8]
	class WW3HubData* HubData;//[Offset: 0x6c8, Size: 0x8]
	WW3PlayerEffectsController* EffectController;//[Offset: 0x6d0, Size: 0x8]
	WW3ProfilingDataController* ProfilingDataController;//[Offset: 0x6f8, Size: 0x8]
	WW3PlayerOptimizationController* OptimizationController;//[Offset: 0x700, Size: 0x8]
	WW3CustomOcclusionStreamingController* CustomOcclusionStreamingController;//[Offset: 0x708, Size: 0x8]
	WW3Inputs* CurrentInputs;//[Offset: 0x710, Size: 0x8]
	WW3PlayerCameraManager* WW3CameraManager;//[Offset: 0x718, Size: 0x8]
	WW3HubManagerBase* HubManagerPointer;//[Offset: 0x720, Size: 0x8]
	WW3FloorsStatus* FloorsStatus;//[Offset: 0x728, Size: 0x8]
	WW3HubWidget* HubHUDWidget;//[Offset: 0x748, Size: 0x8]
	WW3AudioSingleton* AudioSingleton;//[Offset: 0x750, Size: 0x8]
	WW3AkComponent* BarkAkComponent;//[Offset: 0x758, Size: 0x8]
	WW3AdvancedAudioManager* AdvancedAudioManager;//[Offset: 0x760, Size: 0x8]
	WW3KeyBindings* KeyBindings;//[Offset: 0x768, Size: 0x8]
	WW3AlwaysAwakeRPCActor* AlwaysAwakeRPCActor;//[Offset: 0x770, Size: 0x8]
	Object*[] ProcessConsoleExecObjects;//[Offset: 0x7d8, Size: 0x10]
	void ShowHUD(bool bShowHUD);// 0x1048ac0

--------------------------------
Class: ShooterPlayerController.PlayerController.Controller.Actor.Object
	bool bInfiniteAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x680, Size: 0x1]
	bool bInfiniteClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x680, Size: 0x1]
	bool bHealthRegen;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x680, Size: 0x1]
	bool bGodMode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x680, Size: 0x1]
	void Suicide();// 0xf235e0
	void SimulateInputKey(Key Key, bool bPressed);// 0xf234a0
	void SetGodMode(bool bEnable);// 0xf22ea0
	void ServerSuicide();// 0xf228a0
	void ClientSetSpectatorCamera(Vector CameraLocation, Rotator CameraRotation);// 0xf221b0
	void ClientGameStarted();// 0xf22190
	void ClientEndOnlineGame();// 0xf22170

--------------------------------
Class: WW3Inputs.Object
	bool bMoveForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bMoveRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	bool bLookUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]
	bool bSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool bProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]
	bool bJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f, Size: 0x1]
	bool bReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bInspect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	bool bMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1]
	bool bFirstGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool bSecondGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	bool bMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]
	bool bNextItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1]
	bool bPrevItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bFirstItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bSecondItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	bool bThirdItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1]
	bool bFourthItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool bFifthItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool bFirstStrike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	bool bSecondStrike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 0x1]
	bool bThirdStrike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bFourthStrike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bZeroItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	bool bFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]
	bool bTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool bChangeShootingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool bCustomize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
	bool bTaunt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 0x1]
	bool bLookAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bLeanRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool bLeanLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	void CanUseInputs(PlayerController* PC, bool ReturnValue);// 0xff88b0

--------------------------------
Class: WW3PlayerEffectsController.ActorComponent.Object
	class CameraShake* TakeDamageCameraShake;//[Offset: 0xf0, Size: 0x8]
	float BattleZonePostProcessShowDuration;//[Offset: 0xf8, Size: 0x4]
	float BattleZonePostProcessHideDuration;//[Offset: 0xfc, Size: 0x4]
	CurveFloat* BattleZonePostProcessShowHideCurve;//[Offset: 0x100, Size: 0x8]
	WW3PlayerControllerBase* OwningPC;//[Offset: 0x108, Size: 0x8]
	WW3AudioVolume* LastAudioVolume;//[Offset: 0x110, Size: 0x8]
	WW3PostProcessDescriptor[] PostProcessDescriptors;//[Offset: 0x118, Size: 0x10]
	WW3ExposureParameters DefaultExposureParameters;//[Offset: 0x128, Size: 0x14]
	float FlashLightDarknessRecoveryMult;//[Offset: 0x13c, Size: 0x4]
	WW3PlayerPostProcessWithDuration*[] HitPostProcesses;//[Offset: 0x140, Size: 0x10]
	WW3PlayerPostProcessWithDuration* DeathPostProcess;//[Offset: 0x150, Size: 0x8]
	WW3PlayerPostProcessWithDuration* SpawnPostProcess;//[Offset: 0x158, Size: 0x8]
	WW3PlayerPostProcess* BattleZoneLeftPostProcess;//[Offset: 0x160, Size: 0x8]
	void OnCameraChanged(WW3CameraComponent* OldCamera, WW3CameraComponent* NewCamera);// 0x1048410

--------------------------------
Class: WW3AudioVolume.AkSpatialAudioVolume.Volume.Brush.Actor.Object
	float ReverbPriority;//[Offset: 0x380, Size: 0x4]
	enum VolumeType;//[Offset: 0x384, Size: 0x1]
	float TailsAudioVolume;//[Offset: 0x388, Size: 0x4]
	AkAudioEvent* AmbientLoop;//[Offset: 0x390, Size: 0x8]
	WW3RTPCData[] EnteringRTPCs;//[Offset: 0x398, Size: 0x10]
	bool bUseZOffsetIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	bool bIsIndoorVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 0x1]
	float FloorNumber;//[Offset: 0x3ac, Size: 0x4]
	float[] FloorsBridge;//[Offset: 0x3b0, Size: 0x10]
	void OnOverlapEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xf45bf0
	void OnOverlapBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult);// 0xf45810

--------------------------------
Class: AkSpatialAudioVolume.Volume.Brush.Actor.Object
	AkSurfaceReflectorSetComponent* SurfaceReflectorSet;//[Offset: 0x368, Size: 0x8]
	AkLateReverbComponent* LateReverb;//[Offset: 0x370, Size: 0x8]
	AkRoomComponent* Room;//[Offset: 0x378, Size: 0x8]

--------------------------------
Class: AkSurfaceReflectorSetComponent.SceneComponent.ActorComponent.Object
	bool bEnableSurfaceReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
	AkPoly[] AcousticPolys;//[Offset: 0x250, Size: 0x10]
	bool bEnableDiffraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x260, Size: 0x1]
	bool bEnableDiffractionOnBoundaryEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x260, Size: 0x1]
	void UpdateSurfaceReflectorSet();// 0x54e7e0
	void SendSurfaceReflectorSet();// 0x54d720
	void RemoveSurfaceReflectorSet();// 0x54d700

--------------------------------
Class: AkPoly
	AkAcousticTexture* Texture;//[Offset: 0x0, Size: 0x8]
	bool EnableSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: AkAcousticTexture.PhysicalMaterial.Object

--------------------------------
Class: AkLateReverbComponent.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
	AkAuxBus* AuxBus;//[Offset: 0x250, Size: 0x8]
	FString AuxBusName;//[Offset: 0x258, Size: 0x10]
	float SendLevel;//[Offset: 0x268, Size: 0x4]
	float FadeRate;//[Offset: 0x26c, Size: 0x4]
	float Priority;//[Offset: 0x270, Size: 0x4]
	AkLateReverbComponent* NextLowerPriorityComponent;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: AkRoomComponent.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
	AkRoomComponent* NextLowerPriorityComponent;//[Offset: 0x250, Size: 0x8]
	float Priority;//[Offset: 0x258, Size: 0x4]
	float WallOcclusion;//[Offset: 0x25c, Size: 0x4]

--------------------------------
Class: WW3RTPCData
	FName RTPCName;//[Offset: 0x0, Size: 0x8]
	float RTPCValue;//[Offset: 0x8, Size: 0x4]
	int InterpolationTimeMs;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WW3PostProcessDescriptor
	enum PostProcessType;//[Offset: 0x0, Size: 0x1]
	enum PostProcessInterfaceType;//[Offset: 0x1, Size: 0x1]
	MaterialInterface* PostProcessMaterial;//[Offset: 0x8, Size: 0x8]
	int Priority;//[Offset: 0x10, Size: 0x4]
	int NumPostProcessesInGroup;//[Offset: 0x14, Size: 0x4]
	bool bIsDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	CurveFloat* FadeInCurve;//[Offset: 0x20, Size: 0x8]
	CurveFloat* FadeOutCurve;//[Offset: 0x28, Size: 0x8]
	float Duration;//[Offset: 0x30, Size: 0x4]
	FName NameOfMaterialParameterToUpdate;//[Offset: 0x38, Size: 0x8]
	WW3PlayerPostProcess* PostProcess;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: WW3PlayerPostProcess.Object
	MaterialInstanceDynamic* PostProcess;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WW3ExposureParameters
	float MinBrightness;//[Offset: 0x0, Size: 0x4]
	float MaxBrightness;//[Offset: 0x4, Size: 0x4]
	float LowPercent;//[Offset: 0x8, Size: 0x4]
	float HighPercent;//[Offset: 0xc, Size: 0x4]
	float VignetteIntensity;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WW3PlayerPostProcessWithDuration.WW3PlayerPostProcess.Object

--------------------------------
Class: WW3CameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	bool bForceInitialFOVCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 0x1]
	bool bIsFlashable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a1, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x7a4, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x7a8, Size: 0x4]
	float ViewYawMin;//[Offset: 0x7ac, Size: 0x4]
	float ViewYawMax;//[Offset: 0x7b0, Size: 0x4]
	float FoVChangeSpeed;//[Offset: 0x7b4, Size: 0x4]

--------------------------------
Class: WW3HubData.Object
	WW3CharacterAttachmentSlot[] AvailableSlots;//[Offset: 0x28, Size: 0x10]
	uint16 DefaultSkinId;//[Offset: 0x38, Size: 0x2]
	class Object* BasedItemClassForSkin;//[Offset: 0x40, Size: 0x8]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x48, Size: 0x8]
	MaterialInterface* MannequinMaterial;//[Offset: 0x50, Size: 0x8]
	MaterialInterface* MannequinTransparentMaterial;//[Offset: 0x58, Size: 0x8]
	class AnimInstance* CharacterAnimClass;//[Offset: 0x60, Size: 0x8]
	enum[] CharacterAttachmentSlots;//[Offset: 0x68, Size: 0x10]
	enum[] BannerAttachmentSlots;//[Offset: 0x78, Size: 0x10]
	<WW3HubSceneSublevelsSetup,None(None)> ScenesSublevelsSetup;//[Offset: 0x88, Size: 0x50]
	WW3HubPreviewActorLoadingMeshes PreviewActorLoadingMeshes;//[Offset: 0xd8, Size: 0x18]
	CurveFloat* RelativeOffsetAtFOVMultiplier;//[Offset: 0xf0, Size: 0x8]
	WW3HubCameraTransitionCurvesData CameraTransitionCurves;//[Offset: 0xf8, Size: 0x30]
	<WW3HubVectorArray,None(None)> CameraTypePlayersInfoPosition;//[Offset: 0x128, Size: 0x50]
	<AkAudioEvent*,None(None)> SoundsToPlay;//[Offset: 0x178, Size: 0x50]
	class WW3InfantryHUD* InfantryHUDClass;//[Offset: 0x1c8, Size: 0x8]
	WW3HubConfigModificationData[] DebugConfigModificationDatas;//[Offset: 0x1d0, Size: 0x10]
	enum[] DontSpawnThosePreviewActors;//[Offset: 0x1e0, Size: 0x10]
	WW3HubCameraPickUpData PickUpData;//[Offset: 0x1f0, Size: 0x14]
	<WW3HubSeparationConfig,None(None)> SeparationConfigs;//[Offset: 0x208, Size: 0x50]
	<FString,None(None)> IconMapping;//[Offset: 0x258, Size: 0x50]
	bool AddMissingKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	bool bGenerateMapsLoadingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 0x1]
	<WW3MapSublevelsData,None(None)> MapsLoadingData;//[Offset: 0x2b0, Size: 0x50]

--------------------------------
Class: WW3CharacterAttachmentSlot.WW3AttachmentSlot
	enum AttachmentSlotType;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: WW3AttachmentSlot
	FName SlotName;//[Offset: 0x8, Size: 0x8]
	FName SocketName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: WW3HubSceneSublevelsSetup
	FName Logic;//[Offset: 0x0, Size: 0x8]
	FName Visuals;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WW3HubPreviewActorLoadingMeshes
	StaticMesh* Character;//[Offset: 0x0, Size: 0x8]
	StaticMesh* Equipment;//[Offset: 0x8, Size: 0x8]
	StaticMesh* Strike;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: WW3HubCameraTransitionCurvesData
	CurveFloat* Location;//[Offset: 0x0, Size: 0x8]
	CurveFloat* Rotation;//[Offset: 0x8, Size: 0x8]
	CurveFloat* SpringArmLength;//[Offset: 0x10, Size: 0x8]
	CurveFloat* FOV;//[Offset: 0x18, Size: 0x8]
	CurveFloat* PickupCurve;//[Offset: 0x20, Size: 0x8]
	float Time;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: WW3HubVectorArray
	Vector[] HubVectorArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3InfantryHUD.WW3UserWidget.UserWidget.Widget.Visual.Object
	WW3CapturingCPWidget* CapturingCPWidget;//[Offset: 0x288, Size: 0x8]
	Overlay* RootHUDOverlay;//[Offset: 0x290, Size: 0x8]
	WW3ScoreStrikeUserWidget* ScoreStrikeWidget;//[Offset: 0x298, Size: 0x8]
	WW3KillListWidget* KillListWidget;//[Offset: 0x2a0, Size: 0x8]
	WW3ChatDisplayWidget* ChatDisplayWidget;//[Offset: 0x2a8, Size: 0x8]
	WW3InteractWidget* InteractWidget;//[Offset: 0x2b0, Size: 0x8]
	WW3HUD_SquadWidget* InGameSquadListWidget;//[Offset: 0x2b8, Size: 0x8]
	WW3WeaponInfoWidget* WeaponStatusWidget;//[Offset: 0x2c0, Size: 0x8]
	WW3VehicleCompassWidget* CompassWidget;//[Offset: 0x2c8, Size: 0x8]
	WW3Minimap_New* Minimap;//[Offset: 0x2d0, Size: 0x8]
	HealthStatusUserWidget* PlayerStatusWidget;//[Offset: 0x2d8, Size: 0x8]
	UserWidget* GadgetsInfoWidget;//[Offset: 0x2e0, Size: 0x8]
	WW3BoltActionWidget* BoltActionWidgetPtr;//[Offset: 0x2e8, Size: 0x8]
	WW3ObjectivesLogWidget* ObjectivesLogWidget;//[Offset: 0x2f0, Size: 0x8]
	WW3GasmaskWidget* GasmaskWidget;//[Offset: 0x2f8, Size: 0x8]
	WW3AseWidget* AseWidget;//[Offset: 0x300, Size: 0x8]
	WW3CapturePointMarks* CapturePointsListWidget;//[Offset: 0x308, Size: 0x8]
	WW3TipsContainerWidget* TipWidget;//[Offset: 0x310, Size: 0x8]
	WW3PlayerPingInfoWidget* PlayerPingWidget;//[Offset: 0x318, Size: 0x8]
	RetainerBox* HUDRetainerBox;//[Offset: 0x320, Size: 0x8]
	WW3MatchProgressWidgetWarzone* WarzoneScorebar;//[Offset: 0x328, Size: 0x8]
	WidgetSwitcher* TeamScoreSwitch;//[Offset: 0x330, Size: 0x8]
	MaterialInterface* JammedHUDMaterial;//[Offset: 0x338, Size: 0x8]
	WW3TimerWidget* MatchTimer;//[Offset: 0x340, Size: 0x8]
	WW3ScoreFeedbackWidget* ScoreFeedbackWidget;//[Offset: 0x348, Size: 0x8]
	WW3HVTTransmissionTimerWidget* HVTTransmissionTimer;//[Offset: 0x350, Size: 0x8]
	float RegularWidgetsAlpha;//[Offset: 0x358, Size: 0x4]
	float PlayerHUDInVehicleAlpha;//[Offset: 0x35c, Size: 0x4]
	float TimeToFullJamEffect;//[Offset: 0x360, Size: 0x4]
	void OnTransmissionTimerVisibilityChanged(bool bShouldBeVisible, LinearColor InBackgroundColor);// 0xff2de0
	void OnPingText(FText ReturnValue);// 0xff2be0
	void OnGetHVTGameTransmissionTime(FText ReturnValue);// 0xff2940
	void OnCPRoleCapturingToggled(bool bEnabled);// 0xff2630

--------------------------------
Class: WW3UserWidget.UserWidget.Widget.Visual.Object
	Vector2D WidgetDefaultSize;//[Offset: 0x208, Size: 0x8]
	SizeBox* WidgetSizeBox;//[Offset: 0x210, Size: 0x8]
	InvalidationBox* WidgetInvalidationBox;//[Offset: 0x218, Size: 0x8]
	bool bVisibleInVechicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1]
	bool bVisibleOnWarmup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 0x1]
	bool bVisibleOnMatchInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x222, Size: 0x1]
	bool bVisibleDuringKnockdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x223, Size: 0x1]
	bool bShouldBeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1]
	bool bChangeColorInSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x225, Size: 0x1]
	float ContextualDisplayTimeAfterHit;//[Offset: 0x228, Size: 0x4]
	float ContextualDisplayTimeAfterRefill;//[Offset: 0x22c, Size: 0x4]
	float FadeTime;//[Offset: 0x230, Size: 0x4]
	<enum,None(None)> VisibilityChannels;//[Offset: 0x238, Size: 0x50]

--------------------------------
Class: WW3CapturingCPWidget.UserWidget.Widget.Visual.Object
	ProgressBar* ProgressBar;//[Offset: 0x210, Size: 0x8]
	Image* DirectionImage;//[Offset: 0x218, Size: 0x8]
	Image* EnemyPresenceIndicator;//[Offset: 0x220, Size: 0x8]
	WW3CapturePointIcon* CapturePointIcon;//[Offset: 0x228, Size: 0x8]
	LinearColor NoEnemyColor;//[Offset: 0x230, Size: 0x10]
	LinearColor LowEnemyPresenceColor;//[Offset: 0x240, Size: 0x10]
	LinearColor MediumEnemyPresenceColor;//[Offset: 0x250, Size: 0x10]
	LinearColor HighEnemyPresenceColor;//[Offset: 0x260, Size: 0x10]
	int LowThreshold;//[Offset: 0x270, Size: 0x4]
	int MediumThreshold;//[Offset: 0x274, Size: 0x4]
	int HighThreshold;//[Offset: 0x278, Size: 0x4]
	ProgressBarStyle Redbar;//[Offset: 0x280, Size: 0x1a0]
	ProgressBarStyle BlueBar;//[Offset: 0x420, Size: 0x1a0]
	float MinAnimationSize;//[Offset: 0x5c0, Size: 0x4]
	float MaxAnimationSize;//[Offset: 0x5c4, Size: 0x4]
	CurveFloat* AnimProgressCurve;//[Offset: 0x5c8, Size: 0x8]
	void PostConstruct();// 0x5d2c60
	void OnProgressBarValue(float ReturnValue);// 0xf5c360
	void OnPresenceColor(LinearColor ReturnValue);// 0xf5c320
	void CallForwardAnimation();// 0xf5c140
	void CallBackwardAnimation();// 0xf5c120

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x100, Size: 0x1a0]
	SlateWidgetStyleAsset* Style;//[Offset: 0x2a0, Size: 0x8]
	SlateBrushAsset* BackgroundImage;//[Offset: 0x2a8, Size: 0x8]
	SlateBrushAsset* FillImage;//[Offset: 0x2b0, Size: 0x8]
	SlateBrushAsset* MarqueeImage;//[Offset: 0x2b8, Size: 0x8]
	float Percent;//[Offset: 0x2c0, Size: 0x4]
	byte BarFillType;//[Offset: 0x2c4, Size: 0x1]
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5, Size: 0x1]
	Vector2D BorderPadding;//[Offset: 0x2c8, Size: 0x8]
	delegate PercentDelegate;//[Offset: 0x2d0, Size: 0x10]
	LinearColor FillColorAndOpacity;//[Offset: 0x2e0, Size: 0x10]
	delegate FillColorAndOpacityDelegate;//[Offset: 0x2f0, Size: 0x10]
	void SetPercent(float InPercent);// 0x1d0e9e0
	void SetIsMarquee(bool InbIsMarquee);// 0x1d0e410
	void SetFillColorAndOpacity(LinearColor InColor);// 0x1d0e180

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 0x88]
	SlateBrush FillImage;//[Offset: 0x90, Size: 0x88]
	SlateBrush MarqueeImage;//[Offset: 0x118, Size: 0x88]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: WW3CapturePointIcon.WW3GameplayMapWidget.UserWidget.Widget.Visual.Object
	WW3RespawnMapWidget* RespawnMap;//[Offset: 0x2e0, Size: 0x8]
	WW3CaptureAreaComponent* BoundCaptureArea;//[Offset: 0x2e8, Size: 0x8]
	WW3CapturePoint* CapturePoint;//[Offset: 0x2f0, Size: 0x8]
	bool bShowProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	Image* IconImage;//[Offset: 0x300, Size: 0x8]
	float DisabledSpawnAlpha;//[Offset: 0x308, Size: 0x4]
	float TargetedDisabledSpawnAlpha;//[Offset: 0x30c, Size: 0x4]
	WW3CapturePointMarker* BoundedCaptureMarker;//[Offset: 0x310, Size: 0x8]
	WW3IconInteractionAnimationData IconInteractionAnimationData;//[Offset: 0x318, Size: 0x5c]
	bool bIsMarked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	bool bIsClickable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38b, Size: 0x1]
	void SetIconFromMaterial(MaterialInstanceDynamic* Mid);// 0x1395e00
	void SetIconFromImage(SlateBrush Image);// 0x1395e00
	void Reconstruct();// 0xf5c430
	void OnPlayerSynchronized();// 0xf5c2e0
	void GetIconVisibility(enum ReturnValue);// 0xf5c200

--------------------------------
Class: WW3RespawnMapWidget.UserWidget.Widget.Visual.Object
	int8 CurrentConfig;//[Offset: 0x210, Size: 0x1]
	WW3InventoryPresetWidget* InventoryPresetWidgetPtr;//[Offset: 0x218, Size: 0x8]
	bool bRespawnInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1]
	bool bRespawnNearSquadLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 0x1]
	bool bMapUsesAlphaFromRed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x222, Size: 0x1]
	WW3GameplayMap* GameplayMapWidget;//[Offset: 0x228, Size: 0x8]
	RetainerBox* GameplayMapRetainerBox;//[Offset: 0x230, Size: 0x8]
	WW3CapturePointsPanel* CapturePointsPanel;//[Offset: 0x238, Size: 0x8]
	WW3MobileSpawnWidget* MobileSpawnPanel;//[Offset: 0x240, Size: 0x8]
	Button* DeployButton;//[Offset: 0x248, Size: 0x8]
	TextBlock* DeplotTextBlockPtr;//[Offset: 0x250, Size: 0x8]
	WW3SwitchTeamsWidget* SwitchTeamsWidget;//[Offset: 0x258, Size: 0x8]
	WidgetSwitcher* RestrictionSwitcherWidget;//[Offset: 0x260, Size: 0x8]
	<WW3CapturePointsWidget,None(None)> CapturePointsIconsMap;//[Offset: 0x268, Size: 0x50]
	WW3CaptureAreaComponent* MarkedCapturePoint;//[Offset: 0x2b8, Size: 0x8]
	WW3SquadCompositionWidget* SquadCompositionWidget;//[Offset: 0x2c0, Size: 0x8]
	WW3SquasListWidget* SquasListWidget;//[Offset: 0x2c8, Size: 0x8]
	WW3CurrentSquadStatWidget* CurrentSquadStatWidget;//[Offset: 0x2d0, Size: 0x8]
	FText WaitingForPlayersMatchStateText;//[Offset: 0x2d8, Size: 0x18]
	FText WaitingForRoundMatchStateText;//[Offset: 0x2f0, Size: 0x18]
	FText WaitingForFirstRoundMatchStateText;//[Offset: 0x308, Size: 0x18]
	FText InProgressMatchStateText;//[Offset: 0x320, Size: 0x18]
	FText AutoDeployTextFirstPart;//[Offset: 0x338, Size: 0x18]
	FText BattlepointsText;//[Offset: 0x350, Size: 0x18]
	LinearColor RegularDeployButtonColor;//[Offset: 0x368, Size: 0x10]
	LinearColor UnavailableDeployButtonColor;//[Offset: 0x378, Size: 0x10]
	WW3PlayerState* PlayerStateToSpawnOn;//[Offset: 0x388, Size: 0x8]
	WW3PlayerState* LocalPlayerState;//[Offset: 0x450, Size: 0x8]
	class WW3SquadScreenWidget* SquadScreenClass;//[Offset: 0x458, Size: 0x8]
	class WW3RadialMenu* RadialMenuClass;//[Offset: 0x460, Size: 0x8]
	WW3SquadScreenWidget* SSW;//[Offset: 0x468, Size: 0x8]
	TextBlock* SquadNameTextBlock;//[Offset: 0x470, Size: 0x8]
	WW3SquadLeaderIcon* SquadLeaderIcon;//[Offset: 0x478, Size: 0x8]
	TextBlock* SquadLeaderTextBlock;//[Offset: 0x480, Size: 0x8]
	TextBlock* WidgetTitle;//[Offset: 0x488, Size: 0x8]
	VerticalBox* SquadLeaderButtonVerticalBoxPtr;//[Offset: 0x490, Size: 0x8]
	WW3RadialMenu* RadialMenu;//[Offset: 0x4a8, Size: 0x8]
	WW3SquadObject* CurrentSquadData;//[Offset: 0x4b0, Size: 0x8]
	bool bRespawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]
	bool bRespawnAlways;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b9, Size: 0x1]
	WW3Vehicle* VehicleToSpawnOn;//[Offset: 0x4c0, Size: 0x8]
	interface classNone[] RegisteredDeployMapSelectables;//[Offset: 0x4d0, Size: 0x10]
	interface class None* SelectedDeployMapSelectable;//[Offset: 0x4e0, Size: 0x10]
	WW3MobileSpawnGadget* MobileSpawnGadget;//[Offset: 0x500, Size: 0x8]
	void SetMapRetainerMaterialParams();// 0x1395e00
	void PostContruct();// 0x1075900
	void PlayerChangedSquad(WW3PlayerState* InSender, WW3SquadObject* InPrevSquad, WW3SquadObject* InCurrentSquad);// 0x1075800
	void OnSquadButtonClick();// 0x10757e0
	void OnSpawnModeChanged(bool NewMode);// 0x1075750
	void OnRoleButtonClick();// 0x1075730
	void OnRespawnMaskChanged(WW3SquadObject* InSender);// 0x10756b0
	void OnMatchStateText(FText ReturnValue);// 0x1075610
	void OnMarkedCapturePointOwnerChanged(int8 Team, WW3CaptureAreaComponent* CaptureArea);// 0x1075550
	void OnGetCurrentBattlepointsText(FText ReturnValue);// 0x10754b0
	void OnGetAutoDeployText(FText ReturnValue);// 0x1075430
	void OnDeployText(FText ReturnValue);// 0x10753b0
	void OnDeployButtonPerCent(float ReturnValue);// 0x1075380
	void OnDeployButtonClick();// 0x1075360
	void EventSquadLeaderAvailable();// 0x1395e00
	void EventReasonVEHICLE_FULL();// 0x1395e00
	void EventReasonUNAVAILABLE();// 0x1395e00
	void EventReasonSUPPRESSED();// 0x1395e00
	void EventReasonSquadLeaderIsDead();// 0x1395e00
	void EventReasonIsOnCapturePoint();// 0x1395e00
	void EventReasonDRIVING_MOBILE_SPAWN();// 0x1395e00
	void CreateCapturePointPanelIcon(WW3CapturePoint* CapturePoint);// 0x1075230

--------------------------------
Class: WW3InventoryPresetWidget.UserWidget.Widget.Visual.Object
	WW3VerticalBox* ButtonsConfigVerticalBox;//[Offset: 0x208, Size: 0x8]
	TextBlock*[] WeaponsTextBlockArray;//[Offset: 0x210, Size: 0x10]
	TextBlock*[] GrenadeTextBlockArray;//[Offset: 0x220, Size: 0x10]
	TextBlock*[] StrikesTextBlockArray;//[Offset: 0x230, Size: 0x10]
	TextBlock* ArmorTextBlock;//[Offset: 0x240, Size: 0x8]
	TextBlock* WeightTextBlock;//[Offset: 0x248, Size: 0x8]
	TextBlock* NameTextBlock;//[Offset: 0x250, Size: 0x8]
	TextBlock* GadgetTextBlock;//[Offset: 0x258, Size: 0x8]
	HorizontalBox* PageHBox;//[Offset: 0x260, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0x268, Size: 0x8]
	ComboBoxString* GadgetComboBoxString;//[Offset: 0x270, Size: 0x8]
	WW3ConfigButton*[] ConfigButtons;//[Offset: 0x278, Size: 0x10]
	<byte,None(None)> MapOfPageConfigs;//[Offset: 0x288, Size: 0x50]
	<uint16,None(None)> MapOfGadgets;//[Offset: 0x2d8, Size: 0x50]
	<uint16,None(None)> MapOfGrenades;//[Offset: 0x328, Size: 0x50]
	VerticalBox*[] ConfigButtonsPanels;//[Offset: 0x378, Size: 0x10]
	class WW3ConfigButton* ButtonConfigClass;//[Offset: 0x388, Size: 0x8]
	ButtonStyle MarkedStyle;//[Offset: 0x390, Size: 0x278]
	ButtonStyle UnmarkedStyle;//[Offset: 0x608, Size: 0x278]
	ButtonStyle PageButtonStyle;//[Offset: 0x880, Size: 0x278]
	SlateFontInfo PageButtonFont;//[Offset: 0xaf8, Size: 0x58]
	TextBlock* StrikesTitleText;//[Offset: 0xb50, Size: 0x8]
	bool ReconConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb58, Size: 0x1]
	ComboBoxString* GrenadesComboBoxString;//[Offset: 0xb60, Size: 0x8]
	void PostConstruct();// 0x5d2c60
	void OnOptionChanged(FString SelectedItem, byte SelectionType);// 0x1001250
	void OnGrenadeChanged(FString SelectedItem, byte SelectionType);// 0x1001250
	void AddWeaponsInfo(int ClickedButtonIndex);// 0xf3a3b0
	void AddGrenadesInfo(int ClickedButtonIndex);// 0xf3a3b0
	void AddGadgetsInfo(int ClickedButtonIndex);// 0xf3a3b0
	void AddArmorPlateInfo(int ClickedButtonIndex);// 0xf3a3b0

--------------------------------
Class: WW3VerticalBox.VerticalBox.PanelWidget.Widget.Visual.Object

--------------------------------
Class: VerticalBox.PanelWidget.Widget.Visual.Object
	void AddChildToVerticalBox(Widget* Content, VerticalBoxSlot* ReturnValue);// 0x1d1a490

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	SlateChildSize Size;//[Offset: 0x48, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x1d059c0
	void SetSize(SlateChildSize InSize);// 0x1d056a0
	void SetPadding(Margin InPadding);// 0x1d05340
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x1d04c50

--------------------------------
Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 0x4]
	byte SizeRule;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	void AddChildToHorizontalBox(Widget* Content, HorizontalBoxSlot* ReturnValue);// 0x1d03310

--------------------------------
Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	SlateChildSize Size;//[Offset: 0x48, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x1d059c0
	void SetSize(SlateChildSize InSize);// 0x1d056a0
	void SetPadding(Margin InPadding);// 0x1d05340
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x1d04c50

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x118, Size: 0x4]
	void SetActiveWidgetIndex(int Index);// 0x1d222d0
	void SetActiveWidget(Widget* Widget);// 0x1d158e0
	void GetWidgetAtIndex(int Index, Widget* ReturnValue);// 0x1d218f0
	void GetNumWidgets(int ReturnValue);// 0x1d215b0
	void GetActiveWidgetIndex(int ReturnValue);// 0x1d211e0
	void GetActiveWidget(Widget* ReturnValue);// 0x1d211b0

--------------------------------
Class: ComboBoxString.Widget.Visual.Object
	FString[] DefaultOptions;//[Offset: 0x100, Size: 0x10]
	FString SelectedOption;//[Offset: 0x110, Size: 0x10]
	ComboBoxStyle WidgetStyle;//[Offset: 0x120, Size: 0x3d8]
	TableRowStyle ItemStyle;//[Offset: 0x4f8, Size: 0x6b8]
	Margin ContentPadding;//[Offset: 0xbb0, Size: 0x10]
	float MaxListHeight;//[Offset: 0xbc0, Size: 0x4]
	bool HasDownArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc4, Size: 0x1]
	bool EnableGamepadNavigationMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc5, Size: 0x1]
	SlateFontInfo Font;//[Offset: 0xbc8, Size: 0x58]
	SlateColor ForegroundColor;//[Offset: 0xc20, Size: 0x28]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc48, Size: 0x1]
	delegate OnGenerateWidgetEvent;//[Offset: 0xc50, Size: 0x10]
	delegate OnSelectionChanged;//[Offset: 0xc60, Size: 0x10]
	delegate OnOpening;//[Offset: 0xc70, Size: 0x10]
	void SetSelectedOption(FString Option);// 0x1d00980
	void RemoveOption(FString Option, bool ReturnValue);// 0x1cff310
	void RefreshOptions();// 0x1cff2f0
	void OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0x1395e00
	void OnOpeningEvent__DelegateSignature();// 0x1395e00
	void GetSelectedOption(FString ReturnValue);// 0x1cfef10
	void GetOptionCount(int ReturnValue);// 0x1cfeea0
	void GetOptionAtIndex(int Index, FString ReturnValue);// 0x1cfedd0
	void FindOptionIndex(FString Option, int ReturnValue);// 0x1cfeb40
	void ClearSelection();// 0x1cfea40
	void ClearOptions();// 0x1cfea20
	void AddOption(FString Option);// 0x1cfe980

--------------------------------
Class: ComboBoxStyle.SlateWidgetStyle
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x8, Size: 0x3a0]
	SlateSound PressedSlateSound;//[Offset: 0x3a8, Size: 0x18]
	SlateSound SelectionChangeSlateSound;//[Offset: 0x3c0, Size: 0x18]

--------------------------------
Class: ComboButtonStyle.SlateWidgetStyle
	ButtonStyle ButtonStyle;//[Offset: 0x8, Size: 0x278]
	SlateBrush DownArrowImage;//[Offset: 0x280, Size: 0x88]
	SlateBrush MenuBorderBrush;//[Offset: 0x308, Size: 0x88]
	Margin MenuBorderPadding;//[Offset: 0x390, Size: 0x10]

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 0x88]
	SlateBrush Hovered;//[Offset: 0x90, Size: 0x88]
	SlateBrush Pressed;//[Offset: 0x118, Size: 0x88]
	SlateBrush Disabled;//[Offset: 0x1a0, Size: 0x88]
	Margin NormalPadding;//[Offset: 0x228, Size: 0x10]
	Margin PressedPadding;//[Offset: 0x238, Size: 0x10]
	SlateSound PressedSlateSound;//[Offset: 0x248, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x260, Size: 0x18]

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TableRowStyle.SlateWidgetStyle
	SlateBrush SelectorFocusedBrush;//[Offset: 0x8, Size: 0x88]
	SlateBrush ActiveHoveredBrush;//[Offset: 0x90, Size: 0x88]
	SlateBrush ActiveBrush;//[Offset: 0x118, Size: 0x88]
	SlateBrush InactiveHoveredBrush;//[Offset: 0x1a0, Size: 0x88]
	SlateBrush InactiveBrush;//[Offset: 0x228, Size: 0x88]
	SlateBrush EvenRowBackgroundHoveredBrush;//[Offset: 0x2b0, Size: 0x88]
	SlateBrush EvenRowBackgroundBrush;//[Offset: 0x338, Size: 0x88]
	SlateBrush OddRowBackgroundHoveredBrush;//[Offset: 0x3c0, Size: 0x88]
	SlateBrush OddRowBackgroundBrush;//[Offset: 0x448, Size: 0x88]
	SlateColor TextColor;//[Offset: 0x4d0, Size: 0x28]
	SlateColor SelectedTextColor;//[Offset: 0x4f8, Size: 0x28]
	SlateBrush DropIndicator_Above;//[Offset: 0x520, Size: 0x88]
	SlateBrush DropIndicator_Onto;//[Offset: 0x5a8, Size: 0x88]
	SlateBrush DropIndicator_Below;//[Offset: 0x630, Size: 0x88]

--------------------------------
Class: WW3ConfigButton.UserWidget.Widget.Visual.Object
	Button* Button;//[Offset: 0x208, Size: 0x8]
	TextBlock* ButtonText;//[Offset: 0x210, Size: 0x8]
	TextBlock* ButtonWeightText;//[Offset: 0x218, Size: 0x8]
	LinearColor LinkColor;//[Offset: 0x220, Size: 0x10]
	LinearColor HoverColor;//[Offset: 0x230, Size: 0x10]
	LinearColor ActiveColor;//[Offset: 0x240, Size: 0x10]
	Image* MarkedImage;//[Offset: 0x250, Size: 0x8]
	void OnButtonClicked();// 0x10011b0

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x118, Size: 0x8]
	ButtonStyle WidgetStyle;//[Offset: 0x120, Size: 0x278]
	LinearColor ColorAndOpacity;//[Offset: 0x398, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x3a8, Size: 0x10]
	byte ClickMethod;//[Offset: 0x3b8, Size: 0x1]
	byte TouchMethod;//[Offset: 0x3b9, Size: 0x1]
	byte PressMethod;//[Offset: 0x3ba, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bb, Size: 0x1]
	delegate OnClicked;//[Offset: 0x3c0, Size: 0x10]
	delegate OnPressed;//[Offset: 0x3d0, Size: 0x10]
	delegate OnReleased;//[Offset: 0x3e0, Size: 0x10]
	delegate OnHovered;//[Offset: 0x3f0, Size: 0x10]
	delegate OnUnhovered;//[Offset: 0x400, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x1d00bc0
	void SetStyle(ButtonStyle InStyle);// 0x1d00ae0
	void SetPressMethod(byte InPressMethod);// 0x1d00880
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x1cffbf0
	void SetClickMethod(byte InClickMethod);// 0x1cffb70
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x1cff5f0
	void IsPressed(bool ReturnValue);// 0x1cff290

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	void SetContent(Widget* Content, PanelSlot* ReturnValue);// 0x1d04780
	void GetContentSlot(PanelSlot* ReturnValue);// 0x1d038d0
	void GetContent(Widget* ReturnValue);// 0x1d038a0

--------------------------------
Class: WW3GameplayMap.WW3UserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* Canvas;//[Offset: 0x288, Size: 0x8]
	Image* MapTexture;//[Offset: 0x290, Size: 0x8]
	Image* MapOverlay;//[Offset: 0x298, Size: 0x8]
	Image* FloorImage;//[Offset: 0x2a0, Size: 0x8]
	RetainerBox* FloorImageRetainerBox;//[Offset: 0x2a8, Size: 0x8]
	RetainerBox* RetainerBox;//[Offset: 0x2b0, Size: 0x8]
	CanvasPanel* CanvasPtr;//[Offset: 0x2b8, Size: 0x8]
	WW3SatelliteMapGenerator* MapGenerator;//[Offset: 0x2c0, Size: 0x8]
	<CanvasPanelSlot*,None(None)> DrawableObjectsWidgets;//[Offset: 0x2d0, Size: 0x50]
	interface class None* MapContainer;//[Offset: 0x320, Size: 0x10]
	void SetGeneratedMap();// 0x1395e00
	void OnSatelliteMapTextureGenerated(WW3SatelliteMapGenerator* InSatelliteMapGenerator);// 0xfd0700

--------------------------------
Class: RetainerBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool RenderOnInvalidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool RenderOnPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]
	int Phase;//[Offset: 0x11c, Size: 0x4]
	int PhaseCount;//[Offset: 0x120, Size: 0x4]
	MaterialInterface* EffectMaterial;//[Offset: 0x128, Size: 0x8]
	FName TextureParameter;//[Offset: 0x130, Size: 0x8]
	void SetTextureParameter(FName TextureParameter);// 0x1d0f1c0
	void SetRenderingPhase(int RenderPhase, int TotalPhases);// 0x1d0ea60
	void SetEffectMaterial(MaterialInterface* EffectMaterial);// 0x1d0e100
	void RequestRender();// 0x1d0db00
	void GetEffectMaterial(MaterialInstanceDynamic* ReturnValue);// 0x1d0d3c0

--------------------------------
Class: WW3CapturePointsPanel.UserWidget.Widget.Visual.Object
	HorizontalBox* HorizontalBoxForCaputrePoints;//[Offset: 0x208, Size: 0x8]
	HorizontalBox* HorizontalBoxForRings;//[Offset: 0x210, Size: 0x8]
	HorizontalBox* HorizontalBoxForBases;//[Offset: 0x218, Size: 0x8]
	WW3RingIcon* ChosenRingIcon;//[Offset: 0x220, Size: 0x8]
	class WW3CapturePointIcon* CapturePointIconClass;//[Offset: 0x228, Size: 0x8]
	class WW3CapturePointPanelIcon* CapturePointPanelIconClass;//[Offset: 0x230, Size: 0x8]
	bool bHideIfDifferentTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	bool bHideIfAreaUnavailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1]
	bool bHideIfSpawnNotAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23a, Size: 0x1]
	void OnCapturePointActiveStateChanged(bool NewState);// 0xf5c230

--------------------------------
Class: WW3RingIcon.UserWidget.Widget.Visual.Object
	WW3CaptureAreaComponent* BoundAreaComponent;//[Offset: 0x208, Size: 0x8]
	Button* RingIconButton;//[Offset: 0x210, Size: 0x8]
	ButtonStyle ChosenButtonStyle;//[Offset: 0x218, Size: 0x278]
	ButtonStyle UnChosenButtonStyle;//[Offset: 0x490, Size: 0x278]
	Widget* ParentWidget;//[Offset: 0x708, Size: 0x8]
	WW3RespawnMapWidget* RespawnMapWidget;//[Offset: 0x710, Size: 0x8]
	void OnRingIconClicked();// 0x1079ba0

--------------------------------
Class: WW3CaptureAreaComponent.ActorComponent.Object
	float CaptureTime;//[Offset: 0x108, Size: 0x4]
	int CaptureTicksNum;//[Offset: 0x10c, Size: 0x4]
	FText CaptureAreaName;//[Offset: 0x110, Size: 0x18]
	float SpawnDisablingTime;//[Offset: 0x138, Size: 0x4]
	float OwnerSpawnTimeRecoverMultiplier;//[Offset: 0x13c, Size: 0x4]
	bool bIsSpawningBeingDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	Volume*[] TriggerVolumes;//[Offset: 0x148, Size: 0x10]
	Actor*[] CapturableObjects;//[Offset: 0x158, Size: 0x10]
	Actor*[] TeamableObjects;//[Offset: 0x168, Size: 0x10]
	Actor*[] TeamableObjectsInsideCaptureArea;//[Offset: 0x178, Size: 0x10]
	Actor*[] TeamableObjectOutsideCaptureAreas;//[Offset: 0x188, Size: 0x10]
	WW3VehicleRegenerationPlatform*[] RegenerationPlatforms;//[Offset: 0x198, Size: 0x10]
	WW3BreakStation*[] BreakStations;//[Offset: 0x1a8, Size: 0x10]
	WW3WarzoneOutOfBounds*[] WarzoneOutOfBounds;//[Offset: 0x1b8, Size: 0x10]
	WW3CapturePointIcon*[] CaptureaAreaIcons;//[Offset: 0x1c8, Size: 0x10]
	WW3StartPointCamera* CameraInstance;//[Offset: 0x1d8, Size: 0x8]
	WW3CapturePointMarker* CaptureMarker;//[Offset: 0x260, Size: 0x8]
	float ElapsedCaptureTime;//[Offset: 0x268, Size: 0x4]
	float ElapsedCaptureTimeInterpolated;//[Offset: 0x26c, Size: 0x4]
	float ElapsedSpawnDisablingTime;//[Offset: 0x270, Size: 0x4]
	WW3PlayerStateField[] Teams;//[Offset: 0x278, Size: 0x10]
	int8 CapturingFirstTeamMembersAmount;//[Offset: 0x288, Size: 0x1]
	int8 CapturingSecondTeamMembersAmount;//[Offset: 0x289, Size: 0x1]
	int8 OwningTeam;//[Offset: 0x28a, Size: 0x1]
	int8 DominatingTeam;//[Offset: 0x28b, Size: 0x1]
	int8 CapturingTeam;//[Offset: 0x28c, Size: 0x1]
	int8 PreviousNonNeutralDominatingTeam;//[Offset: 0x28d, Size: 0x1]
	bool bIsSpawningEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28e, Size: 0x1]
	bool bWasCapturedBefore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28f, Size: 0x1]
	bool bIsCapturing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	bool bIsOpponentCapturing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 0x1]
	<WW3GameplayMapWidget*,None(None)> GameplayMapInteractiveWidgets;//[Offset: 0x298, Size: 0x50]
	<enum,bWasCapturedBefore(None)> RadioCommandTakingHoldFromCapturePointName;//[Offset: 0x2e8, Size: 0x50]
	<enum,CapturingSecondTeamMembersAmount(None)> RadioCommandUnderAttackFromCapturePointName;//[Offset: 0x338, Size: 0x50]
	AkAudioEvent* StartedCapturingSound;//[Offset: 0x388, Size: 0x8]
	AkAudioEvent* PausedCapturingSound;//[Offset: 0x390, Size: 0x8]
	AkAudioEvent* IndividualCapturingSuccessSound;//[Offset: 0x398, Size: 0x8]
	AkAudioEvent* TeamCapturingSuccessSound;//[Offset: 0x3a0, Size: 0x8]
	AkAudioEvent* TeamCaptureLostSound;//[Offset: 0x3a8, Size: 0x8]
	AkAudioEvent* CapturingInterruptedSound;//[Offset: 0x3b0, Size: 0x8]
	float AddScoreInterval;//[Offset: 0x3b8, Size: 0x4]
	byte ReplicatedElapsedCaptureTime;//[Offset: 0x3bc, Size: 0x1]
	byte ReplicatedElapsedSpawnDisablingTime;//[Offset: 0x3bd, Size: 0x1]
	WW3CapturePoint* CapturePointOwner;//[Offset: 0x3c0, Size: 0x8]
	WW3DynamicGameRulesManager* DynamicRules;//[Offset: 0x3d0, Size: 0x8]
	WW3TicketManager* TicketManager;//[Offset: 0x3d8, Size: 0x8]
	void OnRep_ReplicatedElapsedSpawnDisablingTime();// 0xf59170
	void OnRep_ReplicatedElapsedCaptureTime();// 0xf59150
	void OnRep_OwningTeam(int8 LastOwner);// 0xf59090
	void OnRep_IsSpawningDisabled();// 0xf59070
	void OnRep_DominatingTeam(int8 LastTeam);// 0xf58ff0
	void OnRep_CapturingSecondTeamMembersAmount();// 0x5d2c60
	void OnRep_CapturingFirstTeamMembersAmount();// 0x5d2c60
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xf58db0
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult);// 0xf58a40
	void GetTeam_BP(int ReturnValue);// 0xf58a10

--------------------------------
Class: WW3VehicleRegenerationPlatform.Actor.Object
	bool bIsRepairingAnything;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	enum[] UsableInGamemodes;//[Offset: 0x348, Size: 0x10]
	WW3AkComponent* RepairPlatformAudioComponent;//[Offset: 0x358, Size: 0x8]
	AkAudioEvent* StartRepairing;//[Offset: 0x360, Size: 0x8]
	AkAudioEvent* StopRepairing;//[Offset: 0x368, Size: 0x8]
	AkAudioEvent* RegeneratedEverythingSound;//[Offset: 0x370, Size: 0x8]
	BillboardComponent* RootBillboard;//[Offset: 0x378, Size: 0x8]
	BoxComponent* TriggerBox;//[Offset: 0x380, Size: 0x8]
	WW3ProgressableMarker* MarkerComp;//[Offset: 0x388, Size: 0x8]
	WW3Vehicle*[] VehiclesInTrigger;//[Offset: 0x390, Size: 0x10]
	float VehicleRegenerationPerSingleTry;//[Offset: 0x3a0, Size: 0x4]
	float MaxVehicleSpeedToRegenerate;//[Offset: 0x3a4, Size: 0x4]
	float SingleRegenerationDeltaTime;//[Offset: 0x3a8, Size: 0x4]
	WW3CaptureAreaComponent* OwnerComponent;//[Offset: 0x3b0, Size: 0x8]
	void OnRepIsRepairingAnything();// 0x10f42c0
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x10f4100
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult);// 0x10f3f10
	void Multicast_OnRegeneratedEverything();// 0xf3d810

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x598, Size: 0xc]
	float LineThickness;//[Offset: 0x5a4, Size: 0x4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x24b5bb0
	void GetUnscaledBoxExtent(Vector ReturnValue);// 0x24b59a0
	void GetScaledBoxExtent(Vector ReturnValue);// 0x24b5930

--------------------------------
Class: WW3Vehicle.WW3PawnStrike.Pawn.Actor.Object
	class WW3VehicleEMData* EffectsManagerData;//[Offset: 0xce8, Size: 0x8]
	class WW3VehicleSMData* SoundManagerData;//[Offset: 0xcf0, Size: 0x28]
	enum VehicleType;//[Offset: 0xd18, Size: 0x1]
	MaterialInterface* PostProcessAlternativeView;//[Offset: 0xd20, Size: 0x8]
	WW3AkComponent* EngineSoundComponent;//[Offset: 0xd28, Size: 0x8]
	WW3AkComponent* BurningSoundComponent;//[Offset: 0xd30, Size: 0x8]
	WW3VehicleData* VehicleDataPointer;//[Offset: 0xd38, Size: 0x8]
	ArrowComponent* LeftExhaustDirection;//[Offset: 0xd40, Size: 0x8]
	ArrowComponent* RightExhaustDirection;//[Offset: 0xd48, Size: 0x8]
	MaterialInstanceDynamic* CurrentLowestPostProcess;//[Offset: 0xd50, Size: 0x8]
	float CheckForFlipAroundDistance;//[Offset: 0xd58, Size: 0x4]
	bool bCheckForFlipAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5c, Size: 0x1]
	bool bIsCurrentlyRepaired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd60, Size: 0x1]
	StaticMeshComponent* BodyMesh;//[Offset: 0xd68, Size: 0x8]
	WW3VehicleMovementComponent* MovementComponent;//[Offset: 0xd70, Size: 0x8]
	WW3VehicleCameraManager* CameraManager;//[Offset: 0xd78, Size: 0x8]
	WW3AmmoEquipmentVehicle* AmmoEquipmentVehicle;//[Offset: 0xd80, Size: 0x8]
	WW3PlayerCameraManager* PlayerCameraManager;//[Offset: 0xd88, Size: 0x8]
	WW3TankImpactZoneManager* ImpactZones;//[Offset: 0xd90, Size: 0x8]
	WW3SeatManager* SeatManager;//[Offset: 0xd98, Size: 0x8]
	WW3SatelliteObjectComponent* SatelliteObjectComponent;//[Offset: 0xda0, Size: 0x8]
	WW3NoiseManagerVehicle* NoiseManagerVehicle;//[Offset: 0xda8, Size: 0x8]
	WW3HeatVision* HeatVision;//[Offset: 0xdb0, Size: 0x8]
	WW3VehicleAimComp* AimCompPointer;//[Offset: 0xdb8, Size: 0x8]
	WW3VehicleTower* TowerPawn;//[Offset: 0xdc0, Size: 0x8]
	bool bStopMovementByOtherActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc8, Size: 0x1]
	StaticMeshComponent* RcwsTowerMesh;//[Offset: 0xdd0, Size: 0x8]
	WW3VehicleAttachmentTower* RcwsTowerAttachment;//[Offset: 0xdd8, Size: 0x8]
	StaticMeshComponent* RcwsGunMesh;//[Offset: 0xde0, Size: 0x8]
	WW3Attachment* RcwsGunAttachment;//[Offset: 0xde8, Size: 0x8]
	float SpeedL;//[Offset: 0xdf0, Size: 0x4]
	float SpeedR;//[Offset: 0xdf4, Size: 0x4]
	Vector VehicleVelocity;//[Offset: 0xdf8, Size: 0xc]
	Vector VehicleVelocityInterpolated;//[Offset: 0xe04, Size: 0xc]
	float LastInterpolatedVelocityCalculated;//[Offset: 0xe10, Size: 0x4]
	float LastTickBodyRotationZ;//[Offset: 0xe38, Size: 0x4]
	float LastTickBodyRotationY;//[Offset: 0xe3c, Size: 0x4]
	WW3VehicleGrenadesToThrow[] CurrentGrenades;//[Offset: 0xe40, Size: 0x10]
	SpringArmComponent* VehicleFreeCameraSpringArm;//[Offset: 0xe90, Size: 0x8]
	WW3VehicleCameraComponentTPP* VehicleFreeCamera;//[Offset: 0xe98, Size: 0x8]
	WW3VehicleCockpit* VehicleCockpit;//[Offset: 0xea0, Size: 0x8]
	float CameraDeltaY;//[Offset: 0xeb4, Size: 0x4]
	float CameraDeltaZ;//[Offset: 0xeb8, Size: 0x4]
	float CameraConstDeltaY;//[Offset: 0xebc, Size: 0x4]
	float CameraConstDeltaZ;//[Offset: 0xec0, Size: 0x4]
	float CannonLinkerTargetRotationY;//[Offset: 0xed8, Size: 0x4]
	float TurretTargetRotationZ;//[Offset: 0xedc, Size: 0x4]
	uint16 CannonLinkerTargetRotationYReplicated;//[Offset: 0xee0, Size: 0x2]
	uint16 TurretTargetRotationZReplicated;//[Offset: 0xee2, Size: 0x2]
	uint16 TurretCurrentWorldRotationZReplicated;//[Offset: 0xee4, Size: 0x2]
	bool bZoomActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee6, Size: 0x1]
	byte SelectedCamera;//[Offset: 0xee7, Size: 0x1]
	int[] IgnoreSkinOnBodyMaterialIndexes;//[Offset: 0xee8, Size: 0x10]
	Vector[] DefaultStandpoints;//[Offset: 0xef8, Size: 0x10]
	float DefaultStandpointsLenght;//[Offset: 0xf08, Size: 0x4]
	WW3Character*[] PlayersStandingOnVehicle;//[Offset: 0xf10, Size: 0x10]
	WW3Character* BaseVehicleOwner;//[Offset: 0xf20, Size: 0x8]
	WW3PlayerState* OwnerPlayerState;//[Offset: 0xf28, Size: 0x8]
	StaticMeshComponent* VehicleTurret;//[Offset: 0xf30, Size: 0x8]
	MeshComponent* VehicleTurretSkeletal;//[Offset: 0xf40, Size: 0x8]
	StaticMeshComponent* VehicleCannonLinker;//[Offset: 0xf48, Size: 0x8]
	StaticMeshComponent* VehicleCannon;//[Offset: 0xf50, Size: 0x8]
	StaticMeshComponent* VehicleOpticsGunnerMesh;//[Offset: 0xf58, Size: 0x8]
	WW3VehicleAttachment* VehicleOpticsGunner;//[Offset: 0xf60, Size: 0x8]
	StaticMeshComponent* VehicleOpticsCommanderMesh;//[Offset: 0xf68, Size: 0x8]
	WW3VehicleAttachment* VehicleOpticsCommander;//[Offset: 0xf70, Size: 0x8]
	StaticMeshComponent* VehicleHatchL;//[Offset: 0xf78, Size: 0x8]
	StaticMeshComponent* VehicleHatchR;//[Offset: 0xf80, Size: 0x8]
	WW3WidgetComponent* RepairStatusWidgetComponent;//[Offset: 0xf88, Size: 0x8]
	bool bIsRepairable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf90, Size: 0x1]
	float VehicleVelocityMultiplier;//[Offset: 0xf94, Size: 0x4]
	float PushingOfMovingVehicleForce;//[Offset: 0xf98, Size: 0x4]
	bool bIgnoreOwnersCollisionAtStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9c, Size: 0x1]
	bool bUseOverlapForCollisionSolving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9d, Size: 0x1]
	WW3VA_VehicleTurret* VehicleTurretAttachment;//[Offset: 0xfb0, Size: 0x8]
	int8 StrikeCallTeam;//[Offset: 0xfb8, Size: 0x1]
	bool bHaveGrenades;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb9, Size: 0x1]
	class WW3AmmoTypeVehicleGrenades* GrenadeType;//[Offset: 0xfc0, Size: 0x8]
	int GrenadeAmount;//[Offset: 0xfc8, Size: 0x4]
	enum GrenadeAmmoSlot;//[Offset: 0xfcc, Size: 0x1]
	WW3StrikeTargetOutlineComponent* StrikeTargetOutlineWidgetComponent;//[Offset: 0xfd0, Size: 0x8]
	bool bExplosionTracesShouldIgnoreVehicleWhenTracingCharacters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd8, Size: 0x1]
	WW3VehicleDriverManager* DriverManager;//[Offset: 0xfe0, Size: 0x8]
	WW3Character* DetonateInstigator;//[Offset: 0xfe8, Size: 0x8]
	WW3AudioSingleton* AudioSingleton;//[Offset: 0xff0, Size: 0x8]
	float ForcedPhysicsSimulationMaxTime;//[Offset: 0x1000, Size: 0x4]
	float MarkSphereRadius;//[Offset: 0x1004, Size: 0x4]
	uint16 InputReplicated;//[Offset: 0x1008, Size: 0x2]
	Vector2D InputMoveReplicated;//[Offset: 0x100c, Size: 0x8]
	bool bFollowCameraReplicated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1015, Size: 0x1]
	float DisruptionThrottleSeed;//[Offset: 0x101c, Size: 0x4]
	float DisruptionSteeringSeed;//[Offset: 0x1020, Size: 0x4]
	float CannonCounter;//[Offset: 0x1024, Size: 0x4]
	WW3Attachment* VehicleCannonLinkerAttachment;//[Offset: 0x1028, Size: 0x8]
	WW3VehicleAttachmentAPS* APSAttachment;//[Offset: 0x1030, Size: 0x8]
	StaticMeshComponent* SecondaryFireMesh;//[Offset: 0x1038, Size: 0x8]
	WW3Attachment* VehicleCannonAttachment;//[Offset: 0x1040, Size: 0x8]
	WW3VehicleAttachmentHatch*[] HatchesAttachments;//[Offset: 0x1048, Size: 0x10]
	WW3VehicleSkin* CurrentSkin;//[Offset: 0x1058, Size: 0x8]
	WW3VehicleMobileSpawnPointComp* MobileSpawnComponent;//[Offset: 0x1060, Size: 0x8]
	WW3VehicleKlaxonComponent* VehicleKlaxonComponent;//[Offset: 0x1068, Size: 0x8]
	bool bIsDetonating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1070, Size: 0x1]
	<WW3AssistVehicleHitDataStructure,None(None)> DamageAssists;//[Offset: 0x10a0, Size: 0x50]
	<bool,None(None)> StoredComponentsVisibility;//[Offset: 0x10f0, Size: 0x50]
	enum LockVehicleMode;//[Offset: 0x1140, Size: 0x1]
	float OldMass;//[Offset: 0x1144, Size: 0x4]
	WW3Attachment*[] TemporaryAttachmentsArray;//[Offset: 0x1150, Size: 0x10]
	bool bUseRecallInstadOfGrenades;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1160, Size: 0x1]
	float VehicleRecallDuration;//[Offset: 0x1164, Size: 0x4]
	bool bUseGrenadesInsteadOfFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1168, Size: 0x1]
	WW3Character* CharacterUsingRecall;//[Offset: 0x1170, Size: 0x8]
	uint16 ConfigIDStrikeWasSpawnedFrom;//[Offset: 0x118a, Size: 0x2]
	uint16 ParentConfigIDStrikeWasSpawnedFrom;//[Offset: 0x118c, Size: 0x2]
	enum ConfigTypeStrikeWasSpawnedFrom;//[Offset: 0x118e, Size: 0x1]
	Vector TargetAimLocation;//[Offset: 0x11c8, Size: 0xc]
	Vector TargetLookLocation;//[Offset: 0x11d4, Size: 0xc]
	TimerHandle DestroyOnExitTimerHandle_T;//[Offset: 0x11e0, Size: 0x8]
	TimerHandle RemoveActorFromLevelHandle_T;//[Offset: 0x11e8, Size: 0x8]
	TimerHandle ForceRemoveActorFromLevelHandle_T;//[Offset: 0x11f0, Size: 0x8]
	TimerHandle DetonatePressingTimerHandle_T;//[Offset: 0x11f8, Size: 0x8]
	TimerHandle DetonateTimerHandle_T;//[Offset: 0x1200, Size: 0x8]
	TimerHandle DetonateLifespanTimerHandle_T;//[Offset: 0x1208, Size: 0x8]
	TimerHandle OnNotRotating_T;//[Offset: 0x1210, Size: 0x8]
	TimerHandle IgnoreOwnerCollision_T;//[Offset: 0x1218, Size: 0x8]
	TimerHandle AutopossessTimerHandle_T;//[Offset: 0x1220, Size: 0x8]
	TimerHandle AutoExitPreparationTimerHandle_T;//[Offset: 0x1228, Size: 0x8]
	TimerHandle AutoExitTimerHandle_T;//[Offset: 0x1230, Size: 0x8]
	TimerHandle DistanceDamageCheckTimerHandle_T;//[Offset: 0x1238, Size: 0x8]
	ParticleSystemComponent* SmokeWhileCriticalHPComp;//[Offset: 0x1240, Size: 0x8]
	enum CurrentMissileLockState;//[Offset: 0x1268, Size: 0x1]
	Actor* CurrentMissileLockActor;//[Offset: 0x1270, Size: 0x8]
	<enum,None(None)> MissileLockStates;//[Offset: 0x1278, Size: 0x50]
	void TryAutopossess();// 0x10e5eb0
	void SetTraceValuesForHUD();// 0x10e5e90
	void SetMoveRight(float Value);// 0x10e5e10
	void SetMoveForward(float Value);// 0x10e5d90
	void Server_UseEquipmentAttachment();// 0x10e5d40
	void Server_TryToEnterNextSeat(WW3PlayerController* User);// 0x10e5c80
	void Server_TryLaunchGrenades();// 0x10e5c30
	void Server_ThrowGrenades();// 0x10e5be0
	void Server_StartStopRadio();// 0x10e5b90
	void Server_StartDetonateTimerVehicle();// 0x10e5b40
	void Server_SetTurretTargetRotationZ(uint16 Value);// 0x10e5a80
	void Server_SetTurretCurrentWorldRotationZ(uint16 Value);// 0x10e59c0
	void Server_SetSpringArmRotation(Rotator ViewRotation);// 0x10e58f0
	void Server_SetCannonLinkerTargetRotationY(uint16 Value);// 0x10e5830
	void Server_SendInputReplicated(uint16 InInput);// 0x10e5770
	void Server_SendFXHitInfo(WW3PhysicalMaterialWrapper* NewFX, Vector_NetQuantize NewLocation);// 0x10e5650
	void Server_SendClientRotations(InYawPitchINT(UInt32Property) InYawPitchINT, byte InRollBYTE);// 0x10e5550
	void Server_OwnerWantsToReload();// 0x10e5500
	void Server_OnStopVehicleRecall(WW3Character* InCharacterUsingRecall);// 0x10e5440
	void Server_OnStartVehicleRecall(WW3Character* InCharacterUsingRecall);// 0x10e5380
	void Server_OnMark(Actor* HitActor, Vector_NetQuantize ClientHitPosition, Vector_NetQuantize ClientMarkDirection, Vector_NetQuantize ClientMarkOrigin);// 0x10e51a0
	void Server_Exit(float ViewYawRotation);// 0x10e50f0
	void Server_EnterSeat(WW3PlayerController* User, int SeatNumber);// 0x10e4ff0
	void Server_Cheat_EnableCinematicModeForTrailer(bool IsEnable);// 0x10e4f30
	void Server_AddGrenades(int AmountToAdd);// 0x10e4e70
	void Server_ActivateAPS();// 0x10e4e20
	void RotateTurretAndCannonLinkerToTargetRotationWithInterpolation(float DeltaTime);// 0x10e4da0
	void RotateCameraWithVehicleBody();// 0x10e4d80
	void RespondOnVehicleRepaired(WW3PlayerState* InPlayerState, enum VehicleRepairType, float Value);// 0x10e4c80
	void PrepareAutoExit();// 0x10e4c60
	void OnTppCameraEnabledChanged();// 0x10e4c40
	void OnRep_StopMovementByOtherActor();// 0x10e4c20
	void OnRep_IsDetonating();// 0x10e4be0
	void OnRep_InputReplicated();// 0x10e4bc0
	void OnRep_DriverManager();// 0x10e4b80
	void OnRep_CurrentMissleLockState();// 0x10e4b60
	void OnPreaperToAutoExit();// 0x1395e00
	void OnOverlapWithCharacter(WW3Character* CurrentCharacter);// 0x10e4ac0
	void OnIgnoreOwnerTimeEnded();// 0x10e4aa0
	void OnHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, HitResult Hit);// 0x10e48e0
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xfae340
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult);// 0x10e46f0
	void Multicast_SendFXHitInfo(WW3PhysicalMaterialWrapper* NewFX, Vector_NetQuantize NewLocation);// 0x10e4610
	void Multicast_PlayVehicleDestroyedEffects(bool bNewIsDetonating, Vector_NetQuantize InLocation);// 0x10e4520
	void Multicast_APSDestroyProjectile(Actor* DestroyedActor);// 0x10e4490
	void GetTargetAimLocation(Vector InTargetAimLocation, Vector InTargetLookLocation, HitResult OutTargetHitResult, Vector2D CenterOfScreen, bool ReturnValue);// 0x10e42d0
	void GetSelectedAmmoType(FString ReturnValue);// 0x10e4250
	void GetCurrentAmmoAmount(int ReturnValue);// 0x10e4220
	void GetAmmoInVehicleClip(int ReturnValue);// 0x10e41f0
	void ForceExitOnConnectionLost(bool bDestroyVehicle);// 0x10e4160
	void Client_OnStopVehicleRecallCalledByServer();// 0x10e4140
	void Client_MarkedSuccessfully(Actor* MarkedActor);// 0x10e40b0
	void Client_ApplyVehicleHitGroundEffects();// 0x10e4090
	void ChangeCamera(WW3VehicleCameraComponent*[] InCameraArray, int InSelectedCamera, bool bForceAlignCamera, bool bForceResetRoll);// 0x10e3f10
	void CalculateVelocityInterpolated();// 0x10e3ef0
	void CalculateTurretTargetRotationZToCenterOfScreen(float ReturnValue);// 0x10e3ec0
	void CalculateTurretTargetRotationZOnMouseInput(float ReturnValue);// 0x10e3e90
	void CalculateTurretTargetRotationZConstOnMouseInputWithPush(float ReturnValue);// 0x10e3e60
	void CalculateTurretTargetRotationZConstOnMouseInput(float ReturnValue);// 0x10e3e30
	void CalculateSpeedWithPhysics(PrimitiveComponent* SpeedWheel, float ReturnValue);// 0x10e3d70
	void CalculateSpeedWithoutPhysics();// 0x10e3e10
	void CalculateCannonLinkerTargetRotationYToCenterOfScreen(float ReturnValue);// 0x10e3d40
	void CalculateCannonLinkerTargetRotationYOnMouseInput(float ReturnValue);// 0x10e3d10
	void CalculateCannonLinkerTargetRotationYConstOnMouseInputWithPush(float ReturnValue);// 0x10e3ce0
	void CalculateCannonLinkerTargetRotationYConstOnMouseInput(float ReturnValue);// 0x10e3cb0
	void AutoExit();// 0x10e3c90
	void AimingSystem(float DeltaTime);// 0x10e3c10
	void AddControllerInputsForSpringArm(float DeltaTime);// 0x10e3b90

--------------------------------
Class: WW3PawnStrike.Pawn.Actor.Object
	WW3ProgressableMarkerStrike* MarkerComp;//[Offset: 0x498, Size: 0x8]
	class WW3VehicleData* VehicleData;//[Offset: 0x4a0, Size: 0x8]
	WW3StrikeData* StrikeDataPointer;//[Offset: 0x4a8, Size: 0x8]
	class WW3StrikeDestructionData* DestructionData;//[Offset: 0x4b0, Size: 0x8]
	bool bCanAttachSemtexAndClaymore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]
	WW3StrikeDestructionData* DestructionDataPointer;//[Offset: 0x4c0, Size: 0x8]
	<float,None(None)> ItemModifiersBase;//[Offset: 0x4c8, Size: 0x50]
	WW3StatisticsTrackingComponent* StatsTrackingComponent;//[Offset: 0x518, Size: 0x8]
	<float,None(None)> ItemModifiers;//[Offset: 0x520, Size: 0x50]
	WW3AudioVolume*[] ReverbZoneStack;//[Offset: 0x578, Size: 0x10]
	WW3AudioVolume* CurrentReverbZone;//[Offset: 0x588, Size: 0x8]
	PrimitiveComponent* LastHitComponent;//[Offset: 0x598, Size: 0x8]
	float HealthMax;//[Offset: 0x5a0, Size: 0x4]
	bool bShouldCrosshairBeVisibleAtAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 0x1]
	bool bShouldKeepTrackOfPlayerAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a5, Size: 0x1]
	bool bShouldKeepTrackOfPlayerHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a6, Size: 0x1]
	bool bRequiresOutlineForTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 0x1]
	WW3CaptureAreaComponent* CurrentCaptureArea;//[Offset: 0x5b8, Size: 0x8]
	int8 StrikeTeam;//[Offset: 0x5c0, Size: 0x1]
	WW3VehicleAttachmentManager* AttachmentManager;//[Offset: 0x5c8, Size: 0x8]
	int16 Health;//[Offset: 0x5d0, Size: 0x2]
	WW3InputComponent* CurrentWW3InputComponent;//[Offset: 0x5e0, Size: 0x8]
	void PlayTakeDamageEffects(DamageEvent DamageEvent, Controller* EventInstigator, float Damage);// 0x1037cf0
	void OnRep_StrikeTeam(int8 LastTeam);// 0x1037c10
	void OnRep_Health(int16 Value);// 0x1037b80
	void GetHealthGeneral(float ReturnValue);// 0x1037840

--------------------------------
Class: WW3VehicleEMData.Object
	MaterialInterface* PostProcessOnReceiveDamage;//[Offset: 0x28, Size: 0x28]
	float PostProcessOnReceiveDamageBlend;//[Offset: 0x50, Size: 0x4]
	float PostProcessOnReceiveDamageTime;//[Offset: 0x54, Size: 0x4]
	class CameraShake* ReceiveDamageCameraShake;//[Offset: 0x58, Size: 0x8]
	bool bImplementsLosingConnectionSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	float PostProcessOnLosingConnectionUpdateTime;//[Offset: 0x64, Size: 0x4]
	MaterialInterface* PostProcessOnLosingConnection;//[Offset: 0x68, Size: 0x28]
	MaterialInterface* PostProcessOnConnectionLost;//[Offset: 0x90, Size: 0x28]
	float LosingConnectionMinDistance;//[Offset: 0xb8, Size: 0x4]
	float LosingConnectionMaxDistance;//[Offset: 0xbc, Size: 0x4]
	bool bForceConnectionLostEffectOnVeryLowDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	float ReceiveDamageCameraShakeForce;//[Offset: 0xc4, Size: 0x4]
	float ReceiveBulletDamageCameraShakeForce;//[Offset: 0xc8, Size: 0x4]
	class CameraShake* ShootPrimaryWeaponCameraShake;//[Offset: 0xd0, Size: 0x8]
	float ShootPrimaryWeaponCameraShakeForce;//[Offset: 0xd8, Size: 0x4]
	float PostProcessOnShootPrimaryWeaponBlend;//[Offset: 0xdc, Size: 0x4]
	float PostProcessOnShootPrimaryWeaponTime;//[Offset: 0xe0, Size: 0x4]
	MaterialInterface* PostProcessOnShootPrimaryWeapon;//[Offset: 0xe8, Size: 0x28]
	float PostProcessOnTurboBlend;//[Offset: 0x110, Size: 0x4]
	float PostProcessOnTurboTime;//[Offset: 0x114, Size: 0x4]
	MaterialInterface* PostProcessOnTurbo;//[Offset: 0x118, Size: 0x28]
	class CameraShake* HitGroundCameraShake;//[Offset: 0x140, Size: 0x8]
	float HitGroundCameraShakeStrength;//[Offset: 0x148, Size: 0x4]
	class CameraShake* HitEnvironmentCameraShake;//[Offset: 0x150, Size: 0x8]
	float HitEnvironmentCameraShakeStrength;//[Offset: 0x158, Size: 0x4]
	ParticleSystem* ExhaustParticle;//[Offset: 0x160, Size: 0x28]
	Vector ExhaustVelocityLeft;//[Offset: 0x188, Size: 0xc]
	Vector ExhaustVelocityLeftLow;//[Offset: 0x194, Size: 0xc]
	Vector ExhaustVelocityRight;//[Offset: 0x1a0, Size: 0xc]
	Vector ExhaustVelocityRightLow;//[Offset: 0x1ac, Size: 0xc]
	float SpawnRatio;//[Offset: 0x1b8, Size: 0x4]
	float ExhaustSmokeAlpha;//[Offset: 0x1bc, Size: 0x4]
	float HeatStrength;//[Offset: 0x1c0, Size: 0x4]
	float PassingByInfluenceRadiusMultiplier;//[Offset: 0x1c4, Size: 0x4]
	float PassingByCameraShakeForceMultiplier;//[Offset: 0x1c8, Size: 0x4]
	MaterialInterface* AutodestructionEffect;//[Offset: 0x1d0, Size: 0x28]
	float AutodestructionIntensity;//[Offset: 0x1f8, Size: 0x4]
	MaterialInterface* LowHealthEffect;//[Offset: 0x200, Size: 0x28]
	float HealthPercentageWhenToShow;//[Offset: 0x228, Size: 0x4]
	bool bAlternativeViewTogglePostProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1]

--------------------------------
Class: WW3VehicleSMData.Object
	bool bSmallVehicleHitEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	AkAudioEvent* EngineSoundAk;//[Offset: 0x30, Size: 0x8]
	AkAudioEvent* EngineLoopAkEvent_Advanced;//[Offset: 0x38, Size: 0x8]
	AkAudioEvent* StartTheEngineSoundAkEvent_Advanced;//[Offset: 0x40, Size: 0x8]
	AkAudioEvent* StopTheEngineSoundAkEvent_Advanced;//[Offset: 0x48, Size: 0x8]
	AkAudioEvent* AclEngineSoundAkEvent_Advanced;//[Offset: 0x50, Size: 0x8]
	AkAudioEvent* DclEngineSoundAkEvent_Advanced;//[Offset: 0x58, Size: 0x8]
	AkAudioEvent* AclStopEngineSoundAkEvent_Advanced;//[Offset: 0x60, Size: 0x8]
	AkAudioEvent* DclStopEngineSoundAkEvent_Advanced;//[Offset: 0x68, Size: 0x8]
	WW3SoundEffect Input_Forward_EngineSoundEffect_Advanced;//[Offset: 0x70, Size: 0x10]
	WW3SoundEffect Input_Forward_Release_EngineSoundEffect_Advanced;//[Offset: 0x80, Size: 0x10]
	WW3SoundEffect Input_Backward_EngineSoundEffect_Advanced;//[Offset: 0x90, Size: 0x10]
	WW3SoundEffect Input_Backward_Release_EngineSoundEffect_Advanced;//[Offset: 0xa0, Size: 0x10]
	WW3SoundEffect Input_Left_EngineSoundEffect_Advanced;//[Offset: 0xb0, Size: 0x10]
	WW3SoundEffect Input_Left_Release_EngineSoundEffect_Advanced;//[Offset: 0xc0, Size: 0x10]
	WW3SoundEffect Input_Right_EngineSoundEffect_Advanced;//[Offset: 0xd0, Size: 0x10]
	WW3SoundEffect Input_Right_Release_EngineSoundEffect_Advanced;//[Offset: 0xe0, Size: 0x10]
	WW3SoundEffect Input_Handbrake_EngineSoundEffect_Advanced;//[Offset: 0xf0, Size: 0x10]
	WW3SoundEffect Input_Handbrake_Release_EngineSoundEffect_Advanced;//[Offset: 0x100, Size: 0x10]
	WW3SoundEffect SurfaceSlide_EngineSoundEffect_Advanced;//[Offset: 0x110, Size: 0x10]
	WW3SoundEffect SurfaceSlide_Release_EngineSoundEffect_Advanced;//[Offset: 0x120, Size: 0x10]
	AkAudioEvent* VehicleEnterAkEvent_Advanced;//[Offset: 0x130, Size: 0x8]
	AkAudioEvent* VehicleExitAkEvent_Advanced;//[Offset: 0x138, Size: 0x8]
	bool bEngineLaunchOnStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	CurveFloat* EngineSpeedCurve;//[Offset: 0x148, Size: 0x8]
	float ThrottleInterpSpeed;//[Offset: 0x150, Size: 0x4]
	AkAudioEvent* EnterEvent;//[Offset: 0x158, Size: 0x8]
	AkAudioEvent* FirstEnterEvent;//[Offset: 0x160, Size: 0x8]
	AkAudioEvent* ForwardPressed;//[Offset: 0x168, Size: 0x8]
	AkAudioEvent* ForwardReleased;//[Offset: 0x170, Size: 0x8]
	AkAudioEvent* BackwardPressed;//[Offset: 0x178, Size: 0x8]
	AkAudioEvent* BackwardReleased;//[Offset: 0x180, Size: 0x8]
	AkAudioEvent* LeftPressed;//[Offset: 0x188, Size: 0x8]
	AkAudioEvent* LeftReleased;//[Offset: 0x190, Size: 0x8]
	AkAudioEvent* RightPressed;//[Offset: 0x198, Size: 0x8]
	AkAudioEvent* RightReleased;//[Offset: 0x1a0, Size: 0x8]
	WW3SoundNotifications ExplosionDamage;//[Offset: 0x1a8, Size: 0x18]
	WW3SoundNotifications CollisionDamage;//[Offset: 0x1c0, Size: 0x18]
	WW3SoundNotifications BulletDamage;//[Offset: 0x1d8, Size: 0x18]
	AkAudioEvent* LowHealth;//[Offset: 0x1f0, Size: 0x8]
	AkAudioEvent* LowHealthStop;//[Offset: 0x1f8, Size: 0x8]
	AkAudioEvent* KlaxonPressed;//[Offset: 0x200, Size: 0x8]
	AkAudioEvent* KlaxonReleased;//[Offset: 0x208, Size: 0x8]

--------------------------------
Class: WW3ProgressableMarkerStrike.WW3ProgressableMarker.WW3ActorMarker.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector DefaultRelativeLocation;//[Offset: 0xc98, Size: 0xc]
	WW3Vehicle* VehicleOwner;//[Offset: 0xca8, Size: 0x8]
	bool bIsPlayerFocusedOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb0, Size: 0x1]

--------------------------------
Class: WW3VehicleData.WW3StrikeData.Object
	float ForceAfterShootBase;//[Offset: 0x98, Size: 0x4]
	float TorqueAfterShootBase;//[Offset: 0x9c, Size: 0x4]
	float BaseDamageOnHit;//[Offset: 0xa0, Size: 0x4]
	float DamageOnHitSpeedMultiplier;//[Offset: 0xa4, Size: 0x4]
	float DamageOnHitMinSpeed;//[Offset: 0xa8, Size: 0x4]
	float ForceNearbyVehiclesPhysicsSimulationDistance;//[Offset: 0xac, Size: 0x4]
	bool bShoudBeBlockedWhenOverlappedWithCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float PushFromCharacterOverlapForce;//[Offset: 0xb4, Size: 0x4]
	float DamageCharacterOnHitSpeedMultiplier;//[Offset: 0xb8, Size: 0x4]
	float DamageCharacterOnHitMinSpeed;//[Offset: 0xbc, Size: 0x4]
	float DamageAllyCharacterOnHitSpeedMultiplier;//[Offset: 0xc0, Size: 0x4]
	float DamageAllyCharacterOnHitMinSpeed;//[Offset: 0xc4, Size: 0x4]
	float PushCharacterOnHitSpeedMultiplier;//[Offset: 0xc8, Size: 0x4]
	bool bOnlyOverlapWithCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	float FadeTimeOnCameraChange;//[Offset: 0xd0, Size: 0x4]
	float DamageVehicleOnHitSpeedMultiplier;//[Offset: 0xd4, Size: 0x4]
	float DamageVehicleOnHitMinSpeed;//[Offset: 0xd8, Size: 0x4]
	CurveFloat* V_CannonBackMove;//[Offset: 0xe0, Size: 0x8]
	CurveFloat* V_CannonUpMove;//[Offset: 0xe8, Size: 0x8]
	CurveFloat* V_CannonMin;//[Offset: 0xf0, Size: 0x8]
	float MinConeEasyAimAngle;//[Offset: 0xf8, Size: 0x4]
	ViewTargetTransitionParams PossessViewTransitionParams;//[Offset: 0xfc, Size: 0x10]
	float MainFreeCameraZOffset;//[Offset: 0x10c, Size: 0x4]
	float MainFreeCameraStartYRotation;//[Offset: 0x110, Size: 0x4]
	float MainFreeCameraFOVNormal;//[Offset: 0x114, Size: 0x4]
	float MainFreeCameraFOVZoomed;//[Offset: 0x118, Size: 0x4]
	float MainFreeCameraFOVDecreaseWhileZoom;//[Offset: 0x11c, Size: 0x4]
	float MainFreeCameraSpringArmLength;//[Offset: 0x120, Size: 0x4]
	WW3TPPCameraProperties TPPCameraProperties;//[Offset: 0x128, Size: 0x98]
	WW3FPPCameraProperties FPPCameraProperties;//[Offset: 0x1c0, Size: 0x8]
	bool bNoThirdPersonCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	bool bNoHunderKiller;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 0x1]
	bool bIndependentSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca, Size: 0x1]
	byte DefaultCamera;//[Offset: 0x1cb, Size: 0x1]
	bool bCameraShouldFollowVehicleRollForFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 0x1]
	bool bCameraShouldFollowVehicleRollForTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 0x1]
	float CustomTurboForce;//[Offset: 0x1d0, Size: 0x4]
	float CustomSlowrideForce;//[Offset: 0x1d4, Size: 0x4]
	Vector LinearDamping;//[Offset: 0x1d8, Size: 0xc]
	Vector AngularDamping;//[Offset: 0x1e4, Size: 0xc]
	enum[] DefaultPreviewAttachmentSlots;//[Offset: 0x1f0, Size: 0x10]
	WW3VehicleHUDInfo HUDInfo;//[Offset: 0x200, Size: 0x18]
	bool bShouldBeLockedAtTheBeginning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	bool bAutopossessOnSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219, Size: 0x1]
	float AutoposessOnSpawnDelay;//[Offset: 0x21c, Size: 0x4]
	float AutoExitTime;//[Offset: 0x220, Size: 0x4]
	float AutoExitPreparationTime;//[Offset: 0x224, Size: 0x4]
	bool bAutoMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	bool bDespawnOnExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 0x1]
	bool bDestroyOnExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22a, Size: 0x1]
	bool bCanBeDestroyedByDestroyingNoise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22b, Size: 0x1]
	bool bTakeBackToInventoryOnUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1]
	bool bCanBeEnteredByOtherPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 0x1]
	bool bIgnorePlayerPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e, Size: 0x1]
	bool bDontGetStoppedByWorldDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f, Size: 0x1]
	enum VehicleCollisionMode;//[Offset: 0x230, Size: 0x1]
	int RadioSetting;//[Offset: 0x234, Size: 0x4]
	float RadioDistance;//[Offset: 0x238, Size: 0x4]
	enum DefaultDeathTypeOverride;//[Offset: 0x23c, Size: 0x1]
	FText DeathNameOverride;//[Offset: 0x240, Size: 0x18]
	float OnConnectionLostTimer;//[Offset: 0x258, Size: 0x4]
	bool bShouldDisconnectAfterJamming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	bool bShouldDestroyAfterOwnerDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 0x1]
	bool bCanDetonate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 0x1]
	bool bCanInputBeJammed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f, Size: 0x1]
	bool bSwapInputWhileJammed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	float ThrottleNoiseChangeSpeed;//[Offset: 0x264, Size: 0x4]
	float ThrottleNoisePrecentage;//[Offset: 0x268, Size: 0x4]
	float SteeringNoiseChangeSpeed;//[Offset: 0x26c, Size: 0x4]
	float SteeringNoisePrecentage;//[Offset: 0x270, Size: 0x4]
	float SteeringNoiseInfluance;//[Offset: 0x274, Size: 0x4]
	float InputSwapThreshold;//[Offset: 0x278, Size: 0x4]
	uint16[] DefaultAttachmentsIds;//[Offset: 0x280, Size: 0x10]
	class WW3AttachmentPreview[] DefaultPreviewAttachments;//[Offset: 0x290, Size: 0x10]
	float AutodestructionActivationDelay;//[Offset: 0x2a0, Size: 0x4]
	float DetonateDelay;//[Offset: 0x2a4, Size: 0x4]
	bool bPendDetonadeOnLeftClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	bool bTurboOnLeftClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 0x1]
	float PostDetonationCameraTime;//[Offset: 0x2ac, Size: 0x4]
	float PostDetonationCameraLengthOverride;//[Offset: 0x2b0, Size: 0x4]
	float PostDetonationCameraZOffset;//[Offset: 0x2b4, Size: 0x4]
	float PointsForEnemyKill;//[Offset: 0x2b8, Size: 0x4]
	float PointsForEnemyKillAssist;//[Offset: 0x2bc, Size: 0x4]
	float PointsForKillingEnemyVehicleByAirstrike;//[Offset: 0x2c0, Size: 0x4]
	float PointsForAllyKill;//[Offset: 0x2c4, Size: 0x4]
	float PointsForKillingAlliedVehicleByAirstrike;//[Offset: 0x2c8, Size: 0x4]
	bool bAllyHitAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	bool bGenerateHitEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 0x1]
	SlateBrush VehicleCrosshairImage;//[Offset: 0x2d0, Size: 0x88]
	SlateBrush VehicleMachinegunImage;//[Offset: 0x358, Size: 0x88]

--------------------------------
Class: WW3StrikeData.Object
	float HealthMax;//[Offset: 0x28, Size: 0x4]
	bool bDestroyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bTakeExplosiveDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool bCollisionDmageEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]
	float DelayBetweenNextHits;//[Offset: 0x30, Size: 0x4]
	CurveFloat* SpeedToHitDamage;//[Offset: 0x38, Size: 0x8]
	FText StrikeName;//[Offset: 0x40, Size: 0x18]
	Texture2D* StrikeIcon;//[Offset: 0x58, Size: 0x28]
	class WW3ScoreStreakPreview* StrikePreviewReference;//[Offset: 0x80, Size: 0x8]
	class WW3MainHUD* VehicleHUD;//[Offset: 0x88, Size: 0x8]
	class UserWidget* SeatsOccupationWidget;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: WW3ScoreStreakPreview.Object
	class Actor[] StrikeActors;//[Offset: 0x38, Size: 0x10]
	class Actor* ScoreStreakActorMenu;//[Offset: 0x48, Size: 0x28]
	class Actor[] AdditionalMenuActors;//[Offset: 0x70, Size: 0x10]
	enum ScoreStreakType;//[Offset: 0x80, Size: 0x1]
	enum StrikeType;//[Offset: 0x81, Size: 0x1]
	bool bShouldPlayRadioCommandsFor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]
	float RadioCommandRelevantDistance;//[Offset: 0x84, Size: 0x4]
	Texture2D* StrikeIcon;//[Offset: 0x88, Size: 0x28]
	float CooldownTimeInSeconds;//[Offset: 0xb0, Size: 0x4]
	enum ScoreStrikeCategory;//[Offset: 0xb4, Size: 0x1]
	enum ViewType;//[Offset: 0xb5, Size: 0x1]
	FString ViewCameraOverride;//[Offset: 0xb8, Size: 0x10]
	WW3WikiEntry WikiEntry;//[Offset: 0xc8, Size: 0x138]
	ScoreStreakItemData ScoreStreakItemData;//[Offset: 0x200, Size: 0xc8]
	<float,None(None)> ItemModifiers;//[Offset: 0x2c8, Size: 0x50]
	WW3ConstructableStrikeData ConstructableStrikeData;//[Offset: 0x318, Size: 0x4]
	FString ItemCategory;//[Offset: 0x320, Size: 0x10]
	CustomizationItemData ItemData;//[Offset: 0x330, Size: 0xd8]
	class WW3InventoryItem* GadgetCreatingScoreStreak;//[Offset: 0x408, Size: 0x8]
	class WW3StrikeCursorMDC* CursorMDCClassForGadgetMap;//[Offset: 0x410, Size: 0x8]
	float PreviewForwardModifier;//[Offset: 0x418, Size: 0x4]
	float PreviewHeightModifier;//[Offset: 0x41c, Size: 0x4]
	bool bIsSquadMSP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	<FString,None(None)> ItemHubCameraOverrides;//[Offset: 0x428, Size: 0x50]
	MaterialInterface* TabletMaterial;//[Offset: 0x478, Size: 0x8]
	Texture2D* TabletMaterialUI;//[Offset: 0x480, Size: 0x8]

--------------------------------
Class: WW3WikiEntry
	int ID;//[Offset: 0x0, Size: 0x4]
	class Object* TargetBlueprint;//[Offset: 0x8, Size: 0x8]
	enum ArticleType;//[Offset: 0x10, Size: 0x1]
	FString TitleOverride;//[Offset: 0x18, Size: 0x10]
	FString ThumbnailUrl;//[Offset: 0x28, Size: 0x10]
	FString SubtitleOverride;//[Offset: 0x38, Size: 0x10]
	FString Description;//[Offset: 0x48, Size: 0x10]
	FString ReadMoreUrl;//[Offset: 0x58, Size: 0x10]
	FString Sentence;//[Offset: 0x68, Size: 0x10]
	FString CountryCode;//[Offset: 0x78, Size: 0x10]
	WW3WikiEntryUrlSet ImageGallery;//[Offset: 0x88, Size: 0x50]
	WW3WikiEntryUrlSet VideoGallery;//[Offset: 0xd8, Size: 0x50]
	class Object* RelatedArticleOwnerReference;//[Offset: 0x128, Size: 0x8]
	int RelatedArticle;//[Offset: 0x130, Size: 0x4]

--------------------------------
Class: WW3WikiEntryUrlSet
	<FString,None(None)> UrlSet;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ScoreStreakItemData
	bool bHideInMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FString IconOverridePath;//[Offset: 0x8, Size: 0x10]
	SlateBrush icon;//[Offset: 0x18, Size: 0x88]
	WW3CameraPointTransform CameraPointFocusTransform;//[Offset: 0xa0, Size: 0x18]
	Vector StartLocationOffset;//[Offset: 0xb8, Size: 0xc]

--------------------------------
Class: WW3CameraPointTransform
	Vector RelativeCameraPointOffset;//[Offset: 0x0, Size: 0xc]
	Rotator CameraPointRotation;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: WW3ConstructableStrikeData
	float SpawnAdditionalHeight;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: CustomizationItemData
	bool bHideInMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUnderDevelopment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bShowOnlyToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	FText Name;//[Offset: 0x8, Size: 0x18]
	FString CheatName;//[Offset: 0x20, Size: 0x10]
	FText Description;//[Offset: 0x30, Size: 0x18]
	FString ItemCategory;//[Offset: 0x48, Size: 0x10]
	enum CurrencyType;//[Offset: 0x58, Size: 0x1]
	enum ItemRarity;//[Offset: 0x59, Size: 0x1]
	int Value;//[Offset: 0x5c, Size: 0x4]
	enum ModifiersDisplayType;//[Offset: 0x60, Size: 0x1]
	WW3ModifiersValuesForUI[] AdditionalModifiers;//[Offset: 0x68, Size: 0x10]
	int StrikeScore;//[Offset: 0x78, Size: 0x4]
	Vector AdditionSeparateOffset;//[Offset: 0x7c, Size: 0xc]
	Vector SeparateMultiplier;//[Offset: 0x88, Size: 0xc]
	float SeparateTimeStartScaled;//[Offset: 0x94, Size: 0x4]
	float SeparateTimeEndScaled;//[Offset: 0x98, Size: 0x4]
	WW3CameraPointTransform CameraPointFocusTransform;//[Offset: 0x9c, Size: 0x18]
	enum ItemTagsTargetOverride;//[Offset: 0xb4, Size: 0x1]
	uint16 ItemId;//[Offset: 0xb6, Size: 0x2]
	bool bIsItemIDFinal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	FString CountryCode;//[Offset: 0xc0, Size: 0x10]
	uint16 WikiArticleID;//[Offset: 0xd0, Size: 0x2]
	enum InventoryItemCategory;//[Offset: 0xd2, Size: 0x1]

--------------------------------
Class: WW3ModifiersValuesForUI
	FText ModifierName;//[Offset: 0x0, Size: 0x18]
	FText ModifierValue;//[Offset: 0x18, Size: 0x18]
	float ModifierBarValue;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: WW3InventoryItem.Actor.Object
	CustomizationItemData ItemData;//[Offset: 0x390, Size: 0xd8]
	FString ItemCategory;//[Offset: 0x468, Size: 0x10]
	FName ItemClass;//[Offset: 0x478, Size: 0x8]
	float EquipAnimationDuration;//[Offset: 0x480, Size: 0x4]
	float UnequipAnimationDuration;//[Offset: 0x484, Size: 0x4]
	bool bAttachToRightHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1]
	FName UnEquipAttachSocketName;//[Offset: 0x490, Size: 0x8]
	FName LeftHandSocketName;//[Offset: 0x498, Size: 0x8]
	FName RightHandSocketName;//[Offset: 0x4a0, Size: 0x8]
	Vector ItemOffset;//[Offset: 0x4a8, Size: 0xc]
	Vector CrouchItemOffset;//[Offset: 0x4b4, Size: 0xc]
	Rotator ItemRotationOffset;//[Offset: 0x4c0, Size: 0xc]
	Rotator CrouchItemRotationOffset;//[Offset: 0x4cc, Size: 0xc]
	bool bCanBeDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 0x1]
	bool bUpdateLeftHandPerTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d9, Size: 0x1]
	float InteractionRestoreTime;//[Offset: 0x4dc, Size: 0x4]
	class WW3InvenotrySounds* Sounds;//[Offset: 0x4e0, Size: 0x28]
	class WW3DOFCameraConfig* EquippedDOFConfig;//[Offset: 0x508, Size: 0x8]
	<float,None(None)> ItemModifiers;//[Offset: 0x510, Size: 0x50]
	float BlendOutDuration;//[Offset: 0x560, Size: 0x4]
	WW3StatisticsTrackingComponent* StatsTrackingComponent;//[Offset: 0x568, Size: 0x8]
	class Actor* ActorMenu;//[Offset: 0x638, Size: 0x28]
	enum ViewType;//[Offset: 0x660, Size: 0x1]
	SkeletalMeshComponent* Mesh;//[Offset: 0x668, Size: 0x8]
	class WW3CharacterAnimationSet* AnimationSet;//[Offset: 0x670, Size: 0x8]
	bool bInfiniteAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 0x1]
	SoundCue* GroundImpactSound;//[Offset: 0x680, Size: 0x8]
	enum ItemType;//[Offset: 0x688, Size: 0x1]
	WW3Character* LastItemOwner;//[Offset: 0x690, Size: 0x8]
	WW3Character* ItemOwner;//[Offset: 0x698, Size: 0x8]
	WW3AkComponent* SoundComponent;//[Offset: 0x6a0, Size: 0x8]
	WW3InvenotrySounds* SoundsData;//[Offset: 0x6a8, Size: 0x8]
	WW3SavedItemAnimation SavedAnimation;//[Offset: 0x6b0, Size: 0x58]
	WW3CharacterEquipAnimation CurrentEquipSet;//[Offset: 0x708, Size: 0x80]
	WW3AnimationSetTypeDependency CurrentEquipSetStateDependency;//[Offset: 0x788, Size: 0x30]
	WW3PlayerState* Cached_PlayerState;//[Offset: 0x808, Size: 0x8]
	byte ObjectTypeWhenDropped;//[Offset: 0x875, Size: 0x1]
	void OnHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, HitResult Hit);// 0xffc1f0
	void GetCharacterOwner(WW3Character* ReturnValue);// 0xffc060
	void GetAnimationSet(WW3CharacterAnimationSet* ReturnValue);// 0xffc030

--------------------------------
Class: WW3InvenotrySounds.Object
	WW3SoundEffect Equip;//[Offset: 0x28, Size: 0x10]
	WW3SoundEffect UnEquip;//[Offset: 0x38, Size: 0x10]
	WW3SoundNotifications Pickup;//[Offset: 0x48, Size: 0x18]

--------------------------------
Class: WW3DOFCameraConfig.Object
	byte DepthOfFieldMethod;//[Offset: 0x28, Size: 0x1]
	float DepthOfFieldSensorWidth;//[Offset: 0x2c, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x30, Size: 0x4]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x38, Size: 0x4]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x40, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x44, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x48, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x4c, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x50, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x54, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x58, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x5c, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x60, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x64, Size: 0x4]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	float DepthOfFieldFstop;//[Offset: 0x6c, Size: 0x4]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	float DepthOfFieldMinFstop;//[Offset: 0x74, Size: 0x4]
	CurveFloat* FadeInCurve;//[Offset: 0x78, Size: 0x8]
	float FadeInDuration;//[Offset: 0x80, Size: 0x4]
	CurveFloat* FadeOutCurve;//[Offset: 0x88, Size: 0x8]
	float FadeOutDuration;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: WW3CharacterAnimationSet.Object
	class WW3ShakeCharacterWeight* WeightShakes;//[Offset: 0x28, Size: 0x8]
	class WW3ShakeCharacterWeapon* WeaponShakes;//[Offset: 0x30, Size: 0x8]
	class WW3TransitionSet* TransitionSet;//[Offset: 0x38, Size: 0x8]
	WW3CharacterMovementAnimations MovementIdles;//[Offset: 0x40, Size: 0x358]
	WW3CharacterAnimationIdles LayeredIdles;//[Offset: 0x398, Size: 0x50]
	WW3CharacterEquipSets EquipSets;//[Offset: 0x3e8, Size: 0x30]
	WW3CharacterReloadAnimations[] Reloads;//[Offset: 0x418, Size: 0x10]
	WW3CharacterUnderbarrelReloadAnimations[] UnderbarrelReloads;//[Offset: 0x428, Size: 0x10]
	WW3CharacterPositionSequence TPPFiringShoulderBump;//[Offset: 0x438, Size: 0x28]
	WW3CharacterPositionMontageSplit melee;//[Offset: 0x460, Size: 0x50]
	WW3CharacterPositionMontageSplit HardLanding;//[Offset: 0x4b0, Size: 0x50]
	WW3Poses Grips;//[Offset: 0x500, Size: 0x2d0]
	WW3CharacterPositionSequenceSplit Inspect;//[Offset: 0x7d0, Size: 0x50]
	WW3CharacterPositionSequenceSplit Interact;//[Offset: 0x820, Size: 0x50]
	AnimSequence* TriggerFingerPose;//[Offset: 0x870, Size: 0x8]
	AnimSequence* FireFingerPose;//[Offset: 0x878, Size: 0x8]
	AnimSequence* FireSelectorPose;//[Offset: 0x880, Size: 0x8]
	WW3HUBAnimationSplit HUBAnimations;//[Offset: 0x888, Size: 0x30]
	AnimSequence*[] SummaryScreenAnimations;//[Offset: 0x8b8, Size: 0x10]
	WW3Poses MenuGrips;//[Offset: 0x8c8, Size: 0x2d0]
	WW3GadgetAnims Gadgets;//[Offset: 0xb98, Size: 0x28]
	WW3DeltaProperties SwayProperties;//[Offset: 0xbc0, Size: 0x40]
	float WeaponFireBlendout;//[Offset: 0xc00, Size: 0x4]

--------------------------------
Class: WW3ShakeCharacterWeight.Object
	WW3ShakeWeights OnHit;//[Offset: 0x28, Size: 0x30]
	WW3ShakeJumps Jumps;//[Offset: 0x58, Size: 0x120]
	WW3ShakeMovementSpeedWeight ShakeWeight;//[Offset: 0x178, Size: 0x360]

--------------------------------
Class: WW3ShakeWeights
	class CameraShake[] Light;//[Offset: 0x0, Size: 0x10]
	class CameraShake[] Medium;//[Offset: 0x10, Size: 0x10]
	class CameraShake[] Heavy;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: WW3ShakeJumps
	WW3ShakeWeights Jump;//[Offset: 0x0, Size: 0x30]
	WW3ShakeWeights AnyLanding;//[Offset: 0x30, Size: 0x30]
	WW3ShakeWeights SoftLanding;//[Offset: 0x60, Size: 0x30]
	WW3ShakeWeights MidLanding;//[Offset: 0x90, Size: 0x30]
	WW3ShakeWeights HardLanding;//[Offset: 0xc0, Size: 0x30]
	WW3ShakeWeights DeadlyLanding;//[Offset: 0xf0, Size: 0x30]

--------------------------------
Class: WW3ShakeMovementSpeedWeight
	WW3ShakeMovementSpeed Light;//[Offset: 0x0, Size: 0x120]
	WW3ShakeMovementSpeed Medium;//[Offset: 0x120, Size: 0x120]
	WW3ShakeMovementSpeed Heavy;//[Offset: 0x240, Size: 0x120]

--------------------------------
Class: WW3ShakeMovementSpeed
	WW3ShakeMovementPosition Idle;//[Offset: 0x0, Size: 0x30]
	WW3ShakeMovementPosition Walk;//[Offset: 0x30, Size: 0x30]
	WW3ShakeMovementPosition Run;//[Offset: 0x60, Size: 0x30]
	WW3ShakeMovementPosition DashRun;//[Offset: 0x90, Size: 0x30]
	WW3ShakeMovementPosition ADSIdle;//[Offset: 0xc0, Size: 0x30]
	WW3ShakeMovementPosition ADSWalk;//[Offset: 0xf0, Size: 0x30]

--------------------------------
Class: WW3ShakeMovementPosition
	class CameraShake* Stand;//[Offset: 0x0, Size: 0x8]
	class CameraShake* Crouch;//[Offset: 0x8, Size: 0x8]
	class CameraShake* Prone;//[Offset: 0x10, Size: 0x8]
	class CameraShake* OnBack;//[Offset: 0x18, Size: 0x8]
	class CameraShake* Slide;//[Offset: 0x20, Size: 0x8]
	class CameraShake* Knockdown;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WW3ShakeCharacterWeapon.Object
	WW3ShakeWeaponMovementSpeed Single;//[Offset: 0x28, Size: 0x1e0]
	WW3ShakeWeaponMovementSpeed Burst;//[Offset: 0x208, Size: 0x1e0]
	WW3ShakeWeaponMovementSpeed Auto;//[Offset: 0x3e8, Size: 0x1e0]
	class CameraShake* SwitchShootingModeShake;//[Offset: 0x5c8, Size: 0x8]
	class CameraShake* SwitchShootingModeShakeADS;//[Offset: 0x5d0, Size: 0x8]
	class CameraShake* SwitchUnderbarrelShake;//[Offset: 0x5d8, Size: 0x8]
	class CameraShake* SwitchUnderbarrelShakeADS;//[Offset: 0x5e0, Size: 0x8]
	class CameraShake* SwitchPSTShake;//[Offset: 0x5e8, Size: 0x8]
	class CameraShake* SwitchPSTShakeADS;//[Offset: 0x5f0, Size: 0x8]
	float TargetingScaleModifier;//[Offset: 0x5f8, Size: 0x4]
	<float,None(None)> ScopeMap;//[Offset: 0x600, Size: 0x50]

--------------------------------
Class: WW3ShakeWeaponMovementSpeed
	WW3ShakeWeaponMovementPosition Idle;//[Offset: 0x0, Size: 0x60]
	WW3ShakeWeaponMovementPosition Walk;//[Offset: 0x60, Size: 0x60]
	WW3ShakeWeaponMovementPosition Run;//[Offset: 0xc0, Size: 0x60]
	WW3ShakeWeaponMovementPosition ADSIdle;//[Offset: 0x120, Size: 0x60]
	WW3ShakeWeaponMovementPosition ADSWalk;//[Offset: 0x180, Size: 0x60]

--------------------------------
Class: WW3ShakeWeaponMovementPosition
	class CameraShake[] Stand;//[Offset: 0x0, Size: 0x10]
	class CameraShake[] Crouch;//[Offset: 0x10, Size: 0x10]
	class CameraShake[] Prone;//[Offset: 0x20, Size: 0x10]
	class CameraShake[] OnBack;//[Offset: 0x30, Size: 0x10]
	class CameraShake[] Sliding;//[Offset: 0x40, Size: 0x10]
	class CameraShake[] Knockdown;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: WW3TransitionSet.Object
	WW3Transition[] Transitions;//[Offset: 0x28, Size: 0x10]
	WW3CharacterJumps Jumps;//[Offset: 0x38, Size: 0xb0]
	WW3VaultStage Vaults;//[Offset: 0xe8, Size: 0x220]
	WW3Prone2OnBackTransitions Prone2OnBack;//[Offset: 0x308, Size: 0x40]
	WW3SpecialAnimations SpecialAnimations;//[Offset: 0x348, Size: 0xf0]
	WW3CharacterCurveSplit JumpCurves;//[Offset: 0x438, Size: 0x10]
	WW3CharacterLandingCurves LandingCurves;//[Offset: 0x448, Size: 0x50]

--------------------------------
Class: WW3Transition
	WW3MoveType From;//[Offset: 0x0, Size: 0x2]
	WW3MoveType To;//[Offset: 0x2, Size: 0x2]
	AnimMontage* MontageFPP;//[Offset: 0x8, Size: 0x8]
	AnimMontage* Montage;//[Offset: 0x10, Size: 0x8]
	float PlayRate;//[Offset: 0x18, Size: 0x4]
	bool bCanPlayInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bCanPlayInHip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	WW3TransitionBlend CustomBlend;//[Offset: 0x20, Size: 0x18]

--------------------------------
Class: WW3MoveType
	enum Position;//[Offset: 0x0, Size: 0x1]
	enum Speed;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: WW3TransitionBlend
	bool EnableCustomBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendDuration;//[Offset: 0x4, Size: 0x4]
	enum BlendType;//[Offset: 0x8, Size: 0x1]
	CurveFloat* CustomCurve;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: WW3CharacterJumps
	WW3MontageSplit InPlace;//[Offset: 0x0, Size: 0x10]
	WW3MontageSplit WalkForward;//[Offset: 0x10, Size: 0x10]
	WW3MontageSplit WalkBackwards;//[Offset: 0x20, Size: 0x10]
	WW3MontageSplit WalkLeft;//[Offset: 0x30, Size: 0x10]
	WW3MontageSplit WalkRight;//[Offset: 0x40, Size: 0x10]
	WW3MontageSplit RunForward;//[Offset: 0x50, Size: 0x10]
	WW3CharacterPositionSequenceSplit FallLoop;//[Offset: 0x60, Size: 0x50]

--------------------------------
Class: WW3MontageSplit
	AnimMontage* FPP;//[Offset: 0x0, Size: 0x8]
	AnimMontage* TPP;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WW3CharacterPositionSequenceSplit
	WW3SequenceSplit Stand;//[Offset: 0x0, Size: 0x10]
	WW3SequenceSplit Crouch;//[Offset: 0x10, Size: 0x10]
	WW3SequenceSplit Prone;//[Offset: 0x20, Size: 0x10]
	WW3SequenceSplit OnBack;//[Offset: 0x30, Size: 0x10]
	WW3SequenceSplit Knockdown;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: WW3SequenceSplit
	AnimSequence* FPP;//[Offset: 0x0, Size: 0x8]
	AnimSequence* TPP;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WW3VaultStage
	WW3VaultInfo Start;//[Offset: 0x0, Size: 0x100]
	WW3VaultLoops Loop;//[Offset: 0x100, Size: 0x20]
	WW3VaultInfo End;//[Offset: 0x120, Size: 0x100]

--------------------------------
Class: WW3VaultInfo
	WW3VaultSplit Vault;//[Offset: 0x0, Size: 0x40]
	WW3VaultSplit ClimbLowest;//[Offset: 0x40, Size: 0x40]
	WW3VaultSplit ClimbLow;//[Offset: 0x80, Size: 0x40]
	WW3VaultSplit ClimbHigh;//[Offset: 0xc0, Size: 0x40]

--------------------------------
Class: WW3VaultSplit
	WW3MontageSplit IdleWalk;//[Offset: 0x0, Size: 0x10]
	WW3MontageSplit Run;//[Offset: 0x10, Size: 0x10]
	WW3MontageSplit DashRun;//[Offset: 0x20, Size: 0x10]
	WW3MontageSplit Falling;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: WW3VaultLoops
	WW3SequenceSplit Slide;//[Offset: 0x0, Size: 0x10]
	WW3SequenceSplit LoopVault;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: WW3Prone2OnBackTransitions
	WW3MontageSplit LeftProneToOnBackTransition;//[Offset: 0x0, Size: 0x10]
	WW3MontageSplit RightProneToOnBackTransition;//[Offset: 0x10, Size: 0x10]
	WW3MontageSplit LeftOnBackToProneTransition;//[Offset: 0x20, Size: 0x10]
	WW3MontageSplit RightOnBackToProneTransition;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: WW3SpecialAnimations
	WW3CharacterPositionMontageSplit melee;//[Offset: 0x0, Size: 0x50]
	WW3CharacterPositionSequenceSplit Inspect;//[Offset: 0x50, Size: 0x50]
	WW3CharacterPositionSequenceSplit Revive;//[Offset: 0xa0, Size: 0x50]

--------------------------------
Class: WW3CharacterPositionMontageSplit
	WW3MontageSplit Stand;//[Offset: 0x0, Size: 0x10]
	WW3MontageSplit Crouch;//[Offset: 0x10, Size: 0x10]
	WW3MontageSplit Prone;//[Offset: 0x20, Size: 0x10]
	WW3MontageSplit OnBack;//[Offset: 0x30, Size: 0x10]
	WW3MontageSplit Knockdown;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: WW3CharacterCurveSplit
	CurveVector* Location;//[Offset: 0x0, Size: 0x8]
	CurveVector* Rotation;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WW3CharacterLandingCurves
	WW3CharacterCurveSplit AnyLanding;//[Offset: 0x0, Size: 0x10]
	WW3CharacterCurveSplit SoftLanding;//[Offset: 0x10, Size: 0x10]
	WW3CharacterCurveSplit MediumLanding;//[Offset: 0x20, Size: 0x10]
	WW3CharacterCurveSplit HardLanding;//[Offset: 0x30, Size: 0x10]
	WW3CharacterCurveSplit DeadlyLanding;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: WW3CharacterMovementAnimations
	WW3CharacterAnimationIdles Idles;//[Offset: 0x0, Size: 0x50]
	WW3CharacterAnimationIdles IdlesADS;//[Offset: 0x50, Size: 0x50]
	WW3SequencePoseSplit IdlesPST;//[Offset: 0xa0, Size: 0x28]
	WW3CharacterTurnAnimations Turns;//[Offset: 0xc8, Size: 0xc0]
	WW3CharacterAnimationWalks Walk;//[Offset: 0x188, Size: 0x50]
	WW3CharacterAnimationRuns Run;//[Offset: 0x1d8, Size: 0xc0]
	WW3CharacterAnimationRuns OverrideUpperBodyRun;//[Offset: 0x298, Size: 0xc0]

--------------------------------
Class: WW3CharacterAnimationIdles
	AnimSequence* Stand;//[Offset: 0x0, Size: 0x8]
	AnimSequence* StandFPP;//[Offset: 0x8, Size: 0x8]
	AnimSequence* Crouch;//[Offset: 0x10, Size: 0x8]
	AnimSequence* CrouchFPP;//[Offset: 0x18, Size: 0x8]
	AnimSequence* Prone;//[Offset: 0x20, Size: 0x8]
	AnimSequence* ProneFPP;//[Offset: 0x28, Size: 0x8]
	AnimSequence* OnBack;//[Offset: 0x30, Size: 0x8]
	AnimSequence* OnBackFPP;//[Offset: 0x38, Size: 0x8]
	AnimSequence* Knockdown;//[Offset: 0x40, Size: 0x8]
	AnimSequence* KnockdownFPP;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: WW3SequencePoseSplit
	AnimSequence* Stand;//[Offset: 0x0, Size: 0x8]
	AnimSequence* Crouch;//[Offset: 0x8, Size: 0x8]
	AnimSequence* Prone;//[Offset: 0x10, Size: 0x8]
	AnimSequence* OnBack;//[Offset: 0x18, Size: 0x8]
	AnimSequence* Knockdown;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: WW3CharacterTurnAnimations
	WW3CharacterTurnSplit Stand;//[Offset: 0x0, Size: 0x20]
	WW3CharacterTurnSplit Crouch;//[Offset: 0x20, Size: 0x20]
	WW3CharacterTurnSplit Prone;//[Offset: 0x40, Size: 0x20]
	WW3CharacterTurnSplit OnBack;//[Offset: 0x60, Size: 0x20]
	WW3CharacterTurnSplit Slide;//[Offset: 0x80, Size: 0x20]
	WW3CharacterTurnSplit Knockdown;//[Offset: 0xa0, Size: 0x20]

--------------------------------
Class: WW3CharacterTurnSplit
	WW3MontageSplit Left;//[Offset: 0x0, Size: 0x10]
	WW3MontageSplit Right;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: WW3CharacterAnimationWalks
	BlendSpace* StandForward;//[Offset: 0x0, Size: 0x8]
	BlendSpace* StandForwardFPP;//[Offset: 0x8, Size: 0x8]
	BlendSpace* CrouchForward;//[Offset: 0x10, Size: 0x8]
	BlendSpace* CrouchForwardFPP;//[Offset: 0x18, Size: 0x8]
	BlendSpace* ProneForward;//[Offset: 0x20, Size: 0x8]
	BlendSpace* ProneForwardFPP;//[Offset: 0x28, Size: 0x8]
	BlendSpace* OnBackBackward;//[Offset: 0x30, Size: 0x8]
	BlendSpace* OnBackBackwardFPP;//[Offset: 0x38, Size: 0x8]
	BlendSpace* Knockdown;//[Offset: 0x40, Size: 0x8]
	BlendSpace* KnockdownFPP;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x148, Size: 0x1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	float AnimLength;//[Offset: 0x8c, Size: 0x4]
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 0x8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 0x4]
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 0x1]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 0x1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 0x10]
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 0x4]
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 0x10]
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 0x10]
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 0x20]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4]
	byte InterpolationType;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x18]
	float InterpolationSpeedPerSec;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8]
	Vector SampleValue;//[Offset: 0x8, Size: 0xc]
	float RateScale;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4]
	float Weights;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10]
	float Min;//[Offset: 0x10, Size: 0x4]
	float Max;//[Offset: 0x14, Size: 0x4]
	int GridNum;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: WW3CharacterAnimationRuns
	WW3CharacterAnimationWeightRun Stand;//[Offset: 0x0, Size: 0x30]
	WW3CharacterAnimationWeightRun Crouch;//[Offset: 0x30, Size: 0x30]
	WW3CharacterAnimationWeightRun Prone;//[Offset: 0x60, Size: 0x30]
	WW3CharacterAnimationWeightRun Dash;//[Offset: 0x90, Size: 0x30]

--------------------------------
Class: WW3CharacterAnimationWeightRun
	AnimSequence* LightWeight;//[Offset: 0x0, Size: 0x8]
	AnimSequence* LightWeightTPP;//[Offset: 0x8, Size: 0x8]
	AnimSequence* MediumWeight;//[Offset: 0x10, Size: 0x8]
	AnimSequence* MediumWeightTPP;//[Offset: 0x18, Size: 0x8]
	AnimSequence* HeavyWeight;//[Offset: 0x20, Size: 0x8]
	AnimSequence* HeavyWeightTPP;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WW3CharacterEquipSets
	WW3CharacterEquipAnimationSet[] Equips;//[Offset: 0x0, Size: 0x10]
	WW3CharacterFirstEquipAnimationSet[] FirstEquips;//[Offset: 0x10, Size: 0x10]
	WW3CharacterReloadEquipAnimationSet[] ReloadEquips;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: WW3CharacterEquipAnimationSet
	WW3CharacterEquipAnimation[] Anims;//[Offset: 0x0, Size: 0x10]
	WW3AnimationSetTypeDependency StateDependency;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: WW3CharacterEquipAnimation
	WW3ItemAnim Equip;//[Offset: 0x0, Size: 0x40]
	WW3ItemAnim UnEquip;//[Offset: 0x40, Size: 0x40]

--------------------------------
Class: WW3ItemAnim
	AnimMontage* ItemAnim;//[Offset: 0x0, Size: 0x8]
	AnimMontage* OwnerAnim;//[Offset: 0x8, Size: 0x8]
	AnimMontage* TPPItem;//[Offset: 0x10, Size: 0x8]
	AnimMontage* TPPAnim;//[Offset: 0x18, Size: 0x8]
	WW3AttachmentAnim[] AttachmentAnims;//[Offset: 0x20, Size: 0x10]
	WW3AttachmentAnim[] TPPAttachmentAnims;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: WW3AttachmentAnim
	enum AttachmentType;//[Offset: 0x0, Size: 0x1]
	AnimMontage* AttachmentAnim;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WW3AnimationSetTypeDependency
	enum[] MovementTypes;//[Offset: 0x0, Size: 0x10]
	enum[] MovementSpeed;//[Offset: 0x10, Size: 0x10]
	enum[] MagazineType;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: WW3CharacterFirstEquipAnimationSet
	WW3CharacterFirstEquipAnimation[] Anims;//[Offset: 0x0, Size: 0x10]
	WW3AnimationSetTypeDependency StateDependency;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: WW3CharacterFirstEquipAnimation
	WW3ItemAnim FirstEquip;//[Offset: 0x0, Size: 0x40]
	WW3ItemAnim FirstEquipAlternate;//[Offset: 0x40, Size: 0x40]

--------------------------------
Class: WW3CharacterReloadEquipAnimationSet
	WW3CharacterReloadEquipAnimation[] Anims;//[Offset: 0x0, Size: 0x10]
	WW3AnimationSetTypeDependency StateDependency;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: WW3CharacterReloadEquipAnimation
	WW3ItemAnim Equip;//[Offset: 0x0, Size: 0x40]

--------------------------------
Class: WW3CharacterReloadAnimations
	WW3ItemAnim Short;//[Offset: 0x0, Size: 0x40]
	WW3ItemAnim Long;//[Offset: 0x40, Size: 0x40]
	WW3ItemAnim ChangeAmmo;//[Offset: 0x80, Size: 0x40]
	WW3ItemAnim AfterShot;//[Offset: 0xc0, Size: 0x40]
	WW3ItemAnim AfterShotADS;//[Offset: 0x100, Size: 0x40]
	enum[] MovementTypes;//[Offset: 0x140, Size: 0x10]
	enum[] MagazineType;//[Offset: 0x150, Size: 0x10]

--------------------------------
Class: WW3CharacterUnderbarrelReloadAnimations
	WW3ItemAnim UnderBarrel;//[Offset: 0x0, Size: 0x40]
	enum[] MovementTypes;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: WW3CharacterPositionSequence
	AnimSequence* Stand;//[Offset: 0x0, Size: 0x8]
	AnimSequence* Crouch;//[Offset: 0x8, Size: 0x8]
	AnimSequence* Prone;//[Offset: 0x10, Size: 0x8]
	AnimSequence* OnBack;//[Offset: 0x18, Size: 0x8]
	AnimSequence* Knockdown;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: WW3Poses
	WW3SequencePoseSplit Angular;//[Offset: 0x0, Size: 0x28]
	WW3SequencePoseSplit Cobra;//[Offset: 0x28, Size: 0x28]
	WW3SequencePoseSplit HandguardAK;//[Offset: 0x50, Size: 0x28]
	WW3SequencePoseSplit AKThin;//[Offset: 0x78, Size: 0x28]
	WW3SequencePoseSplit HandguardThick;//[Offset: 0xa0, Size: 0x28]
	WW3SequencePoseSplit UpgradedHandguardQBZ;//[Offset: 0xc8, Size: 0x28]
	WW3SequencePoseSplit JunoHera;//[Offset: 0xf0, Size: 0x28]
	WW3SequencePoseSplit Magazine;//[Offset: 0x118, Size: 0x28]
	WW3SequencePoseSplit MagazinePKP;//[Offset: 0x140, Size: 0x28]
	WW3SequencePoseSplit Potato;//[Offset: 0x168, Size: 0x28]
	WW3SequencePoseSplit Shotgun;//[Offset: 0x190, Size: 0x28]
	WW3SequencePoseSplit StraightLong;//[Offset: 0x1b8, Size: 0x28]
	WW3SequencePoseSplit StraightShort;//[Offset: 0x1e0, Size: 0x28]
	WW3SequencePoseSplit GrenadeLauncher;//[Offset: 0x208, Size: 0x28]
	WW3SequencePoseSplit Underslung;//[Offset: 0x230, Size: 0x28]
	WW3SequencePoseSplit CGrip;//[Offset: 0x258, Size: 0x28]
	WW3SequencePoseSplit Stock;//[Offset: 0x280, Size: 0x28]

--------------------------------
Class: WW3HUBAnimationSplit
	WW3HUBAnimation Standing;//[Offset: 0x0, Size: 0x18]
	WW3HUBAnimation Sitting;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: WW3HUBAnimation
	AnimSequence* BasePose;//[Offset: 0x0, Size: 0x8]
	WW3WeightedAnimation[] AdditionalIdles;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WW3WeightedAnimation
	AnimMontage* Anim;//[Offset: 0x0, Size: 0x8]
	AnimMontage* ItemAnim;//[Offset: 0x8, Size: 0x8]
	float Weight;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WW3GadgetAnims
	AnimSequence* FiringPose;//[Offset: 0x0, Size: 0x8]
	WW3GadgetAnim[] Use;//[Offset: 0x8, Size: 0x10]
	WW3GadgetAnim[] AlternativeUse;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: WW3GadgetAnim
	WW3ItemAnim Montages;//[Offset: 0x0, Size: 0x40]
	enum[] MovementTypes;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: WW3DeltaProperties
	float LocationInterpSpeed;//[Offset: 0x0, Size: 0x4]
	float RotationInterpSpeed;//[Offset: 0x4, Size: 0x4]
	float RightInterpSpeed;//[Offset: 0x8, Size: 0x4]
	float ForwardInterpSpeed;//[Offset: 0xc, Size: 0x4]
	float ForwardRunInterpSpeed;//[Offset: 0x10, Size: 0x4]
	Vector2D MouseYLimit;//[Offset: 0x14, Size: 0x8]
	Vector2D MouseXLimit;//[Offset: 0x1c, Size: 0x8]
	float TargetingMultiplier;//[Offset: 0x24, Size: 0x4]
	float LocationMultiplier;//[Offset: 0x28, Size: 0x4]
	float RotationMultiplier;//[Offset: 0x2c, Size: 0x4]
	float ForwardStrength;//[Offset: 0x30, Size: 0x4]
	float PitchStrength;//[Offset: 0x34, Size: 0x4]
	float RollStrength;//[Offset: 0x38, Size: 0x4]
	float SideStrength;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: SoundCue.SoundBase.Object
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	bool bExcludeFromRandomNodeBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1]
	SoundNode* FirstNode;//[Offset: 0xb0, Size: 0x8]
	float VolumeMultiplier;//[Offset: 0xb8, Size: 0x4]
	float PitchMultiplier;//[Offset: 0xbc, Size: 0x4]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0xc0, Size: 0x2a8]
	float SubtitlePriority;//[Offset: 0x368, Size: 0x4]

--------------------------------
Class: SoundNode.Object
	SoundNode*[] ChildNodes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: WW3Character.Character.Pawn.Actor.Object
	WW3CharacterAttachmentManager* CharacterAttachmentManager;//[Offset: 0x7a0, Size: 0x8]
	WW3CharacterFootstepsBetterImprovement* CharacterFBI;//[Offset: 0x7a8, Size: 0x8]
	WW3InventoryManager* InventoryManager;//[Offset: 0x7b0, Size: 0x8]
	WW3CameraShakeManager* CameraShakeManager;//[Offset: 0x7b8, Size: 0x8]
	WW3PlayerStrikesManager* PlayerStrikesManager;//[Offset: 0x7c0, Size: 0x8]
	WW3CharacterDriverManager* CharacterDriverManager;//[Offset: 0x7c8, Size: 0x8]
	WW3CharacterEffectsManager* EffectsManager;//[Offset: 0x7d0, Size: 0x8]
	WW3ProgressableMarkerSoldier* MarkerComp;//[Offset: 0x7d8, Size: 0x8]
	WW3HVTActorMarker* HVTMarkerComponent;//[Offset: 0x7e0, Size: 0x8]
	WW3StrikeTargetOutlineComponent* StrikeTargetOutlineWidgetComponent;//[Offset: 0x7e8, Size: 0x8]
	CapsuleComponent* ProneCollider;//[Offset: 0x7f0, Size: 0x8]
	WW3AimAssistCapsuleComponent* AimAssistCapsule;//[Offset: 0x7f8, Size: 0x8]
	WW3DetonatorComponent* Detonator;//[Offset: 0x800, Size: 0x8]
	SkeletalMeshComponent* ControllingDevice;//[Offset: 0x808, Size: 0x8]
	WW3SatelliteObjectComponent* SatelliteObjectComponent;//[Offset: 0x810, Size: 0x8]
	WW3DistanceRelevantCharacter* MyDistanceRelevantActor;//[Offset: 0x818, Size: 0x8]
	WW3NoiseManagerCharacter* NoiseManagerCharacter;//[Offset: 0x820, Size: 0x8]
	enum CharacterWeaponBankRole;//[Offset: 0x900, Size: 0x1]
	WW3PlayerSettings PlayerConfig;//[Offset: 0x904, Size: 0x4c]
	DataTable* PlayerWeightSettingsTable;//[Offset: 0x950, Size: 0x8]
	class SkeletalMeshComponent* ControllingDeviceClass;//[Offset: 0x958, Size: 0x8]
	class SpringArmComponent* CameraBoomClass;//[Offset: 0x960, Size: 0x8]
	class CameraComponent* CharacterCameraClass;//[Offset: 0x968, Size: 0x8]
	Vector2D FootIKOffsetRange;//[Offset: 0x970, Size: 0x8]
	Vector2D FootIKPitchOffsetRange;//[Offset: 0x978, Size: 0x8]
	Vector2D FootIKRollOffsetRange;//[Offset: 0x980, Size: 0x8]
	float MaxFootIKOffset;//[Offset: 0x988, Size: 0x4]
	float MaxFootIKPitchOffset;//[Offset: 0x98c, Size: 0x4]
	float AlwaysRelevantDistance;//[Offset: 0x990, Size: 0x4]
	float MinMouseSensitivityMultiplier;//[Offset: 0x994, Size: 0x4]
	float MaxMouseSensitivityMultiplier;//[Offset: 0x998, Size: 0x4]
	float MarkSphereRadius;//[Offset: 0x99c, Size: 0x4]
	WW3VoiceLanguageAndSetPlayerSettings PlayerVoicePackSettings;//[Offset: 0x9a0, Size: 0x2]
	WW3RecoilManager* RecoilManager;//[Offset: 0x9a8, Size: 0x8]
	SpringArmComponent* CameraBoom;//[Offset: 0x9b0, Size: 0x8]
	WW3CharacterCameraComponent* CharacterCameraComponent;//[Offset: 0x9b8, Size: 0x8]
	Pawn* WW3VehiclePossessed;//[Offset: 0x9c0, Size: 0x8]
	WW3Vehicle* VehicleWalkingBase;//[Offset: 0x9c8, Size: 0x8]
	WW3CharacterPositionMontageSplit[] GestureAnimations;//[Offset: 0x9d0, Size: 0x10]
	WW3EnviroEffectsController* EnvironmentalEffectsController;//[Offset: 0x9e8, Size: 0x8]
	byte TargetAdrenalineLevel;//[Offset: 0x9f0, Size: 0x1]
	float CurrentAdrenalineLevel;//[Offset: 0x9f4, Size: 0x4]
	bool IsInInspect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f8, Size: 0x1]
	WW3SuppressEffectController* SuppressEffectController;//[Offset: 0xa18, Size: 0x8]
	CurveFloat* SuppressMultiplierCurve;//[Offset: 0xa30, Size: 0x8]
	WW3ThrowableFlashGrenade* FlashGrenadeCauser;//[Offset: 0xa60, Size: 0x8]
	Texture* TargetTexture;//[Offset: 0xa68, Size: 0x8]
	float FlashTickDelay;//[Offset: 0xa70, Size: 0x4]
	float FlashStunTickDelay;//[Offset: 0xa74, Size: 0x4]
	float CurrentFlashEffectDuration;//[Offset: 0xa7c, Size: 0x4]
	float CurrentFlashIntensity;//[Offset: 0xa84, Size: 0x4]
	float CurrentFlashShakeIntensity;//[Offset: 0xa8c, Size: 0x4]
	float FlashDot;//[Offset: 0xa94, Size: 0x4]
	float CurrentFOVCosine;//[Offset: 0xa98, Size: 0x4]
	float AfterSpawnInvulnerabilityDuration;//[Offset: 0xa9c, Size: 0x4]
	bool bIsLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa0, Size: 0x1]
	bool bIsTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadb, Size: 0x1]
	enum InitialMovementPosition;//[Offset: 0xb04, Size: 0x1]
	byte RemoteViewYaw;//[Offset: 0xb05, Size: 0x1]
	WW3SeatBase* UsingSeat;//[Offset: 0xb08, Size: 0x8]
	WW3SeatBase* PendingUsingSeat;//[Offset: 0xb10, Size: 0x8]
	WW3CharacterReplicatedMovement CharacterReplicatedMovement;//[Offset: 0xb20, Size: 0x58]
	WW3PlayerState* LastAffectedConcussionGrenadeInstigator;//[Offset: 0xb78, Size: 0x8]
	float CenterPointToleration;//[Offset: 0xb80, Size: 0x4]
	float ChallengeTimeAfterSlide;//[Offset: 0xb8c, Size: 0x4]
	WW3Gadget_SemtexC4*[] SemtexC4IgnoredArray;//[Offset: 0xb90, Size: 0x10]
	WW3KillScreenKillerInfo KillScreenInfo;//[Offset: 0xf20, Size: 0xd0]
	WW3AudioSingleton* AudioSingleton;//[Offset: 0x1018, Size: 0x8]
	WW3ReplicatedCharacterStateAndAnimation ReplicatedCharacterStateAndAnimationStruct;//[Offset: 0x1050, Size: 0x10]
	byte CurrentHealth;//[Offset: 0x1060, Size: 0x1]
	enum CharacterWeightThreshold;//[Offset: 0x1061, Size: 0x1]
	WW3TakeHitInfo LastTakeHitInfo;//[Offset: 0x1068, Size: 0xa8]
	WW3TakeHitInfo PreKnockdownHitInfo;//[Offset: 0x1110, Size: 0xa8]
	WW3KnockdownHitInfo KnockDownHitInfo;//[Offset: 0x11b8, Size: 0xd0]
	byte HealthThresholdToResetTakenHits;//[Offset: 0x1288, Size: 0x1]
	WW3BaseProtection* BaseProtectionComponent;//[Offset: 0x1290, Size: 0x8]
	ParticleSystemComponent* WeatherPSC;//[Offset: 0x1298, Size: 0x8]
	WW3AkComponent* BarkAkComponent;//[Offset: 0x12a0, Size: 0x8]
	BillboardComponent* DebugBillboardComponent;//[Offset: 0x12a8, Size: 0x8]
	WW3AudioVolume*[] ReverbZoneStack;//[Offset: 0x12b0, Size: 0x10]
	WW3AudioVolume* CurrentReverbZone;//[Offset: 0x12c8, Size: 0x8]
	AnimMontage* CurrentTauntAnim;//[Offset: 0x12d0, Size: 0x8]
	Actor*[] ReusableActorsArray;//[Offset: 0x12e8, Size: 0x10]
	Actor* AimAssistTarget;//[Offset: 0x1308, Size: 0x8]
	WW3PlayerController* SvOwnerWW3PlayerController;//[Offset: 0x1330, Size: 0x8]
	Controller* SvOwnerController;//[Offset: 0x1338, Size: 0x8]
	UInt32Property PackedIKData;//[Size: 0x4]
	Pawn*[] HitEnemies;//[Offset: 0x1420, Size: 0x10]
	WW3FreeCameraPawn* SvDebugCameraActor;//[Offset: 0x1430, Size: 0x8]
	WW3FreeCameraPawn* ClDebugCameraActor;//[Offset: 0x1438, Size: 0x8]
	WW3Ladder* UsingLadder;//[Offset: 0x1440, Size: 0x8]
	SkeletalMeshActor* MagazineMesh;//[Offset: 0x1448, Size: 0x8]
	byte RestoreRequiredBitmapsReplicated;//[Offset: 0x1450, Size: 0x1]
	Actor* LastInteractiveActor;//[Offset: 0x1468, Size: 0x8]
	class Object* StrikeCrateToSpawn;//[Offset: 0x1470, Size: 0x28]
	class Object* PlayerBackpackToSpawn;//[Offset: 0x1498, Size: 0x28]
	WW3Character*[] CharactersWithImpulesRadar;//[Offset: 0x1500, Size: 0x10]
	WW3CABodyPart_Chest* ChestCached;//[Offset: 0x15c8, Size: 0x8]
	WW3CABodyPart* HelmetCached;//[Offset: 0x15d0, Size: 0x8]
	WW3PlayerState* SavedPlayerState;//[Offset: 0x15e8, Size: 0x8]
	WW3PlayerState* SavedInactivePlayerState;//[Offset: 0x15f0, Size: 0x8]
	WW3InventoryItem* PrimaryGadgetInUse;//[Offset: 0x1600, Size: 0x8]
	WW3InventoryItem* SecondaryGadgetInUse;//[Offset: 0x1608, Size: 0x8]
	void SetOwnedCombatVehicle(WW3Vehicle* NewVehicle);// 0xf68eb0
	void Server_UpdateFeetIK(IKData(UInt32Property) IKData);// 0xf68df0
	void Server_UpdateAttachmentsIdsOnServer(uint16[] InNewAttachmentsIds, uint16 InChestArmorId, uint16 InHeadwearArmorId);// 0xf68ca0
	void Server_UpdateAimOffsetWhileLookingAround(uint16 PackedAimOffset);// 0xf68be0
	void Server_StopTargeting();// 0xf68b90
	void Server_StopLeanRight();// 0xf68b40
	void Server_StopLeanLeft();// 0xf68af0
	void Server_StartTargeting();// 0xf68aa0
	void Server_StartMelee();// 0xf68a50
	void Server_StartLeanRight();// 0xf68a00
	void Server_StartLeanLeft();// 0xf689b0
	void Server_SetUsedVoiceSettings(enum NewUsedVoiceLanguage, enum NewUsedVoiceset);// 0xf688c0
	void Server_RequestRemoveSpecialAmmo(uint16 InWeaponSpecialAmmoItemId);// 0xf68800
	void Server_RequestHelpWithKnockdown();// 0xf687b0
	void Server_RequestAddNewSpecialAmmo(uint16 InSelectedSpecialAmmoItemId, int InSelectedSpecialAmmoAmount, uint16 InWeaponSpecialAmmoItemId);// 0xf68680
	void Server_PlayThirdTaunt();// 0xf68630
	void Server_PlayTaunt(AnimMontage* TauntToPlay);// 0xf68570
	void Server_PlaySecondTaunt();// 0xf68520
	void Server_PlayRightProneToOnBackTransition(bool bFinishOnBack);// 0xf68460
	void Server_PlayLeftProneToOnBackTransition(bool bFinishOnBack);// 0xf683a0
	void Server_PlayGestureAnimation(int AnimIndex);// 0xf682e0
	void Server_PlayFirstTaunt();// 0xf68290
	void Server_PlayCommandMenuBark(enum BarkType, int TeamIndex, int SquadIndex, WW3Character* CharacterToPlayOn);// 0xf68110
	void Server_PlayBarkForTeam(enum BarkType, int TeamIndex, WW3Character* CharacterToPlayOn, float DistanceToTriggerOrigin);// 0xf67f90
	void Server_PlayBarkForSquad(enum BarkType, int TeamIndex, int SquadIndex, WW3Character* CharacterToPlayOn, float DistanceToTriggerOrigin);// 0xf67dd0
	void Server_PlayBarkForEveryone(enum BarkType, WW3Character* CharacterToPlayOn, float DistanceToTriggerOrigin);// 0xf67ca0
	void Server_PickUpTransmissionObject();// 0xf67c50
	void Server_OnWantsToUseLadder(WW3Ladder* InLadder);// 0xf67b90
	void Server_OnStopUsingSecondaryGadget_Grenade(float Timestamp, WW3InventoryGrenade* InGrenade);// 0xf67a90
	void Server_OnStopPST();// 0xf67a40
	void Server_OnStopLookAround();// 0xf679f0
	void Server_OnStopInspecting();// 0xf679a0
	void Server_OnStartUsingSecondaryGadget_Grenade(float Timestamp, WW3InventoryGrenade* InGrenade);// 0xf678a0
	void Server_OnStartUsingSecondaryGadget_Gadget(WW3InventoryGadget* InSecondaryGadget);// 0xf677e0
	void Server_OnStartTransmition();// 0xf67790
	void Server_OnStartPST();// 0xf67740
	void Server_OnStartLookAround();// 0xf676f0
	void Server_OnStartInspecting();// 0xf676a0
	void Server_OnStartEvacuation();// 0xf67650
	void Server_OnSecondaryGadgetKeyReleased_Gadget(WW3InventoryGadget* InGadget);// 0xf67590
	void Server_OnPrimaryGadgetKeyReleased_Gadget(WW3InventoryItem* InGadget);// 0xf674d0
	void Server_OnPrevWeapon(WW3InventoryItem* InItem);// 0xf67410
	void Server_OnPlayerSynchronized();// 0xf673c0
	void Server_OnNextWeapon(WW3InventoryItem* InItem);// 0xf67300
	void Server_OnMark(Actor* HitActor, Vector_NetQuantize ClientHitPosition, Vector_NetQuantize ClientMarkDirection, Vector_NetQuantize ClientMarkOrigin, uint16 InMarkSphereRadius, uint16 Range, bool MarkedByFlashlight);// 0xf67050
	void Server_OnInteractFinished(Actor* UsableActor);// 0xf66f90
	void Server_NextSeat(WW3PlayerController* UserController);// 0xf66ed0
	void Server_JumpOffFromLadder();// 0xf66e80
	void Server_ExitSeat(float ViewYawRotation);// 0xf66dd0
	void Server_EquipZeroItem();// 0xf66d80
	void Server_EquipThirdStrikeGadget(WW3InventoryGadgetStrike* InStrikeGadget);// 0xf66cc0
	void Server_EquipThirdItem(WW3InventoryGadget* InPrimaryGadget);// 0xf66c00
	void Server_EquipSecondStrikeGadget(WW3InventoryGadgetStrike* InStrikeGadget);// 0xf66b40
	void Server_EquipSecondItem(WW3InventoryItem* InItem);// 0xf66a80
	void Server_EquipRepairKit();// 0xf66a30
	void Server_EquipLastWeapon();// 0xf669e0
	void Server_EquipItemSlot(int SlotIndex);// 0xf66920
	void Server_EquipHVTInventory();// 0xf668d0
	void Server_EquipFourthStrikeGadget();// 0xf66880
	void Server_EquipFourthItem(WW3InventoryItem* InItem);// 0xf667c0
	void Server_EquipFirstStrikeGadget(WW3InventoryGadgetStrike* InStrikeGadget);// 0xf66700
	void Server_EquipFirstItem(WW3InventoryItem* InItem);// 0xf66640
	void Server_EquipFifthItem();// 0xf665f0
	void Server_EquipAdditionalGadget(WW3InventoryItem* InAdditionalGadget);// 0xf66530
	void Server_EnterSeat(WW3PlayerController* UserController, int NewSeatNumber);// 0xf66430
	void Server_EnableMinimapForUpper(int Range, float TimeInterval);// 0xf66330
	void Server_EnableAnimDebugMode(bool Value);// 0xf66270
	void Server_DropStrike(byte Value);// 0xf661c0
	void Server_DrawDebugCapsule(Vector Center, float HalfHeight, float Radius, Quat Rotation, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0xf65ed0
	void Server_DrawDebugBox(Vector Center, Vector Extent, Quat Rotation, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0xf65c30
	void Server_DisplayAnimDebug();// 0xf65be0
	void Server_DisplayAllCharacterAnimDebug();// 0xf65b90
	void Server_DisableMinimapForUpper();// 0xf65b40
	void Server_Cheat_ToggleGodMode();// 0xf65af0
	void Server_Cheat_ToggleGhost();// 0xf65aa0
	void Server_Cheat_SetHealth(float HealthToSet, enum InReason);// 0xf659a0
	void Server_Cheat_DisableAdrenalineDecrease(bool Value);// 0xf658e0
	void Server_Cheat_AddGrenades(int AmountToAdd);// 0xf65820
	void Server_ChangeAnimMove(enum PrevPosition, enum PrevSpeed, enum NewPosition, enum NewSpeed, float AnimDuration, bool bUpdateFromClient);// 0xf65610
	void Server_ApplyConcussionGrenadeEffect(WW3ThrowableGrenade* grenade);// 0xf65550
	void PlayBarkOnSpawnOnSquadMember();// 0xf65530
	void PlayBarkOnRevived();// 0xf65510
	void PlayBarkOnRetreat();// 0xf654f0
	void PlayBarkOnKnockdown();// 0xf654d0
	void OnRep_UsingSeat(WW3SeatBase* PrevSeat);// 0xf65450
	void OnRep_RestoreRequiredBitmapsReplicated();// 0xf65430
	void OnRep_ReplicatedStateBitMaskAndAnimation(WW3ReplicatedCharacterStateAndAnimation Prev);// 0xf65380
	void OnRep_ReplicatedFreeCamera();// 0xf65360
	void OnRep_PlayerVoicePackSettings();// 0xf65340
	void OnRep_PackedIKData();// 0xf65320
	void OnRep_LastTakeHitInfo();// 0xf65300
	void OnRep_IsInInspect();// 0xf652e0
	void OnRep_CurrentHealth(byte InPrevHealth);// 0xf65260
	void OnRep_CharacterWeightThreshold();// 0xf65240
	void OnRep_CharacterReplicatedMovement(WW3CharacterReplicatedMovement PrevMovement);// 0xf65170
	void OnRagdollHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, HitResult Hit);// 0xf64fc0
	void OnFireTypePostShoot(WW3FireType* InFireType, WW3PlayerController* InShooterPlayerController, WW3PlayerController* InMyPlayerController);// 0xf64ec0
	void Multicast_UpdateAimOffsetWhileLookingAround(uint16 PackedAimOffset);// 0xf64af0
	void Multicast_RestoreAllAttachments();// 0xf64ad0
	void Multicast_PlayLandEffects(enum LandType);// 0xf64a50
	void Multicast_PlayLadderLeaveTopAnimation();// 0xf64a30
	void Multicast_PlayLadderLeaveBottomAnimation();// 0xf64a10
	void Multicast_PlayCommandMenuBark(enum BarkType, WW3Character* CharacterToPlayOn, int TeamIndex, int SquadIndex);// 0xf648d0
	void Multicast_PlayBark(enum BarkType, WW3Character* CharacterToPlayOn, float DistanceToTriggerOrigin, WW3Character* InCharacterToHearAlsoOverRadio, enum InRelationToHearAlsoOverRadio);// 0xf64750
	void Multicast_OnStopRevive();// 0xf64730
	void Multicast_OnStartRevive();// 0xf64710
	void Multicast_OnJumped();// 0xf646f0
	void Multicast_JumpOffFromLadder();// 0xf646d0
	void Multicast_EnterLadderFromTopBack(WW3Ladder* Ladder);// 0xf64640
	void Multicast_EnterLadderFromTopAhead(WW3Ladder* Ladder);// 0xf645b0
	void Multicast_EnterLadderFromBottom(WW3Ladder* Ladder);// 0xf64520
	void K2_OnMovementSpeedChanged(enum Prev, enum Current);// 0x1395e00
	void K2_OnMovementPositionChanged(enum Prev, enum Current);// 0x1395e00
	void IsUsingSideScope(bool ReturnValue);// 0xf644f0
	void IsUsingMeshFPP(bool ReturnValue);// 0xf644c0
	void IsUsingItem(bool ReturnValue);// 0xf64490
	void IsThrowing(bool ReturnValue);// 0xf64470
	void IsTargeting(bool ReturnValue);// 0xf64450
	void IsSquadLeader(bool ReturnValue);// 0xf64410
	void IsSliding(bool ReturnValue);// 0xf643e0
	void IsRunning(bool ReturnValue);// 0xf64290
	void IsReloading(bool ReturnValue);// 0xf64260
	void IsPerformingMelee(bool ReturnValue);// 0xf64240
	void IsLookingAround(bool ReturnValue);// 0xf64220
	void IsLoadingAmmoConsideredFinished(bool ReturnValue);// 0xf641f0
	void IsLeaning(bool ReturnValue);// 0xf641c0
	void IsGadgetEquipped(bool ReturnValue);// 0xf64190
	void IsFloorSliding(bool ReturnValue);// 0xf64160
	void IsFiring(bool ReturnValue);// 0xf64130
	void IsDashRunning(bool ReturnValue);// 0xf640b0
	void GetTargetSuppressLevel(WW3PlayerState* InThisCharacterPlayerState, byte ReturnValue);// 0xf64020
	void GetOwnedCombatVehicle(WW3Vehicle* ReturnValue);// 0xf63ff0
	void GetMovementSpeed(enum ReturnValue);// 0xf63fc0
	void GetMovementPosition(enum ReturnValue);// 0xf63f90
	void GetMovementMode(byte ReturnValue);// 0xf63f60
	void GetMaxHealth(int ReturnValue);// 0xf63f20
	void GetFocusedUsableActor(Actor* ReturnValue);// 0xf63ef0
	void GetCurrentWeaponAnimationConfig(WW3WeaponAnimationConfig OutConfig);// 0xf63df0
	void GetCurrentItem(WW3InventoryItem* ReturnValue);// 0xf63dc0
	void GetCurrentInteractingHoldTime(float ReturnValue);// 0xf63da0
	void GetCurrentHealth(int ReturnValue);// 0xf63d60
	void GetAllWeapons(WW3InventoryWeapon*[] WeaponsArray);// 0xf63cb0
	void ForceSpaceButton(bool Jump);// 0xf4a120
	void EquipMagazine();// 0xf63c90
	void DropMagazine(Vector Force, Vector AngularForce, bool bShouldDrop);// 0xf63b60
	void Client_StopKnockdown();// 0xf63b40
	void Client_StartKnockdown();// 0xf63b20
	void Client_SetStrikesLoadout(byte _teamNumber, byte[] _strikeNumber, enum _additionalPrize);// 0xf63a00
	void Client_ResetWeaponLoadout();// 0xf639e0
	void Client_ResetStrikeLoadout();// 0x571c10
	void Client_PrintDebug(FString Text);// 0xf63940
	void Client_PlayCommandMenuBark(enum BarkType, WW3Character* CharacterToPlayOn, float DistanceToTriggerOrigin);// 0xf63840
	void Client_PlayBark(enum BarkType, WW3Character* CharacterToPlayOn, float DistanceToTriggerOrigin, WW3Character* InCharacterToHearAlsoOverRadio, enum InRelationToHearAlsoOverRadio);// 0xf636c0
	void Client_OnUseLadderError(byte MovementMode);// 0xf63640
	void Client_OnStopKnockdown_Revived();// 0xf63620
	void Client_OnStopKnockdown_Died();// 0xf63600
	void Client_OnSecondaryGadgetUnEquipped();// 0xf635e0
	void Client_MarkedSuccessfully(Actor* MarkedActor);// 0xf63550
	void Client_EquipItemError(WW3InventoryItem* CorrectItem);// 0xf634c0
	void Client_DropStrike(byte Value);// 0xf63440
	void Client_DrawDebug(Vector StartPos, Vector EndPos);// 0xf63360
	void Client_CreateMovingBulletSound(enum InSoundType, Vector_NetQuantize100 InLocation, byte InEncodedRotatorPart1, byte InEncodedRotatorPart2, byte InEncodedRotatorPart3);// 0xf631b0
	void Client_AddStrikeGadgetToFirstEmptySlot(WW3InventoryGadgetStrike* StrikeGadget, int SlotNumber);// 0xf630e0
	void CanInteract(bool ReturnValue);// 0xf630b0
	void Callback_OnCharacterMovementUpdated(float DeltaSeconds, Vector OldLocation, Vector OldVelocity);// 0xf62f90
	void BP_GetTeam(int ReturnValue);// 0xf62f60
	void BP_GetIsAlive(bool ReturnValue);// 0xf62f30

--------------------------------
Class: WW3CharacterAttachmentManager.WW3AttachmentManager.ActorComponent.Object
	WW3CharacterAttachmentSlot[] AvailableSlots;//[Offset: 0x490, Size: 0x10]
	MeshComponent* FPPBaseMeshComponent;//[Offset: 0x4a0, Size: 0x8]
	WW3Character* OwnerCharacter;//[Offset: 0x4a8, Size: 0x8]
	uint16[] ProxyAttachmentsIds;//[Offset: 0x4c8, Size: 0x10]
	WW3SkeletalProxyMeshComponent* ProxyMeshComponent;//[Offset: 0x4d8, Size: 0x8]

--------------------------------
Class: WW3AttachmentManager.ActorComponent.Object
	bool bAttachmentsSlotsOverBodySlots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	bool bWriteToStencilOnBaseMeshAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]
	MeshComponent* BaseMeshComp;//[Offset: 0x1b0, Size: 0x8]
	WW3Attachment*[] AllAttachmentObjects;//[Offset: 0x1b8, Size: 0x10]
	uint16[] AllAttachmentsIds;//[Offset: 0x1c8, Size: 0x10]
	enum[] ItemTypesToBlock;//[Offset: 0x1d8, Size: 0x10]
	<FString,None(None)> HubCameraOverrides;//[Offset: 0x1e8, Size: 0x50]
	<FString,None(None)> ItemHubCameraOverrides;//[Offset: 0x238, Size: 0x50]
	WW3AttachmentsStructure AttachmentsStructure;//[Offset: 0x288, Size: 0x10]
	WW3AttachmentReplicatedBatch ReplicatedBatch;//[Offset: 0x2b8, Size: 0x28]
	WW3AttachmentReplicatedBatch ClientAppliedBatch;//[Offset: 0x2e0, Size: 0x28]
	WW3Attachment*[] TemporaryAttachmentsArray;//[Offset: 0x308, Size: 0x10]
	Object*[] ForcedVisibilityRequestersArray;//[Offset: 0x350, Size: 0x10]
	WW3OnParentAttachmentMeshLoadedDelegateInfo[] OnParentAttachmentMeshLoadedDelegateHandles;//[Offset: 0x368, Size: 0x10]
	WW3OnAttachmentMeshLoadedDelegateInfo[] OnAttachmentMeshLoadedDelegateHandles;//[Offset: 0x378, Size: 0x10]
	class WW3FireType[] AttachmentFireTypes;//[Offset: 0x390, Size: 0x10]
	uint16 DefaultSkinId;//[Offset: 0x3ba, Size: 0x2]
	WW3SkinsIds DirectReplicatedSkinsIds;//[Offset: 0x3c0, Size: 0x28]
	class Object* MainSkinLoadedClass;//[Offset: 0x420, Size: 0x8]
	class Object[] PartSkinsLoadedClasses;//[Offset: 0x430, Size: 0x10]
	<MaterialInstanceDynamic*,None(None)> ReusableDynamicMaterials;//[Offset: 0x440, Size: 0x50]
	void OnRep_ReplicatedSkinsIds();// 0xf3dde0
	void OnRep_ReplicatedBatch();// 0xf3ddc0

--------------------------------
Class: WW3Attachment.Object
	class MeshComponent* BaseMeshTemplate;//[Offset: 0x30, Size: 0x28]
	<class MeshComponent,None(None)> MeshTagsMeshTemplates;//[Offset: 0x58, Size: 0x50]
	FName[] ForcingMeshTags;//[Offset: 0xa8, Size: 0x10]
	<float,None(None)> ItemModifiers;//[Offset: 0xb8, Size: 0x50]
	bool bIsReplicated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	Vector InvidualSeparateMultiplier;//[Offset: 0x10c, Size: 0xc]
	bool bCreateOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	WW3Attachment*[] ChildAttachments;//[Offset: 0x120, Size: 0x10]
	WW3Attachment* ParentAttachment;//[Offset: 0x130, Size: 0x8]
	StaticMesh* StaticMeshAlternative;//[Offset: 0x140, Size: 0x28]
	byte BaseMaterialIndex;//[Offset: 0x168, Size: 0x1]
	SceneComponent* AttachParent;//[Offset: 0x170, Size: 0x8]
	bool bWriteToStencilAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1]
	bool bWriteToCustomDepthAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 0x1]
	UInt32Property AttachmentBatchID;//[Size: 0x4]
	WW3AttachmentManager* MyAttachmentManager;//[Offset: 0x1d0, Size: 0x8]
	MeshComponent* BaseMeshComp;//[Offset: 0x1e0, Size: 0x8]
	WW3Skin* CurrentSkin;//[Offset: 0x210, Size: 0x8]
	void OnRep_AttachmentBatchID();// 0xf3ab30

--------------------------------
Class: WW3Skin.Object
	CustomizationItemData ItemData;//[Offset: 0x38, Size: 0xd8]
	FString SkinCategory;//[Offset: 0x110, Size: 0x10]
	class Object[] MatchingToObjects;//[Offset: 0x120, Size: 0x10]
	bool bCanBeAttachmentSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]

--------------------------------
Class: WW3SkeletalProxyMeshComponent.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BoxSphereBounds FixedBounds;//[Offset: 0xb8c, Size: 0x1c]

--------------------------------
Class: WW3AttachmentsStructure
	WW3AttachmentsStructureSlot[] Attachments;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3AttachmentsStructureSlot
	class WW3Attachment* AttachmentClass;//[Offset: 0x0, Size: 0x8]
	FName SlotName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WW3AttachmentReplicatedBatch
	UInt32Property BatchID;//[Size: 0x4]
	byte NumReplicatedAttachments;//[Offset: 0x4, Size: 0x1]
	uint16[] AttachmentIds;//[Offset: 0x8, Size: 0x10]
	WW3Attachment*[] ReplicatedAttachments;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: WW3OnParentAttachmentMeshLoadedDelegateInfo
	WW3Attachment* Attachment;//[Offset: 0x0, Size: 0x8]
	WW3Attachment* ParentAttachment;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WW3OnAttachmentMeshLoadedDelegateInfo
	WW3Attachment* Attachment;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: WW3FireType.ActorComponent.Object
	WW3FireTypeSounds* SoundsData;//[Offset: 0x238, Size: 0x8]
	enum CurrentShootingMode;//[Offset: 0x26a, Size: 0x1]
	bool bIsFiring;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x26b, Size: 0x1]
	WW3FireTypeManager* ThisFireTypeManager;//[Offset: 0x270, Size: 0x8]
	int16 CurrentAmmoInClip;//[Offset: 0x288, Size: 0x2]
	int16 CurrentAmmoTypeAmountInClip;//[Offset: 0x28c, Size: 0x2]
	enum CurrentVehicleAmmoSlotInClip;//[Offset: 0x290, Size: 0x1]
	class WW3AmmoType* CurrentAmmoTypeInClip;//[Offset: 0x2b8, Size: 0x8]
	class WW3AmmoType* AmmoTypePendingLoad;//[Offset: 0x2c0, Size: 0x8]
	SceneComponent* MuzzleOwnerComponent;//[Offset: 0x2d8, Size: 0x8]
	SceneComponent* ShellOwnerComponent;//[Offset: 0x2e0, Size: 0x8]
	ParticleSystemComponent* MuzzlePSC;//[Offset: 0x2e8, Size: 0x8]
	ParticleSystemComponent* MuzzlePSCSecondary;//[Offset: 0x2f0, Size: 0x8]
	ParticleSystemComponent* FallingShellsPSC;//[Offset: 0x2f8, Size: 0x8]
	ParticleSystemComponent* SmokePSC;//[Offset: 0x300, Size: 0x8]
	ParticleSystemComponent* HeavySmokePSC;//[Offset: 0x308, Size: 0x8]
	<WW3Projectile*,None(None)> StoredProjectilesMap;//[Offset: 0x320, Size: 0x50]
	bool SwitchWhenAdded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	StaticMeshComponent* ScopeGlareComponent;//[Offset: 0x448, Size: 0x8]
	void Server_UpdateShootingModeInPlayerProfile(enum NewShootingMode);// 0xfaf3a0
	void Server_OnHitPlayerVehicle(ProjectileID(UInt32Property) ProjectileID, Vector_NetQuantize HitActorPosition, PrimitiveComponent* HitComponent, enum HitBoneType, enum HitBehaviour, byte PackedPenetrationAlpha);// 0xfaf1a0
	void Server_OnHitPlayerCharacter(ProjectileID(UInt32Property) ProjectileID, Vector_NetQuantize HitActorPosition, PrimitiveComponent* HitComponent, enum HitBoneType, enum HitBehaviour, byte PackedPenetrationAlpha);// 0xfaefa0
	void Server_OnClientWantsToStopFire();// 0xfaef50
	void Server_OnClientWantsToFire();// 0xfaef00
	void Server_OnClientChangeShootingMode(enum ClientShootingMode);// 0xfaee50
	void Server_FireSingleShotWithCharacterHit(int InClientRandomStreamSeed, Vector ClientShootPosition, Vector ClientShootDirection, Vector_NetQuantize HitActorPosition, PrimitiveComponent* HitComponent, enum HitBoneType);// 0xfaec50
	void Server_FireSingleShot(int InClientRandomStreamSeed, Vector ClientShootPosition, Vector ClientShootDirection);// 0xfaeb20
	void Server_FireSingleProjectile(int InClientRandomStreamSeed, Vector ClientShootPosition, Vector ClientShootDirection, ProjectileID(UInt32Property) ProjectileID);// 0xfae9a0
	void OnRep_IsFiring();// 0xfae940
	void OnRep_CurrentShootingMode(enum OldShootingMode);// 0xfae810
	void OnRep_CurrentAmmoTypeInClip();// 0xfae7f0
	void OnRep_CurrentAmmoInClip(int16 OldValue);// 0xfae770
	void Client_SetAmmoAfterReloadOnServer(int ServerAmmoInClip);// 0xfae0c0
	void Client_RefundBullet();// 0xfae0a0
	void Client_CheckLoadedAmmoInClip(int ServerAmmoInClip);// 0xfae010

--------------------------------
Class: WW3FireTypeSounds.Object
	WW3SoundEffect Gunshot;//[Offset: 0x28, Size: 0x10]
	WW3SoundEffect Gunshot_Interior;//[Offset: 0x38, Size: 0x10]
	<WW3SoundEffect,None(None)> GunshotTails;//[Offset: 0x48, Size: 0x50]
	WW3SoundEffect LastGunshot;//[Offset: 0x98, Size: 0x10]
	WW3SoundEffect SilencerShot;//[Offset: 0xa8, Size: 0x10]
	WW3SoundEffect SilencerShot_Interior;//[Offset: 0xb8, Size: 0x10]
	<WW3SoundEffect,None(None)> SilenceshotTails;//[Offset: 0xc8, Size: 0x50]
	WW3SoundEffect DryFire;//[Offset: 0x118, Size: 0x10]
	WW3SoundEffect StartedAiming;//[Offset: 0x128, Size: 0x10]
	WW3SoundEffect FinishedAiming;//[Offset: 0x138, Size: 0x10]
	WW3SoundEffect ChangeShootingMode;//[Offset: 0x148, Size: 0x10]
	WW3SoundEffectInterval HeavySmoke;//[Offset: 0x158, Size: 0x20]
	WW3SoundEffect StartReload;//[Offset: 0x178, Size: 0x10]
	WW3SoundEffect StopReload;//[Offset: 0x188, Size: 0x10]
	WW3SoundEffect ReloadDetachMagazine;//[Offset: 0x198, Size: 0x10]
	WW3SoundEffect ReloadAttachMagazine;//[Offset: 0x1a8, Size: 0x10]
	WW3SoundEffect ReloadHoldBolt;//[Offset: 0x1b8, Size: 0x10]
	WW3SoundEffect ReloadReleaseBolt;//[Offset: 0x1c8, Size: 0x10]
	WW3SoundEffect AttachMagazineShort;//[Offset: 0x1d8, Size: 0x10]
	WW3SoundEffect AttachMagazineLong;//[Offset: 0x1e8, Size: 0x10]
	WW3SoundEffect AttachMagazinePreShort;//[Offset: 0x1f8, Size: 0x10]
	WW3SoundEffect AttachMagazinePreLong;//[Offset: 0x208, Size: 0x10]
	WW3SoundEffect DetachMagazineShort;//[Offset: 0x218, Size: 0x10]
	WW3SoundEffect DetachMagazineLong;//[Offset: 0x228, Size: 0x10]
	WW3SoundEffect BoltHoldShort;//[Offset: 0x238, Size: 0x10]
	WW3SoundEffect BoltHoldLong;//[Offset: 0x248, Size: 0x10]
	WW3SoundEffect BoltReleaseShort;//[Offset: 0x258, Size: 0x10]
	WW3SoundEffect BoltReleaseLong;//[Offset: 0x268, Size: 0x10]
	WW3SoundEffect OpenMagazine;//[Offset: 0x278, Size: 0x10]
	WW3SoundEffect CloseMagazine;//[Offset: 0x288, Size: 0x10]
	WW3SoundEffect AdditionalMagazine;//[Offset: 0x298, Size: 0x10]
	WW3SoundEffect WeaponsFoley1;//[Offset: 0x2a8, Size: 0x10]
	WW3SoundEffect WeaponsFoley2;//[Offset: 0x2b8, Size: 0x10]
	WW3SoundEffect WeaponsFoley3;//[Offset: 0x2c8, Size: 0x10]

--------------------------------
Class: WW3SoundEffectInterval
	AkAudioEvent* Sound2DAkStart;//[Offset: 0x0, Size: 0x8]
	AkAudioEvent* Sound2DAkStop;//[Offset: 0x8, Size: 0x8]
	AkAudioEvent* Sound3DAkStart;//[Offset: 0x10, Size: 0x8]
	AkAudioEvent* Sound3DAkStop;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: WW3FireTypeManager.ActorComponent.Object
	FName RowNameOverride;//[Offset: 0x238, Size: 0x8]
	WW3AkComponent* ShootingSoundComponent;//[Offset: 0x240, Size: 0x8]
	WW3AttachmentManager* OwnerAttachmentManager;//[Offset: 0x250, Size: 0x8]
	WW3FireType*[] FireTypeArray;//[Offset: 0x258, Size: 0x10]
	int8 SelectedFireType;//[Offset: 0x268, Size: 0x1]
	WW3FireTypeManagerAmmoSynchronization AmmoSynchronizationStruct;//[Offset: 0x288, Size: 0x20]
	bool bIsReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	WW3PrevFireTypeDesc[] PrevFireTypeDescriptors;//[Offset: 0x2b0, Size: 0x10]
	void Server_RequestAmmoSynchronization();// 0xfb3cf0
	void Server_PlayOutOfAmmoEffects();// 0xfb3ca0
	void Server_ChangeSelectedFireType(int8 NewFireType);// 0xfb3b00
	void OnRep_SelectedFireType();// 0xfb3800
	void OnRep_IsReloading();// 0xfb37e0
	void OnRep_FireTypeArray(WW3FireType*[] PrevFireTypeArray);// 0xfb3730
	void Client_SynchronizeAmmo(WW3FireTypeManagerAmmoSynchronization InAmmoSyncInfo);// 0xfb2e60

--------------------------------
Class: WW3FireTypeManagerAmmoSynchronization
	WW3FireTypeAmmoAmount[] PerFireTypeAmmoAmounts;//[Offset: 0x0, Size: 0x10]
	WW3AmmoEquipmentAmmoAmount[] AmmoEquipmentAmmoAmountPerAmmoType;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: WW3FireTypeAmmoAmount
	WW3FireType* FireType;//[Offset: 0x0, Size: 0x8]
	class WW3AmmoType* CurrentAmmoType;//[Offset: 0x8, Size: 0x8]
	int ClipAmmoAmount;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WW3AmmoType.Object
	FString DisplayName;//[Offset: 0x28, Size: 0x10]
	FString Caliber;//[Offset: 0x38, Size: 0x10]
	enum PassingBySoundType;//[Offset: 0x48, Size: 0x1]
	class WW3DamageType* DamageTypeOverride;//[Offset: 0x50, Size: 0x8]
	float DamageMultiplier;//[Offset: 0x58, Size: 0x4]
	float AmmoArmorDecrease;//[Offset: 0x5c, Size: 0x4]
	float FireRateMultiplier;//[Offset: 0x60, Size: 0x4]
	FName AKFireSoundAmmoTypeSwitch;//[Offset: 0x68, Size: 0x8]
	<SlateBrush,None(None)> AmmoTypeIcon;//[Offset: 0x70, Size: 0x50]
	enum BarkToPlayOnLoad;//[Offset: 0xc0, Size: 0x2]
	bool RefillFromEquipmentPack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	enum ChallengeModifierType;//[Offset: 0xc3, Size: 0x1]
	bool MatchAllCalibers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	enum AmmoCategoryType;//[Offset: 0xc5, Size: 0x1]
	byte AmmoPackRemoveMultiplier;//[Offset: 0xc6, Size: 0x1]

--------------------------------
Class: WW3DamageType.DamageType.Object
	enum Type;//[Offset: 0x40, Size: 0x1]
	float RagdollImpulseMultiplier;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: WW3AmmoEquipmentAmmoAmount
	class WW3AmmoType* AmmoType;//[Offset: 0x0, Size: 0x8]
	int AmmoAmount;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WW3PrevFireTypeDesc
	class WW3FireType* FireTypeSubclass;//[Offset: 0x0, Size: 0x8]
	class WW3AmmoType* CurrentAmmoTypeSubclass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WW3Projectile.Actor.Object
	SceneComponent* TransformComponent;//[Offset: 0x388, Size: 0x8]
	WW3BallisticsMovementComponent* MovementComp;//[Offset: 0x390, Size: 0x8]
	WW3ProjectileConfig ProjectileConfig;//[Offset: 0x398, Size: 0x58]
	enum ApsReactType;//[Offset: 0x3f0, Size: 0x1]
	ParticleSystem* ParticleEffect;//[Offset: 0x3f8, Size: 0x28]
	ParticleSystem* AfterPenetrationParticle;//[Offset: 0x420, Size: 0x28]
	ParticleSystem* AfterRicochetParticle;//[Offset: 0x448, Size: 0x28]
	bool bServerAuthorityProjectile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]
	bool bIgnoreOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x471, Size: 0x1]
	float MissleadingTime;//[Offset: 0x474, Size: 0x4]
	float MissleadingDistance;//[Offset: 0x478, Size: 0x4]
	float APSDamageExplosionDamageReduction;//[Offset: 0x47c, Size: 0x4]
	CurveFloat* MissleadingForce;//[Offset: 0x480, Size: 0x8]
	bool bExplodeAfterLifeSpan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1]
	float SuppressAmountToAdd;//[Offset: 0x48c, Size: 0x4]
	float SuppressAmountLimit;//[Offset: 0x490, Size: 0x4]
	bool bDisableTickOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 0x1]
	bool bIsDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x495, Size: 0x1]
	bool bIsFromPenetration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x496, Size: 0x1]
	WW3Character*[] DamagedCharacters;//[Offset: 0x498, Size: 0x10]
	WW3Vehicle*[] DamagedVehicles;//[Offset: 0x4a8, Size: 0x10]
	bool bUseSeparateActorForParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]
	ParticleSystemComponent* ParticleComponent;//[Offset: 0x508, Size: 0x8]
	bool bLocallySimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]
	WW3ProjectileInitProperties ProjectileInitProperties;//[Offset: 0x51c, Size: 0x40]
	WW3FireType* FireTypeOwner;//[Offset: 0x560, Size: 0x8]
	enum ImpactEffectType;//[Offset: 0x568, Size: 0x1]
	UInt32Property ProjectileID;//[Size: 0x4]
	WW3PlayerState* Cached_PlayerState;//[Offset: 0x570, Size: 0x8]
	Pawn* OwnerPawn;//[Offset: 0x578, Size: 0x8]
	bool bUseSphereTraceProjectile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 0x1]
	float SphereTraceRadius;//[Offset: 0x5ac, Size: 0x4]
	WW3ProjectileParticleEffect* ProjectileParticleEffectActor;//[Offset: 0x5b0, Size: 0x8]
	bool bImpactOccured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 0x1]
	void OnRep_ProjectileInitProperties();// 0x10577f0
	void OnImpact(HitResult ImpactResult, enum Behavior);// 0x10576c0
	void MulticastExplosionVFX();// 0xf26860
	void Multicast_Mislead(float InStrength, WW3VehicleAttachmentAPS* APS);// 0x10575d0
	void Multicast_HardKill(WW3PlayerState* APSOwner);// 0x1057540
	void Multicast_BroadcastOnImpact();// 0xf3d810
	void InformClientsAboutCreation();// 0x429e30

--------------------------------
Class: WW3BallisticsMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float FixedDeltaTimeValue;//[Offset: 0x1f0, Size: 0x4]
	float RicochetRandomRotationOffset;//[Offset: 0x1f4, Size: 0x4]
	WW3PenetrationData LastPenetrationData;//[Offset: 0x200, Size: 0x40]
	Actor*[] IgnoreOnMove;//[Offset: 0x240, Size: 0x10]
	bool UseHomingComponentDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x252, Size: 0x1]
	float HomingDirectionSpeed;//[Offset: 0x254, Size: 0x4]
	float HomingDelay;//[Offset: 0x258, Size: 0x4]
	float AccumulatedDeltaTime;//[Offset: 0x29c, Size: 0x4]
	float DamageMultiplier;//[Offset: 0x2a0, Size: 0x4]
	float ProjectilleSpawnCollisionLength;//[Offset: 0x2b4, Size: 0x4]
	float ProjectilleSpawnCollisionSphere;//[Offset: 0x2b8, Size: 0x4]
	Vector HomingTargetLocation;//[Offset: 0x2c0, Size: 0xc]
	SkeletalMeshComponent*[] HitSkeletalMeshes;//[Offset: 0x2d0, Size: 0x10]
	PrimitiveComponent* LastPenetratedComponent;//[Offset: 0x2e0, Size: 0x8]
	void WW3OnProjectileImpactDelegate__DelegateSignature(HitResult ImpactResult, enum Behavior);// 0x1395e00
	void Multicast_DrawServerTrajectory(Vector From, Vector To);// 0xf45640

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0x130, Size: 0x4]
	float MaxSpeed;//[Offset: 0x134, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x138, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x138, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x138, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x138, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x138, Size: 0x1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x138, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x138, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x139, Size: 0x1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x139, Size: 0x1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x139, Size: 0x1]
	float PreviousHitTime;//[Offset: 0x13c, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0x140, Size: 0xc]
	float ProjectileGravityScale;//[Offset: 0x14c, Size: 0x4]
	float Buoyancy;//[Offset: 0x150, Size: 0x4]
	float Bounciness;//[Offset: 0x154, Size: 0x4]
	float Friction;//[Offset: 0x158, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x15c, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x160, Size: 0x4]
	delegate OnProjectileBounce;//[Offset: 0x168, Size: 0x10]
	delegate OnProjectileStop;//[Offset: 0x178, Size: 0x10]
	float HomingAccelerationMagnitude;//[Offset: 0x188, Size: 0x4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x18c, Size: 0x8]
	float MaxSimulationTimeStep;//[Offset: 0x194, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x198, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x19c, Size: 0x4]
	float InterpLocationTime;//[Offset: 0x1a0, Size: 0x4]
	float InterpRotationTime;//[Offset: 0x1a4, Size: 0x4]
	float InterpLocationMaxLagDistance;//[Offset: 0x1a8, Size: 0x4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x1ac, Size: 0x4]
	void StopSimulating(HitResult HitResult);// 0x258f090
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x258f000
	void SetInterpolatedComponent(SceneComponent* Component);// 0x258eef0
	void ResetInterpolation();// 0x10a7c40
	void OnProjectileStopDelegate__DelegateSignature(HitResult ImpactResult);// 0x1395e00
	void OnProjectileBounceDelegate__DelegateSignature(HitResult ImpactResult, Vector ImpactVelocity);// 0x1395e00
	void MoveInterpolationTarget(Vector NewLocation, Rotator NewRotation);// 0x258ed70
	void LimitVelocity(Vector NewVelocity, Vector ReturnValue);// 0x258ecc0
	void IsVelocityUnderSimulationThreshold(bool ReturnValue);// 0x258ec60
	void IsInterpolationComplete(bool ReturnValue);// 0x258ec30

--------------------------------
Class: WW3PenetrationData
	PrimitiveComponent* PenetratedComponent;//[Offset: 0x0, Size: 0x8]
	WW3SubactorsComponent* PenetratedSubactorsComponent;//[Offset: 0x8, Size: 0x8]
	WW3PhysicalMaterial* PhysMaterial;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: WW3SubactorsComponent.ActorComponent.Object
	Actor*[] MyActors;//[Offset: 0xf0, Size: 0x10]

--------------------------------
Class: WW3PhysicalMaterial.PhysicalMaterial.Object
	class WW3PhysicalMaterialWrapper* PhysicalMaterialWrapper;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: WW3PhysicalMaterialWrapper.Object
	EffectsOnVehicleHit EffectsOnVehicleHit;//[Offset: 0x30, Size: 0x48]
	EffectsOnVehicleHit EffectsOnSmallVehicleHit;//[Offset: 0x78, Size: 0x48]
	EffectsUnderVehicleWheels EffectsUnderVehicleWheels;//[Offset: 0xc0, Size: 0x40]
	VehicleDrivingParams VehicleDrivingParams;//[Offset: 0x100, Size: 0x4]
	ParticleSystem* ParticleOnSmallVehicleShot;//[Offset: 0x108, Size: 0x28]
	ParticleSystem* ParticleOnMediumVehicleShot;//[Offset: 0x130, Size: 0x28]
	ParticleSystem* ParticleOnLargeVehicleShot;//[Offset: 0x158, Size: 0x28]
	AkAudioEvent* SurfaceAkEvent_Advanced;//[Offset: 0x180, Size: 0x8]
	WeaponImpacts SmallExplosiveImpacts;//[Offset: 0x188, Size: 0x70]
	WeaponImpacts MediumExplosiveImpacts;//[Offset: 0x1f8, Size: 0x70]
	WeaponImpacts LargeExplosiveImpacts;//[Offset: 0x268, Size: 0x70]
	WeaponImpacts SmallBulletImpacts;//[Offset: 0x2d8, Size: 0x70]
	WeaponImpacts MediumBulletImpacts;//[Offset: 0x348, Size: 0x70]
	WeaponImpacts LargeBulletImpacts;//[Offset: 0x3b8, Size: 0x70]
	WeaponImpacts SmallExplosiveRicochetImpacts;//[Offset: 0x428, Size: 0x70]
	WeaponImpacts MediumExplosiveRicochetImpacts;//[Offset: 0x498, Size: 0x70]
	WeaponImpacts LargeExplosiveRicochetImpacts;//[Offset: 0x508, Size: 0x70]
	WeaponImpacts SmallBulletRicochetImpacts;//[Offset: 0x578, Size: 0x70]
	WeaponImpacts MediumBulletRicochetImpacts;//[Offset: 0x5e8, Size: 0x70]
	WeaponImpacts LargeBulletRicochetImpacts;//[Offset: 0x658, Size: 0x70]
	WeaponImpacts SmallBulletPenetrationExitImpacts;//[Offset: 0x6c8, Size: 0x70]
	WeaponImpacts MediumBulletPenetrationExitImpacts;//[Offset: 0x738, Size: 0x70]
	WeaponImpacts LargeBulletPenetrationExitImpacts;//[Offset: 0x7a8, Size: 0x70]
	WW3SoundEffect FootstepSound;//[Offset: 0x818, Size: 0x10]
	WW3SoundEffect SprintFootstepSound;//[Offset: 0x828, Size: 0x10]
	WW3SoundEffect CrouchFootstepSound;//[Offset: 0x838, Size: 0x10]
	WW3SoundEffect CrouchSprintFootstepSound;//[Offset: 0x848, Size: 0x10]
	WW3SoundEffect FootstepStairSlowSound;//[Offset: 0x858, Size: 0x10]
	WW3SoundEffect FootstepStairFastSound;//[Offset: 0x868, Size: 0x10]
	WW3SoundEffect FootstepStairCrouchSlowSound;//[Offset: 0x878, Size: 0x10]
	WW3SoundEffect FootstepStairCrouchFastSound;//[Offset: 0x888, Size: 0x10]
	WW3SoundEffect ProneFootstepSound;//[Offset: 0x898, Size: 0x10]
	WW3SoundEffect ProneSound;//[Offset: 0x8a8, Size: 0x10]
	WW3SoundEffect ProneStandupSound;//[Offset: 0x8b8, Size: 0x10]
	WW3SoundEffect JumpInPlace;//[Offset: 0x8c8, Size: 0x10]
	WW3SoundEffect JumpMoving;//[Offset: 0x8d8, Size: 0x10]
	WW3SoundEffect CharacterAnyLandingSound;//[Offset: 0x8e8, Size: 0x10]
	WW3SoundEffect CharacterSoftLandingSound;//[Offset: 0x8f8, Size: 0x10]
	WW3SoundEffect CharacterMidLandingSound;//[Offset: 0x908, Size: 0x10]
	WW3SoundEffect CharacterHardLandingSound;//[Offset: 0x918, Size: 0x10]
	WW3SoundEffect CharacterTransitionTest1;//[Offset: 0x928, Size: 0x10]
	WW3SoundEffect CharacterTransitionTest2;//[Offset: 0x938, Size: 0x10]
	WW3SoundEffect CharacterTransitionTest3;//[Offset: 0x948, Size: 0x10]
	WW3SoundEffect CharacterTransitionTest4;//[Offset: 0x958, Size: 0x10]
	WW3SoundEffect CharacterTransitionTest5;//[Offset: 0x968, Size: 0x10]
	WW3SoundEffect CharacterTransitionTest6;//[Offset: 0x978, Size: 0x10]
	WW3SoundEffect CharacterTransitionTest7;//[Offset: 0x988, Size: 0x10]
	WW3SoundEffect CharacterTransitionTest8;//[Offset: 0x998, Size: 0x10]
	WW3SoundEffect SlideStartedSound;//[Offset: 0x9a8, Size: 0x10]
	WW3SoundEffect SlideEndedSound;//[Offset: 0x9b8, Size: 0x10]
	WW3SoundEffect VaultTapHandSound;//[Offset: 0x9c8, Size: 0x10]
	WW3SoundEffect MedkitDropSound;//[Offset: 0x9d8, Size: 0x10]
	WW3SoundEffect AmmoPackDropSound;//[Offset: 0x9e8, Size: 0x10]
	WW3SoundEffect ArmorPackDropSound;//[Offset: 0x9f8, Size: 0x10]
	WW3SoundEffect SmallAmmoMagazine;//[Offset: 0xa08, Size: 0x10]
	WW3SoundEffect LongAmmoMagazine;//[Offset: 0xa18, Size: 0x10]
	WW3SoundEffect RoundAmmoMagazine;//[Offset: 0xa28, Size: 0x10]
	WW3SoundEffect ShellsSurfaceTypeSound;//[Offset: 0xa38, Size: 0x10]
	void HasSoundsSetup(bool ReturnValue);// 0x1040e10
	void HasParticlesSetup(bool ReturnValue);// 0x1040de0
	void HasDecalsSetup(bool ReturnValue);// 0x1040db0

--------------------------------
Class: EffectsOnVehicleHit
	DecalData DecalToSpawn;//[Offset: 0x0, Size: 0x30]
	AkAudioEvent* SoundToSpawnAk;//[Offset: 0x30, Size: 0x8]
	ParticleSystem* ParticleToSpawn;//[Offset: 0x38, Size: 0x8]
	byte ParticlePriority;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: EffectsUnderVehicleWheels
	DecalData DecalToSpawn;//[Offset: 0x0, Size: 0x30]
	ParticleSystem* ParticleToSpawn;//[Offset: 0x30, Size: 0x8]
	byte ParticlePriority;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: VehicleDrivingParams

--------------------------------
Class: WeaponImpacts
	DecalData DecalToSpawn;//[Offset: 0x0, Size: 0x30]
	AkAudioEvent* SoundToSpawn;//[Offset: 0x30, Size: 0x8]
	enum AudibleDistance;//[Offset: 0x38, Size: 0x1]
	ParticleSystem* ParticleToSpawn;//[Offset: 0x40, Size: 0x28]
	byte ParticlePriority;//[Offset: 0x68, Size: 0x1]

--------------------------------
Class: WW3ProjectileConfig
	class ShooterExplosionEffect* ExplosionTemplate;//[Offset: 0x0, Size: 0x8]
	ExplosiveDamageParams ExplosionParams;//[Offset: 0x8, Size: 0x40]
	enum ExplodeType;//[Offset: 0x48, Size: 0x1]
	float ExplosionDelay;//[Offset: 0x4c, Size: 0x4]
	bool bOverrideFireTypeDamageType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	enum ProjectilePenetratingType;//[Offset: 0x51, Size: 0x1]

--------------------------------
Class: ExplosiveDamageParams
	int PenetrationDamage;//[Offset: 0x0, Size: 0x4]
	int BaseDamage;//[Offset: 0x4, Size: 0x4]
	float InnerRadius;//[Offset: 0x8, Size: 0x4]
	float OuterRadius;//[Offset: 0xc, Size: 0x4]
	CurveFloat* ExplosiveDamageCurve;//[Offset: 0x10, Size: 0x8]
	class WW3DamageType* DamageType;//[Offset: 0x18, Size: 0x8]
	class WW3DamageType* PenetratratingDamageType;//[Offset: 0x20, Size: 0x8]
	float Delay;//[Offset: 0x28, Size: 0x4]
	float ExplosionOriginHeightOffset;//[Offset: 0x2c, Size: 0x4]
	bool bIgnoreCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float MaxSphereTestRadius;//[Offset: 0x34, Size: 0x4]
	int SphereTestPoints;//[Offset: 0x38, Size: 0x4]
	int SphereTestSizeSplits;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: WW3ProjectileInitProperties
	Vector_NetQuantize ProjectileOrigin;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantizeNormal InitShootDirection;//[Offset: 0xc, Size: 0xc]
	Vector_NetQuantize CurrentVelocity;//[Offset: 0x18, Size: 0xc]
	int16 ProjectileSeed;//[Offset: 0x24, Size: 0x2]
	byte CurrentRicochetChance;//[Offset: 0x26, Size: 0x1]
	byte CurrentPenetrationChance;//[Offset: 0x27, Size: 0x1]
	byte LifeTime;//[Offset: 0x28, Size: 0x1]
	float BulletInitialVelocityAdd;//[Offset: 0x2c, Size: 0x4]
	float BulletInitialVelocityMul;//[Offset: 0x30, Size: 0x4]
	float ProjectileGravityScaleAdd;//[Offset: 0x34, Size: 0x4]
	float ProjectileGravityScaleMul;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: WW3PlayerState.WW3PlayerStateBase.ShooterPlayerState.PlayerState.Info.Actor.Object
	float StrikePoints;//[Offset: 0x678, Size: 0x4]
	float StrikePointsUsed;//[Offset: 0x680, Size: 0x4]
	bool bPreferableStartPointCaptureAreaInjected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x685, Size: 0x1]
	uint16 EnableTimeAwareness;//[Offset: 0x686, Size: 0x2]
	uint16 EnableTimeLongRangeSupport;//[Offset: 0x688, Size: 0x2]
	uint16 EnableTimeAutonomousFightingRobots;//[Offset: 0x68a, Size: 0x2]
	uint16 EnableTimeDronesWithoutCannon;//[Offset: 0x68c, Size: 0x2]
	uint16 EnableTimeCombatFightingVehicles;//[Offset: 0x68e, Size: 0x2]
	uint16 EnableTimeTransportVehicles;//[Offset: 0x690, Size: 0x2]
	uint16 EnableTimeUnmannedFlyingVehicles;//[Offset: 0x692, Size: 0x2]
	uint16 EnableTimeGlobalStrikeSlot1;//[Offset: 0x694, Size: 0x2]
	uint16 EnableTimeGlobalStrikeSlot2;//[Offset: 0x696, Size: 0x2]
	uint16 EnableTimeGlobalStrikeSlot3;//[Offset: 0x698, Size: 0x2]
	byte TeamStrikesOnBattlefieldLimitsBitmask;//[Offset: 0x69a, Size: 0x1]
	enum TargetCapturePoint;//[Offset: 0x69b, Size: 0x1]
	<int,None(None)> CategoryScores;//[Offset: 0x6a0, Size: 0x50]
	WW3CaptureAreaComponent* PreferableStartPointCaptureArea;//[Offset: 0x6f0, Size: 0x8]
	WW3CaptureAreaComponent* CaptureArea;//[Offset: 0x6f8, Size: 0x8]
	WW3TakeHitInfo[] TakenHits;//[Offset: 0x700, Size: 0x10]
	WW3SquadObject* CurrentSquad;//[Offset: 0x710, Size: 0x8]
	bool bIsConnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 0x1]
	WW3GadgetThrowable*[] GadgetsThrowable;//[Offset: 0x740, Size: 0x10]
	UInt32Property PlayerStateUniqueID;//[Size: 0x4]
	WW3PlayerDataComponent* PlayerData;//[Offset: 0x760, Size: 0x8]
	UInt32Property InternalNetId;//[Size: 0x4]
	class WW3PlayerRole* PlayerRoleClass;//[Offset: 0x780, Size: 0x8]
	enum LockVehicleMode;//[Offset: 0x788, Size: 0x1]
	byte ReplicatedSuppressLevel;//[Offset: 0x789, Size: 0x1]
	WW3PlayerStatisticsManager* PlayerStatisticsManager;//[Offset: 0x790, Size: 0x8]
	WW3EventService* EventService;//[Offset: 0x798, Size: 0x8]
	int16 Kills;//[Offset: 0x7a0, Size: 0x2]
	int16 Deaths;//[Offset: 0x7a2, Size: 0x2]
	int16 Assists;//[Offset: 0x7a4, Size: 0x2]
	int Captures;//[Offset: 0x7a8, Size: 0x4]
	int Defences;//[Offset: 0x7ac, Size: 0x4]
	FName LastDeathMatchState;//[Offset: 0x7b0, Size: 0x8]
	int PlayerRank;//[Offset: 0x7b8, Size: 0x4]
	int CollectedDogTags;//[Offset: 0x7bc, Size: 0x4]
	int16 Revives;//[Offset: 0x7c0, Size: 0x2]
	TimerHandle SwitchTeamFreezeTimerHandle_T;//[Offset: 0x7c8, Size: 0x8]
	WW3TPPWeaponsAudioBanksManager* TPPWeaponsAudioBanksManager;//[Offset: 0x7d8, Size: 0x8]
	WW3PlayerReviveManager* PlayerReviveManager;//[Offset: 0x7e0, Size: 0x8]
	enum PlayingState;//[Offset: 0x7e8, Size: 0x1]
	WW3PlayerState*[] KilledPlayers;//[Offset: 0x7f0, Size: 0x10]
	WW3PlayerState*[] PlayersKilledMe;//[Offset: 0x800, Size: 0x10]
	WW3PlayersProfileReplicationData ReplicatedPlayerProfileData;//[Offset: 0x8f8, Size: 0x88]
	WW3Vehicle* OwnedCombatVehicle;//[Offset: 0x980, Size: 0x8]
	class WW3SquadLeaderCaptureObjective* SquadLeaderObjectiveAttack;//[Offset: 0x988, Size: 0x8]
	class WW3SquadLeaderCaptureObjective* SquadLeaderObjectiveDefend;//[Offset: 0x990, Size: 0x8]
	WW3HUD* PlayerHUDInstance;//[Offset: 0x9b0, Size: 0x8]
	bool bIsConnectedToMaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b8, Size: 0x1]
	void SetTargetCapturePoint(enum InCapturePoint);// 0x104d750
	void SetOwnedCombatVehicle(WW3Vehicle* NewVehicle);// 0x104d6d0
	void Server_TryToChangeSquadLockedState();// 0x104d680
	void Server_SetTargetCaptureSubPoint(byte InCaptureSubPoint);// 0x104d5d0
	void Server_SetTargetCapturePoint(enum InCapturePoint);// 0x104d520
	void Server_SetPreferableSpawnPoint(WW3CaptureAreaComponent* PreferableCaptureArea);// 0x104d460
	void Server_SetPlayerUniqueId(FString SteamID);// 0x104d3a0
	void Server_SetPlayerRoleClass(class WW3PlayerRole NewPlayerRoleClass);// 0x104d2e0
	void Server_SetPlayerName(FString NewPlayerName);// 0x104d220
	void Server_SetLockVehicleMode(enum NewLockVehicleMode);// 0x104d170
	void Server_SetIsPlayerCharacterInitialized(bool Value);// 0x104d0b0
	void Server_SetIsConnectedToMaster(bool bNewIsConnectedToMaster);// 0x104cff0
	void Server_SendInformPlayerAboutWebsocketConnection(bool bIsWebsocketConnected);// 0x104cf30
	void Server_RequestTransportation(WW3Vehicle* InVehicle);// 0x104cd60
	void Server_RequestTeamSwitch();// 0x104cd10
	void Server_PlayerInGameNotify();// 0x104ccc0
	void Server_PingThrowablePackForTeammates(Actor* InPingedThrowableGadget);// 0x104cc00
	void Server_NextLockVehicleMode();// 0x104cbb0
	void Server_KickNotify();// 0x104cb60
	void Server_InformPlayerHeHasBeenKicked();// 0x104cb10
	void Server_Cheat_SetIgnoreStrikesCooldown(bool Value);// 0x104ca50
	void Server_Cheat_AddStrikePoints(int StrikePointsToAdd);// 0x104c990
	void OnRep_TargetCapturePoint(enum PreviousTarget);// 0x104c8f0
	void OnRep_SuppressLevel(byte InOldSuppressLevel);// 0x104c870
	void OnRep_StrikePoints(float OldStrikePoints);// 0x104c7f0
	void OnRep_PlayingState();// 0x104c790
	void OnRep_PlayerStateUniqueID(InPrevPlayerStateUniqueID(UInt32Property) InPrevPlayerStateUniqueID);// 0x104c6d0
	void OnRep_OwnedCombatVehicle();// 0x104c770
	void OnRep_LockVehicleMode();// 0x104c750
	void OnRep_InternalNetId(InPrevInternalPlayerID(UInt32Property) InPrevInternalPlayerID);// 0x104c6d0
	void OnRep_EnableTimeUnmannedFlyingVehicles(uint16 OldEnableTimeUnmannedFlyingVehicles);// 0x104c650
	void OnRep_EnableTimeTransportVehicles(uint16 OldEnableTimeCombatFightingVehicles);// 0x104c5d0
	void OnRep_EnableTimeLongRangeSupport(uint16 OldEnableTimeLongRangeSupport);// 0x104c550
	void OnRep_EnableTimeGlobalStrikeSlot3(uint16 OldEnableTimeGloablStrikeSlot3);// 0x104c4d0
	void OnRep_EnableTimeGlobalStrikeSlot2(uint16 OldEnableTimeGloablStrikeSlot2);// 0x104c450
	void OnRep_EnableTimeGlobalStrikeSlot1(uint16 OldEnableTimeGloablStrikeSlot1);// 0x104c3d0
	void OnRep_EnableTimeDronesWithoutCannon(uint16 OldEnableTimeDronesWithoutCannon);// 0x104c350
	void OnRep_EnableTimeCombatFightingVehicles(uint16 OldEnableTimeCombatFightingVehicles);// 0x104c2d0
	void OnRep_EnableTimeAwareness(uint16 OldEnabledTimeAwareness);// 0x104c250
	void OnRep_EnableTimeAutonomousFightingRobots(uint16 OldEnableTimeAutonomousFightingRobots);// 0x104c1d0
	void OnRep_CapturePointArea();// 0x104c1b0
	void Multicast_SetIsPlayerCharacterInitialized(bool Value);// 0x104c000
	void Multicast_PlayerLeftGame();// 0x104bfb0
	void IsSquadLeader(bool ReturnValue);// 0x104bf70
	void GetTeam_BP(int ReturnValue);// 0x104bf30
	void GetSquadLeader(WW3PlayerState* ReturnValue);// 0x104bf00
	void GetOwnedCombatVehicle(WW3Vehicle* ReturnValue);// 0x104bed0
	void Client_SendInformationPlayerHasBeenKicked();// 0x104be20
	void Client_SendDetailedScoreData(FString InTitle, float InScore);// 0x104bd40
	void Client_RejoinIsPossible(bool bIsPossible);// 0x104bcb0
	void Client_ProcessProgressionEvent(WW3WebSocketEventReplicator InWebSocketReplicator);// 0x104bba0
	void Client_PingThrowablePack(Actor* InPingedThrowableGadget, WW3PlayerState* InPlayerWhoPinged);// 0x104bad0
	void Client_NotifyPlayerAboutFriendlyFireDuringWarmup();// 0x571c10
	void Client_NotifyPlayerAboutBaseProtection();// 0xf639e0
	void Client_InformPlayerAboutWebsocketConnection(bool bIsWebsocketConnected);// 0x104ba40
	void Client_InformPlayerAboutRecompense(int InRecompenseBPAmount);// 0x104b9b0
	void Client_InformAboutScore(enum ScoreType, float Points, enum HowToDisplayScore);// 0x104b8b0

--------------------------------
Class: WW3PlayerStateBase.ShooterPlayerState.PlayerState.Info.Actor.Object
	byte ClientReplicatedPingPacked;//[Offset: 0x410, Size: 0x1]
	WW3CheatServerManager* CheatServerManager;//[Offset: 0x428, Size: 0x8]
	WW3Character* PlayerCharacter;//[Offset: 0x430, Size: 0x8]
	void Server_ReceiveClientPingPacked(byte InClientPingPacked);// 0x1050370
	void OnRep_PlayerCharacter();// 0x10502b0

--------------------------------
Class: ShooterPlayerState.PlayerState.Info.Actor.Object

--------------------------------
Class: WW3CheatServerManager.ActorComponent.Object
	class WW3CustomizationConfigDatabase* CustomizationConfigDatabase;//[Offset: 0xf0, Size: 0x28]
	<WW3DistanceWatch*,None(None)> PawnDistanceWatches;//[Offset: 0x138, Size: 0x50]
	void Server_ToggleOverrideCameraPositionAndRotation();// 0xf81b00
	void Server_ToggleOneHitKill(WW3InventoryWeapon* ForWeapon);// 0xf81a40
	void Server_StopRecording();// 0xf819f0
	void Server_StartRecording();// 0xf819a0
	void Server_SpawnWW3BotArmy(int TeamNum, int Count, WW3PlayerController* SpawningController);// 0xf81870
	void Server_SpawnWW3Bot(int TeamNum, WW3PlayerController* SpawningController);// 0xf81770
	void Server_SpawnDummy();// 0xf81720
	void Server_SpawnActor(Vector ActorSpawnVector, class Object ActorToSpawn, uint16[] AttachmentsIds, uint16 SkinID, int PredefinedConfigId);// 0xf81540
	void Server_Slomo(float NewTimeDilation);// 0xf81490
	void Server_SetWeaponLifeSpan(bool Value);// 0xf813d0
	void Server_SetUseRelevancy(bool bNewRelevancy);// 0xf81310
	void Server_SetTeam(int8 NewTeam);// 0xf81260
	void Server_SetNewBotSkillValues(FString[] InValues);// 0xf81170
	void Server_SetMaxCharactersRelevancyDistance(float NewDistance);// 0xf810c0
	void Server_SetBotsBehavior(enum InMovement, enum InShooting, enum InPose);// 0xf80f80
	void Server_SetBattleZoneEnabled(bool bIsEnabled);// 0xf80ec0
	void Server_ServerConsoleCommand(FString ConsoleCommand);// 0xf80e00
	void Server_SaveNewWeaponListInTeam(FString[] WeaponList, int8 InTeamIndex);// 0xf80cd0
	void Server_SaveNewOperatorListInTeam(uint16[] OperatorList, int8 InTeamIndex);// 0xf80bc0
	void Server_SaveNewGrenadeListInTeam(uint16[] GrenadeList, int8 InTeamIndex);// 0xf80ab0
	void Server_SaveNewGadgetListInTeam(uint16[] GadgetList, int8 InTeamIndex);// 0xf809a0
	void Server_ProgressionSetCurrentLevel(FString CheatTarget, TargetId(UInt32Property) TargetId, uint16 NewLevelValue);// 0xf80850
	void Server_ProgressionSetCurrentExperienceCheat(FString CheatTarget, int ExperienceToAdd, TargetId(UInt32Property) TargetId);// 0xf80700
	void Server_ProgressionResetPlayerCheat();// 0xf806b0
	void Server_ProgressionResetMasteryCheat(TargetId(UInt32Property) TargetId);// 0xf805f0
	void Server_ProgressionResetCheat();// 0xf805a0
	void Server_ProgressionLoadoutDebugInfoCheat();// 0xf80550
	void Server_ProgressionGetLoadoutExperience();// 0xf80500
	void Server_ProgressionBoostCheat(uint16 BoostModifierValue);// 0xf80440
	void Server_ProgressionAddExperienceCheat(FString CheatTarget, int ExperienceToAdd, TargetId(UInt32Property) TargetId);// 0xf802f0
	void Server_PlayBarkForEveryone(enum BarkType, WW3Character* CharacterToPlayOn, float DistanceToTriggerOrigin);// 0xf801c0
	void Server_DestroyAllVehicles();// 0xf80170
	void Server_CheatWatchDistanceToPawnOn(FString OriginPawnName, FString TargetPawnName);// 0xf80050
	void Server_CheatWatchDistanceToPawnOff(FString OriginPawnName);// 0xf7ff90
	void Server_CheatToggleDebugWeaponStats();// 0xf7ff40
	void Server_CheatToggleDebugArmorStats();// 0xf7fef0
	void Server_CheatToggleCharacterSkeletonsDebugDraw();// 0xf7fea0
	void Server_CheatStopSendUpdateFromServer(bool bIsEnable);// 0xf7fde0
	void Server_CheatStartMatchFromMS();// 0xf7fd90
	void Server_CheatSkipWarzoneTimer();// 0xf7fd40
	void Server_CheatSkipWaitingForPlayers();// 0xf7fcf0
	void Server_CheatShowExplosionSpheres(bool InValue);// 0xf7fc30
	void Server_CheatShowAllAttachmentsInCustomization();// 0xf7fbe0
	void Server_CheatSetServerLock(bool bIsLocked);// 0xf7fb20
	void Server_CheatSetScore(int InScore);// 0xf7fa60
	void Server_CheatSetRejoinLock(bool bIsLocked);// 0xf7f9a0
	void Server_CheatSetReconMinPlayer(int _value);// 0xf7f8e0
	void Server_CheatSetMinPlayersPerTeam(int MinPlayersPerTeam);// 0xf7f820
	void Server_CheatSetKills(int InKills);// 0xf7f760
	void Server_CheatSetIsEnemyCapturePointSpectatingAllowed(bool bIsAllowed);// 0xf7f6a0
	void Server_CheatSetDefenses(int InDefenses);// 0xf7f5e0
	void Server_CheatSetDeaths(int InDeaths);// 0xf7f520
	void Server_CheatSetCurrentTimer(int NewTimerValue);// 0xf7f460
	void Server_CheatSetCaptures(int InCaptures);// 0xf7f3a0
	void Server_CheatSetAssists(int InAssists);// 0xf7f2e0
	void Server_CheatSendServerSummaryData();// 0xf7f290
	void Server_CheatSendPlayerStatistics();// 0xf7f240
	void Server_CheatResetWeaponLoadout();// 0xf7f1f0
	void Server_CheatResetStrikeLoadout();// 0xf7f1a0
	void Server_CheatResetDebugWeaponStats();// 0xf7f150
	void Server_CheatReconToggleUncoverHVTOnStart();// 0xf7f100
	void Server_CheatReconStopReconAreaResize();// 0xf7f0b0
	void Server_CheatReconStopCloseChunks();// 0xf7f060
	void Server_CheatReconStartTime(int timeValueSec);// 0xf7efa0
	void Server_CheatReconStartNow();// 0xf7ef50
	void Server_CheatReconSpawnUAVs();// 0xf7ef00
	void Server_CheatReconSpawnSpectatorOnLeader(WW3PlayerState* PlayerState);// 0xf7ee40
	void Server_CheatReconSpawnEvac();// 0xf7edf0
	void Server_CheatReconSpawnDronOnLeader();// 0xf7eda0
	void Server_CheatReconSetTransmissionBandwidth(int _value);// 0xf7ece0
	void Server_CheatReconSetNumTeams(int Value);// 0xf7ec20
	void Server_CheatReconReturnFromSpectatorTeamKills(int Value);// 0xf7eb60
	void Server_CheatReconEnableZoneVolumes();// 0xf7eb10
	void Server_CheatReconEnableEvac();// 0xf7eac0
	void Server_CheatReconAddRewardForStrike(int _value);// 0xf7ea00
	void Server_CheatReconAddParachute();// 0xf7e9b0
	void Server_CheatReconAddDrone();// 0xf7e960
	void Server_CheatPunishMyself();// 0xf7e910
	void Server_CheatPreventDestructionOnServer(bool bIsDestroyable);// 0xf7e850
	void Server_CheatKIA_SetRoundWinCondition_Toxic(bool bForFinalRound);// 0xf7e790
	void Server_CheatKIA_SetRoundWinCondition_Survivors(bool bForFinalRound);// 0xf7e6d0
	void Server_CheatKIA_SetRoundWinCondition_KillExtraTime(bool bForFinalRound, float Extratime);// 0xf7e5d0
	void Server_CheatKIA_SetRoundWinCondition_Kill(bool bForFinalRound);// 0xf7e510
	void Server_CheatItemReceivedNotification(ItemId(UInt32Property) ItemId, uint16 ItemType, uint16 ReceiverItemId);// 0xf7e3e0
	void Server_CheatGameMode_Tickets_SetTicketManagerEnabled(bool bEnabled);// 0xf7e320
	void Server_CheatGameMode_Tickets_SetScoreLimitGlobal(float ScoreLimit);// 0xf7e270
	void Server_CheatGameMode_Tickets_SetPersistentCapturePointsCount(int Count);// 0xf7e1b0
	void Server_CheatGameMode_Tickets_SetCapturePointScoreLimit(enum CapturePoint, float ScoreLimit);// 0xf7e0b0
	void Server_CheatGameMode_SwitchCPCapturingRoles();// 0xf7e060
	void Server_CheatGameMode_Strikes_SetStrikePointsMultiplier(float InMultiplier);// 0xf7dfb0
	void Server_CheatGameMode_Strikes_SetSlotEnabled(int StrikeSlot, bool bEnabled);// 0xf7deb0
	void Server_CheatGameMode_Strikes_SetScoreStrikeEnabled(enum StrikeType, bool bEnabled);// 0xf7ddb0
	void Server_CheatGameMode_Strikes_SetCrateDropsScoreRequired(int InScore);// 0xf7dcf0
	void Server_CheatGameMode_Strikes_SetCrateDropActorNameOverride_West(FString inString);// 0xf7dc30
	void Server_CheatGameMode_Strikes_SetCrateDropActorNameOverride_East(FString inString);// 0xf7db70
	void Server_CheatGameMode_Strikes_SetCombatFightingVehiclesEnabled(bool bEnabled);// 0xf7dab0
	void Server_CheatGameMode_Strikes_SetClearStrikePointsWhenPlayerRespawn(bool bEnabled);// 0xf7d9f0
	void Server_CheatGameMode_SquadSpawn_SetSpawnOnSquadMateAsSquadMateEnabled(bool bEnabled);// 0xf7d930
	void Server_CheatGameMode_SquadSpawn_SetSpawnOnSquadMateAsSquadLeaderEnabled(bool bEnabled);// 0xf7d870
	void Server_CheatGameMode_SquadSpawn_SetSpawnOnSquadLeaderAsSquadMateEnabled(bool bEnabled);// 0xf7d7b0
	void Server_CheatGameMode_SquadSpawn_SetSpawnOnSquadAllowedForSecondTeam(bool bEnabled);// 0xf7d6f0
	void Server_CheatGameMode_SquadSpawn_SetSpawnOnSquadAllowedForFirstTeam(bool bEnabled);// 0xf7d630
	void Server_CheatGameMode_SetTPPOpticsVehicleEnabled(bool InValue);// 0xf7d4c0
	void Server_CheatGameMode_SetTeamScoreLimit(float ScoreLimit);// 0xf7d580
	void Server_CheatGameMode_SetSpectatorEnabled(bool InValue);// 0xf7d400
	void Server_CheatGameMode_SetSpawnOnCapturePointsEnabled(bool bEnabled);// 0xf7d340
	void Server_CheatGameMode_SetRoundTime(int InValue);// 0xf7d1c0
	void Server_CheatGameMode_SetRoundsToWin(int InValue);// 0xf7d280
	void Server_CheatGameMode_SetPostDeathCameraEnabled(bool InValue);// 0xf7d100
	void Server_CheatGameMode_SetLastKillShowcaseEnabled(bool InValue);// 0xf7d040
	void Server_CheatGameMode_SetInitialLoadoutSelectionRule(enum InNewRule);// 0xf7cf90
	void Server_CheatGameMode_SetHUDEnabled(bool InValue);// 0xf7ced0
	void Server_CheatGameMode_SetCPRoleCapturing(bool bEnabled);// 0xf7ce10
	void Server_CheatGameMode_SetAutoRegeneration(bool InValue);// 0xf7cd50
	void Server_CheatGameMode_SetAddTeamScoreMultiplier(float InMultiplier);// 0xf7cca0
	void Server_CheatGameMode_Revive_SetSingleLifeCooldown(int InCooldown);// 0xf7cbe0
	void Server_CheatGameMode_Revive_SetShouldPauseBleedingOnRevive(bool bInShouldPause);// 0xf7cb20
	void Server_CheatGameMode_Revive_SetReviveTimeoutDecreaseWhileMoving(float InTimeoutDecreaseWhileMoving);// 0xf7ca70
	void Server_CheatGameMode_Revive_SetReviveTimeout(int Timeout);// 0xf7c9b0
	void Server_CheatGameMode_Revive_SetReviveTime(int Time);// 0xf7c8f0
	void Server_CheatGameMode_Revive_SetReviveSquadOnly(bool bSquadOnly);// 0xf7c830
	void Server_CheatGameMode_Revive_SetReviveShowPlayersMaxDistance(float InShowPlayersMaxDistance);// 0xf7c780
	void Server_CheatGameMode_Revive_SetReviveShowPlayersMaxCount(int InShowPlayersMaxCount);// 0xf7c6c0
	void Server_CheatGameMode_Revive_SetReviveEnable(bool bEnable);// 0xf7c600
	void Server_CheatGameMode_Revive_SetReviveComingHelpTimeout(int InTimeout);// 0xf7c540
	void Server_CheatGameMode_Revive_SetKnockdownSideArmEnabled(bool bEnabled);// 0xf7c480
	void Server_CheatGameMode_Revive_SetKnockdownHealth(byte InValue);// 0xf7c3d0
	void Server_CheatGameMode_Revive_SetKnockdownEnabled(bool bEnabled);// 0xf7c310
	void Server_CheatGameMode_Revive_SetKnockdownDamageEnabled(bool bEnabled);// 0xf7c250
	void Server_CheatGameMode_Revive_SetKillReasonCheckEnabled(bool bEnable);// 0xf7c190
	void Server_CheatGameMode_Revive_SetGiveUpButtonHoldDuration(int InHoldDuration);// 0xf7c0d0
	void Server_CheatGameMode_Revive_SetFatalKnockdownEnabled(bool bEnabled);// 0xf7c010
	void Server_CheatGameMode_Revive_SetAfterReviveHealth(byte InValue);// 0xf7bf60
	void Server_CheatGameMode_Inventory_ForceLoadoutForAll(int LoadoutIndex);// 0xf7bea0
	void Server_CheatGameMode_DogTags_SetTeamScoreForEnemyDogTagPickUp(float Score);// 0xf7bdf0
	void Server_CheatGameMode_DogTags_SetTeamScoreForAllyDogTagPickUp(float Score);// 0xf7bd40
	void Server_CheatGameMode_DogTags_SetIsOnlyTeamScoreSource(bool bValue);// 0xf7bc80
	void Server_CheatGameMode_DogTags_SetDogTagsEnabled(bool bEnabled);// 0xf7bbc0
	void Server_CheatGameMode_DogTags_SetDogTagCanBePickedUpByOwner(bool bValue);// 0xf7bb00
	void Server_CheatGameMode_DogTags_AddXpOnPickUP(bool bEnabled);// 0xf7ba40
	void Server_CheatGameMode_DogTags_AddStrikePointsOnPickUP(bool bEnabled);// 0xf7b980
	void Server_CheatGameMode_DogTags_AddScoreOnPickUP(bool bEnabled);// 0xf7b8c0
	void Server_CheatForceWeaponAttachment(int16 ID_X, int16 Skin_ID);// 0xf7b7c0
	void Server_CheatForceVehicleAttachment(int16 ID_X, int16 Skin_ID);// 0xf7b6c0
	void Server_CheatForceCharacterAttachment(int16 ID_X, int16 Skin_ID);// 0xf7b5c0
	void Server_CheatDrawAllThrowablePacks(WW3PlayerController* ForPC);// 0xf7b500
	void Server_CheatDeleteDestroyPacks();// 0xf7b4b0
	void Server_CheatDebugWeapon_DrawProjectileDebugLines(bool bValue);// 0xf7b290
	void Server_CheatDebugVehicle_PrintStrikesOnBattlefieldData(bool bValue);// 0xf7b1d0
	void Server_CheatDebugVehicle_PrintDamageData(bool bValue);// 0xf7b110
	void Server_CheatDebugVehicle_OverrideMovementServerReplicationDeltaTime(float Value);// 0xf7b060
	void Server_CheatDebugVehicle_ForceMovement(float InMoveForward, float InMoveRight, float InLookHorizontal);// 0xf7af20
	void Server_CheatDebugVehicle_CustomServerAnimForcedFrequency(float Value);// 0xf7ae70
	void Server_CheatDebugStrikes_NoLimits(bool bValue);// 0xf7adb0
	void Server_CheatDebugStrikes_EnableNewStrikesFlyIn(bool bValue);// 0xf7acf0
	void Server_CheatDebugStrikes_EnableNewJammer(bool bValue);// 0xf7ac30
	void Server_CheatDebugSpawn_EnableNewDeploy(bool bValue);// 0xf7ab70
	void Server_CheatDebugServer_SetExpectedFramerate(uint16 InFramerate);// 0xf7aab0
	void Server_CheatDebugServer_RequestReportingLevel(enum InLevel, WW3PlayerController* InController, float InPeriodLength);// 0xf7a980
	void Server_CheatDebugServer_RequestPostDeathCameraKillerReplicationPausedFlagValue(WW3PlayerController* InController, Actor* InActor);// 0xf7a880
	void Server_CheatDebugServer_RequestOptimizationReport(WW3PlayerController* InController);// 0xf7a7c0
	void Server_CheatDebugServer_PrintServerFrequency(bool bValue);// 0xf7a700
	void Server_CheatDebugFreeCamera_View(int Value);// 0xf7a640
	void Server_CheatDebugFreeCamera_Enable();// 0xf7a5f0
	void Server_CheatDebugFreeCamera_Control(int Value);// 0xf7a530
	void Server_CheatDebugDamage_ArtillerySpawnSinglePreciseMissile(bool bValue);// 0xf7a470
	void Server_CheatDebugDamage_ArtilleryDoesntEnd(bool bValue);// 0xf7a3b0
	void Server_CheatDebugCharacter_SetLoadoutWeight(float Value);// 0xf7a300
	void Server_CheatDebugCharacter_SetHeadDamageMultiplier(float Value);// 0xf7a250
	void Server_CheatDebugCharacter_SetBodyDamageMultiplier(float Value);// 0xf7a1a0
	void Server_CheatDebugCharacter_CustomServerCharacterMovementFrequency(float Value);// 0xf7a0f0
	void Server_CheatDebugCharacter_CustomServerAnimForcedFrequency(float Value);// 0xf7a040
	void Server_CheatDebugCamera_DrawMarkingDebugLines(bool bValue);// 0xf79f80
	void Server_CheatDebugBots_UseOriginalCrowdUpdatePathSegment(bool bInValue);// 0xf79ec0
	void Server_CheatDebugBots_ToggleFakeRecoilDebug();// 0xf79e70
	void Server_CheatDebugBots_SetUpdateNavOctreeOnComponentChange(bool bInValue);// 0xf79db0
	void Server_CheatDebugBots_SetMovement_RunToMe(PlayerController* CallingController);// 0xf79cf0
	void Server_CheatDebugBots_SetMovement_RunToCurrentLookLocation(PlayerController* CallingController);// 0xf79c30
	void Server_CheatDebugBots_SetMovement_RunToCapturePoint(FString CapturePointName);// 0xf79b70
	void Server_CheatDebugBots_SetCrowdSimulationEnabled(bool bInValue);// 0xf79ab0
	void Server_CheatDebugBots_RunAction_All(enum InActionType);// 0xf79a00
	void Server_CheatDebugBots_RequestReporting(WW3PlayerController* InController, float InPeriodLength);// 0xf79900
	void Server_CheatDebugBots_Autofill_SetSlotsToUsePerTeam(int InValue);// 0xf79840
	void Server_CheatDebugBots_Autofill_SetFreeSlotsToKeepPerTeam(int InValue);// 0xf79780
	void Server_CheatDebugBots_Autofill_SetActive(bool bInValue);// 0xf796c0
	void Server_CheatDebugAnimation_ForceKnockdownPose();// 0xf79670
	void Server_CheatDebug_SendDetailedScore(bool bShouldSend);// 0xf7b3f0
	void Server_CheatDebug_ResetStatistics();// 0xf7b3a0
	void Server_CheatDebug_PrintStatistics();// 0xf7b350
	void Server_CheatCrash();// 0xf79620
	void Server_CheatBreakSetActiveCapturePoint(int InValue);// 0xf79560
	void Server_CheatBreakDestroyActiveStations();// 0xf79510
	void Server_CheatAutowinWhileNoPlayers(bool bNewValue);// 0xf79450
	void Server_CheatAnticheatKickPlayer(PlayerId(UInt32Property) PlayerId);// 0xf79390
	void Server_CheatAddTeamPoints(int PointsToAdd, byte TeamIndex);// 0xf79290
	void Server_CheatAddScoreForTeam(int8 TeamToAddScore, int ScoreToAdd);// 0xf79190
	void Server_CallRPC(enum InCheatType);// 0xf790e0
	void Server_BotStopShooting();// 0xf79090
	void Server_BotStartShooting();// 0xf79040
	void Server_BotSetupWeapon();// 0xf78ff0
	void ClientPrintMessage(FString DestinationPawnName, FString Message);// 0xf78e40
	void Client_CheatDebugAnimation_ForceKnockdownPose();// 0xf78f30
	void Client_CheatDebug_PrintStatistics(FString InStatsString);// 0xf78f50

--------------------------------
Class: WW3CustomizationConfigDatabase.Object
	WW3CustomizationConfigContainer DefaultCustomizationConfig;//[Offset: 0x28, Size: 0x58]
	bool bGenereteProductsFromDefaultConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool bGenereteItemsBlueprints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	bool bGenerateItemsBlueprintsWithCustomizationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]
	bool bNormalizeUniqueIds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83, Size: 0x1]
	bool bRemoveItemsFromDirectoriesToNeverCook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]

--------------------------------
Class: WW3CustomizationConfigContainer
	WW3CustomizationConfigSet[] WeaponConfigs;//[Offset: 0x0, Size: 0x10]
	WW3CustomizationConfigSet[] CharacterConfigs;//[Offset: 0x10, Size: 0x10]
	WW3CustomizationConfigSet[] StrikeConfigs;//[Offset: 0x20, Size: 0x10]
	WW3CustomizationConfigSet[] BackpackConfigs;//[Offset: 0x30, Size: 0x10]
	WW3BannerCustomizationConfig BannerCustomizationConfig;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: WW3CustomizationConfigSet
	uint16 ConfigItemId;//[Offset: 0x0, Size: 0x2]
	WW3CustomizationConfig[] ConfigList;//[Offset: 0x8, Size: 0x10]
	WW3CustomizationConfig MasterConfig;//[Offset: 0x18, Size: 0xd8]
	int LastSelectedConfig;//[Offset: 0xf0, Size: 0x4]

--------------------------------
Class: WW3CustomizationConfig
	UInt32Property BlueprintDatabaseId;//[Size: 0x4]
	uint16 UniqueId;//[Offset: 0x4, Size: 0x2]
	uint16 PredefinedParentUniqueId;//[Offset: 0x6, Size: 0x2]
	bool bIsBlueprintable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bIsPartialBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	enum ItemRarity;//[Offset: 0xa, Size: 0x1]
	FString ConfigName;//[Offset: 0x10, Size: 0x10]
	FString CheatConfigName;//[Offset: 0x20, Size: 0x10]
	bool bHideInMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bAreLightAttachmentsToggled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	enum ShootingMode;//[Offset: 0x32, Size: 0x1]
	uint16[] PreviewAttachmentsIds;//[Offset: 0x38, Size: 0x10]
	uint16 CurrentSkinId;//[Offset: 0x48, Size: 0x2]
	uint16[] AttachmentSkinsIds;//[Offset: 0x50, Size: 0x10]
	byte[] AttachmentToSkinTypes;//[Offset: 0x60, Size: 0x10]
	uint16 BaseItemIdOverride;//[Offset: 0x70, Size: 0x2]
	bool bRemoveGadgetOnUnequipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool bAreLaserAttachmentsToggled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	uint16 SlotCount;//[Offset: 0x74, Size: 0x2]
	WW3VoiceOverData VoiceOvers;//[Offset: 0x78, Size: 0x30]
	uint16[] AdditionalItemsIds;//[Offset: 0xa8, Size: 0x10]
	bool ShowOnlyToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	enum[] ReadOnlySlots;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: WW3VoiceOverData
	WW3Postfix VoiceOver;//[Offset: 0x0, Size: 0x30]

--------------------------------
Class: WW3BannerCustomizationConfig
	uint16[] BannerAttachmentsIds;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3DistanceWatch.Object
	WW3Character* OriginCharacter;//[Offset: 0x40, Size: 0x8]
	WW3Character* TargetCharacter;//[Offset: 0x48, Size: 0x8]
	FString TargetCharacterName;//[Offset: 0x50, Size: 0x10]
	void Update();// 0xfa6210

--------------------------------
Class: WW3InventoryWeapon.WW3InventoryItem.Actor.Object
	AkAudioBank* AudioBank_FPP;//[Offset: 0x8c8, Size: 0x8]
	AkAudioBank* AudioBank_TPP;//[Offset: 0x8d0, Size: 0x8]
	int Audio_TargetModeValue;//[Offset: 0x8d8, Size: 0x4]
	AkAudioEvent* LatestMovementStateAkEvent;//[Offset: 0x8e0, Size: 0x8]
	WW3FireTypeManagerWeapon* FireTypeManager;//[Offset: 0x948, Size: 0x8]
	WW3WeaponAttachmentManager* AttachmentManager;//[Offset: 0x950, Size: 0x8]
	CapsuleComponent* UsableVolume;//[Offset: 0x958, Size: 0x8]
	enum[] DefaultPreviewAttachmentSlots;//[Offset: 0x960, Size: 0x10]
	WW3AmmoEquipmentWeapon* AmmoEquipmentWeapon;//[Offset: 0x970, Size: 0x8]
	float BaseBlendTimeToTargetingInAds;//[Offset: 0x978, Size: 0x4]
	bool bADSAllowedOnlyInProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97c, Size: 0x1]
	bool bShouldReturnCockingHandleToDefaultPositionWhenClipEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97d, Size: 0x1]
	class WW3AmmoType* DefaultAmmoType;//[Offset: 0x980, Size: 0x8]
	int AmmoAmountToLoad;//[Offset: 0x9a0, Size: 0x4]
	bool bADSHideFrontAttachments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a4, Size: 0x1]
	bool bEnableCustomItemOffsetWhileReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a5, Size: 0x1]
	FName[] BonesToApplyPhysic;//[Offset: 0x9a8, Size: 0x10]
	StaticMesh* ChamberBulletMesh;//[Offset: 0x9b8, Size: 0x8]
	float VisualRecoilMultiplier;//[Offset: 0x9c0, Size: 0x4]
	CanvasIcon Crosshair;//[Offset: 0x9c8, Size: 0x18]
	CanvasIcon AimingCrosshair;//[Offset: 0xa40, Size: 0x18]
	bool UseLaserDot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab8, Size: 0x1]
	bool UseCustomCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab9, Size: 0x1]
	bool UseCustomAimingCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaba, Size: 0x1]
	bool bHideCrosshairWhileNotAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xabb, Size: 0x1]
	bool bUseBackpackAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xabc, Size: 0x1]
	int[] IgnoreSkinOnBodyMaterialIndexes;//[Offset: 0xac0, Size: 0x10]
	bool[] AttachmentsToggled;//[Offset: 0xad0, Size: 0x10]
	WW3ProxyMeshComponent* ProxyMeshComponent;//[Offset: 0xae8, Size: 0x8]
	BoxSphereBounds ProxyMeshComponent_DefaultBounds;//[Offset: 0xaf0, Size: 0x1c]
	StaticMeshComponent* ChamberBullet;//[Offset: 0xb10, Size: 0x8]
	StaticMesh* StaticMeshAlternative;//[Offset: 0xb28, Size: 0x28]
	<float,None(None)> BaseItemModifiersForUI;//[Offset: 0xb50, Size: 0x50]
	bool bShouldChangeAmmoSkelMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba0, Size: 0x1]
	int MinAmmoAmoutToChangeSkelMesh;//[Offset: 0xba4, Size: 0x4]
	WW3WAUpper* UsingScopeAttachment;//[Offset: 0xbe0, Size: 0x8]
	WW3WeaponAttachment* LeftHandGripAttachment;//[Offset: 0xbe8, Size: 0x8]
	WW3WeaponAttachment* PreviousScopeAttachment;//[Offset: 0xbf0, Size: 0x8]
	WW3Skin* CurrentSkin;//[Offset: 0xbf8, Size: 0x8]
	enum WeaponCategory;//[Offset: 0xc14, Size: 0x1]
	float FirstEquipStartTime;//[Offset: 0xc18, Size: 0x4]
	bool UpdateUpperBlendSpaceInputInTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1c, Size: 0x1]
	bool UseSecondaryAmmoAsPrimaryAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1d, Size: 0x1]
	WW3WAUpper*[] Scopes;//[Offset: 0xc58, Size: 0x10]
	WW3WASide*[] Sides;//[Offset: 0xc68, Size: 0x10]
	WW3SightActionContainer SightActionContainer;//[Offset: 0xc78, Size: 0x18]
	WW3Character* PrevCharacterOwner;//[Offset: 0xc90, Size: 0x8]
	WW3InventoryManager* OriginalOwnerInventoryManager;//[Offset: 0xca0, Size: 0x8]
	enum ConfigTypeWeaponWasSpawnedFrom;//[Offset: 0xcaa, Size: 0x1]
	uint16 ConfigIDWeaponWasSpawnedFrom;//[Offset: 0xcac, Size: 0x2]
	uint16 ParentConfigIDWeaponWasSpawnedFrom;//[Offset: 0xcae, Size: 0x2]
	WW3WeaponSynchronizationDataReplicator WeaponSynchronizationDataReplicator;//[Offset: 0xcb0, Size: 0xc]
	WW3FPPWeaponAudioBankManager* FPPWeaponAudioBankManager;//[Offset: 0xcc0, Size: 0x8]
	WW3InventoryWeaponPostUpdateTicker* InventoryWeaponPostUpdateTicker;//[Offset: 0xcc8, Size: 0x8]
	WW3ItemAnim CurrentReloadAnimations;//[Offset: 0xce0, Size: 0x40]
	FName ScopeSocketName;//[Offset: 0xd78, Size: 0x8]
	FName CameraSocketName;//[Offset: 0xd80, Size: 0x8]
	FName BarrelSocketName;//[Offset: 0xd88, Size: 0x8]
	bool ForceReloadOnEmptyMagazine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd90, Size: 0x1]
	bool bPerformTargetingBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd91, Size: 0x1]
	bool bIsChangingAmmoType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd92, Size: 0x1]
	bool bIsChangingAmmoTypeInterrupted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd93, Size: 0x1]
	WW3WeaponAttachment* DefaultMagazineCached;//[Offset: 0xe38, Size: 0x8]
	WW3WeaponAttachment* MagazineCached;//[Offset: 0xe40, Size: 0x8]
	WW3FireType* ClClipAmmoSynchronizationResponse_FireType;//[Offset: 0xe58, Size: 0x8]
	class WW3AmmoType* ClClipAmmoSynchronizationResponse_AmmoType;//[Offset: 0xe60, Size: 0x8]
	WW3Character* ClClipAmmoSynchronizationResponse_Owner;//[Offset: 0xe68, Size: 0x8]
	WW3Character* SvClientClipAmmoSynchronizationRequestOwner;//[Offset: 0xe78, Size: 0x8]
	bool bUseAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec0, Size: 0x1]
	WW3WorldProxy* WorldProxy;//[Offset: 0xec8, Size: 0x8]
	MaterialInterface* OrginalMaterial;//[Offset: 0xef8, Size: 0x8]
	MaterialInterface* OrginalMaterial1;//[Offset: 0xf00, Size: 0x8]
	WW3PlayerController* ClSyncStructRequest_Owner;//[Offset: 0xf40, Size: 0x8]
	WW3WeaponReplicatedSyncStruct ClReplicatedSyncStruct;//[Offset: 0xf60, Size: 0x20]
	WW3PlayerController* SvSyncStructResponse_Owner;//[Offset: 0xf88, Size: 0x8]
	WW3WeaponReplicatedSyncStruct SvReplicatedSyncStruct;//[Offset: 0xfa8, Size: 0x20]
	void Server_StartReloadWeaponWithMissingAmmo(byte MissingAmmo);// 0x1001ee0
	void Server_StartReloadWeapon(bool ForceReload);// 0x1001e20
	void Server_StartChangingAmmoTypeWithUnloadAmmo(byte AmmoToUnload);// 0x1001d70
	void Server_StartChangingAmmoType(uint16 InSpecialAmmoToRemoveAfterReload);// 0x1001cb0
	void Server_SetScopePST(bool InValue);// 0x1001bf0
	void Server_SetAttachmentsToggled(bool bNewToggled, enum AttachIlumType);// 0x1001af0
	void Server_RequestSyncStruct(WW3PlayerController* InPlayerController, InRequestID(UInt64Property) InRequestID);// 0x10019f0
	void Server_RequestClipAmmoSynchronization(WW3Character* InRequestOwner);// 0x1001930
	void Server_OnReloadEnded(enum[] ClientReloadStates, bool bIsCanceled, bool bWasLooped);// 0x10017d0
	void Server_InterruptTargeting();// 0x1001780
	void Server_DropAttachment(uint16 ItemId);// 0x10016c0
	void Server_BackpackUpdateAttachmentsIdsOnServer(uint16[] AttachmentsIds, WW3SkinsIds SkinsIds);// 0x1001580
	void OnRep_AttachmentsToggled(bool[] AttachmentsToggledOld);// 0x1001390
	void NewReload_Server_StartReload(enum ReloadType);// 0x1001100
	void NewReload_Server_ReloadCanceled();// 0x10010b0
	void NewReload_Server_ChangeReloadStage(enum NewState);// 0x1001000
	void NetMulticast_UnlockMagazineVisibility();// 0xff8ee0
	void NetMulticast_LockMagazineVisibility();// 0xf63b40
	void IsFiring(bool ReturnValue);// 0x1000fd0
	void IsChangingAmmoType(bool ReturnValue);// 0x1000fa0
	void HasUpperMinor(bool ReturnValue);// 0x1000f70
	void GetScopeMeshComponent(MeshComponent* ReturnValue);// 0x1000f40
	void GenerateProxyMesh();// 0x1000ef0
	void Client_ReloadStateError(enum ServerReloadState);// 0x1000e20
	void Client_ReloadMissingAmmoError(int8 AmmoDifference);// 0x1000da0
	void Client_ForceReloadWithMissingAmmo(byte MissingAmmo);// 0x1000b60
	void Client_ForceReload();// 0x1000b40
	void Client_ClipAmmoSynchronizationResponse(WW3Character* InRequestOwner, WW3FireType* InCurrentFireType, int InClipAmmoAmount, class WW3AmmoType InClipAmmoType, InNextProjectileID(UInt32Property) InNextProjectileID);// 0x10009c0
	void Client_ChangeReloadState(enum NewState, bool bForceChange);// 0x10008f0
	void Client_ChangeAmmoTypeError(int8 UnloadAmmoDifference);// 0x1000870
	void CalculateScreenPercentage_T();// 0x1000850

--------------------------------
Class: WW3FireTypeManagerWeapon.WW3FireTypeManager.ActorComponent.Object
	DataTable* FireTypeManagerWeaponTable;//[Offset: 0x2c0, Size: 0x8]
	float TargetingFOVWithoutScope;//[Offset: 0x484, Size: 0x4]
	bool bLoopedFireAnim;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x490, Size: 0x1]

--------------------------------
Class: WW3WeaponAttachmentManager.WW3AttachmentManager.ActorComponent.Object
	WW3WeaponAttachmentSlot[] AvailableSlots;//[Offset: 0x490, Size: 0x10]
	WW3InventoryWeapon* OwnerWeapon;//[Offset: 0x4a0, Size: 0x8]

--------------------------------
Class: WW3WeaponAttachmentSlot.WW3AttachmentSlot
	enum AttachmentSlotType;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: WW3AmmoEquipmentWeapon.WW3AmmoEquipment.ActorComponent.Object

--------------------------------
Class: WW3AmmoEquipment.ActorComponent.Object
	WW3AmmoInfo*[] DefaultEquipment;//[Offset: 0x150, Size: 0x10]
	void Server_Cheat_Ammo();// 0xf30290
	void OnRep_DefaultEquipment();// 0xf30100

--------------------------------
Class: WW3AmmoInfo.Object
	WW3AmmoEquipment* AmmoEquipment;//[Offset: 0x28, Size: 0x8]
	int Amount;//[Offset: 0xc0, Size: 0x4]
	int MaximumAmount;//[Offset: 0xc4, Size: 0x4]
	class WW3AmmoType* AmmoType;//[Offset: 0xc8, Size: 0x8]
	enum VehicleAmmoSlot;//[Offset: 0xd0, Size: 0x1]
	byte AmmoPackRemoveMultiplier;//[Offset: 0xd1, Size: 0x1]
	uint16 AdditionalAmmoID;//[Offset: 0x134, Size: 0x2]
	uint16 StartChangeAmmoOnClient;//[Offset: 0x136, Size: 0x2]
	void OnRep_VehicleAmmoSlot();// 0xf300e0
	void OnRep_StartChangeAmmoOnClient();// 0xf30140
	void OnRep_MaximumAmount();// 0xf30120
	void OnRep_Amount();// 0xf300e0
	void OnRep_AmmoType();// 0xf300c0
	void OnRep_AmmoPackRemoveMultiplier();// 0x5d2c60
	void OnRep_AdditionalAmmoID(uint16 OldAdditionalAmmoID);// 0xf30040

--------------------------------
Class: CanvasIcon
	Texture* Texture;//[Offset: 0x0, Size: 0x8]
	float U;//[Offset: 0x8, Size: 0x4]
	float V;//[Offset: 0xc, Size: 0x4]
	float UL;//[Offset: 0x10, Size: 0x4]
	float VL;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: WW3ProxyMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	WW3ProxyMeshCachedData[] CachedData;//[Offset: 0x5b0, Size: 0x10]
	Texture2D* AlbedoTexture;//[Offset: 0x5c0, Size: 0x8]
	Texture2D* NormalTexture;//[Offset: 0x5c8, Size: 0x8]
	bool bIsMeshReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1]
	bool bIsMeshGenerationInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d1, Size: 0x1]
	bool bGenerateLowQualityProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d2, Size: 0x1]
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d3, Size: 0x1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d4, Size: 0x1]
	BodySetup* ProcMeshBodySetup;//[Offset: 0x5d8, Size: 0x8]
	WW3ProcMeshSection[] ProcMeshSections;//[Offset: 0x608, Size: 0x10]
	KConvexElem[] CollisionConvexElems;//[Offset: 0x618, Size: 0x10]
	BoxSphereBounds LocalBounds;//[Offset: 0x628, Size: 0x1c]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x648, Size: 0x10]
	void UpdateMeshSection_LinearColor(int SectionIndex, Vector[] Vertices, Vector[] Normals, Vector2D[] UV0, LinearColor[] VertexColors, WW3ProcMeshTangent[] Tangents);// 0x105baa0
	void UpdateMeshSection(int SectionIndex, Vector[] Vertices, Vector[] Normals, Vector2D[] UV0, Color[] VertexColors, WW3ProcMeshTangent[] Tangents);// 0x105b810
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x105b6b0
	void IsMeshSectionVisible(int SectionIndex, bool ReturnValue);// 0x105b2b0
	void GetNumSections(int ReturnValue);// 0x105b250
	void CreateMeshSection_LinearColor(int SectionIndex, Vector[] Vertices, int[] Triangles, Vector[] Normals, Vector2D[] UV0, LinearColor[] VertexColors, WW3ProcMeshTangent[] Tangents, bool bCreateCollision);// 0x105ae90
	void CreateMeshSection(int SectionIndex, Vector[] Vertices, int[] Triangles, Vector[] Normals, Vector2D[] UV0, Color[] VertexColors, WW3ProcMeshTangent[] Tangents, bool bCreateCollision);// 0x105ab70
	void ClearMeshSection(int SectionIndex);// 0x105aaf0
	void ClearCollisionConvexMeshes();// 0x105aad0
	void ClearAllMeshSections();// 0x105aab0
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x105a9c0

--------------------------------
Class: WW3ProxyMeshCachedData
	StaticMesh* StaticMesh;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: WW3ProcMeshSection
	WW3ProcMeshVertex[] ProcVertexBuffer;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3ProcMeshVertex
	Vector Position;//[Offset: 0x0, Size: 0xc]
	Vector Normal;//[Offset: 0xc, Size: 0xc]
	WW3ProcMeshTangent Tangent;//[Offset: 0x18, Size: 0x10]
	Color Color;//[Offset: 0x28, Size: 0x4]
	Vector2D UV0;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: WW3ProcMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 0xc]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: WW3WAUpper.WW3WeaponAttachment.WW3Attachment.Object
	Vector WeaponOffset;//[Offset: 0x2f8, Size: 0xc]
	Vector WeaponCrouchedOffset;//[Offset: 0x304, Size: 0xc]
	Rotator WeaponRotationOffset;//[Offset: 0x310, Size: 0xc]
	Rotator WeaponCrouchedRotationOffset;//[Offset: 0x31c, Size: 0xc]
	float Magnification;//[Offset: 0x328, Size: 0x4]
	enum ScopeMagnification;//[Offset: 0x32c, Size: 0x1]
	WW3CameraSwayProperties CameraSwaySetup;//[Offset: 0x330, Size: 0x18]
	CurveFloat* BlendInFOVCurve;//[Offset: 0x348, Size: 0x8]
	CurveFloat* BlendOutFOVCurve;//[Offset: 0x350, Size: 0x8]
	CurveFloat* RecoilCameraLerpSpeedToAmountOverride;//[Offset: 0x358, Size: 0x8]
	float OnRailPositionOffset;//[Offset: 0x360, Size: 0x4]
	float SpaceBetweenUppers;//[Offset: 0x364, Size: 0x4]
	MaterialInterface* BaseRenderMaterial;//[Offset: 0x368, Size: 0x8]
	class WW3Flashlight* FlashlightBlueprint;//[Offset: 0x370, Size: 0x28]
	class WW3Laser* LaserBlueprint;//[Offset: 0x398, Size: 0x28]
	StaticMesh* ScopeGlareStaticMesh;//[Offset: 0x3c0, Size: 0x28]
	float RailAttachLength;//[Offset: 0x3e8, Size: 0x4]
	float UpperBodyLength;//[Offset: 0x3ec, Size: 0x4]
	float RailAttachStartToUpperBodyStart;//[Offset: 0x3f0, Size: 0x4]
	float RailAttachEndToUpperBodyEnd;//[Offset: 0x3f4, Size: 0x4]
	SceneComponent*[] LightComponents;//[Offset: 0x3f8, Size: 0x10]
	WW3Laser*[] Lasers;//[Offset: 0x408, Size: 0x10]
	WW3Flashlight*[] Flashlights;//[Offset: 0x418, Size: 0x10]
	MaterialInterface* ScopePostProcess;//[Offset: 0x428, Size: 0x28]
	bool bIsModifyScopeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 0x1]
	bool bIsThermovisionScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 0x1]
	float ModifyHipScopePercentage;//[Offset: 0x454, Size: 0x4]
	float ModifyScopePercentage;//[Offset: 0x458, Size: 0x4]
	float ModifyStartScopeMoment;//[Offset: 0x45c, Size: 0x4]
	float ModifyEndScopeMoment;//[Offset: 0x460, Size: 0x4]
	MaterialInterface* ScopeNonTargettingMaterial;//[Offset: 0x468, Size: 0x8]
	MaterialInterface* ScopeTargettingMaterial;//[Offset: 0x470, Size: 0x8]
	MaterialInstanceDynamic* ScopeNonTargettingMaterialDynamic;//[Offset: 0x478, Size: 0x8]
	MaterialInstanceDynamic* ScopeTargettingMaterialDynamic;//[Offset: 0x480, Size: 0x8]
	MaterialInterface* LensDistortMaterialTemplate;//[Offset: 0x488, Size: 0x8]
	MaterialInterface* AimIndicatorMaterial;//[Offset: 0x490, Size: 0x8]
	Vector2D AimTextureSize;//[Offset: 0x498, Size: 0x8]
	int8 ScopeTargettingIndexMaterial;//[Offset: 0x4a0, Size: 0x1]
	float SpotEnemyTimerInterval;//[Offset: 0x4a4, Size: 0x4]
	float SpotEnemySphereRadius;//[Offset: 0x4a8, Size: 0x4]
	uint16 SpotEnemyRange;//[Offset: 0x4ac, Size: 0x2]
	bool bSpotEnemyByItself;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ae, Size: 0x1]
	bool EnableScopeGlareInTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4af, Size: 0x1]
	class WidgetComponent* MinimapComponentBlueprint;//[Offset: 0x4b0, Size: 0x28]
	enum AdvancedUpperType;//[Offset: 0x4d8, Size: 0x1]
	<float,None(None)> SocketToMagnification;//[Offset: 0x4e0, Size: 0x50]
	class WW3DOFCameraConfig* AdsDofConfig;//[Offset: 0x530, Size: 0x8]
	CurveFloat* SniperGlareSizeCurve;//[Offset: 0x538, Size: 0x8]
	float SniperGlareVisiblityAngle;//[Offset: 0x540, Size: 0x4]
	float ScopePostProcessTimeInAds;//[Offset: 0x544, Size: 0x4]
	float ScopePostProcessCooldown;//[Offset: 0x548, Size: 0x4]
	float ScopePostRechargeRate;//[Offset: 0x54c, Size: 0x4]
	float LensRadiusForWorldMarkersDistortion;//[Offset: 0x550, Size: 0x4]
	bool UpdateGlassMaskPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 0x1]
	bool UseAlternateSocketInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x555, Size: 0x1]
	float ScopeRadiusWS;//[Offset: 0x558, Size: 0x4]
	float ScopeRadiusOuterWS;//[Offset: 0x55c, Size: 0x4]
	bool bUseBatteryIndicatorOnMeshMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 0x1]
	int ScopeBatteryIndicatorMaterialIndex;//[Offset: 0x564, Size: 0x4]
	bool bIsCollimatorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1]
	bool bAnimateCollimatorMaterialInTargetingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x569, Size: 0x1]
	WW3InventoryWeapon* weapon;//[Offset: 0x5b0, Size: 0x8]
	MaterialInterface* OriginalHideMaterial;//[Offset: 0x600, Size: 0x8]
	MaterialInterface* OriginalHideMaterial1;//[Offset: 0x608, Size: 0x8]
	MaterialInterface* hidematerial;//[Offset: 0x610, Size: 0x8]
	MaterialInterface* hidematerial1;//[Offset: 0x618, Size: 0x8]
	WW3WAUpper* GlassUpper;//[Offset: 0x620, Size: 0x8]
	WidgetComponent* MapWidgetComponent;//[Offset: 0x658, Size: 0x8]

--------------------------------
Class: WW3WeaponAttachment.WW3Attachment.Object
	WW3WeaponAttachmentSlot[] AvailableSlots;//[Offset: 0x230, Size: 0x10]
	enum AttachmentType;//[Offset: 0x240, Size: 0x1]
	<class MeshComponent,None(None)> WeaponTypeToBaseMeshTemplate;//[Offset: 0x270, Size: 0x50]
	MaterialInstanceDynamic* MarkingDiodMaterialInstance;//[Offset: 0x2e8, Size: 0x8]
	void OnMarkPlayers_T();// 0x10ff690

--------------------------------
Class: WW3CameraSwayProperties
	float SwayPitchAmplitude;//[Offset: 0x0, Size: 0x4]
	float SwayPitchFrequency;//[Offset: 0x4, Size: 0x4]
	float SwayYawAmplitude;//[Offset: 0x8, Size: 0x4]
	float SwayYawFrequency;//[Offset: 0xc, Size: 0x4]
	float SwayRollAmplitude;//[Offset: 0x10, Size: 0x4]
	float SwayRollFrequency;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: WW3Flashlight.SceneComponent.ActorComponent.Object
	SpotLightComponent* SpotLight;//[Offset: 0x248, Size: 0x8]
	FName SpotLightAttachSocket;//[Offset: 0x250, Size: 0x8]
	float Intensity;//[Offset: 0x258, Size: 0x4]
	Color LightColor;//[Offset: 0x25c, Size: 0x4]
	float InnerConeAngle;//[Offset: 0x260, Size: 0x4]
	float OuterConeAngle;//[Offset: 0x264, Size: 0x4]
	float AttenuationRadius;//[Offset: 0x268, Size: 0x4]
	ParticleSystem* FlashlightParticle;//[Offset: 0x270, Size: 0x8]
	float FlashParticleScaleMult;//[Offset: 0x278, Size: 0x4]
	float FlashDarknessIntensity;//[Offset: 0x27c, Size: 0x4]
	float FlashVignetteIntensity;//[Offset: 0x280, Size: 0x4]
	float FlashBlindMaxRange;//[Offset: 0x284, Size: 0x4]
	ParticleSystemComponent* FlashlightParticleComponent;//[Offset: 0x288, Size: 0x8]
	WW3InventoryItem* ItemOwner;//[Offset: 0x2a0, Size: 0x8]
	void SetupSpotLight();// 0xfb3d40

--------------------------------
Class: WW3Laser.SceneComponent.ActorComponent.Object
	StaticMesh* LaserEndPointMesh;//[Offset: 0x248, Size: 0x8]
	ParticleSystem* LaserParticleFPP;//[Offset: 0x250, Size: 0x8]
	ParticleSystem* LaserParticleTPP;//[Offset: 0x258, Size: 0x8]
	ParticleSystemComponent* LaserParticleComponent;//[Offset: 0x260, Size: 0x8]
	float DotMaxDistance;//[Offset: 0x268, Size: 0x4]
	float DotMinScale;//[Offset: 0x26c, Size: 0x4]
	float DotMaxScale;//[Offset: 0x270, Size: 0x4]
	StaticMeshComponent* LaserEndPointMeshComponent;//[Offset: 0x278, Size: 0x8]
	WW3InventoryItem* ItemOwner;//[Offset: 0x290, Size: 0x8]
	void ToggleLightComponents();// 0x1014e80
	void SetupLaser();// 0x1014e60
	void SetLightComponentsActive(bool NewActive, enum AttachType);// 0x1014850

--------------------------------
Class: WW3WASide.WW3WeaponAttachment.WW3Attachment.Object
	class WW3Flashlight* FlashlightBlueprint;//[Offset: 0x2f8, Size: 0x28]
	class WW3Laser* LaserBlueprint;//[Offset: 0x320, Size: 0x28]
	bool TurnOnLaserWhenADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	bool TurnOnFlashlightWhenADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 0x1]
	bool LaserVisibleInTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34a, Size: 0x1]
	bool FlashlightVisibleInTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34b, Size: 0x1]
	float SpotEnemyTimerInterval;//[Offset: 0x34c, Size: 0x4]
	float SpotEnemySphereRadius;//[Offset: 0x350, Size: 0x4]
	uint16 SpotEnemyRange;//[Offset: 0x354, Size: 0x2]
	float SpotEnemyCooldown;//[Offset: 0x358, Size: 0x4]
	SceneComponent*[] LightComponents;//[Offset: 0x360, Size: 0x10]
	WW3Laser*[] Lasers;//[Offset: 0x370, Size: 0x10]
	WW3Flashlight*[] Flashlights;//[Offset: 0x380, Size: 0x10]

--------------------------------
Class: WW3SightActionContainer
	WW3WAUpper*[] FadeOutUppers;//[Offset: 0x0, Size: 0x10]
	WW3WAUpper* FadeInUpper;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: WW3InventoryManager.WW3InventoryManagerBase.ActorComponent.Object
	enum SoldierGadgetType;//[Offset: 0x4a0, Size: 0x1]
	enum SecondaryGadgetType;//[Offset: 0x4a1, Size: 0x1]
	WW3InventoryItem* RepairKit;//[Offset: 0x4a8, Size: 0x8]
	WW3InventoryWeapon* LastWeapon;//[Offset: 0x4b0, Size: 0x8]
	WW3Throwable*[] SimulatedThrowableItems;//[Offset: 0x558, Size: 0x10]
	WW3InventoryItem* SimProxyPrevOwnerDelegateItem;//[Offset: 0x5d8, Size: 0x8]
	WW3InventoryItem* SimProxyEquipDelegateItem;//[Offset: 0x5e0, Size: 0x8]
	byte DesiredWeaponsNumber;//[Offset: 0x5e8, Size: 0x1]
	uint16[] SpawnedWeaponsIds;//[Offset: 0x5f0, Size: 0x10]
	uint16[] SpawnedGadgetsIds;//[Offset: 0x600, Size: 0x10]
	uint16[] SpawnedGrenadesIds;//[Offset: 0x610, Size: 0x10]
	bool bBackpackInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 0x1]
	int[] SpawnedWeaponsConfigsIds;//[Offset: 0x628, Size: 0x10]
	WW3WeaponsPreloadRequest WeaponsPreloadRequest;//[Offset: 0x638, Size: 0x88]
	class Object* SvPreloadedPrimaryGadgetClass;//[Offset: 0x790, Size: 0x8]
	class Object* SvPreloadedSecondaryGadgetClass;//[Offset: 0x798, Size: 0x8]
	WW3Throwable* SecondaryGadgetThrowableItem;//[Offset: 0x7a8, Size: 0x8]
	WW3HVTInventoryGadget* HVTInventoryGadget;//[Offset: 0x7b8, Size: 0x8]
	<BackpackData,None(None)> BackpacksData;//[Offset: 0x7c0, Size: 0x50]
	AttachmentData[] InGameAttachmentsData;//[Offset: 0x810, Size: 0x10]
	void SetGrenadeAmount(int Amount);// 0x1002170
	void Server_ThrowSecondaryGadget_Grenade(Vector_NetQuantizeNormal ThrowDirection, Vector_NetQuantize100 InClientCameraSocketLocation, Vector_NetQuantize100 InClientCameraLocation, Vector_NetQuantizeNormal InClientCameraDirection, float InClientCharCapsuleRadius);// 0x1001f90
	void OnRep_WeaponsPreloadRequest();// 0x1001560
	void OnRep_WeaponsNumber();// 0x1001540
	void OnRep_SoldierGadgetType();// 0x1001520
	void OnRep_SecondaryGadgetType();// 0x10014e0
	void OnRep_SecondaryGadgetThrowableItem(WW3Throwable* PrevThrowable);// 0x1001460
	void OnCurrentSecondaryGadgetThrowableItemDestroyed(Actor* DestroyedActor);// 0x10011d0
	void GetGrenadeAmount(int ReturnValue);// 0x1000f10
	void Client_ResetInventory();// 0x1000ea0
	void Client_InitInGameBackPack(AttachmentData[] NewInGameAttachmentsData);// 0x1000ce0
	void Client_InitDefaultBackpackAttachments(InEquipmentLoadoutIndex(UInt32Property) InEquipmentLoadoutIndex, AttachmentData[] NewInGameAttachmentsDefaultData);// 0x1000be0

--------------------------------
Class: WW3InventoryManagerBase.ActorComponent.Object
	SceneComponent* AttachingToComponent;//[Offset: 0x180, Size: 0x8]
	WW3CurrentItemRepInfo CurrentItemRepInfo;//[Offset: 0x188, Size: 0x10]
	WW3CurrentItemRepInfo LastAcceptedCurrentItemRepInfo;//[Offset: 0x198, Size: 0x10]
	WW3SimProxyEquipInfo SimProxyEquipInfo;//[Offset: 0x1b0, Size: 0x18]
	WW3SimProxyEquipInfo Prev_SimProxyEquipInfo;//[Offset: 0x1c8, Size: 0x18]
	WW3InventoryItem* Prev_SimProxyEquipInfo_NewItem;//[Offset: 0x1e0, Size: 0x8]
	WW3ReplicatedInventory SvReplicatedInventory;//[Offset: 0x1f0, Size: 0x48]
	WW3ReplicatedInventory ClReplicatedInventory;//[Offset: 0x238, Size: 0x48]
	WW3InventoryItem* NewItem;//[Offset: 0x280, Size: 0x8]
	WW3InventoryItem* LastItem;//[Offset: 0x288, Size: 0x8]
	WW3InventoryItem* ClientCurrentItem;//[Offset: 0x290, Size: 0x8]
	WW3PlayerState* PlayerState;//[Offset: 0x2a0, Size: 0x8]
	WW3PlayerController* SvOwnerWW3PlayerController;//[Offset: 0x2a8, Size: 0x8]
	Controller* SvOwnerController;//[Offset: 0x2b0, Size: 0x8]
	WW3BaseDeferredModifyInventoryAction*[] DeferredInventoryModifyActions;//[Offset: 0x310, Size: 0x10]
	WW3InventoryOverride InventoryOverride;//[Offset: 0x328, Size: 0x90]
	bool bUseOverridenInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 0x1]
	void OnRep_SimProxyEquipInfo();// 0x1001500
	void OnRep_ReplicatedInventory();// 0x1001440
	void OnRep_CurrentItemRepInfo();// 0xfe6d50

--------------------------------
Class: WW3Throwable.Actor.Object
	StaticMeshComponent* Mesh;//[Offset: 0x390, Size: 0x8]
	CustomizationItemData ItemData;//[Offset: 0x398, Size: 0xd8]
	FString ItemCategory;//[Offset: 0x470, Size: 0x10]
	float PositionCorrectionTime;//[Offset: 0x480, Size: 0x4]
	bool bIsAttachable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 0x1]
	float InitialIgnoreCollisionTime;//[Offset: 0x488, Size: 0x4]
	WW3StatisticsTrackingComponent* StatsTrackingComponent;//[Offset: 0x490, Size: 0x8]
	Controller* InstigatorController;//[Offset: 0x498, Size: 0x8]
	WW3Throwable* MySimulatedActor;//[Offset: 0x4c8, Size: 0x8]
	class WW3InventoryItem* InventoryItemClass;//[Offset: 0x4d8, Size: 0x8]
	bool bReplicateGrenadeMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 0x1]
	WW3ThrowableRepMovement ThrowableRepMovement;//[Offset: 0x4e8, Size: 0x10]
	void OnRep_ThrowableRepMovement();// 0x429e50
	void OnHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComponent, Vector NormalImpulse, HitResult Hit);// 0x10b0ea0

--------------------------------
Class: WW3ThrowableRepMovement
	WW3Throwable* OwnerThrowable;//[Offset: 0x0, Size: 0x8]
	UInt32Property ForceReplicationVar;//[Size: 0x4]

--------------------------------
Class: WW3WeaponsPreloadRequest
	WW3InventoryWeapon* PrimaryWeapon;//[Offset: 0x0, Size: 0x8]
	enum PrimaryWeaponPreloadState;//[Offset: 0x8, Size: 0x1]
	WW3InventoryWeapon* SecondaryWeapon;//[Offset: 0x10, Size: 0x8]
	enum SecondaryWeaponPreloadState;//[Offset: 0x18, Size: 0x1]
	class Object* PrimaryGadgetClass;//[Offset: 0x20, Size: 0x28]
	enum PrimaryGadgetPreloadState;//[Offset: 0x48, Size: 0x1]
	class Object* SecondaryGadgetClass;//[Offset: 0x50, Size: 0x28]
	enum SecondaryGadgetPreloadState;//[Offset: 0x78, Size: 0x1]
	UInt32Property PreloadID;//[Size: 0x4]
	UInt32Property ForceReplicationVar;//[Size: 0x4]
	bool bNeedsPreload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]

--------------------------------
Class: WW3HVTInventoryGadget.WW3InventoryGadgetProjection.WW3Gadget_ConstructionKit.WW3InventoryGadgetStrike.WW3InventoryGadget.WW3InventoryItem.Actor.Object

--------------------------------
Class: WW3InventoryGadgetProjection.WW3Gadget_ConstructionKit.WW3InventoryGadgetStrike.WW3InventoryGadget.WW3InventoryItem.Actor.Object
	bool bUseDefaultCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb78, Size: 0x1]
	float TraceDistance;//[Offset: 0xb7c, Size: 0x4]

--------------------------------
Class: WW3Gadget_ConstructionKit.WW3InventoryGadgetStrike.WW3InventoryGadget.WW3InventoryItem.Actor.Object
	WW3CKConstructableActor ConstructableActor;//[Offset: 0x9a0, Size: 0x48]
	MaterialInterface* ActorCanBePlacedMaterial;//[Offset: 0x9e8, Size: 0x8]
	MaterialInterface* ActorCantBePlacedMaterial;//[Offset: 0x9f0, Size: 0x8]
	Vector PreviewActorOffset;//[Offset: 0x9f8, Size: 0xc]
	Vector ProneOffset;//[Offset: 0xa04, Size: 0xc]
	float HeightDropOffset;//[Offset: 0xa10, Size: 0x4]
	float DirectionOffset;//[Offset: 0xa14, Size: 0x4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa18, Size: 0x1]
	bool bAdjustTraceStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa19, Size: 0x1]
	bool bSnapDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1a, Size: 0x1]
	WW3CKStandpoint[] Standpoints;//[Offset: 0xa20, Size: 0x10]
	Vector[] TraceLocations;//[Offset: 0xa30, Size: 0x10]
	float FrontTestLength;//[Offset: 0xa40, Size: 0x4]
	bool bCanActorBeConstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa44, Size: 0x1]
	bool bLastCanActorBeConstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa45, Size: 0x1]
	bool bPreviewingActorNotOverlaping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa46, Size: 0x1]
	Actor* CurrentlyPreviewingActor;//[Offset: 0xa48, Size: 0x8]
	class Actor* CurrentConstructableActor;//[Offset: 0xa60, Size: 0x8]
	WW3CustomizationConfig CurrentConfig;//[Offset: 0xa68, Size: 0xd8]
	enum DropMode;//[Offset: 0xb50, Size: 0x1]
	bool bForceSkyClearTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb51, Size: 0x1]
	class WW3AirVehicleRotorEvac* EvacActor;//[Offset: 0xb58, Size: 0x8]
	bool bFinishedAnimEquipAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb60, Size: 0x1]
	Actor* ActorSpawned;//[Offset: 0xb68, Size: 0x8]
	void Server_TryToConstructActor(class Actor ActorToSpawn, Vector SpawnLocation, Rotator SpawnRotation);// 0xfbc090
	void Server_ClientFinishedEquipAnim();// 0xfbc040
	void OnRep_CurrentConstructableActor();// 0xfbbae0
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xfbb810
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult);// 0xfbb620

--------------------------------
Class: WW3InventoryGadgetStrike.WW3InventoryGadget.WW3InventoryItem.Actor.Object
	class Object* ScoreStreakPreviewClass;//[Offset: 0x928, Size: 0x8]
	uint16 CalculatedStrikeCost;//[Offset: 0x930, Size: 0x2]
	WW3Vehicle* CurrentVehicle;//[Offset: 0x938, Size: 0x8]
	int StrikeIndex;//[Offset: 0x940, Size: 0x4]
	bool bCanBeUsedDuringWarmup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x979, Size: 0x1]
	bool bHoldTabletUntilStrikeSpawns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97a, Size: 0x1]
	bool bAvailableInNonStrikeGameModes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97b, Size: 0x1]
	uint16 ConfigIDStrikeWillBeSpawnedFrom;//[Offset: 0x97c, Size: 0x2]
	uint16 ParentConfigIDStrikeWillBeSpawnedFrom;//[Offset: 0x97e, Size: 0x2]
	enum ConfigTypeStrikeWillBeSpawnedFrom;//[Offset: 0x980, Size: 0x1]
	WW3PlayerLoadoutUIDataProvider* LoadoutsUIDataProvider;//[Offset: 0x988, Size: 0x8]
	bool bPendingOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x998, Size: 0x1]
	void SendHUDEvent(enum InHUDEvent);// 0xfc2a40
	void OnStrikeCreated(Transform CreatedWithTransform);// 0xffc550
	void OnRep_ScoreStreakPreviewClass();// 0xffc530
	void OnRep_CurrentVehicle();// 0xffc4f0
	void OnRep_CalculatedStrikeCost();// 0xffc490
	void IsStrikeCreationAllowedByStrikesManager(class Actor StrikeActor, bool ReturnValue);// 0xffc0f0
	void IsStrikeCreationAllowedByNoise(bool ReturnValue);// 0xffc0c0
	void GetPlayerStrikePoints(int ReturnValue);// 0xffc090
	void Destroyed();// 0xffc010
	void Client_SendStrikeSpawnWarning(enum CanCreateStrikeResult);// 0xffbf90

--------------------------------
Class: WW3InventoryGadget.WW3InventoryItem.Actor.Object
	class WW3GadgetUseObjective* GadgetUseObjective;//[Offset: 0x898, Size: 0x8]
	enum SoldierGadgetType;//[Offset: 0x8a0, Size: 0x1]
	float UseAnimationDuration;//[Offset: 0x8a4, Size: 0x4]
	float AlternativeUseAnimationDuration;//[Offset: 0x8a8, Size: 0x4]
	bool bAlternativeUseEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ac, Size: 0x1]
	bool bHideItemOnUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ad, Size: 0x1]
	bool bHideItemOnEachUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ae, Size: 0x1]
	bool bHideItemOnEachAltUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8af, Size: 0x1]
	bool bShowItemAfterEachUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 0x1]
	bool bAutoWeaponEquipOnUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b1, Size: 0x1]
	bool bAutoWeaponEquipOnEachUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b2, Size: 0x1]
	bool bAlternativeUseDecreasesAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b3, Size: 0x1]
	enum GadgetSlotType;//[Offset: 0x8b4, Size: 0x1]
	WW3PlayerControllerBase* CachedBasePlayerController;//[Offset: 0x8d0, Size: 0x8]
	enum UseMode;//[Offset: 0x8d8, Size: 0x1]
	enum AlternativeUseMode;//[Offset: 0x8d9, Size: 0x1]
	bool bInstantUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8da, Size: 0x1]
	bool bCanBeUsedInNonBlockingSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8db, Size: 0x1]
	bool bInstantUseRequiresButtonRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dc, Size: 0x1]
	bool bUseAfterEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dd, Size: 0x1]
	bool bInfiniteAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8de, Size: 0x1]
	int Amount;//[Offset: 0x8e0, Size: 0x4]
	int MaxAmountThrowedPerPlayer;//[Offset: 0x8e4, Size: 0x4]
	bool bAutoAmountRegenerationEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e8, Size: 0x1]
	float AutoAmountRegenerationTime;//[Offset: 0x8ec, Size: 0x4]
	int RegenerationAmount;//[Offset: 0x8f0, Size: 0x4]
	float FireRate;//[Offset: 0x8f4, Size: 0x4]
	int CurrentAmount;//[Offset: 0x8f8, Size: 0x4]
	bool bWantsToUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8fc, Size: 0x1]
	bool bWantsToAlternativeUse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8fc, Size: 0x1]
	TimerHandle AmountRegenerationTimerHandle;//[Offset: 0x900, Size: 0x8]
	TimerHandle AmountRegenerationTimerHandleForUI;//[Offset: 0x908, Size: 0x8]
	bool bIsUsingGadget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 0x1]
	bool bCanTriggerChallengeEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x911, Size: 0x1]
	void Server_StopUse();// 0xff9370
	void Server_StopAlternativeUse();// 0xff9320
	void Server_StartUse();// 0xff92d0
	void Server_StartAlternativeUse();// 0xff9280
	void Server_OnUseFinished();// 0xff9230
	void OnRep_WantsToUse();// 0xff9210
	void OnRep_WantsToAlternativeUse();// 0xff91f0
	void OnRep_CurrentAmount(int LastAmount);// 0xff9160
	void Multicast_PlayStopUseEffects();// 0xff8ee0
	void Multicast_PlayStopAlternativeUseEffects();// 0xff8ec0
	void Multicast_PlayStartUseEffects();// 0xf63b40
	void Multicast_PlayStartAlternativeUseEffects();// 0xff8ea0
	void Multicast_OnSingleUse();// 0xff8e80
	void Multicast_OnSingleAlternativeUse();// 0xf63b20
	void GetRemainingRegenerationPercentage(float ReturnValue);// 0xff8db0
	void Client_StopRegenerationTimer();// 0xf64ad0
	void Client_StartRegenerationTimer(float InRemaining);// 0xff8950

--------------------------------
Class: WW3GadgetUseObjective.WW3GameObjective.Object
	enum RequestedGadgetType;//[Offset: 0x140, Size: 0x1]

--------------------------------
Class: WW3GameObjective.Object
	enum ObjectiveType;//[Offset: 0x28, Size: 0x1]
	enum OnCreatedRadioCommand;//[Offset: 0x2a, Size: 0x2]
	byte ObjectiveRequiredRepetitions;//[Offset: 0x2c, Size: 0x1]
	bool bIsWaypointObjective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool bShouldFailOnPlayerDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]
	bool bRemoveAfterLifetimeEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f, Size: 0x1]
	bool bShouldOverrideTheSameObjective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bSuppressObjectiveFromTheSameCallerByType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	enum ObjectiveToSuppress;//[Offset: 0x32, Size: 0x1]
	bool bPlayNaggingBark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1]
	bool bDeletedOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	WW3PlayerState*[] PlayersToSuppress;//[Offset: 0x38, Size: 0x10]
	float ObjectiveLifetime;//[Offset: 0x48, Size: 0x4]
	WW3ObjectiveReplicated ObjectiveReplicatedVars;//[Offset: 0x50, Size: 0x18]
	FText AdditionalObjectiveNameText;//[Offset: 0x68, Size: 0x18]
	enum OnCreatedBark;//[Offset: 0x80, Size: 0x2]
	enum OnCreatedHUDMessage;//[Offset: 0x82, Size: 0x1]
	bool bShoudlIgnoreOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83, Size: 0x1]
	bool bIsStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	byte SuppressedObjectivesAmount_BeforeRemove;//[Offset: 0x88, Size: 0x1]
	WW3PlayerState*[] EnsureRereplicationPlayerStates;//[Offset: 0x90, Size: 0x10]
	void OnRep_SuppressedPlayers();// 0xfcc3b0
	void OnRep_ObjectiveProperties();// 0xfcc390
	void OnRep_DeletedOnServer();// 0xfcc370

--------------------------------
Class: WW3ObjectiveReplicated
	WW3PlayerState* ObjectiveCaller;//[Offset: 0x0, Size: 0x8]
	Object* ObjectiveTargetObject;//[Offset: 0x8, Size: 0x8]
	byte ObjectiveProgress;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: WW3PlayerLoadoutUIDataProvider.Object

--------------------------------
Class: TimerHandle
	UInt64Property Handle;//[Size: 0x8]

--------------------------------
Class: WW3CKConstructableActor
	class Actor* ConstructableActor;//[Offset: 0x0, Size: 0x28]
	int StrikePointsRequired;//[Offset: 0x28, Size: 0x4]
	float SpawnAdditionalHeight;//[Offset: 0x2c, Size: 0x4]
	FText NameInGame;//[Offset: 0x30, Size: 0x18]

--------------------------------
Class: WW3CKStandpoint
	Vector StandpointMax;//[Offset: 0x0, Size: 0xc]
	Vector StandpointMin;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: WW3AirVehicleRotorEvac.WW3AirVehicleRotor.WW3AirVehicle.WW3Vehicle.WW3PawnStrike.Pawn.Actor.Object
	class Actor* ActorToSpawn;//[Offset: 0x1420, Size: 0x8]
	float WaitingTime;//[Offset: 0x1428, Size: 0x4]
	float DepartureTime;//[Offset: 0x142c, Size: 0x4]
	float MinTolaranceDistance;//[Offset: 0x1430, Size: 0x4]
	float HeightUnderEvacOfDrop;//[Offset: 0x1434, Size: 0x4]
	Vector StartOffset;//[Offset: 0x1438, Size: 0xc]
	WW3InventoryGadgetStrike* InventoryGadget;//[Offset: 0x1448, Size: 0x8]
	Actor* TargetActor;//[Offset: 0x1460, Size: 0x8]
	Actor* CarriedActor;//[Offset: 0x1468, Size: 0x8]
	void Server_PossessStrike(WW3PlayerController* InPC);// 0xf2b1d0
	void OnRep_CarriedVehicle();// 0xf2ad30

--------------------------------
Class: WW3AirVehicleRotor.WW3AirVehicle.WW3Vehicle.WW3PawnStrike.Pawn.Actor.Object
	SphereComponent* CollisionForProjectile;//[Offset: 0x1370, Size: 0x8]
	Quat CurrentQuat;//[Offset: 0x1380, Size: 0x10]
	Quat DeltaQuat;//[Offset: 0x1390, Size: 0x10]
	float Alpha;//[Offset: 0x13a0, Size: 0x4]
	float Exp;//[Offset: 0x13a4, Size: 0x4]
	float RotMod;//[Offset: 0x13a8, Size: 0x4]
	float SinModIdle;//[Offset: 0x13ac, Size: 0x4]
	float SinMaxIdle;//[Offset: 0x13b0, Size: 0x4]
	float SinModMovement;//[Offset: 0x13b4, Size: 0x4]
	float SinMaxMovement;//[Offset: 0x13b8, Size: 0x4]
	float RollSpeed;//[Offset: 0x13d8, Size: 0x4]
	float CinematicSpeedMultiplier;//[Offset: 0x13dc, Size: 0x4]
	WW3AirVehicleRotorData* AirVehicleRotorDataPointer;//[Offset: 0x13e0, Size: 0x8]
	WW3AirVehicleRotorSM* SoundManager;//[Offset: 0x13e8, Size: 0x8]
	Vector2D PrevSavedRotationLevel;//[Offset: 0x13f4, Size: 0x8]
	WW3AirVehicleRotorSimComp* AirVehicleRotorSimCompPointer;//[Offset: 0x1400, Size: 0x8]

--------------------------------
Class: WW3AirVehicle.WW3Vehicle.WW3PawnStrike.Pawn.Actor.Object
	WW3RotorsManager* RotorsManager;//[Offset: 0x12e0, Size: 0x8]
	WW3AirVehicleData* AirVehicleDataPointer;//[Offset: 0x12e8, Size: 0x8]
	WW3AirVehicleEM* EffectsManager;//[Offset: 0x12f0, Size: 0x8]
	bool bThermovision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1308, Size: 0x1]
	float MissleadingForce;//[Offset: 0x130c, Size: 0x4]
	float MisleadingMultiplier;//[Offset: 0x1314, Size: 0x4]
	float MisleadModifierInterpSpeed;//[Offset: 0x1318, Size: 0x4]
	float InputMoveUp;//[Offset: 0x1338, Size: 0x4]
	float InputMoveRotateRoll;//[Offset: 0x133c, Size: 0x4]
	float InputMoveRotateVertical;//[Offset: 0x1340, Size: 0x4]
	WW3VehicleAttachmentAPS* MissleadingAPS;//[Offset: 0x1348, Size: 0x8]
	void Server_SetInputMoveUp(float Value);// 0xf2b340
	void Server_SetInputMoveRotateRoll(float Value);// 0xf2b290
	void Server_ConfirmClientHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, HitResult Hit);// 0xf2afe0
	void OnRep_MissleadingAPS();// 0xf2ad70

--------------------------------
Class: WW3RotorsManager.ActorComponent.Object
	WW3RotorData[] RotorsConfig;//[Offset: 0xf0, Size: 0x10]

--------------------------------
Class: WW3RotorData
	FName SocketName;//[Offset: 0x0, Size: 0x8]
	StaticMesh* Mesh;//[Offset: 0x8, Size: 0x8]
	float IdleSpeed;//[Offset: 0x10, Size: 0x4]
	float OnMoveSpeed;//[Offset: 0x14, Size: 0x4]
	float SpeedDeltaChange;//[Offset: 0x18, Size: 0x4]
	Rotator RotationDirection;//[Offset: 0x1c, Size: 0xc]
	float CurrentSpeed;//[Offset: 0x28, Size: 0x4]
	StaticMeshComponent* MeshComponent;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: WW3AirVehicleData.WW3VehicleData.WW3StrikeData.Object
	float MaxSpeed;//[Offset: 0x3e0, Size: 0x4]
	float BaseAcceleration;//[Offset: 0x3e4, Size: 0x4]
	float Deacceleration;//[Offset: 0x3e8, Size: 0x4]
	float MaxSpeedUp;//[Offset: 0x3ec, Size: 0x4]
	float MaxAccUp;//[Offset: 0x3f0, Size: 0x4]
	float RotationSpeed;//[Offset: 0x3f4, Size: 0x4]
	float VisualRollSpeed;//[Offset: 0x3f8, Size: 0x4]
	float TargetRotationReachSpeed;//[Offset: 0x3fc, Size: 0x4]
	float MinRotationPitch;//[Offset: 0x400, Size: 0x4]
	float MaxRotationPitch;//[Offset: 0x404, Size: 0x4]
	float MaxRotationRoll;//[Offset: 0x408, Size: 0x4]
	float HeightKeepingStrength;//[Offset: 0x40c, Size: 0x4]
	float HeightKeepingDamping;//[Offset: 0x410, Size: 0x4]
	bool bOpticsKeepsPitchRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1]
	float MaxCameraPitchChange;//[Offset: 0x418, Size: 0x4]
	float CameraRotationSpeed;//[Offset: 0x41c, Size: 0x4]
	bool bWorldRotationControls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	float TurboInterpolationSpeed;//[Offset: 0x424, Size: 0x4]
	bool bBalanceGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	bool bLockYawRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 0x1]
	bool bLockRollRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42a, Size: 0x1]
	bool bInputUpInversed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42b, Size: 0x1]
	bool bRotateWhileTurbo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 0x1]
	float MaxServerExplosionDistance;//[Offset: 0x430, Size: 0x4]
	enum APSReactableType;//[Offset: 0x434, Size: 0x1]
	CurveFloat* MissleadingForce;//[Offset: 0x438, Size: 0x8]
	Vector2D CollisionDamageIgnoreRelativeHeightRange;//[Offset: 0x440, Size: 0x8]

--------------------------------
Class: WW3AirVehicleEM.WW3VehicleEM.ActorComponent.Object
	WW3AirVehicleEMData* AirVehicleEMDataPointer;//[Offset: 0x158, Size: 0x8]
	WW3AirVehicle* AirVehicle;//[Offset: 0x160, Size: 0x8]
	ParticleSystemComponent* GroundDustParticleComponent;//[Offset: 0x168, Size: 0x8]

--------------------------------
Class: WW3VehicleEM.ActorComponent.Object
	ParticleSystemComponent* ExhaustParticleComponent;//[Offset: 0xf0, Size: 0x8]
	WW3VehicleEMData* EMDataPointer;//[Offset: 0x120, Size: 0x8]
	WW3Vehicle* Vehicle;//[Offset: 0x128, Size: 0x8]
	bool bHasLosingConnectionEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	void OnConnectionLost();// 0x10f0400

--------------------------------
Class: WW3AirVehicleEMData.WW3VehicleEMData.Object
	ParticleSystem* GroundDustParticle;//[Offset: 0x240, Size: 0x28]
	float GroundDustMaxUpDistance;//[Offset: 0x268, Size: 0x4]
	float GroundDustTestRadius;//[Offset: 0x26c, Size: 0x4]
	CurveFloat* GroundDustIntensity;//[Offset: 0x270, Size: 0x8]

--------------------------------
Class: WW3VehicleAttachmentAPS.WW3VehicleAttachment.WW3AttachmentDamageable.WW3Attachment.Object
	Actor* CurrentDetectedMissile;//[Offset: 0x550, Size: 0x8]
	Actor*[] CurrentlyDetectedMissiles;//[Offset: 0x558, Size: 0x10]
	float MinMissleLifetime;//[Offset: 0x568, Size: 0x4]
	float CapsuleDestroyingRadius;//[Offset: 0x56c, Size: 0x4]
	float SphereDetectingRadius;//[Offset: 0x570, Size: 0x4]
	float JammingInnerRadius;//[Offset: 0x574, Size: 0x4]
	float JammingOuterRadius;//[Offset: 0x578, Size: 0x4]
	enum ApsType;//[Offset: 0x57c, Size: 0x1]
	int InfluencedChannels;//[Offset: 0x580, Size: 0x4]
	float NoiseInterval;//[Offset: 0x584, Size: 0x4]
	float MisleadingStrength;//[Offset: 0x588, Size: 0x4]
	int MaxAmmo;//[Offset: 0x58c, Size: 0x4]
	int MaxUses;//[Offset: 0x590, Size: 0x4]
	bool bAlwaysActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 0x1]
	bool bUseAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x595, Size: 0x1]
	bool bHasCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x596, Size: 0x1]
	float APSWorkingThreshold;//[Offset: 0x598, Size: 0x4]
	float CurrentReloadTime;//[Offset: 0x59c, Size: 0x4]
	float CurrentProtectionTime;//[Offset: 0x5a0, Size: 0x4]
	float ReloadTime;//[Offset: 0x5a4, Size: 0x4]
	float ReloadGainPerUse;//[Offset: 0x5a8, Size: 0x4]
	float ProtectionTime;//[Offset: 0x5ac, Size: 0x4]
	float RotationSpeed;//[Offset: 0x5b0, Size: 0x4]
	ParticleSystem* ExplodeParticle;//[Offset: 0x5b8, Size: 0x28]
	class ShooterExplosionEffect* ExplosionActor;//[Offset: 0x5e0, Size: 0x8]
	ParticleSystemComponent* ParticleComponent;//[Offset: 0x5e8, Size: 0x8]
	ParticleSystem* LightParticle;//[Offset: 0x5f0, Size: 0x28]
	FName LightSocketName;//[Offset: 0x618, Size: 0x8]
	LinearColor ApsLightNeutralColor;//[Offset: 0x620, Size: 0x10]
	LinearColor ApsLightProtectingColor;//[Offset: 0x630, Size: 0x10]
	LinearColor ApsLightReloadColor;//[Offset: 0x640, Size: 0x10]
	int8 CurrentAmmo;//[Offset: 0x650, Size: 0x1]
	int8 CurrentUses;//[Offset: 0x651, Size: 0x1]
	bool bIsReadyToShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x652, Size: 0x1]
	WW3PoolManager* PoolReference;//[Offset: 0x658, Size: 0x8]
	WW3NoiseGeneratorManager* NoiseGenerator;//[Offset: 0x660, Size: 0x8]
	bool bIsApsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 0x1]
	bool bIsReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x669, Size: 0x1]
	ParticleSystemComponent* LightParticleComponent;//[Offset: 0x670, Size: 0x8]
	ParticleSystemComponent* LightParticleComponent2;//[Offset: 0x678, Size: 0x8]
	void OnRep_IsReloading();// 0x10e9450
	void OnRep_IsReadyToShoot();// 0x10e9430
	void OnRep_IsApsActive();// 0x10e9410
	void OnRep_CurrentAmmo();// 0x10e93f0
	void IsReloading(bool ReturnValue);// 0x10e93c0
	void IsReady(bool ReturnValue);// 0x10e9390
	void IsProtecting(bool ReturnValue);// 0x10e9360
	void HasAmmo(bool ReturnValue);// 0x10e9330

--------------------------------
Class: WW3VehicleAttachment.WW3AttachmentDamageable.WW3Attachment.Object
	WW3VehicleAttachmentSlot[] VehicleAvailableSlots;//[Offset: 0x4d0, Size: 0x10]
	enum VehicleAttachmentType;//[Offset: 0x4e0, Size: 0x1]
	bool bIgnoreImpactZones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e1, Size: 0x1]
	bool bBlockPawnOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e2, Size: 0x1]
	WW3VehicleRepairComponent* MeshEffectComp;//[Offset: 0x4e8, Size: 0x8]
	float DefaultDamageAbsorptionPercentage;//[Offset: 0x4f4, Size: 0x4]
	WW3AttachmentDamageAbsorptionInfo[] OverrideDamageAbsorptionPerDamageType;//[Offset: 0x4f8, Size: 0x10]
	bool bVisibilityMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50a, Size: 0x1]
	class WW3VehicleAttachment* VisualRepresentation;//[Offset: 0x510, Size: 0x28]
	WW3VehicleAttachment* VisualRepresentationObj;//[Offset: 0x538, Size: 0x8]
	TimerHandle RepairTimerHandle;//[Offset: 0x540, Size: 0x8]
	WW3Vehicle* VehicleOwner;//[Offset: 0x548, Size: 0x8]

--------------------------------
Class: WW3AttachmentDamageable.WW3Attachment.Object
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	bool bCanBeDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]
	bool bCanBeHealed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x232, Size: 0x1]
	bool bCanBeRestored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x233, Size: 0x1]
	float MaxHealth;//[Offset: 0x234, Size: 0x4]
	int MinimumAllowedDamage;//[Offset: 0x238, Size: 0x4]
	WW3DamageModifier[] DamageTypeModifiers;//[Offset: 0x240, Size: 0x10]
	bool bUseImpactZones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	WW3AttachmentImpactZoneInfo[] ImpactZones;//[Offset: 0x258, Size: 0x10]
	WW3AttachmentDestructionEffectsInfo DestructionParameters;//[Offset: 0x268, Size: 0xb8]
	bool bCanPassDamageThrough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	NotificationSounds Sounds;//[Offset: 0x328, Size: 0x48]
	int HealthReplicated;//[Offset: 0x38c, Size: 0x4]
	WW3TakeHitInfo LastTakenHitInfo;//[Offset: 0x390, Size: 0xa8]
	WW3AttachmentGib*[] GibInstances;//[Offset: 0x440, Size: 0x10]
	BoxComponent*[] ImpactZoneInstances;//[Offset: 0x450, Size: 0x10]
	void TakeHeal(float HealAmount, Controller* EventInstigator, Actor* HealCauser, bool ReturnValue);// 0xf3e140
	void TakeDamage(int DamageAmount, DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, int DamagePassedThrough, bool bIgnoreDamageModifiers, int ReturnValue);// 0xf3df50
	void ShouldTakeHeal(bool ReturnValue);// 0xf3df20
	void Restore();// 0xf3df00
	void OnTakeDamage(int DamageAmount, Controller* EventInstigator, Actor* DamageCauser);// 0xf3de00
	void OnRep_HealthReplicated(int OldHealth);// 0xf3dd30
	void IsDestroyed(bool ReturnValue);// 0xf3d7e0
	void IsDamaged(bool ReturnValue);// 0xf3d7b0
	void GetDamageTypeModifier(class DamageType InDamageType, float ReturnValue);// 0xf3d680
	void CanBeRestored(bool ReturnValue);// 0xf3d650
	void CanBeHealed(bool ReturnValue);// 0xf3d620
	void CanBeDestroyed(bool ReturnValue);// 0xf3d5f0
	void CanBeDamaged(bool ReturnValue);// 0xf3d5c0
	void CalculateDamageAbsorption(int InDamage, class DamageType InDamageType, HitResult InHitInfo, Controller* InDamageInstigator, Actor* InDamageCauser, int ReturnValue);// 0xf3d3d0
	void AdjustDamage(int DamageAmount, class DamageType InDamageType, HitResult InHitInfo, Controller* EventInstigator, Actor* DamageCauser, int ReturnValue);// 0xf3d1e0

--------------------------------
Class: WW3PoolManager.Actor.Object
	SceneComponent* TransformComponent;//[Offset: 0x330, Size: 0x8]
	WW3ParticlePool* ParticlePoolComponent;//[Offset: 0x338, Size: 0x8]
	WW3DecalPool* DecalPoolComponent;//[Offset: 0x340, Size: 0x8]
	WW3SoundPool* SoundPoolComponent;//[Offset: 0x348, Size: 0x8]
	WW3ActorPool* ActorPoolComponent;//[Offset: 0x350, Size: 0x8]
	WW3PassingByBulletSoundPool* PassingByBulletSoundPoolComponent;//[Offset: 0x358, Size: 0x8]

--------------------------------
Class: WW3ParticlePool.ActorComponent.Object
	ParticlePoolData[] PrioritizedParticlePool;//[Offset: 0xf0, Size: 0x10]
	ParticleSystemComponent*[] ReusableParticlePool;//[Offset: 0x100, Size: 0x10]
	void OnParticleFinished(ParticleSystemComponent* ParticleComponent);// 0x1037b00

--------------------------------
Class: ParticlePoolData
	ParticleSystemComponent*[] ParticlePool;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3DecalPool.ActorComponent.Object
	DecalPoolData[] PrioritizedDecalPool;//[Offset: 0xf0, Size: 0x10]
	void OnDecalAttachParentLost(DecalComponent* DecalComponent);// 0xf9e0b0

--------------------------------
Class: DecalPoolData
	DecalComponent*[] DecalPool;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3SoundPool.ActorComponent.Object

--------------------------------
Class: WW3ActorPool.ActorComponent.Object
	Actor*[] ApsReactable;//[Offset: 0x1f8, Size: 0x10]
	WW3Vehicle*[] Vehicles;//[Offset: 0x208, Size: 0x10]
	WW3Vehicle*[] Vehicles_Synchronized;//[Offset: 0x218, Size: 0x10]
	WW3Character*[] Characters;//[Offset: 0x228, Size: 0x10]
	WW3AIController*[] AIControllers;//[Offset: 0x238, Size: 0x10]
	WW3CharacterBot*[] CharacterBots;//[Offset: 0x248, Size: 0x10]
	WW3InventoryWeapon*[] Weapons;//[Offset: 0x258, Size: 0x10]
	WW3InventoryGadget*[] Gadgets;//[Offset: 0x268, Size: 0x10]
	WW3NoiseManager*[] NoiseManagers;//[Offset: 0x278, Size: 0x10]
	WW3TeamStrikeSpawnPoint*[] StrikeSpawnPoints;//[Offset: 0x288, Size: 0x10]
	Actor*[] Teamables;//[Offset: 0x298, Size: 0x10]
	WW3ActorMarker*[] AllMarkers;//[Offset: 0x2a8, Size: 0x10]
	WW3ActorMarker*[] WorldSpaceInteractableMarkers;//[Offset: 0x2b8, Size: 0x10]
	WW3ActorMarker*[] MiniMapMarkers;//[Offset: 0x2c8, Size: 0x10]
	WW3ActorMarker*[] QuickMapMarkers;//[Offset: 0x2d8, Size: 0x10]
	WW3ActorMarker*[] DeployMapMarkers;//[Offset: 0x2e8, Size: 0x10]
	WW3ActorMarker*[] StrikeMapMarkers;//[Offset: 0x2f8, Size: 0x10]
	WW3GadgetThrowable*[] GadgetsThrowable;//[Offset: 0x308, Size: 0x10]
	WW3ThrowableGrenade*[] ThrowableGrenades;//[Offset: 0x318, Size: 0x10]
	WW3AreaOfEffect*[] AreaOfEffects;//[Offset: 0x328, Size: 0x10]
	WW3HVT*[] HVTs;//[Offset: 0x338, Size: 0x10]
	WW3ReconZoneVolume*[] ReconZoneVolume;//[Offset: 0x348, Size: 0x10]
	WW3ReconTransmissionObject*[] ReconTransmissionObject;//[Offset: 0x358, Size: 0x10]
	WW3AudioVolumeInfo[] AudioVolumes;//[Offset: 0x368, Size: 0x10]
	WW3FootstepVolume*[] FootstepVolumes;//[Offset: 0x3e0, Size: 0x10]

--------------------------------
Class: WW3AIController.AIController.Controller.Actor.Object
	WW3BotAchetypeData Archetype;//[Offset: 0x440, Size: 0xd0]
	WW3PlayerProfileData PlayerProfile;//[Offset: 0x510, Size: 0x280]
	WW3RespawnRequestBase* SvRespawnRequest;//[Offset: 0x790, Size: 0x8]
	TimerHandle RestartRespawnRequestTimerHandle_T;//[Offset: 0x7a8, Size: 0x8]
	BlackboardComponent* BlackboardComp;//[Offset: 0x7b0, Size: 0x8]
	BehaviorTreeComponent* BehaviorComp;//[Offset: 0x7b8, Size: 0x8]
	WW3Character* PossessedCharacter;//[Offset: 0x7c0, Size: 0x8]
	Pawn* PreviousEnemyTarget;//[Offset: 0x7d8, Size: 0x8]
	WW3BotsManager* BotsManagerPointer;//[Offset: 0x800, Size: 0x8]
	WW3BotsDebugManager* BotsDebugManagerPointer;//[Offset: 0x808, Size: 0x8]
	WW3PlayerController* RealPlayerReferenceController;//[Offset: 0x810, Size: 0x8]
	void ToggleTargetingBasedOnDistance(float CurrentDistance, float TargetingDistance, float MeeleDistance);// 0xf26e70
	void ShootEnemy();// 0xf26e30
	void SetEnemy(Pawn* InPawn);// 0xf26db0
	void Server_RequestRespawnAtRandomTDMPoint(bool bIsSpecialSpawn);// 0xf26c70
	void Server_RequestRespawnAtCapturePoint(WW3CaptureAreaComponent* InRespawnTarget);// 0xf26bb0
	void Server_CancelRespawnRequest();// 0xf26b60
	void OnStartBeingUnderAttack(Pawn* AttackingPawn);// 0xf26ae0
	void OnRestartRespawnRequestTimerCompleted_Timeout();// 0xf26ac0
	void OnRestartRespawnRequestTimerCompleted_Cooldown();// 0xf26aa0
	void FindClosestEnemyWithLOS(WW3Character* ExcludeEnemy, bool ReturnValue);// 0xf26440
	void FindClosestEnemyVehicleWithLOS(bool ReturnValue);// 0xf26410
	void FindClosestEnemy();// 0xf263f0

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e8, Size: 0x1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3e8, Size: 0x1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3e8, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3e8, Size: 0x1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3e8, Size: 0x1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3e8, Size: 0x1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x3f0, Size: 0x8]
	BrainComponent* BrainComponent;//[Offset: 0x3f8, Size: 0x8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x400, Size: 0x8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x408, Size: 0x8]
	BlackboardComponent* Blackboard;//[Offset: 0x410, Size: 0x8]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x418, Size: 0x8]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x420, Size: 0x8]
	delegate ReceiveMoveCompleted;//[Offset: 0x428, Size: 0x10]
	void UseBlackboard(BlackboardData* BlackboardAsset, BlackboardComponent* BlackboardComponent, bool ReturnValue);// 0x2730950
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x2730720
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x2730290
	void SetMoveBlockDetection(bool bEnable);// 0x2730200
	void RunBehaviorTree(BehaviorTree* BTAsset, bool ReturnValue);// 0x2730030
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x1395e00
	void OnUnpossess(Pawn* UnpossessedPawn);// 0x1395e00
	void OnPossess(Pawn* PossessedPawn);// 0x1395e00
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x272fa40
	void MoveToLocation(Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath, byte ReturnValue);// 0x272f7d0
	void MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath, byte ReturnValue);// 0x272f5b0
	void K2_SetFocus(Actor* NewFocus);// 0x272f420
	void K2_SetFocalPoint(Vector FP);// 0x272f390
	void K2_ClearFocus();// 0x272f370
	void HasPartialPath(bool ReturnValue);// 0x272f190
	void GetPathFollowingComponent(PathFollowingComponent* ReturnValue);// 0x272ee90
	void GetMoveStatus(byte ReturnValue);// 0x272ee60
	void GetImmediateMoveDestination(Vector ReturnValue);// 0x272ed30
	void GetFocusActor(Actor* ReturnValue);// 0x272ed00
	void GetFocalPointOnActor(Actor* Actor, Vector ReturnValue);// 0x2588870
	void GetFocalPoint(Vector ReturnValue);// 0x272ecc0
	void GetAIPerceptionComponent(AIPerceptionComponent* ReturnValue);// 0x272e9b0
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x272e6f0

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0x128, Size: 0x8]
	NavigationData* MyNavData;//[Offset: 0x138, Size: 0x8]
	void OnNavDataRegistered(NavigationData* NavData);// 0x2745a40
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, HitResult Hit);// 0x27458a0
	void GetPathDestination(Vector ReturnValue);// 0x2745800
	void GetPathActionType(byte ReturnValue);// 0x27457d0

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x338, Size: 0x8]
	NavDataConfig NavDataConfig;//[Offset: 0x340, Size: 0x68]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a8, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a8, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3a8, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3a8, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3a8, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x3ac, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x3b0, Size: 0x4]
	UInt32Property DataVersion;//[Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x488, Size: 0x10]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8]
	Color Color;//[Offset: 0x38, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8]
	SoftClassPath NavigationDataClassName;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10]
	int AreaID;//[Offset: 0x10, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xf8, Size: 0x8]
	AIController* AIOwner;//[Offset: 0x100, Size: 0x8]
	void StopLogic(FString Reason);// 0x27396c0
	void RestartLogic();// 0x10b69f0
	void IsRunning(bool ReturnValue);// 0x2738d30
	void IsPaused(bool ReturnValue);// 0x2738d00

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xf0, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0xf8, Size: 0x8]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0x120, Size: 0x10]
	void SetValueAsVector(FName KeyName, Vector VectorValue);// 0x27395d0
	void SetValueAsString(FName KeyName, FString StringValue);// 0x27394a0
	void SetValueAsRotator(FName KeyName, Rotator VectorValue);// 0x27393b0
	void SetValueAsObject(FName KeyName, Object* ObjectValue);// 0x27392e0
	void SetValueAsName(FName KeyName, FName NameValue);// 0x2739210
	void SetValueAsInt(FName KeyName, int IntValue);// 0x2739140
	void SetValueAsFloat(FName KeyName, float FloatValue);// 0x2739070
	void SetValueAsEnum(FName KeyName, byte EnumValue);// 0x2738fa0
	void SetValueAsClass(FName KeyName, class Object ClassValue);// 0x2738ed0
	void SetValueAsBool(FName KeyName, bool BoolValue);// 0x2738e00
	void IsVectorValueSet(FName KeyName, bool ReturnValue);// 0x2738d60
	void GetValueAsVector(FName KeyName, Vector ReturnValue);// 0x2738bf0
	void GetValueAsString(FName KeyName, FString ReturnValue);// 0x2738b10
	void GetValueAsRotator(FName KeyName, Rotator ReturnValue);// 0x2738a60
	void GetValueAsObject(FName KeyName, Object* ReturnValue);// 0x27389c0
	void GetValueAsName(FName KeyName, FName ReturnValue);// 0x2738920
	void GetValueAsInt(FName KeyName, int ReturnValue);// 0x2738880
	void GetValueAsFloat(FName KeyName, float ReturnValue);// 0x27387e0
	void GetValueAsEnum(FName KeyName, byte ReturnValue);// 0x2738740
	void GetValueAsClass(FName KeyName, class Object ReturnValue);// 0x27386a0
	void GetValueAsBool(FName KeyName, bool ReturnValue);// 0x2738600
	void GetRotationFromEntry(FName KeyName, Rotator ResultRotation, bool ReturnValue);// 0x2738510
	void GetLocationFromEntry(FName KeyName, Vector ResultLocation, bool ReturnValue);// 0x2738420
	void ClearValue(FName KeyName);// 0x2738390

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xf0, Size: 0x10]
	class AISense* DominantSense;//[Offset: 0x100, Size: 0x8]
	AIController* AIOwner;//[Offset: 0x118, Size: 0x8]
	delegate OnPerceptionUpdated;//[Offset: 0x1a0, Size: 0x10]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x1b0, Size: 0x10]
	void SetSenseEnabled(class AISense SenseClass, bool bEnable);// 0x2730310
	void RequestStimuliListenerUpdate();// 0x2730010
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x272fbd0
	void GetPerceivedHostileActors(Actor*[] OutActors);// 0x272efa0
	void GetPerceivedActors(class AISense SenseToUse, Actor*[] OutActors);// 0x272eeb0
	void GetKnownPerceivedActors(class AISense SenseToUse, Actor*[] OutActors);// 0x272ed70
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, Actor*[] OutActors);// 0x272ebd0
	void GetActorsPerception(Actor* Actor, ActorPerceptionBlueprintInfo Info, bool ReturnValue);// 0x272e9d0

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4]
	float MaxAge;//[Offset: 0x2c, Size: 0x4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4]
	enum NotifyType;//[Offset: 0x2c, Size: 0x1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: AIPerceptionSystem.Object
	AISense*[] Senses;//[Offset: 0x80, Size: 0x10]
	float PerceptionAgingRate;//[Offset: 0x90, Size: 0x4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x272ff60
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x272fee0
	static void RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target, bool ReturnValue);// 0x272fdd0
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x272fc90
	static void GetSenseClassForStimulus(Object* WorldContextObject, AIStimulus Stimulus, class AISense ReturnValue);// 0x272f050

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4]
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]
	float Strength;//[Offset: 0x8, Size: 0x4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc]
	FName Tag;//[Offset: 0x28, Size: 0x8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xf0, Size: 0x8]
	PawnActionStack[] ActionStacks;//[Offset: 0xf8, Size: 0x10]
	PawnActionEvent[] ActionEvents;//[Offset: 0x108, Size: 0x10]
	PawnAction* CurrentAction;//[Offset: 0x118, Size: 0x8]
	void K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator, bool ReturnValue);// 0x2747460
	static void K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority, bool ReturnValue);// 0x2747360
	void K2_ForceAbortAction(PawnAction* ActionToAbort, byte ReturnValue);// 0x27472d0
	void K2_AbortAction(PawnAction* ActionToAbort, byte ReturnValue);// 0x2747240

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8]
	Object* Instigator;//[Offset: 0x40, Size: 0x8]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	void GetActionPriority(byte ReturnValue);// 0x27471e0
	void Finish(byte WithResult);// 0x2747150
	static void CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass, PawnAction* ReturnValue);// 0x2747090

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfc, Size: 0x1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0x100, Size: 0x10]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0x110, Size: 0x10]
	GameplayTask*[] TickingTasks;//[Offset: 0x130, Size: 0x10]
	GameplayTask*[] KnownTasks;//[Offset: 0x140, Size: 0x10]
	delegate OnClaimedResourcesChange;//[Offset: 0x150, Size: 0x10]
	void OnRep_SimulatedTasks();// 0x264fa50
	static void K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources, enum ReturnValue);// 0x264f810

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1]
	GameplayTask* ChildTask;//[Offset: 0x60, Size: 0x8]
	void ReadyForActivation();// 0x264fa70
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x1395e00
	void EndTask();// 0x264f720

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8]
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x28, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x30, Size: 0x8]
	BTDecorator*[] RootDecorators;//[Offset: 0x38, Size: 0x10]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10]
	BTService*[] Services;//[Offset: 0x68, Size: 0x10]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 0x10]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x60, Size: 0x4]
	float RandomDeviation;//[Offset: 0x64, Size: 0x4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 0x1]
	byte FlowAbortMode;//[Offset: 0x64, Size: 0x1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1]
	uint16 Number;//[Offset: 0x2, Size: 0x2]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: WW3BotAchetypeData
	WW3BotSkillData Skill;//[Offset: 0x0, Size: 0xd0]

--------------------------------
Class: WW3BotSkillData
	WW3BotSightSkillData Sight;//[Offset: 0x0, Size: 0x1]
	WW3BotHearingSkillData Hearing;//[Offset: 0x8, Size: 0x58]
	WW3BotGunplaySkillData Gunplay;//[Offset: 0x60, Size: 0x70]

--------------------------------
Class: WW3BotSightSkillData

--------------------------------
Class: WW3BotHearingSkillData
	float HearingRange;//[Offset: 0x0, Size: 0x4]
	<float,None(None)> HearingDelay;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: WW3BotGunplaySkillData
	<float,None(None)> WeaponReactionTime;//[Offset: 0x0, Size: 0x50]
	float SpreadCompensation;//[Offset: 0x50, Size: 0x4]
	WW3FakeRecoilSkillData FakeRecoilSkillData;//[Offset: 0x58, Size: 0x18]

--------------------------------
Class: WW3FakeRecoilSkillData
	CurveVector* RecoilCurve;//[Offset: 0x0, Size: 0x8]
	float Randomness;//[Offset: 0x8, Size: 0x4]
	CurveFloat* TargetMovementSpeedScaleCurve;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: WW3PlayerProfileData
	WW3AccountInfo AccountInfo;//[Offset: 0xb8, Size: 0xb0]
	WW3ProfileLoadout CurrentAccountConfig;//[Offset: 0x168, Size: 0xc0]
	WW3CustomizationConfigContainer CustomCustomizationConfig;//[Offset: 0x228, Size: 0x58]

--------------------------------
Class: WW3AccountInfo
	int PlayerId;//[Offset: 0x0, Size: 0x4]
	int TotalExperience;//[Offset: 0x4, Size: 0x4]
	int PlayerLevel;//[Offset: 0x8, Size: 0x4]
	int PrestigeLevel;//[Offset: 0xc, Size: 0x4]
	WW3MenuProfileStatus MatchSummary;//[Offset: 0x10, Size: 0x24]
	int FactionMembership;//[Offset: 0x34, Size: 0x4]
	WW3PlayerPenaltyData PlayerPenaltyData;//[Offset: 0x38, Size: 0x18]
	WW3PlayerFactionHistoryData PlayerFactionHistoryData;//[Offset: 0x50, Size: 0x2c]
	FString PlayerName;//[Offset: 0x80, Size: 0x10]
	FString PlayerNameStatus;//[Offset: 0x90, Size: 0x10]
	WW3PlayerWallet Wallet;//[Offset: 0xa0, Size: 0x8]
	bool bSteamDownloaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: WW3MenuProfileStatus
	bool LevelUpFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool MatchSummaryFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool ChallengeMadeFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	WW3EarningsData Earnings;//[Offset: 0x4, Size: 0x10]
	WW3PlayerPerformanceData Performance;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: WW3EarningsData
	int SilverEarned;//[Offset: 0x0, Size: 0x4]
	int GoldEarned;//[Offset: 0x4, Size: 0x4]
	int SuppliesEarned;//[Offset: 0x8, Size: 0x4]
	int ExperienceEarned;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WW3PlayerPerformanceData
	int AttackerScore;//[Offset: 0x0, Size: 0x4]
	int DefenderScore;//[Offset: 0x4, Size: 0x4]
	int ObjectiveScore;//[Offset: 0x8, Size: 0x4]
	int ReconScore;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WW3PlayerPenaltyData
	int PenaltyPoints;//[Offset: 0x0, Size: 0x4]
	int CurrentPenaltyPoints;//[Offset: 0x4, Size: 0x4]
	Timespan TimeToResetPenaltyPoints;//[Offset: 0x8, Size: 0x8]
	int MatchmakingPenaltyDuration;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: Timespan

--------------------------------
Class: WW3PlayerFactionHistoryData
	int FactionExperience;//[Offset: 0x0, Size: 0x4]
	int FactionSuppliesSpent;//[Offset: 0x4, Size: 0x4]
	int FactionKills;//[Offset: 0x8, Size: 0x4]
	int FactionPlayTime;//[Offset: 0xc, Size: 0x4]
	int FactionWarzoneGamesPlayed;//[Offset: 0x10, Size: 0x4]
	int FactionWarzoneGamesWon;//[Offset: 0x14, Size: 0x4]
	int FactionReconGamesPlayed;//[Offset: 0x18, Size: 0x4]
	int FactionReconGamesWon;//[Offset: 0x1c, Size: 0x4]
	int FirstFactionMembership;//[Offset: 0x20, Size: 0x4]
	int FirstEmblem;//[Offset: 0x24, Size: 0x4]
	bool HaveToChooseFactionFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: WW3PlayerWallet
	int Soft;//[Offset: 0x0, Size: 0x4]
	int Premium;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WW3ProfileLoadout
	WW3CharacterLoadouts CharacterLoadouts;//[Offset: 0x0, Size: 0x30]
	WW3EquipmentLoadouts EquipmentLoadouts;//[Offset: 0x30, Size: 0x30]
	WW3StrikesLoadouts StrikesLoadouts;//[Offset: 0x60, Size: 0x30]
	WW3PlayerBannerInfo PlayerBannerInfo;//[Offset: 0x90, Size: 0x28]

--------------------------------
Class: WW3CharacterLoadouts.WW3Loadouts
	WW3CharacterLoadout[] CharacterLoadouts;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: WW3Loadouts
	int MainLoadoutIndex;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: WW3CharacterLoadout.WW3Loadout
	WW3CustomizationSource CustomizationSource;//[Offset: 0x10, Size: 0x6]
	WW3CustomizationData CharacterCustomization;//[Offset: 0x18, Size: 0xe0]
	WW3VoiceOverData VoiceOvers;//[Offset: 0xf8, Size: 0x30]

--------------------------------
Class: WW3Loadout
	FString Name;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3CustomizationSource
	enum Source;//[Offset: 0x0, Size: 0x1]
	enum ObjectType;//[Offset: 0x1, Size: 0x1]
	uint16 ConfigItemId;//[Offset: 0x2, Size: 0x2]
	uint16 CustomizationUniqueId;//[Offset: 0x4, Size: 0x2]

--------------------------------
Class: WW3CustomizationData
	WW3CustomizationConfig SelectedConfig;//[Offset: 0x0, Size: 0xd8]
	uint16 ItemClassId;//[Offset: 0xd8, Size: 0x2]
	WW3GameItemCustomizationDataDescription Description;//[Offset: 0xda, Size: 0x2]

--------------------------------
Class: WW3GameItemCustomizationDataDescription

--------------------------------
Class: WW3EquipmentLoadouts.WW3Loadouts
	WW3EquipmentLoadout[] EquipmentLoadouts;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: WW3EquipmentLoadout.WW3Loadout
	WW3CustomizationSource[] WeaponsSource;//[Offset: 0x10, Size: 0x10]
	WW3CustomizationSource BackpackSource;//[Offset: 0x20, Size: 0x6]
	uint16 ArmorId;//[Offset: 0x26, Size: 0x2]
	uint16 HelmetArmorId;//[Offset: 0x28, Size: 0x2]
	uint16 PrimaryGadgetId;//[Offset: 0x2a, Size: 0x2]
	uint16 SecondaryGadgetId;//[Offset: 0x2c, Size: 0x2]
	<WW3ShootingMode,None(None)> ShootingModes;//[Offset: 0x30, Size: 0x50]
	bool[] FlashLightModes;//[Offset: 0x80, Size: 0x10]
	bool[] LaserModes;//[Offset: 0x90, Size: 0x10]
	int CurrentSlot;//[Offset: 0xa0, Size: 0x4]
	WW3CustomizationData[] WeaponsCustomization;//[Offset: 0xa8, Size: 0x10]
	WW3StrikesLoadout StrikesLoadout;//[Offset: 0xb8, Size: 0x30]
	float CalculatedWeight;//[Offset: 0xe8, Size: 0x4]

--------------------------------
Class: WW3ShootingMode

--------------------------------
Class: WW3StrikesLoadout.WW3Loadout
	WW3CustomizationSource[] StrikesSource;//[Offset: 0x10, Size: 0x10]
	WW3CustomizationData[] StrikesCustomization;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: WW3StrikesLoadouts.WW3Loadouts
	WW3StrikesLoadout[] StrikesLoadouts;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: WW3PlayerBannerInfo
	int BackgroundId;//[Offset: 0x0, Size: 0x4]
	int IconID;//[Offset: 0x4, Size: 0x4]
	int FlagId;//[Offset: 0x8, Size: 0x4]
	int Tagline;//[Offset: 0xc, Size: 0x4]
	int LevelIconId;//[Offset: 0x10, Size: 0x4]
	uint16 BackgroundImageId;//[Offset: 0x14, Size: 0x2]
	uint16 BackgroundColorId;//[Offset: 0x16, Size: 0x2]
	uint16 ShapeId;//[Offset: 0x18, Size: 0x2]
	int EmblemId;//[Offset: 0x1c, Size: 0x4]
	uint16 EmblemPositionId;//[Offset: 0x20, Size: 0x2]
	uint16 PrimaryColorId;//[Offset: 0x22, Size: 0x2]
	uint16 SecondaryColorId;//[Offset: 0x24, Size: 0x2]
	uint16 EffectId;//[Offset: 0x26, Size: 0x2]

--------------------------------
Class: WW3RespawnRequestBase.Object
	WW3GamePlayerController* Requester;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WW3GamePlayerController.WW3PlayerController.WW3PlayerControllerBase.ShooterPlayerController.PlayerController.Controller.Actor.Object
	class CameraShake* SoftLandCameraShake;//[Offset: 0x1258, Size: 0x8]
	class CameraShake* MidLandCameraShake;//[Offset: 0x1260, Size: 0x8]
	class CameraShake* HardLandCameraShake;//[Offset: 0x1268, Size: 0x8]
	class CameraShake* OnVehiclePassingCameraShake;//[Offset: 0x1270, Size: 0x8]
	class CameraShake* OnExplosionCameraShake;//[Offset: 0x1278, Size: 0x8]
	class WW3QuickMap* QuickMapClass;//[Offset: 0x1280, Size: 0x8]
	class WW3StrikeMapWidget* StrikeMapClass;//[Offset: 0x1288, Size: 0x8]
	class UserWidget* StrikeMapRequestFailMessageClass;//[Offset: 0x1290, Size: 0x8]
	class UserWidget* StrikeMapSuccessfulRequestMessageClass;//[Offset: 0x1298, Size: 0x8]
	class WW3FakeMinimap* FakeMinimapClass;//[Offset: 0x12a0, Size: 0x8]
	class WW3RadialEntityConfig* DefaultRadialConfig;//[Offset: 0x12a8, Size: 0x8]
	class WW3RadialEntityConfig* DefaultRadialConfigLeader;//[Offset: 0x12b0, Size: 0x8]
	class WW3RadialEntityConfig* DefaultRadialConfigRadio;//[Offset: 0x12b8, Size: 0x8]
	class WW3RadialEntityConfig* DefaultRadialConfigStrike;//[Offset: 0x12c0, Size: 0x8]
	bool bIsSomeoneInSquadUsingUAV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c8, Size: 0x1]
	float MaxTimeOutsideBattleZoneVoulme;//[Offset: 0x12cc, Size: 0x4]
	class WW3RecordingActor* InGameRecordingActorClass;//[Offset: 0x12d0, Size: 0x8]
	class WW3InGameBackpackWidget* InGameBackpackClass;//[Offset: 0x12d8, Size: 0x8]
	TimerHandle OutsideBattleZone_TimeHandle;//[Offset: 0x12e8, Size: 0x8]
	TimerHandle WaitingForLevelToLoadAfterRespawn_TimeHandle;//[Offset: 0x12f0, Size: 0x8]
	WW3ActorMarker* CurrentInteractableMarker;//[Offset: 0x1358, Size: 0x8]
	WW3ActorMarker* CurrentMarkerAhead;//[Offset: 0x1360, Size: 0x8]
	HitResult CurrentVisibleObjectAhead;//[Offset: 0x1368, Size: 0x88]
	float MaxDistanceToCountAsObjectiveSpawn;//[Offset: 0x13f0, Size: 0x4]
	class WW3LocalPlayerHighlightMDC* LocalPlayerHighlightClass;//[Offset: 0x13f8, Size: 0x8]
	WW3LocalPlayerHighlightMDC* CurrentLocalPlayerHighlightMDC;//[Offset: 0x1400, Size: 0x8]
	class WW3BoltActionUnit* VehicleLockStateNotificationWidget;//[Offset: 0x1408, Size: 0x8]
	WW3Character* PossessedCharacter;//[Offset: 0x1430, Size: 0x8]
	WW3BattleZoneVolume*[] EnteredBattleZones;//[Offset: 0x1440, Size: 0x10]
	WW3QuickMap* QuickMap;//[Offset: 0x1458, Size: 0x8]
	WidgetComponent* StrikeMapWidget;//[Offset: 0x1460, Size: 0x8]
	WW3FakeMinimap* FakeMinimap;//[Offset: 0x1468, Size: 0x8]
	WW3RecordingActor* InGameRecordingActor;//[Offset: 0x1470, Size: 0x8]
	WW3InGameBackpackWidget* InGameBackpackWidget;//[Offset: 0x1478, Size: 0x8]
	WW3DynamicGameRulesManager* DynamicGameRulesManager;//[Offset: 0x14d8, Size: 0x8]
	interface class None* ClObjectResponsibleForRespawn;//[Offset: 0x14f8, Size: 0x10]
	interface class None* ClRespawnTarget;//[Offset: 0x1508, Size: 0x10]
	WW3RespawnRequestBase* SvRespawnRequest;//[Offset: 0x1560, Size: 0x8]
	WW3InventoryGadgetStrike* StrikeToSpawnSpectatorWith;//[Offset: 0x1568, Size: 0x8]
	TimerHandle SpectatorReturnToGame_TimerHandle;//[Offset: 0x1580, Size: 0x8]
	WW3InGameCustomizationDisp* InGameCustomizationDisplay;//[Offset: 0x1600, Size: 0x8]
	WW3InGameSeparateAttachments* InGameSeparateAttachments;//[Offset: 0x1608, Size: 0x8]
	WW3InventoryWeapon* CurrentCustomizedWeapon;//[Offset: 0x1648, Size: 0x8]
	WW3PlayerInventoryBackpack* CurrentInventoryBackpack;//[Offset: 0x1650, Size: 0x8]
	WW3PlayerState* PlayerILookAtSpectating;//[Offset: 0x1660, Size: 0x8]
	Character* CharacterUsedBeforeSpectate;//[Offset: 0x1670, Size: 0x8]
	WW3CaptureAreaComponent*[] CapturePointsComponents;//[Offset: 0x16a0, Size: 0x10]
	SpectatePoint SpectatePoint;//[Offset: 0x16b0, Size: 0x18]
	WW3PlayerState* PlayerToSpawnWhenReturnToGame;//[Offset: 0x16c8, Size: 0x8]
	void StartSpectator();// 0xfcdbf0
	void SpectatorReturnToGame_T();// 0xfcdbd0
	void Server_UpdateBackpack(AttachmentData[] AddToBackpack, AttachmentData[] RemoveFromBackpack);// 0xfcdab0
	void Server_StopSpectator();// 0xfcda60
	void Server_StartSpectator();// 0xfcda10
	void Server_SpectatorAttachToPrevPlayer();// 0xfcd9c0
	void Server_SpectatorAttachToPlayer(WW3PlayerState* InPlayerState);// 0xfcd900
	void Server_SpectatorAttachToNextPlayerOrCCTV();// 0xfcd8b0
	void Server_SpectatorAttachToNextPlayer();// 0xfcd860
	void Server_SpectatorAttachToCapturePoint(SpectateCapturePoint CapturePointComponent, bool Next);// 0xfcd740
	void Server_SetGadgetFromBackpack(uint16 InGadgetID, enum InGadgetSlotType);// 0xfcd640
	void Server_SendProfile(WW3ProfileLoadoutOptimized InPlayerProfileNetInfo);// 0xfcd520
	void Server_SendNewProfile();// 0xfcd4d0
	void Server_ReturnToMainMenuRequest();// 0xfcd480
	void Server_RespawnPlayerNearSquadLeader(WW3PlayerState* SquadLeaderToSpawnNear);// 0xfcd3c0
	void Server_RespawnPlayerNearMobileSpawnGadget(WW3MobileSpawnGadget* MobileSpawnGadget);// 0xfcd300
	void Server_RespawnPlayerInSeat(WW3SeatBase* SeatToSpawnIn);// 0xfcd240
	void Server_RespawnPlayer();// 0xfcd1f0
	void Server_RequestReviveByPlayer(WW3PlayerState* InPlayerThatRevivesMe);// 0xfcd130
	void Server_RequestRespawnAtVehicleMobileSpawn(WW3SatelliteObject_Vehicle* InRespawnTarget);// 0xfcd070
	void Server_RequestRespawnAtVehicle(WW3SatelliteObject_Vehicle* InRespawnTarget);// 0xfccfb0
	void Server_RequestRespawnAtRandomTeamBase();// 0xfccf60
	void Server_RequestRespawnAtRandomTDMPoint(bool bIsSpecialSpawn);// 0xfccea0
	void Server_RequestRespawnAtCharacter(WW3SatelliteObject_Character* InRespawnTarget, FName MatchState);// 0xfccda0
	void Server_RequestRespawnAtCapturePointInStrike(WW3CaptureAreaComponent* InRespawnTarget, WW3InventoryGadgetStrike* InGadgetStrike);// 0xfccca0
	void Server_RequestRespawnAtCapturePoint(WW3CaptureAreaComponent* InRespawnTarget);// 0xfccbe0
	void Server_PickupItem(uint16 AttachmentId, WW3PlayerInventoryBackpack* InventoryBackpack);// 0xfccae0
	void Server_OverwriteDefaultBackpackSlotItem(enum SlotType, uint16 NewItemID, InEquipmentLoadoutIndex(UInt32Property) InEquipmentLoadoutIndex);// 0xfcc9b0
	void Server_OnStrikeMapClosed();// 0xfcc960
	void Server_OnStopReviving(WW3PlayerState* InPlayerToRevive);// 0xfcc8a0
	void Server_OnStartReviving(WW3PlayerState* InPlayerToRevive);// 0xfcc7e0
	void Server_OnPostSpectatorReturnToGame();// 0xfcc790
	void Server_OnMapOpened();// 0xfcc740
	void Server_OnMapClosed();// 0xfcc6f0
	void Server_OnClientPreloadWeaponsFinished(InPreloadRequestID(UInt32Property) InPreloadRequestID);// 0xfcc630
	void Server_CancelRespawnRequest();// 0xfcc5e0
	void Server_AttachToMobileSpawnPoint(bool bUseOnlySquadVehicle);// 0xfcc520
	void Server_AttachToActor(Actor* InActor);// 0xfcc460
	void ReturnToMainMenu(bool bWasKicked);// 0xfcc3d0
	void OnRep_IsSomeoneInSquadUsingUAV();// 0x5d2c60
	void OnInGameCustomizationChange_T(bool bInShouldPlayAnim);// 0xfcc2e0
	void OnInGameCharacterCustomizationChange_T();// 0xfcc2c0
	void OnAfterReturnFromSpectate();// 0xfcc280
	void GetUIDataContainer(WW3UIDataContainer* ReturnValue);// 0xfcc250
	void Client_UpdateSpectatePoint(SpectatePoint CurrentValue);// 0xfcc180
	void Client_TeleportCharacterTo(Vector InLocation);// 0xfcc0f0
	void Client_StopSpectator();// 0xfcc0d0
	void Client_SpectatorReturnToGame();// 0xfcc0b0
	void Client_ShowBackpackUI(WW3PlayerInventoryBackpack* InventoryBackpack);// 0xfcc020
	void Client_ReturnToMainMenuWithError(FString Error);// 0xfcbf80
	void Client_ReturnToMainMenuResponse();// 0xfcbf60
	void Client_ReturnToMainMenu(bool bIsPunishment);// 0xfcbed0
	void Client_RestartSpectator();// 0xfcbeb0
	void Client_RequestedReviveFromReviveActor(Object* InObjectResponsibleForRespawn, WW3PlayerState* InPlayerResponsibleForRespawn);// 0xfcbde0
	void Client_PerformAutoDeploy();// 0xfcbdc0
	void Client_OnVehicleRespawnRequestSucceeded(enum InStatus, Vector_NetQuantize NewSpawnLocation, byte NewSpawnRotationYaw);// 0xfcbcb0
	void Client_OnVehicleRespawnRequestStatusChanged(enum InStatus);// 0xfcbc30
	void Client_OnVehicleRespawnRequestFailed(enum InStatus);// 0xfcbbb0
	void Client_OnVehicleMobileSpawnRespawnRequestSucceeded(enum InStatus, Vector_NetQuantize NewSpawnLocation, byte NewSpawnRotationYaw);// 0xfcbaa0
	void Client_OnVehicleMobileSpawnRespawnRequestStatusChanged(enum InStatus);// 0xfcba20
	void Client_OnVehicleMobileSpawnRespawnRequestFailed(enum InStatus);// 0xfcb9a0
	void Client_OnStopSpectatorBeforeDeploy(Vector SpawnLocationValue, enum SpectatorLeaveSource);// 0xfcb8d0
	void Client_OnReviveOnPlayerRespawnRequestSucceeded(enum InStatus, Vector_NetQuantize NewSpawnLocation, byte NewSpawnRotationYaw, enum InMovementType, bool bShouldKeepInventoryOnSpawn);// 0xfcb720
	void Client_OnReviveOnCapturePointRespawnRequestSucceeded(enum InStatus, Vector_NetQuantize NewSpawnLocation, byte NewSpawnRotationYaw, bool bShouldKeepInventoryOnSpawn);// 0xfcb5c0
	void Client_OnReviveByPlayerRespawnRequestStatusChanged(enum InStatus);// 0xfcb540
	void Client_OnReviveByPlayerRespawnRequestFailed(enum InStatus);// 0xfcb4c0
	void Client_OnRespawnRequestCancelled();// 0xfcb4a0
	void Client_OnRespawnFailed();// 0xfcb480
	void Client_OnRandomTeamBaseRespawnRequestSucceeded(enum InStatus, Vector_NetQuantize NewSpawnLocation, byte NewSpawnRotationYaw);// 0xfcb370
	void Client_OnRandomTeamBaseRespawnRequestStatusChanged(enum InStatus);// 0xfcb2f0
	void Client_OnRandomTeamBaseRespawnRequestFailed(enum InStatus);// 0xfcb270
	void Client_OnRandomTDMPointRespawnRequestSucceeded(enum InStatus, Vector_NetQuantize NewSpawnLocation, byte NewSpawnRotationYaw);// 0xfcb160
	void Client_OnRandomTDMPointRespawnRequestStatusChanged(enum InStatus);// 0xfcb0e0
	void Client_OnRandomTDMPointRespawnRequestFailed(enum InStatus);// 0xfcb060
	void Client_OnPlayerRespawnedWithMovementType(Vector_NetQuantize NewSpawnLocation, byte NewSpawnRotationYaw, enum SpawnMovementType, bool bShouldKeepInventoryOnSpawn);// 0xfcaf00
	void Client_OnPlayerRespawned(Vector_NetQuantize NewSpawnLocation, byte NewSpawnRotationYaw, bool bShouldKeepInventoryOnSpawn);// 0xfcade0
	void Client_OnCharacterWithMovementRespawnRequestSucceeded(enum InStatus, Vector_NetQuantize NewSpawnLocation, byte NewSpawnRotationYaw, enum InMovementType);// 0xfcac90
	void Client_OnCharacterRespawnRequestSucceeded(enum InStatus, Vector_NetQuantize NewSpawnLocation, byte NewSpawnRotationYaw);// 0xfcab80
	void Client_OnCharacterRespawnRequestStatusChanged(enum InStatus);// 0xfcab00
	void Client_OnCharacterRespawnRequestFailed(enum InStatus);// 0xfcaa80
	void Client_OnCapturePointRespawnRequestSucceeded(enum InStatus, Vector_NetQuantize NewSpawnLocation, byte NewSpawnRotationYaw);// 0xfca970
	void Client_OnCapturePointRespawnRequestStatusChanged(enum InStatus);// 0xfca8f0
	void Client_OnCapturePointRespawnRequestFailed(enum InStatus);// 0xfca870
	void Client_OnCapturePointInStrikeRespawnRequestSucceeded(enum InStatus, Vector_NetQuantize NewSpawnLocation, byte NewSpawnRotationYaw);// 0xfca760
	void Client_OnCapturePointInStrikeRespawnRequestStatusChanged(enum InStatus);// 0xfca6e0
	void Client_OnCapturePointInStrikeRespawnRequestFailed(enum InStatus);// 0xfca660
	void Client_OnBeforeSpectatorReturnToGame(WW3PlayerState* PlayerToSpawnOn, float TimeToRespawn);// 0xfca590
	void Client_LastKillShowcaseStarted(WW3PlayerState* InLastKiller, WW3PlayerState* InLastVictim);// 0xfca4c0
	void Client_LastKillShowcaseEnded();// 0xfca4a0
	void Client_InformAboutResetAfterVehicleDestruction(WW3Vehicle* InVehicle);// 0xfca410
	void Client_ForceSpawnOnRoundBegin(bool bInIsFirstRound);// 0xfca380
	void Client_FlashPlayer(Controller* EventInstigator, Actor* DamageCauser, float InIntensityValue, float InFlashEffectDuration, byte InFlashTickFadeDelay, float InIntensityShakeValue);// 0xfca1c0
	void Client_EnableSpawnAfterDeath();// 0xfca1a0
	void Client_DeactivatePlayer();// 0xfca180
	void Client_CancelDeploy();// 0xfca160
	void AddCameraShakeFromVehicles(float CameraShakeForce);// 0xfca0e0
	void AddCameraShakeFromExplosion(float CameraShakeForce);// 0xfca060

--------------------------------
Class: WW3QuickMap.UserWidget.Widget.Visual.Object
	WW3GameplayMap* GameplayMapWidget;//[Offset: 0x210, Size: 0x8]
	CanvasPanel* BlackPlaneCanvas;//[Offset: 0x218, Size: 0x8]
	Image* Grid;//[Offset: 0x220, Size: 0x8]
	Image* MercySpawnIcon;//[Offset: 0x228, Size: 0x8]
	Image* BaseIcon;//[Offset: 0x230, Size: 0x8]
	Image* TeamCapturePointIcon;//[Offset: 0x238, Size: 0x8]
	Image* EnemyCapturePointIcon;//[Offset: 0x240, Size: 0x8]
	Image* EmptyCapturePointIcon;//[Offset: 0x248, Size: 0x8]
	Image* MobileSpawnPointIcon;//[Offset: 0x250, Size: 0x8]
	VerticalBox* SquadInfo;//[Offset: 0x258, Size: 0x8]
	VerticalBox* MapInfoVerticalBox;//[Offset: 0x260, Size: 0x8]
	HorizontalBox* MobileSpawnPointContainer;//[Offset: 0x268, Size: 0x8]
	Vector2D MapMovingAxisMultiplier;//[Offset: 0x280, Size: 0x8]
	float MapMovingAnimationSpeed;//[Offset: 0x288, Size: 0x4]
	float MapMovingRangeMultiplier;//[Offset: 0x28c, Size: 0x4]
	float GridMovingRangeMultiplier;//[Offset: 0x290, Size: 0x4]
	WW3GridAnimationData GridAnimationData;//[Offset: 0x294, Size: 0x1c]
	float IconsBodyOpacity;//[Offset: 0x2b0, Size: 0x4]
	void OpenMap_BP();// 0x1395e00
	void OnPlayerStopTargeting();// 0x1395e00
	void OnPlayerStartedTargeting();// 0x1395e00
	void OnMapOpened();// 0x105b530
	void OnMapClosed();// 0x105b510
	void CloseMap_BP();// 0x1395e00

--------------------------------
Class: WW3GridAnimationData
	float DesiredGridScale;//[Offset: 0x0, Size: 0x4]
	float AnimationSpeed;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WW3StrikeMapWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	class WW3StrikeCursorMDC* StrikeCursorMDCClass;//[Offset: 0x298, Size: 0x8]
	class WW3StrikeCursorMDC* DirectionCursorMDCClass;//[Offset: 0x2a0, Size: 0x8]
	float KeyPressCursorMoveSpeed;//[Offset: 0x2a8, Size: 0x4]
	float MouseCursorMoveSpeed;//[Offset: 0x2ac, Size: 0x4]
	float RotateCursorSpeed;//[Offset: 0x2b0, Size: 0x4]
	float RotationModeHoldTime;//[Offset: 0x2b4, Size: 0x4]
	CurveFloat* CursorStartMoveVelocityCurve;//[Offset: 0x2b8, Size: 0x8]
	DataTable* UIStrikesStatsDataTable;//[Offset: 0x2c0, Size: 0x8]
	CurveFloat* CursorStopMoveAlphaVelocityCurve;//[Offset: 0x2c8, Size: 0x8]
	AkAudioEvent* UnableToDeploySound;//[Offset: 0x2d0, Size: 0x8]
	WW3TipsContainerWidget* TipWidget;//[Offset: 0x2d8, Size: 0x8]
	WidgetComponent* ComponentOwner;//[Offset: 0x2e0, Size: 0x8]
	WW3InventoryGadgetStrike* GadgetStrikeInUse;//[Offset: 0x300, Size: 0x8]
	WW3KeyTooltip* BackTooltip;//[Offset: 0x308, Size: 0x8]
	WW3GameplayMap* GameplayMap;//[Offset: 0x310, Size: 0x8]
	WW3StrikeInfoWidget* StrikeInfoWidget;//[Offset: 0x318, Size: 0x8]
	WW3DeployButton* DeployButton;//[Offset: 0x320, Size: 0x8]
	Overlay* MessagesContainer;//[Offset: 0x328, Size: 0x8]
	UserWidget* DirectionStrikeInfoWidget;//[Offset: 0x330, Size: 0x8]
	<WW3StrikeMapInputProcessor*,None(None)> MapModeInputProcessors;//[Offset: 0x338, Size: 0x50]
	WW3StrikeMapInputProcessor* CurrentInputProcessor;//[Offset: 0x388, Size: 0x8]
	WW3GameState* CachedGameState;//[Offset: 0x398, Size: 0x8]
	void ResetState_BP();// 0x1395e00
	void OpenMap_BP(FString StrikeName, FString StrikeCost, enum MapMode, WW3StrikeSlotPickerWidgetContext UIContext, int BattlePointsAmount, bool bOmitOpenAnimation);// 0x1395e00
	void OnUnableToDeploy_BP();// 0x1395e00
	void OnMapClosed();// 0x109d350
	void OnDeployTransformProvided_BP();// 0x1395e00
	void CloseMap_BP();// 0x1395e00
	void CloseAndEndUseOfMap();// 0x109d0f0

--------------------------------
Class: WW3StrikeCursorMDC.WW3MapDrawingComponent.ActorComponent.Object

--------------------------------
Class: WW3TipsContainerWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	byte MaximumTipRowsAtTime;//[Offset: 0x288, Size: 0x1]
	VerticalBox* MainVerticalBox;//[Offset: 0x290, Size: 0x8]
	WW3TipsWidgetsContainer* TipsSingleton;//[Offset: 0x348, Size: 0x8]

--------------------------------
Class: WW3TipsWidgetsContainer.Object
	<WW3TipInfo,None(None)> Tips;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: WW3TipInfo
	class WW3TipWidget* TipWidgetClass;//[Offset: 0x0, Size: 0x28]
	float DisplayTime;//[Offset: 0x28, Size: 0x4]
	float TimeDelayBeforeRepeat;//[Offset: 0x2c, Size: 0x4]
	int8 NumberTimesToDisplay;//[Offset: 0x30, Size: 0x1]
	byte RowsOccupiedInContainer;//[Offset: 0x31, Size: 0x1]
	bool bShouldBeDisplayedAtAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]

--------------------------------
Class: WW3TipWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	<WW3TipButtonCache,None(None)> ButtonsCache;//[Offset: 0x2d0, Size: 0x50]
	void SetKeyBinding(FString BindingName, enum InputFamily, enum BindedKey, TextBlock* TextBlock, Image* Image);// 0x10b7070

--------------------------------
Class: WW3TipButtonCache
	FString CachedBindingName;//[Offset: 0x0, Size: 0x10]
	enum CachedInputFamily;//[Offset: 0x10, Size: 0x1]
	enum CachedBindedKey;//[Offset: 0x11, Size: 0x1]

--------------------------------
Class: WW3KeyTooltip.WW3SelectableWidget.UserWidget.Widget.Visual.Object
	FText KeyDescription;//[Offset: 0x2f0, Size: 0x18]
	Image* KeyInputIconImage;//[Offset: 0x308, Size: 0x8]
	Widget* IconImageContainer;//[Offset: 0x310, Size: 0x8]
	TextBlock* KeyNameTextBlock;//[Offset: 0x318, Size: 0x8]
	Widget* KeyNameTextContainer;//[Offset: 0x320, Size: 0x8]
	TextBlock* KeyDescriptionTextBlock;//[Offset: 0x328, Size: 0x8]
	enum KeyInfoShowMode;//[Offset: 0x330, Size: 0x1]
	void InitializeTooltip(FName InInputName, enum InInputFamily);// 0x1010cf0

--------------------------------
Class: WW3SelectableWidget.UserWidget.Widget.Visual.Object
	class WW3UIButtonsDesignLibrary* DesignLibraryClass;//[Offset: 0x208, Size: 0x8]
	BorderWithEffects* SelectionBorder;//[Offset: 0x210, Size: 0x8]
	Image* BackgroundImage;//[Offset: 0x218, Size: 0x8]
	bool bShowTestSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1]
	WW3UIButtonsDesignLibrary* DesignLibraryDefaultObject;//[Offset: 0x248, Size: 0x8]
	void Unselect_External();// 0x1395e00
	void ShowEnabledStatusChangedAnim_External(bool bNewStatus);// 0x1395e00
	void Select_External();// 0x1395e00
	void OnUnHovered_External();// 0x1395e00
	void OnHovered_External();// 0x1395e00
	void GetUnSelectedColor(LinearColor ReturnValue);// 0x10869e0
	void GetTextStyle(byte StyleIndex, WW3UITextStyle ReturnValue);// 0x1086940
	void GetSelectionColor(LinearColor ReturnValue);// 0x1086900

--------------------------------
Class: WW3UIButtonsDesignLibrary.Object
	WW3UITextStyle[] TextSyles;//[Offset: 0x28, Size: 0x10]
	LinearColor OutlineMarkedColor;//[Offset: 0x38, Size: 0x10]
	LinearColor GlowColor;//[Offset: 0x48, Size: 0x10]
	LinearColor ReflectionColor;//[Offset: 0x58, Size: 0x10]
	LinearColor OutlineSelectedColor;//[Offset: 0x68, Size: 0x10]
	LinearColor OutlineUnSelectedColor;//[Offset: 0x78, Size: 0x10]
	LinearColor BackgroundSelectedColor;//[Offset: 0x88, Size: 0x10]
	LinearColor BackgroundUnSelectedColor;//[Offset: 0x98, Size: 0x10]
	Vector2D ReflectionOffset;//[Offset: 0xa8, Size: 0x8]
	CurveFloat* FadeInCurve;//[Offset: 0xb0, Size: 0x8]
	CurveFloat* FadeOutCurve;//[Offset: 0xb8, Size: 0x8]
	float FullFadeInTime;//[Offset: 0xc0, Size: 0x4]
	float FullFadeOutTime;//[Offset: 0xc4, Size: 0x4]
	float GlowHardness;//[Offset: 0xc8, Size: 0x4]
	float GlowInnerFallof;//[Offset: 0xcc, Size: 0x4]
	float GlowIntencity;//[Offset: 0xd0, Size: 0x4]
	float GlowMinParam;//[Offset: 0xd4, Size: 0x4]
	float GlowMaxParam;//[Offset: 0xd8, Size: 0x4]
	float ReflectionOpacity;//[Offset: 0xdc, Size: 0x4]
	float ReflectionThikness;//[Offset: 0xe0, Size: 0x4]

--------------------------------
Class: WW3UITextStyle
	LinearColor TextSelectedColor;//[Offset: 0x0, Size: 0x10]
	LinearColor TextUnSelectedColor;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: BorderWithEffects.ContentWidget.PanelWidget.Widget.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x118, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x119, Size: 0x1]
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11a, Size: 0x1]
	LinearColor ContentColorAndOpacity;//[Offset: 0x11c, Size: 0x10]
	delegate ContentColorAndOpacityDelegate;//[Offset: 0x130, Size: 0x10]
	Margin Padding;//[Offset: 0x140, Size: 0x10]
	SlateBrush background;//[Offset: 0x150, Size: 0x88]
	delegate BackgroundDelegate;//[Offset: 0x1d8, Size: 0x10]
	LinearColor BrushColor;//[Offset: 0x1e8, Size: 0x10]
	delegate BrushColorDelegate;//[Offset: 0x1f8, Size: 0x10]
	Vector2D DesiredSizeScale;//[Offset: 0x208, Size: 0x8]
	MaterialInterface* GlowMaterial;//[Offset: 0x210, Size: 0x8]
	GlowParameters GlowMaterialParameters;//[Offset: 0x218, Size: 0x48]
	MaterialInterface* ReflectionMaterial;//[Offset: 0x260, Size: 0x8]
	ReflectionParameters ReflectionMaterialParameters;//[Offset: 0x268, Size: 0x78]
	SlateBrush GlowImage;//[Offset: 0x2e0, Size: 0x88]
	SlateBrush ReflectionImage;//[Offset: 0x368, Size: 0x88]
	MaterialInterface* AssignedGlowMaterial;//[Offset: 0x3f0, Size: 0x8]
	MaterialInterface* AssignedReflectionMaterial;//[Offset: 0x3f8, Size: 0x8]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xf1e0a0
	void SetReflectionMaterial(MaterialInterface* Material);// 0xf1e020
	void SetPadding(Margin InPadding);// 0xf1df00
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xf1dd40
	void SetGlowMaterial(MaterialInterface* Material);// 0xf1dcc0
	void SetDesiredSizeScale(Vector2D InScale);// 0xf1dc40
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0xf1dbc0
	void SetBrushFromTexture(Texture2D* Texture);// 0xf1dac0
	void SetBrushFromMaterial(MaterialInterface* Material);// 0xf1da40
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0xf1d9c0
	void SetBrushColor(LinearColor InBrushColor);// 0xf1d940
	void SetBrush(SlateBrush InBrush);// 0xf1d7c0
	void GetReflectionDynamicMaterial(MaterialInstanceDynamic* ReturnValue);// 0xf1d2d0
	void GetGlowDynamicMaterial(MaterialInstanceDynamic* ReturnValue);// 0xf1d0d0
	void GetDynamicMaterial(MaterialInstanceDynamic* ReturnValue);// 0xf1d0a0

--------------------------------
Class: GlowParameters
	bool bOverrideGlowColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName GlowColorParamName;//[Offset: 0x8, Size: 0x8]
	LinearColor GlowColor;//[Offset: 0x10, Size: 0x10]
	bool bOverrideGlowHardness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	FName GlowHardnessParamName;//[Offset: 0x28, Size: 0x8]
	float GlowHardness;//[Offset: 0x30, Size: 0x4]
	bool bOverrideGlowIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	FName GlowIntensityParamName;//[Offset: 0x38, Size: 0x8]
	float GlowIntensity;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: ReflectionParameters
	bool bOverrideReflectionColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName ReflectionColorParamName;//[Offset: 0x8, Size: 0x8]
	LinearColor ReflectionColor;//[Offset: 0x10, Size: 0x10]
	bool bOverrideReflectionOffsetX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	FName ReflectionOffsetXParamName;//[Offset: 0x28, Size: 0x8]
	float ReflectionOffsetX;//[Offset: 0x30, Size: 0x4]
	bool bOverrideReflectionOffsetY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	FName ReflectionOffsetYParamName;//[Offset: 0x38, Size: 0x8]
	float ReflectionOffsetY;//[Offset: 0x40, Size: 0x4]
	bool bOverrideReflectionOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	FName ReflectionOpacityParamName;//[Offset: 0x48, Size: 0x8]
	float ReflectionOpacity;//[Offset: 0x50, Size: 0x4]
	bool bOverrideReflectionThickness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	FName ReflectionThicknessParamName;//[Offset: 0x58, Size: 0x8]
	float ReflectionThickness;//[Offset: 0x60, Size: 0x4]
	bool bOverrideReflectionBottomThickness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	FName ReflectionBottomThicknessParamName;//[Offset: 0x68, Size: 0x8]
	float ReflectionBottomThickness;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: WW3StrikeInfoWidget.WW3ItemInfoWidget.UserWidget.Widget.Visual.Object
	class WW3IconInfoWidget* AttachmentSlotInfoWidgetClass;//[Offset: 0x220, Size: 0x8]
	HorizontalBox* AttachmentsContainer;//[Offset: 0x228, Size: 0x8]
	WW3KeyTooltip* ToggleInfoTooltip;//[Offset: 0x230, Size: 0x8]
	class WW3TextInfoWidget* TextStatisticWidgetClass;//[Offset: 0x238, Size: 0x8]
	class WW3ProgressInfoWidget* ProgressStatisticWidgetClass;//[Offset: 0x240, Size: 0x8]
	VerticalBox* StatisticsVerticalBox;//[Offset: 0x248, Size: 0x8]
	VerticalBox* TextStatisticsVerticalBox;//[Offset: 0x250, Size: 0x8]
	WW3ProsConsWidget* ProsConsWidget;//[Offset: 0x258, Size: 0x8]
	WidgetSwitcher* InfoSwitcher;//[Offset: 0x260, Size: 0x8]
	TextBlock* ConfigNameTextBlock;//[Offset: 0x268, Size: 0x8]
	TextBlock* CostTextBlock;//[Offset: 0x270, Size: 0x8]
	WW3IconInfoWidget* CamouflageInfoWidget;//[Offset: 0x278, Size: 0x8]
	WW3TextInfoWidget* FirstAttachmentTextBlock;//[Offset: 0x280, Size: 0x8]
	WW3TextInfoWidget* SecondAttachmentTextBlock;//[Offset: 0x288, Size: 0x8]
	WW3TextInfoWidget* ThirdAttachmentTextBlock;//[Offset: 0x290, Size: 0x8]
	WW3TextInfoWidget* FourthAttachmentTextBlock;//[Offset: 0x298, Size: 0x8]
	WW3TextInfoWidget* FifthAttachmentTextBlock;//[Offset: 0x2a0, Size: 0x8]
	WW3TextInfoWidget* SixthAttachmentTextBlock;//[Offset: 0x2a8, Size: 0x8]
	WW3TextInfoWidget* SeventhAttachmentTextBlock;//[Offset: 0x2b0, Size: 0x8]
	Image* StrikeIconImage;//[Offset: 0x2b8, Size: 0x8]
	byte ActiveInfoIndex;//[Offset: 0x2c0, Size: 0x1]
	bool bShowSwitchButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1]

--------------------------------
Class: WW3ItemInfoWidget.UserWidget.Widget.Visual.Object
	TextBlock* LoadoutNameTextBlock;//[Offset: 0x208, Size: 0x8]
	TextBlock* NameTextBlock;//[Offset: 0x210, Size: 0x8]
	MultiLineEditableText* DescriptionTextBlock;//[Offset: 0x218, Size: 0x8]

--------------------------------
Class: WW3IconInfoWidget.UserWidget.Widget.Visual.Object
	FText TitleText;//[Offset: 0x208, Size: 0x18]
	Texture2D* IconTexture;//[Offset: 0x220, Size: 0x28]
	enum IfNoTextureSetVisibility;//[Offset: 0x248, Size: 0x1]
	ScrollTextBlock* TitleTextBlock;//[Offset: 0x250, Size: 0x8]
	Image* IconImage;//[Offset: 0x258, Size: 0x8]

--------------------------------
Class: ScrollTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x120, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x138, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x148, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x170, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x180, Size: 0x58]
	Vector2D ShadowOffset;//[Offset: 0x1d8, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x1e0, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x1f0, Size: 0x10]
	float TextVisibleWidth;//[Offset: 0x200, Size: 0x4]
	float ScrollSpeed;//[Offset: 0x204, Size: 0x4]
	float TimeWaitBeforeStartScroll;//[Offset: 0x208, Size: 0x4]
	float TimeWaitBeforeResetScroll;//[Offset: 0x20c, Size: 0x4]
	bool bShouldScroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x212, Size: 0x1]
	void SetTimeWaitBeforeStart(float InTime);// 0xf23420
	void SetTimeWaitBeforeReset(float InTime);// 0xf233a0
	void SetText(FText InText);// 0xf232d0
	void SetShouldScroll(bool bShould);// 0xf23240
	void SetShadowOffset(Vector2D InShadowOffset);// 0xf231c0
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0xf23140
	void SetScrollSpeed(float InScrollSpeed);// 0xf230c0
	void SetOpacity(float InOpacity);// 0xf23040
	void SetJustification(byte InJustification);// 0xf22fc0
	void SetFont(SlateFontInfo InFontInfo);// 0xf22d90
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0xf22ba0
	void SetAutoWrapText(bool InAutoTextWrap);// 0xf22a90
	void ResetScroll();// 0xf22880
	void GetText(FText ReturnValue);// 0xf22410
	void GetDynamicOutlineMaterial(MaterialInstanceDynamic* ReturnValue);// 0xf223b0
	void GetDynamicFontMaterial(MaterialInstanceDynamic* ReturnValue);// 0xf22380

--------------------------------
Class: WW3TextInfoWidget.UserWidget.Widget.Visual.Object
	RichTextBlock* InfoTextTextBlock;//[Offset: 0x208, Size: 0x8]
	RichTextBlock* SeparatedTitleTextBlock;//[Offset: 0x210, Size: 0x8]

--------------------------------
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x120, Size: 0x18]
	DataTable* TextStyleSet;//[Offset: 0x138, Size: 0x8]
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x140, Size: 0x10]
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x348, Size: 0x10]
	void SetText(FText InText);// 0x1d0f0f0
	void GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass, RichTextBlockDecorator* ReturnValue);// 0x1d0d330

--------------------------------
Class: RichTextBlockDecorator.Object

--------------------------------
Class: WW3ProgressInfoWidget.UserWidget.Widget.Visual.Object
	FText TitleText;//[Offset: 0x208, Size: 0x18]
	float AnchoreValue;//[Offset: 0x220, Size: 0x4]
	float FloatingValue;//[Offset: 0x224, Size: 0x4]
	ScrollTextBlock* TitleTextBlock;//[Offset: 0x228, Size: 0x8]
	LayeredProgressBar* InfoProgressBar;//[Offset: 0x230, Size: 0x8]

--------------------------------
Class: LayeredProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x100, Size: 0x1a0]
	SlateWidgetStyleAsset* Style;//[Offset: 0x2a0, Size: 0x8]
	SlateBrushAsset* BackgroundImage;//[Offset: 0x2a8, Size: 0x8]
	SlateBrushAsset* FillImage;//[Offset: 0x2b0, Size: 0x8]
	LinearColor AnchorLayerColor;//[Offset: 0x2b8, Size: 0x10]
	Margin AnchorLayerMargin;//[Offset: 0x2c8, Size: 0x10]
	LinearColor FloatingLayerColor;//[Offset: 0x2d8, Size: 0x10]
	Margin FloatingLayerMargin;//[Offset: 0x2e8, Size: 0x10]
	float AnchorPercent;//[Offset: 0x2f8, Size: 0x4]
	float FloatingPercent;//[Offset: 0x2fc, Size: 0x4]
	float ChangeProgressSpeed;//[Offset: 0x300, Size: 0x4]
	bool bChangeProgressOverTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	byte BarFillType;//[Offset: 0x305, Size: 0x1]
	void SetIsProgressChangingOverTime(bool bNewValue);// 0xf22f30
	void SetFloatingValue(float InPercent);// 0xf22d10
	void SetFloatingLayerColor(LinearColor NewColor);// 0xf22c90
	void SetChangeProgressSpeed(float NewSpeed);// 0xf22b20
	void SetAnchorValue(float InPercent);// 0xf22a10
	void SetAnchorLayerColor(LinearColor NewColor);// 0xf22990
	void GetAnchoreValue(float ReturnValue);// 0xf22350

--------------------------------
Class: WW3ProsConsWidget.UserWidget.Widget.Visual.Object
	class WW3ProsConsEntityWidget* EntityClass;//[Offset: 0x208, Size: 0x8]
	LinearColor ProsColor;//[Offset: 0x210, Size: 0x10]
	LinearColor ConsColor;//[Offset: 0x220, Size: 0x10]
	PanelWidget* ProsPanelWidget;//[Offset: 0x230, Size: 0x8]
	PanelWidget* ConsPanelWidget;//[Offset: 0x238, Size: 0x8]
	VerticalBox* ProsVerticalBox;//[Offset: 0x240, Size: 0x8]
	VerticalBox* ConsVerticalBox;//[Offset: 0x248, Size: 0x8]
	FText[] TmpProsTextsArray;//[Offset: 0x250, Size: 0x10]
	FText[] TmpConsTextsArray;//[Offset: 0x260, Size: 0x10]

--------------------------------
Class: WW3ProsConsEntityWidget.UserWidget.Widget.Visual.Object
	Border* EntityBackgroundBorder;//[Offset: 0x208, Size: 0x8]
	TextBlock* DiscriptionTextBlock;//[Offset: 0x210, Size: 0x8]

--------------------------------
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x118, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x119, Size: 0x1]
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11a, Size: 0x1]
	LinearColor ContentColorAndOpacity;//[Offset: 0x11c, Size: 0x10]
	delegate ContentColorAndOpacityDelegate;//[Offset: 0x130, Size: 0x10]
	Margin Padding;//[Offset: 0x140, Size: 0x10]
	SlateBrush background;//[Offset: 0x150, Size: 0x88]
	delegate BackgroundDelegate;//[Offset: 0x1d8, Size: 0x10]
	LinearColor BrushColor;//[Offset: 0x1e8, Size: 0x10]
	delegate BrushColorDelegate;//[Offset: 0x1f8, Size: 0x10]
	Vector2D DesiredSizeScale;//[Offset: 0x208, Size: 0x8]
	delegate OnMouseButtonDownEvent;//[Offset: 0x210, Size: 0x10]
	delegate OnMouseButtonUpEvent;//[Offset: 0x220, Size: 0x10]
	delegate OnMouseMoveEvent;//[Offset: 0x230, Size: 0x10]
	delegate OnMouseDoubleClickEvent;//[Offset: 0x240, Size: 0x10]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x1d00d40
	void SetPadding(Margin InPadding);// 0x1d005d0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x1cffe70
	void SetDesiredSizeScale(Vector2D InScale);// 0x1cffcf0
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0x1cffc70
	void SetBrushFromTexture(Texture2D* Texture);// 0x1cffa70
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x1cff9f0
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x1cff970
	void SetBrushColor(LinearColor InBrushColor);// 0x1cff8f0
	void SetBrush(SlateBrush InBrush);// 0x1cff770
	void GetDynamicMaterial(MaterialInstanceDynamic* ReturnValue);// 0x1cfecd0

--------------------------------
Class: MultiLineEditableText.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x120, Size: 0x18]
	FText HintText;//[Offset: 0x138, Size: 0x18]
	delegate HintTextDelegate;//[Offset: 0x150, Size: 0x10]
	TextBlockStyle WidgetStyle;//[Offset: 0x160, Size: 0x1e8]
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	SlateFontInfo Font;//[Offset: 0x350, Size: 0x58]
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	bool ClearTextSelectionOnFocusLoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 0x1]
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3aa, Size: 0x1]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ab, Size: 0x1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 0x1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x3ad, Size: 0x1]
	enum VirtualKeyboardDismissAction;//[Offset: 0x3ae, Size: 0x1]
	delegate OnTextChanged;//[Offset: 0x3b0, Size: 0x10]
	delegate OnTextCommitted;//[Offset: 0x3c0, Size: 0x10]
	void SetText(FText InText);// 0x1d09c60
	void SetIsReadOnly(bool bReadOnly);// 0x1d09a40
	void OnMultiLineEditableTextCommittedEvent__DelegateSignature(FText Text, byte CommitMethod);// 0x1395e00
	void OnMultiLineEditableTextChangedEvent__DelegateSignature(FText Text);// 0x1395e00
	void GetText(FText ReturnValue);// 0x1d094c0

--------------------------------
Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x58]
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 0x28]
	Vector2D ShadowOffset;//[Offset: 0x88, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x90, Size: 0x10]
	SlateColor SelectedBackgroundColor;//[Offset: 0xa0, Size: 0x28]
	LinearColor HighlightColor;//[Offset: 0xc8, Size: 0x10]
	SlateBrush HighlightShape;//[Offset: 0xd8, Size: 0x88]
	SlateBrush UnderlineBrush;//[Offset: 0x160, Size: 0x88]

--------------------------------
Class: VirtualKeyboardOptions
	bool bEnableAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: WW3DeployButton.WW3RMSelectableOption.WW3SelectableWidget.UserWidget.Widget.Visual.Object
	WW3DeployButtonStateInfo[] DeployButtonStates;//[Offset: 0x348, Size: 0x10]
	interface class None* OwnerScreen;//[Offset: 0x358, Size: 0x10]
	HorizontalBox* TimerContainer;//[Offset: 0x368, Size: 0x8]
	Image* BorderImage;//[Offset: 0x370, Size: 0x8]
	Image* ReflectionImage;//[Offset: 0x378, Size: 0x8]
	Image* GlowImage;//[Offset: 0x380, Size: 0x8]
	Image* BackgroundPatternImage;//[Offset: 0x388, Size: 0x8]
	Widget* LandingStripsWidget;//[Offset: 0x390, Size: 0x8]
	WW3ThreeNumbersCounter* MinutesCounter;//[Offset: 0x398, Size: 0x8]
	WW3ThreeNumbersCounter* SecondsCounter;//[Offset: 0x3a0, Size: 0x8]
	WW3ThreeNumbersCounter* MillisecondsCounter;//[Offset: 0x3a8, Size: 0x8]
	TextBlock* DeployText;//[Offset: 0x3b0, Size: 0x8]
	TextBlock* ToolTipTextBlock;//[Offset: 0x3b8, Size: 0x8]
	WW3KeyTooltip* KeyTooltip;//[Offset: 0x3c0, Size: 0x8]
	float DisabledButtonOpacity;//[Offset: 0x3c8, Size: 0x4]
	void SetDeployButtonState(enum NewState);// 0xf9e170
	void OnTooltipShowChanged_External(bool bShouldShow);// 0x1395e00
	void GetWaitToRespawnPercentage(float ReturnValue);// 0xf9e030

--------------------------------
Class: WW3RMSelectableOption.WW3SelectableWidget.UserWidget.Widget.Visual.Object
	WW3TooltipInfo[] TooltipsInfo;//[Offset: 0x2f0, Size: 0x10]
	Margin OptionNamePadding;//[Offset: 0x300, Size: 0x10]
	FText OptionName;//[Offset: 0x310, Size: 0x18]
	Image* PatternImage;//[Offset: 0x328, Size: 0x8]
	ScrollTextBlock* OptionNameTextBlock;//[Offset: 0x330, Size: 0x8]
	byte OptionNameHorizontalAlignment;//[Offset: 0x338, Size: 0x1]
	byte OptionNameVerticalAlignment;//[Offset: 0x339, Size: 0x1]
	enum ReflectionBehavior;//[Offset: 0x33a, Size: 0x1]
	bool bShouldOptionNameScroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33b, Size: 0x1]

--------------------------------
Class: WW3DeployButtonStateInfo
	LinearColor MainTextColor;//[Offset: 0x0, Size: 0x10]
	LinearColor SecondTextColor;//[Offset: 0x10, Size: 0x10]
	LinearColor BorderColor;//[Offset: 0x20, Size: 0x10]
	FText MainText;//[Offset: 0x30, Size: 0x18]
	FText SecondText;//[Offset: 0x48, Size: 0x18]
	FText TooltipDescriptionText;//[Offset: 0x60, Size: 0x18]
	bool bShouldShowTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bShouldShowTooltip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]

--------------------------------
Class: WW3ThreeNumbersCounter.WW3UserWidgetAnimColor.WW3UserWidget.UserWidget.Widget.Visual.Object
	byte TestNumberToDsiplay;//[Offset: 0x2d0, Size: 0x1]
	SlateFontInfo FontInfo;//[Offset: 0x2d8, Size: 0x58]
	Vector2D ShadowOffset;//[Offset: 0x330, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x338, Size: 0x10]
	byte DigitsAmountToDisplay;//[Offset: 0x348, Size: 0x1]
	float OpacityForZero;//[Offset: 0x34c, Size: 0x4]
	int LowNumberThreshold;//[Offset: 0x350, Size: 0x4]
	bool bApplyShadowsToZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 0x1]
	PanelWidget* DigitsContainer;//[Offset: 0x358, Size: 0x8]
	void ShowNumberLowLevelEffect_External(bool bIsShow);// 0x1395e00
	void SetNumber(int NewNumber);// 0x10b15a0
	void SetDigitValue(byte InDigit, byte InValue, int InNumber, int ReturnValue);// 0x10b14a0
	void IsFaded(bool ReturnValue);// 0x10b0a70
	void HasPositiveDigitBefore(byte DigitNumber, bool ReturnValue);// 0x10b09e0
	void GetNumber(int ReturnValue);// 0x10b09c0
	void GetDigitValue(byte InDigit, int InNumber, byte ReturnValue);// 0x10b0900
	void GetCurrentNumberDigitValue(byte Digit, byte ReturnValue);// 0x10b0870

--------------------------------
Class: WW3UserWidgetAnimColor.WW3UserWidget.UserWidget.Widget.Visual.Object
	CurveFloat* BlinkingCurve;//[Offset: 0x288, Size: 0x8]
	LinearColor BlinkingColor;//[Offset: 0x290, Size: 0x10]

--------------------------------
Class: WW3TooltipInfo
	FText Description;//[Offset: 0x0, Size: 0x18]
	FName TooltipSearchIndex;//[Offset: 0x18, Size: 0x8]
	class WW3KeyTooltip* TooltipClass;//[Offset: 0x20, Size: 0x8]
	enum[] ShouldShowConditions;//[Offset: 0x28, Size: 0x10]
	WW3KeyTooltip* ToolTipWidget;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: Overlay.PanelWidget.Widget.Visual.Object
	void AddChildToOverlay(Widget* Content, OverlaySlot* ReturnValue);// 0xf220e0

--------------------------------
Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x1d0f2c0
	void SetPadding(Margin InPadding);// 0x1d0e7a0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x1d0e280

--------------------------------
Class: WW3StrikeMapInputProcessor.ActorComponent.Object
	WW3StrikeCursorMDC* CursorMDC;//[Offset: 0x168, Size: 0x8]
	WW3GamePlayerController* LocalPC;//[Offset: 0x170, Size: 0x8]
	UserWidget* StrikeMap;//[Offset: 0x178, Size: 0x8]
	WW3GameplayMap* GameplayMap;//[Offset: 0x180, Size: 0x8]
	InputComponent* InputComponent;//[Offset: 0x188, Size: 0x8]
	CurveFloat* CursorStartMoveVeloctyCurve;//[Offset: 0x190, Size: 0x8]
	CurveFloat* CursorStopMoveAlphaVelocityCurve;//[Offset: 0x198, Size: 0x8]

--------------------------------
Class: WW3GameState.GameState.GameStateBase.Info.Actor.Object
	WW3UIDataContainer* UIDataContainer;//[Offset: 0x390, Size: 0x8]
	class WW3ServerObjectiveSystem* ObjectiveSystemClass;//[Offset: 0x3e8, Size: 0x8]
	WW3TeamGameMode* TeamGameModePointer;//[Offset: 0x3f0, Size: 0x8]
	WW3HUD* HUDPointer;//[Offset: 0x3f8, Size: 0x8]
	byte NumTeams;//[Offset: 0x400, Size: 0x1]
	bool bIsUsingSquads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 0x1]
	int16 RemainingTime;//[Offset: 0x402, Size: 0x2]
	bool bTimerPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 0x1]
	int MinPlayersAmountPerTeam;//[Offset: 0x408, Size: 0x4]
	int MaxPlayersAmountPerTeam;//[Offset: 0x40c, Size: 0x4]
	bool bIsAnyBattleZoneOnMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1]
	class WW3OrderRequestObjective* OrdersRequestObjective;//[Offset: 0x5f0, Size: 0x8]
	float StrikeUseObjectiveAcceptanceRadius;//[Offset: 0x5f8, Size: 0x4]
	WW3PerformanceMeasureManager* PerformanceMeasureManager;//[Offset: 0x600, Size: 0x8]
	WW3ServerTickRateManager* ServerTickRateManager;//[Offset: 0x608, Size: 0x8]
	WW3DynamicGameRulesManager* DynamicGameModeRulesManager;//[Offset: 0x610, Size: 0x8]
	float SquadLeaderRespawnDelayMultiplier;//[Offset: 0x618, Size: 0x4]
	<WW3GameObjectiveSettings,None(None)> GameObjectives;//[Offset: 0x620, Size: 0x50]
	WW3HealRequest AutoHealRequest;//[Offset: 0x670, Size: 0x20]
	WW3AmmoRequest AutoAmmoRequest;//[Offset: 0x690, Size: 0x18]
	WW3ArmorRequest AutoArmorRequest;//[Offset: 0x6a8, Size: 0x20]
	WW3EquipmentRequest AutoEquipmentRequest;//[Offset: 0x6c8, Size: 0x18]
	WW3KnockdownHelpRequest KnockdownHelpRequest;//[Offset: 0x6e0, Size: 0x18]
	World* SummaryScreenSublevel;//[Offset: 0x6f8, Size: 0x28]
	WW3ServerObjectiveSystem* ObjectiveSystem;//[Offset: 0x720, Size: 0x8]
	WW3HelpRequestsManager* HelpRequestsManager;//[Offset: 0x728, Size: 0x8]
	WW3GameEventsContainer* GameEventsContainer;//[Offset: 0x730, Size: 0x8]
	uint16[] ReplicatedTeamScores;//[Offset: 0x748, Size: 0x10]
	TimerHandle SlomoChangeTimerHandle_T;//[Offset: 0x760, Size: 0x8]
	TimerHandle DeployMapDisplayDelayHandle_T;//[Offset: 0x768, Size: 0x8]
	WW3VehicleSpawnSlotManager* VehicleSpawnSlotManager;//[Offset: 0x770, Size: 0x8]
	WW3PlayerController* ClCachedLocalPlayerController;//[Offset: 0x780, Size: 0x8]
	WW3Character* ClCachedLocalCharacter;//[Offset: 0x788, Size: 0x8]
	WW3PlayerState* ClCachedLocalPlayerState;//[Offset: 0x790, Size: 0x8]
	LevelStreamingDynamic* StreamingDynamic;//[Offset: 0x798, Size: 0x8]
	int TimerMSPSeconds;//[Offset: 0x7a4, Size: 0x4]
	WW3LastKillShowcaseInfo LastKillShowcaseInfo;//[Offset: 0x7a8, Size: 0x18]
	WW3TDMSpawnSystem* clTDMSpawnSystem;//[Offset: 0x7c8, Size: 0x8]
	void OnRep_TimerMSPSeconds(int OldValue);// 0xfd5530
	void OnRep_ReplicatedTeamScores();// 0xfd5510
	void OnRep_RemainingTime(int16 OldValue);// 0xfd5480
	void OnRep_MinPlayersAmountPerTeam(int OldValue);// 0xfd5400
	void Multicast_UpdateServerInfo(WW3ServerInfo ServerInfo);// 0xfd5160
	void Multicast_PlayFirstStrikeSirene(Vector StrikeSpawnPosition);// 0xfd50e0
	void IsCaptureAreaAvailable(WW3CaptureAreaComponent* InArea, bool ReturnValue);// 0xfd5040
	void GetRemainingTime(int ReturnValue);// 0xfd4a40
	void GetMinPlayersAmountPerTeam(int ReturnValue);// 0xfd4a10
	void GetMaxPlayersAmountPerTeam(int ReturnValue);// 0xfd49e0
	void GetLatestServerPerformancePercentage(float ReturnValue);// 0xfd49b0
	void GetCapturePointDataContainer(WW3UIDataContainer* ReturnValue);// 0xfd4950

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x370, Size: 0x8]
	FName PreviousMatchState;//[Offset: 0x378, Size: 0x8]
	int ElapsedTime;//[Offset: 0x380, Size: 0x4]
	void OnRep_MatchState();// 0x24e7c80
	void OnRep_ElapsedTime();// 0x24e7f20

--------------------------------
Class: WW3UIDataContainer.Object
	WW3CapturePoint*[] CapturePoints;//[Offset: 0x58, Size: 0x10]
	WW3CaptureAreaComponent*[] CaptureAreaComponents;//[Offset: 0x68, Size: 0x10]
	WW3CaptureAreaComponent*[] CapturableAreaComponents;//[Offset: 0x78, Size: 0x10]
	void GetCaptureAreaComponentFromString(FString CapturePointName, WW3CaptureAreaComponent* ReturnValue);// 0x10debc0
	void GetCaptureAreaComponent(enum PointEnum, bool bShouldCheckIsHidden, WW3CaptureAreaComponent* ReturnValue);// 0x10deaf0

--------------------------------
Class: WW3CapturePoint.Actor.Object
	SceneComponent* Scene;//[Offset: 0x350, Size: 0x8]
	BillboardComponent* SpriteComponent;//[Offset: 0x358, Size: 0x8]
	WW3CaptureAreaComponent* FirstSpawnZone;//[Offset: 0x360, Size: 0x8]
	SceneComponent* FirstSpawnZoneIconTransform;//[Offset: 0x368, Size: 0x8]
	bool bIsCapturable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	int DefaultTeamOwner;//[Offset: 0x374, Size: 0x4]
	FString PointLetter;//[Offset: 0x378, Size: 0x10]
	enum CapturePointAsEnum;//[Offset: 0x388, Size: 0x1]
	FString ProperName;//[Offset: 0x390, Size: 0x10]
	enum UsableInGamemode;//[Offset: 0x3a0, Size: 0x1]
	enum[] AdditionalUsableInGamemode;//[Offset: 0x3a8, Size: 0x10]
	float TimeForCapture;//[Offset: 0x3e8, Size: 0x4]
	class WW3CapturePointMarker* CaptureMarkerClass;//[Offset: 0x3f0, Size: 0x8]
	WW3VehicleSpawner*[] FirstSpawners;//[Offset: 0x3f8, Size: 0x10]
	WW3CapturePointVehicleSpawn FirstPossibleVehicles;//[Offset: 0x408, Size: 0x30]
	WW3CaptureAreaComponent*[] CaptureAreas;//[Offset: 0x438, Size: 0x10]
	CurveFloat* FlickerCurve;//[Offset: 0x448, Size: 0x8]
	CurveFloat* OpacityDistanceCurve;//[Offset: 0x450, Size: 0x8]
	CurveFloat* ScaleDistanceCurve;//[Offset: 0x458, Size: 0x8]
	CurveFloat* OpacityBasedOnScreenPositionCurve;//[Offset: 0x460, Size: 0x8]
	AkAudioEvent* LinkEstablishedSound;//[Offset: 0x468, Size: 0x8]
	AkAudioEvent* LinkLostSound;//[Offset: 0x470, Size: 0x8]
	TimerHandle FirstCheckSpawnTimerHandle;//[Offset: 0x480, Size: 0x8]
	float RemainingScore;//[Offset: 0x488, Size: 0x4]
	WW3RemainingScoreNotifications[] RemainingScoreNotifications;//[Offset: 0x490, Size: 0x10]
	bool bIsCapturePointHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 0x1]
	<enum,WW3CapturePointMarker(None)> RadioCommandControlAreaFromCapturePointEnum;//[Offset: 0x4a8, Size: 0x50]
	<enum,BoolProperty(None)> RadioCommandLostAreaFromCapturePointEnum;//[Offset: 0x4f8, Size: 0x50]
	int8 EntireCapturePointTeamOwner;//[Offset: 0x548, Size: 0x1]
	bool bIsEntireCapturePointActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x549, Size: 0x1]
	bool bIsEntireCapturePointActive_Locally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54a, Size: 0x1]
	WW3AkComponent* BarkAkComponent;//[Offset: 0x550, Size: 0x8]
	WW3AudioSingleton* AudioSingleton;//[Offset: 0x558, Size: 0x8]
	byte FirstCurrentSpawnedVehicles;//[Offset: 0x560, Size: 0x1]
	void OnRep_RemainingScore();// 0xf59130
	void OnRep_PointLetter();// 0xf59110
	void OnRep_CapturePointHidden();// 0xf58fd0

--------------------------------
Class: WW3CapturePointMarker.WW3ProgressableMarker.WW3ActorMarker.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	WW3CaptureAreaComponent* OwnerComponent;//[Offset: 0xca0, Size: 0x8]
	WW3CapturePoint* OwnerCapturePoint;//[Offset: 0xca8, Size: 0x8]
	Texture* SavedIconPointer;//[Offset: 0xcb0, Size: 0x28]
	WW3PlayerState* LocalPlayerState;//[Offset: 0xce8, Size: 0x8]
	WW3Character* Prerequisite_LocalCharacter;//[Offset: 0xd08, Size: 0x8]
	WW3HUD* Prerequisite_PlayerHUD;//[Offset: 0xd10, Size: 0x8]
	WW3DynamicGameRulesManager* DynamicGameRulesManager;//[Offset: 0xd18, Size: 0x8]
	void OnRep_OwnerComponent();// 0xf5c3b0

--------------------------------
Class: WW3HUD.HUD.Actor.Object
	class UserWidget* BetaWidget;//[Offset: 0x420, Size: 0x8]
	UserWidget* BetaWidgetInstancePointer;//[Offset: 0x428, Size: 0x8]
	WW3HighlightWidget* HighlightWidget;//[Offset: 0x430, Size: 0x8]
	class WW3HighlightWidget* HighlightWidgetBlueprint;//[Offset: 0x438, Size: 0x8]
	Font* NotifyScoreFont;//[Offset: 0x440, Size: 0x8]
	Font* ScoreFont;//[Offset: 0x448, Size: 0x8]
	Font* ReturnToBattleZoneTimerFont;//[Offset: 0x450, Size: 0x8]
	LinearColor ReturnToBattleZoneTimerColor;//[Offset: 0x458, Size: 0x10]
	class UserWidget* ReturnToTheCombatAreaWidgetClass;//[Offset: 0x468, Size: 0x8]
	UserWidget* ReturnToTheCombatAreaWidget;//[Offset: 0x470, Size: 0x8]
	float HudOpacity;//[Offset: 0x478, Size: 0x4]
	MaterialInstance* MinimapMaterial;//[Offset: 0x480, Size: 0x8]
	MaterialInstance* MapMaterial;//[Offset: 0x488, Size: 0x8]
	bool bDisableCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	class UserWidget* RespawnMapBlueprint;//[Offset: 0x4c0, Size: 0x8]
	class UserWidget* InfantryHUDBlueprint;//[Offset: 0x4c8, Size: 0x8]
	class UserWidget* ScoreboardBlueprint;//[Offset: 0x4d0, Size: 0x8]
	class UserWidget* WarmupBlueprint;//[Offset: 0x4d8, Size: 0x8]
	class UserWidget* CheatDebugInfoBlueprint;//[Offset: 0x4e0, Size: 0x8]
	class UserWidget* ChallengesLogWidgetBlueprint;//[Offset: 0x4e8, Size: 0x8]
	class WW3RoundSummaryScreen* RoundSummaryBlueprint;//[Offset: 0x4f0, Size: 0x8]
	class WW3MainHUD* MinimalVehicleHUDClass;//[Offset: 0x4f8, Size: 0x8]
	class WW3MainHUD* RCWSHUDClass;//[Offset: 0x500, Size: 0x8]
	class WW3MainHUD* ProjectileGuidedHUDClass;//[Offset: 0x508, Size: 0x8]
	class WW3Crosshair* CrosshairTemplate;//[Offset: 0x510, Size: 0x8]
	class UserWidget* WaitingForPlayersClass;//[Offset: 0x518, Size: 0x8]
	class WW3ErrorManager* ErrorManagerClass;//[Offset: 0x520, Size: 0x8]
	class WW3RespawnScreenHandler* RespawnScreenHandlerClass;//[Offset: 0x528, Size: 0x8]
	class WW3MatchSummaryWidget* MatchSummaryWidgetClass;//[Offset: 0x530, Size: 0x8]
	class WW3UIHitEffectWidget* HitEffectWidgetClass;//[Offset: 0x538, Size: 0x8]
	class WW3APSMissileEffectWidget* MissileEffectWidgetClass;//[Offset: 0x540, Size: 0x8]
	class WW3TeamSwitchedNotification* TeamSwitchedNotificationClass;//[Offset: 0x548, Size: 0x8]
	class WW3RadialMenu* RadialMenuWidgetTemplate;//[Offset: 0x550, Size: 0x8]
	class WW3CommoRose* CommoRoseTemplate;//[Offset: 0x558, Size: 0x8]
	class WW3ScoreManager* ScoreManagerClass;//[Offset: 0x560, Size: 0x8]
	WW3BadServerPerformanceIcon* ServerPerformanceIcon;//[Offset: 0x568, Size: 0x8]
	WW3ErrorManager* ErrorManager;//[Offset: 0x570, Size: 0x8]
	WW3RespawnScreenHandler* RespawnScreenHandler;//[Offset: 0x578, Size: 0x8]
	WW3HeadBobCache* HeadBobCache;//[Offset: 0x580, Size: 0x8]
	WW3InfantryHUD* InfantryHUD;//[Offset: 0x588, Size: 0x8]
	WW3RadialMenu* RadialMenuWidgetPtr;//[Offset: 0x590, Size: 0x8]
	WW3CommoRose* CommoRosePtr;//[Offset: 0x598, Size: 0x8]
	WW3MainHUD* ProjectileGuidedHUD;//[Offset: 0x5a0, Size: 0x8]
	WW3MatchSummaryWidget* MatchSummaryWidget;//[Offset: 0x5a8, Size: 0x8]
	WW3ScoreListWidget* Scoreboard;//[Offset: 0x5b0, Size: 0x8]
	WW3WarmupWidget* Warmup;//[Offset: 0x5c0, Size: 0x8]
	WW3CheatDebugInfo* CheatDebugInfoWidget;//[Offset: 0x5c8, Size: 0x8]
	WW3ChallengesLogWidget* ChallengesLogWidget;//[Offset: 0x5d0, Size: 0x8]
	WW3RoundSummaryScreen* RoundSummary;//[Offset: 0x5d8, Size: 0x8]
	<WW3MainHUD*,None(None)> VehiclesHUDsCache;//[Offset: 0x5e0, Size: 0x50]
	WW3RespawnMapWidget* RespawnMap;//[Offset: 0x630, Size: 0x8]
	UserWidget* WaitingForPlayersWidget;//[Offset: 0x638, Size: 0x8]
	WW3Crosshair* WW3Crosshair;//[Offset: 0x640, Size: 0x8]
	class WW3EventsMessagesHandler* OnScreenMessagesEventsHandlerClass;//[Offset: 0x648, Size: 0x8]
	class WW3ProgressionMessagesHandler* ProgressionMessagesEventsHandlerClass;//[Offset: 0x650, Size: 0x8]
	class WW3OnScreenBannersEventsHandler* KilledPlayerBannersEventsHandlerClass;//[Offset: 0x658, Size: 0x8]
	class WW3BoltActionUnit* WeaponReloadWarningClass;//[Offset: 0x660, Size: 0x8]
	class WW3BoltActionUnit* HoldBreathWarningClass;//[Offset: 0x668, Size: 0x8]
	MaterialInstance* SlateMinimapMaterial;//[Offset: 0x670, Size: 0x8]
	MaterialInstance* SlateMapMaterial;//[Offset: 0x678, Size: 0x8]
	<FText,None(None)> RoleDescriptions;//[Offset: 0x688, Size: 0x50]
	bool bShowShooterGameHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1]
	float Speed;//[Offset: 0x6e4, Size: 0x4]
	float TargetX;//[Offset: 0x6e8, Size: 0x4]
	float TargetY;//[Offset: 0x6ec, Size: 0x4]
	float CurrentX;//[Offset: 0x6f0, Size: 0x4]
	float CurrentY;//[Offset: 0x6f4, Size: 0x4]
	float TargetScaleChange;//[Offset: 0x6f8, Size: 0x4]
	float TargetScale;//[Offset: 0x6fc, Size: 0x4]
	float CurrentScale;//[Offset: 0x700, Size: 0x4]
	bool bShowTank;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x704, Size: 0x1]
	float Length;//[Offset: 0x708, Size: 0x4]
	int Ammo;//[Offset: 0x70c, Size: 0x4]
	bool bReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x710, Size: 0x1]
	float HealthGeneral;//[Offset: 0x714, Size: 0x4]
	float SpeedL;//[Offset: 0x718, Size: 0x4]
	float SpeedR;//[Offset: 0x71c, Size: 0x4]
	float RPM;//[Offset: 0x720, Size: 0x4]
	int Gear;//[Offset: 0x724, Size: 0x4]
	bool bAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 0x1]
	bool bDrawShooterHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 0x1]
	bool bWW3ShowHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 0x1]
	float KillFeedEntityLifeTime;//[Offset: 0x794, Size: 0x4]
	byte KillFeedAmountToDisplay;//[Offset: 0x798, Size: 0x1]
	WW3ChatDisplayWidget* ActiveChatDisplayWidget;//[Offset: 0x7e8, Size: 0x8]
	enum ActiveChatInputScreenState;//[Offset: 0x7f0, Size: 0x1]
	FText CachedChatText;//[Offset: 0x7f8, Size: 0x18]
	CurveVector* ShakeCurve;//[Offset: 0x818, Size: 0x8]
	CurveFloat* ShakeYCurve;//[Offset: 0x820, Size: 0x8]
	WW3UIHitEffectWidget* HitEffectWidget;//[Offset: 0x828, Size: 0x8]
	WW3APSMissileEffectWidget* MissileEffectWidget;//[Offset: 0x830, Size: 0x8]
	WW3TeamSwitchedNotification* TeamSwitchedNotificationWidget;//[Offset: 0x838, Size: 0x8]
	class UserWidget* SpectatorHUDClass;//[Offset: 0x840, Size: 0x8]
	Texture2D* HUDMainTexture;//[Offset: 0x8e0, Size: 0x8]
	Font* BigFont;//[Offset: 0x8e8, Size: 0x8]
	Font* NormalFont;//[Offset: 0x8f0, Size: 0x8]
	float CrosshairAdditionalSpace;//[Offset: 0x8fc, Size: 0x4]
	enum CurrentInputMode;//[Offset: 0x901, Size: 0x1]
	UserWidget* SpectatorHUD;//[Offset: 0x908, Size: 0x8]
	Texture2D* WebsocketTexture;//[Offset: 0x910, Size: 0x8]
	bool bIsWebsocketActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x918, Size: 0x1]
	enum KillScreenAttachmentDisplayRule;//[Offset: 0x919, Size: 0x1]
	enum[] AttachmentsToIgnoreList;//[Offset: 0x920, Size: 0x10]
	WW3ScoreBoardInfosList ScoreBoardInfoList;//[Offset: 0x930, Size: 0xa0]
	WW3SeatBase* CurrentSeat;//[Offset: 0x9d0, Size: 0x8]
	WW3OnScreenMessagesManager* OnScreenMessagesManager;//[Offset: 0x9d8, Size: 0x8]
	WW3EventsMessagesHandler* OnScreenMessagesEventsHandler;//[Offset: 0x9e0, Size: 0x8]
	WW3OnScreenMessagesManager* ProgressionMessagesManager;//[Offset: 0x9e8, Size: 0x8]
	WW3ProgressionMessagesHandler* ProgressionMessagesEventsHandler;//[Offset: 0x9f0, Size: 0x8]
	WW3OnScreenMessagesManager* KilledPlayerBannersManager;//[Offset: 0x9f8, Size: 0x8]
	WW3OnScreenBannersEventsHandler* KilledPlayerBannersEventsHandler;//[Offset: 0xa00, Size: 0x8]
	LinearColor RetreatZoneStringColor;//[Offset: 0xa40, Size: 0x10]
	WW3UserSettings* UserSettings;//[Offset: 0xa58, Size: 0x8]
	WW3InteractionInfo[] InteractionObjectsArray;//[Offset: 0xb20, Size: 0x10]
	Object* InteractableObject;//[Offset: 0xb40, Size: 0x8]
	WW3SeatBase* LatestSeatBase;//[Offset: 0xb48, Size: 0x8]
	float CurrentInteractionProgressValue;//[Offset: 0xb50, Size: 0x4]
	FString CurrentInteractionName;//[Offset: 0xb58, Size: 0x10]
	MaterialInstanceDynamic* ScopesWorldMarkersDistortionMID;//[Offset: 0xb68, Size: 0x8]
	WW3SimpleUIStateMachine*[] UIStateMachines;//[Offset: 0xb70, Size: 0x10]
	WW3ContextualWidgetInfo[] CachedContextualWidgets;//[Offset: 0xb90, Size: 0x10]
	WW3ReconEndGameWidget* EndGameWidget;//[Offset: 0xbd0, Size: 0x8]
	void OnEndGameWidgetSpectateButtonClicked();// 0xfe9720
	void OnCameraChanged(WW3CameraComponent* OldCamera, WW3CameraComponent* NewCamera);// 0xfe9660
	void NotifyScoreAdded(enum ScoreType, float Points, enum HowToDisplayScore);// 0xfe9560
	void GetReturnToBattleAreaText(FText ReturnValue);// 0xfe94e0

--------------------------------
Class: WW3HighlightWidget.UserWidget.Widget.Visual.Object
	Vector2D TopLeft;//[Offset: 0x208, Size: 0x8]
	Vector2D BottomRight;//[Offset: 0x210, Size: 0x8]
	WW3WidgetHighlightConfig HighlightConfig;//[Offset: 0x218, Size: 0x38]
	bool CurrentVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	void OnWidgetUpdated();// 0xfa60d0

--------------------------------
Class: WW3WidgetHighlightConfig
	enum WidgetType;//[Offset: 0x0, Size: 0x1]
	Vector2D WidgetOffset;//[Offset: 0x4, Size: 0x8]
	bool bOverrideWidgetSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	Vector2D WidgetSizeOverride;//[Offset: 0x10, Size: 0x8]
	LinearColor BackgroundColor;//[Offset: 0x18, Size: 0x10]
	LinearColor BorderColor;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: WW3RoundSummaryScreen.UserWidget.Widget.Visual.Object
	CurveFloat* OpacityOverTime;//[Offset: 0x210, Size: 0x8]
	Widget*[] OpacityOverTimeWidget;//[Offset: 0x218, Size: 0x10]
	CurveFloat* RoundWonLostOpacityOverTime;//[Offset: 0x228, Size: 0x8]
	Widget*[] RoundWonLostOpacityOverTimeWidget;//[Offset: 0x230, Size: 0x10]
	CurveFloat* RoundsScoreOpacityOverTime;//[Offset: 0x240, Size: 0x8]
	Widget*[] RoundsScoreOpacityOverTimeWidget;//[Offset: 0x248, Size: 0x10]
	CurveFloat* TipOpacityOverTime;//[Offset: 0x258, Size: 0x8]
	Widget*[] TipOpacityOverTimeWidget;//[Offset: 0x260, Size: 0x10]
	WW3ChatDisplayWidget* ChatDisplayWidget;//[Offset: 0x278, Size: 0x8]
	WW3RespawnScreenHandler* OwnerHandler;//[Offset: 0x2d0, Size: 0x8]

--------------------------------
Class: WW3ChatDisplayWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	class WW3ChatDisplayEntityWidget* ChatEntityClass;//[Offset: 0x2a0, Size: 0x8]
	WidgetSwitcher* ChatsSwitcher;//[Offset: 0x2a8, Size: 0x8]
	ScrollBox* ChatsScrollBox;//[Offset: 0x2b0, Size: 0x8]
	enum[] ChatDefaultChanels;//[Offset: 0x2b8, Size: 0x10]
	float InactivityTimeThreshold;//[Offset: 0x2c8, Size: 0x4]
	enum StartChanel;//[Offset: 0x2cc, Size: 0x1]
	bool bShoudFocusedAfterClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 0x1]
	bool bShouldFadeAfterInactivityDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ce, Size: 0x1]
	<VerticalBox*,None(None)> ChannelsContainers;//[Offset: 0x2d8, Size: 0x50]
	void OnChatActivityChanged(bool bInNewActivity);// 0x1395e00
	void OnActiveChannelChanged(int InPreChanelIndex);// 0x1395e00

--------------------------------
Class: WW3ChatDisplayEntityWidget.UserWidget.Widget.Visual.Object
	FString GroupColorRowName;//[Offset: 0x208, Size: 0x10]
	FString SquadLeaderIconRowName;//[Offset: 0x218, Size: 0x10]
	DataTable* TextStyleSet;//[Offset: 0x228, Size: 0x8]
	DataTable* DecoratorStyleSet;//[Offset: 0x230, Size: 0x8]
	RichTextBlock* EntityRichTextBlock;//[Offset: 0x238, Size: 0x8]

--------------------------------
Class: ScrollBox.PanelWidget.Widget.Visual.Object
	ScrollBoxStyle WidgetStyle;//[Offset: 0x118, Size: 0x228]
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x340, Size: 0x4d0]
	SlateWidgetStyleAsset* Style;//[Offset: 0x810, Size: 0x8]
	SlateWidgetStyleAsset* BarStyle;//[Offset: 0x818, Size: 0x8]
	byte Orientation;//[Offset: 0x820, Size: 0x1]
	enum ScrollBarPosition;//[Offset: 0x821, Size: 0x1]
	enum ScrollBarVisibility;//[Offset: 0x834, Size: 0x1]
	enum ConsumeMouseWheel;//[Offset: 0x835, Size: 0x1]
	Vector2D ScrollbarThickness;//[Offset: 0x838, Size: 0x8]
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 0x1]
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x841, Size: 0x1]
	enum NavigationDestination;//[Offset: 0x842, Size: 0x1]
	float NavigationScrollPadding;//[Offset: 0x844, Size: 0x4]
	bool bAllowRightClickDragScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 0x1]
	delegate OnUserScrolled;//[Offset: 0x850, Size: 0x10]
	void SetScrollOffset(float NewScrollOffset);// 0x1d0ecb0
	void SetScrollBarVisibility(enum NewScrollBarVisibility);// 0x1d0ec30
	void SetScrollbarThickness(Vector2D NewScrollbarThickness);// 0x1d0ed30
	void SetScrollBarPosition(enum NewPosition);// 0x1d0ebb0
	void SetScrollBarPadding(Margin InPadding);// 0x1d0eb20
	void SetOrientation(byte NewOrientation);// 0x1d0e720
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x1d0e070
	void SetAllowOverscroll(bool NewAllowOverscroll);// 0x1d0dfe0
	void ScrollWidgetIntoView(Widget* WidgetToFind, bool AnimateScroll, enum ScrollDestination);// 0x1d0dee0
	void ScrollToStart();// 0x1d0dec0
	void ScrollToEnd();// 0x1d0dea0
	void IsScrolledToTheEnd(bool ReturnValue);// 0x1d0d5d0
	void GetViewOffsetFraction(float ReturnValue);// 0x1d0d4e0
	void GetScrollOffset(float ReturnValue);// 0x1d0d4b0

--------------------------------
Class: ScrollBoxStyle.SlateWidgetStyle
	SlateBrush TopShadowBrush;//[Offset: 0x8, Size: 0x88]
	SlateBrush BottomShadowBrush;//[Offset: 0x90, Size: 0x88]
	SlateBrush LeftShadowBrush;//[Offset: 0x118, Size: 0x88]
	SlateBrush RightShadowBrush;//[Offset: 0x1a0, Size: 0x88]

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x8, Size: 0x88]
	SlateBrush VerticalBackgroundImage;//[Offset: 0x90, Size: 0x88]
	SlateBrush VerticalTopSlotImage;//[Offset: 0x118, Size: 0x88]
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x1a0, Size: 0x88]
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x228, Size: 0x88]
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x2b0, Size: 0x88]
	SlateBrush NormalThumbImage;//[Offset: 0x338, Size: 0x88]
	SlateBrush HoveredThumbImage;//[Offset: 0x3c0, Size: 0x88]
	SlateBrush DraggedThumbImage;//[Offset: 0x448, Size: 0x88]

--------------------------------
Class: WW3RespawnScreenHandler.Object
	<WW3ScreenInfo,None(None)> ScreenWidgetsClasses;//[Offset: 0x98, Size: 0x50]
	enum[] StatesPool;//[Offset: 0xe8, Size: 0x10]
	<UserWidget*,None(None)> ScreenWidgets;//[Offset: 0xf8, Size: 0x50]
	UserWidget*[] CurrentlyShownScreens;//[Offset: 0x148, Size: 0x10]
	WW3GameState* Cached_GameState;//[Offset: 0x158, Size: 0x8]
	WW3PlayerLoadoutUIDataProvider* LoadoutsUIDataProvider;//[Offset: 0x160, Size: 0x8]
	void GetCurrentState(enum ReturnValue);// 0x1075340

--------------------------------
Class: WW3ScreenInfo
	class UserWidget* DefaultScreenClass;//[Offset: 0x0, Size: 0x8]
	<class UserWidget,None(None)> SpecificScreenClasses;//[Offset: 0x8, Size: 0x50]
	int ScreenPriority;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: WW3MainHUD.WW3VehicleWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	MaterialInterface* JammedHUDMaterial;//[Offset: 0x2a8, Size: 0x8]
	float TimeToFullJamEffect;//[Offset: 0x2b0, Size: 0x4]
	RetainerBox* HUDRetainerBox;//[Offset: 0x2b8, Size: 0x8]
	CanvasPanel* MainCanvasPanel;//[Offset: 0x2c0, Size: 0x8]
	PanelWidget* SeatsWidgetContainer;//[Offset: 0x2c8, Size: 0x8]
	PanelWidget* CrosshairWidgetContainer;//[Offset: 0x2d0, Size: 0x8]
	PanelWidget* MovableRootWidget;//[Offset: 0x2d8, Size: 0x8]
	float HUDMovementAmplifier;//[Offset: 0x2e0, Size: 0x4]
	UserWidget* CameraCrosshairWidget;//[Offset: 0x2e8, Size: 0x8]
	UserWidget* FireTypeCrosshairWidget;//[Offset: 0x2f0, Size: 0x8]
	WW3FireType* BoundFireType;//[Offset: 0x308, Size: 0x8]

--------------------------------
Class: WW3VehicleWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	interface class None* VehicleData;//[Offset: 0x288, Size: 0x10]
	bool bIsVisibleInFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	bool bIsVisibleInTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 0x1]

--------------------------------
Class: WW3Crosshair.WW3UserWidget.UserWidget.Widget.Visual.Object
	bool bShowCrosshairInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	CanvasPanel* ClippingCanvas;//[Offset: 0x290, Size: 0x8]
	WW3VehicleReloadWidget* ReloadWidget;//[Offset: 0x298, Size: 0x8]
	Image* DotImage;//[Offset: 0x2a0, Size: 0x8]
	PanelWidget* AimIndicatorImageContainer;//[Offset: 0x2a8, Size: 0x8]
	Border* AimIndicatorImage;//[Offset: 0x2b0, Size: 0x8]
	PanelWidget* ObstacleHitPlaceContainer;//[Offset: 0x2b8, Size: 0x8]
	Image* ObstacleHitPlaceImage;//[Offset: 0x2c0, Size: 0x8]
	SlateBrush InvisibleBrush;//[Offset: 0x2c8, Size: 0x88]
	SlateBrush WhiteDotBrush;//[Offset: 0x350, Size: 0x88]
	Vector VehicleColorGreen;//[Offset: 0x3d8, Size: 0xc]
	Vector VehicleColorRed;//[Offset: 0x3e4, Size: 0xc]
	Vector VehicleColorWhite;//[Offset: 0x3f0, Size: 0xc]
	WW3PawnStrike* PossesedPawnStrike;//[Offset: 0x430, Size: 0x8]
	WW3InventoryWeapon* CurrentWeapon;//[Offset: 0x438, Size: 0x8]
	WW3HUD* Chached_WW3HUD;//[Offset: 0x450, Size: 0x8]
	WW3Character* Cached_WW3Character;//[Offset: 0x458, Size: 0x8]

--------------------------------
Class: WW3VehicleReloadWidget.WW3VehicleWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	Widget* RootContainer;//[Offset: 0x2a0, Size: 0x8]
	Image* ReloadBarImage;//[Offset: 0x2a8, Size: 0x8]
	WW3FireType* CurrentFireType;//[Offset: 0x2b0, Size: 0x8]
	MaterialInstanceDynamic* ReloadBarMaterial;//[Offset: 0x2b8, Size: 0x8]
	void OnStartReload_External();// 0x1395e00
	void OnEndReload_External();// 0x1395e00

--------------------------------
Class: WW3ErrorManager.Object
	class WW3OkErrorWidget* OkButtonWidgetClass;//[Offset: 0x28, Size: 0x8]
	class UserWidget* OkCancelButtonWidgetClass;//[Offset: 0x30, Size: 0x8]
	class UserWidget* OkCancelIgnoreButtonWidgetClass;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: WW3OkErrorWidget.UserWidget.Widget.Visual.Object
	TextBlock* ErrorMessageTextBlock;//[Offset: 0x208, Size: 0x8]
	SlateFontInfo ButtonTextFont;//[Offset: 0x220, Size: 0x58]
	HorizontalBox* ButtonsPanel;//[Offset: 0x278, Size: 0x8]
	void OnOkButtonClicked();// 0x1033ed0

--------------------------------
Class: WW3MatchSummaryWidget.UserWidget.Widget.Visual.Object
	Button* PersonalButton;//[Offset: 0x208, Size: 0x8]
	Button* SquadResultButton;//[Offset: 0x210, Size: 0x8]
	Button* ScoreboardButton;//[Offset: 0x218, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0x220, Size: 0x8]
	void OnSquadResultButtonClicked();// 0x5d2c60
	void OnScoreboardButtonClicked();// 0x1026930
	void OnPersonalButtonClicked();// 0x1026910

--------------------------------
Class: WW3UIHitEffectWidget.UserWidget.Widget.Visual.Object
	int MaxNumOfHitImages;//[Offset: 0x208, Size: 0x4]
	CurveFloat* DamagePercentageToMaskScaleCurve;//[Offset: 0x210, Size: 0x8]
	CurveFloat* DamagePercentageToMaskAlphaCurve;//[Offset: 0x218, Size: 0x8]
	float AlphaFadeDuration;//[Offset: 0x220, Size: 0x4]
	LinearColor SplashColor;//[Offset: 0x224, Size: 0x10]
	float PixelOffsetFromCenter;//[Offset: 0x234, Size: 0x4]
	float MinMarkerHeight;//[Offset: 0x238, Size: 0x4]
	float MaxMarkerHeight;//[Offset: 0x23c, Size: 0x4]
	float MarkerWidth;//[Offset: 0x240, Size: 0x4]
	CurveFloat* MarkerScaleOverTimeCurve;//[Offset: 0x248, Size: 0x8]
	CurveFloat* MarkerAlphaOverTimeCurve;//[Offset: 0x250, Size: 0x8]
	class WW3HitEffectMarker* HitEffectMarkerTemplate;//[Offset: 0x258, Size: 0x8]
	WW3HitEffectDescription[] HitImages;//[Offset: 0x260, Size: 0x10]

--------------------------------
Class: WW3HitEffectMarker.UserWidget.Widget.Visual.Object
	void GetVerticalBoxContainer(VerticalBox* ReturnValue);// 0x1395e00
	void GetUpperMaskImage(Image* ReturnValue);// 0x1395e00
	void GetBottomMaskImage(Image* ReturnValue);// 0x1395e00

--------------------------------
Class: WW3HitEffectDescription
	WW3HitEffectMarker* MarkerWidget;//[Offset: 0x0, Size: 0x8]
	float CurrentAlpha;//[Offset: 0x8, Size: 0x4]
	Vector InstigatorLocation;//[Offset: 0xc, Size: 0xc]
	float InitialScale;//[Offset: 0x18, Size: 0x4]
	float InitialAlpha;//[Offset: 0x1c, Size: 0x4]
	float InitialHeight;//[Offset: 0x20, Size: 0x4]
	float TimeElapsed;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: WW3APSMissileEffectWidget.WW3UIHitEffectWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: WW3TeamSwitchedNotification.UserWidget.Widget.Visual.Object
	CurveFloat* OpacityOverTime;//[Offset: 0x208, Size: 0x8]

--------------------------------
Class: WW3CommoRose.UserWidget.Widget.Visual.Object
	CanvasPanel* MainCanvas;//[Offset: 0x208, Size: 0x8]
	CanvasPanel* BaseEntitiesCanvas;//[Offset: 0x210, Size: 0x8]
	VerticalBox* HelpRequestBox;//[Offset: 0x218, Size: 0x8]
	HorizontalBox* OrdersBox;//[Offset: 0x220, Size: 0x8]
	VerticalBox* SocialBox;//[Offset: 0x228, Size: 0x8]
	HorizontalBox* RequestStrikeBox;//[Offset: 0x230, Size: 0x8]
	WW3CREntity* HelpBaseEntity;//[Offset: 0x238, Size: 0x8]
	WW3CREntity* StrikeBaseEntity;//[Offset: 0x240, Size: 0x8]
	WW3CREntity* OrderBaseEntity;//[Offset: 0x248, Size: 0x8]
	WW3CREntity* SocialBaseEntity;//[Offset: 0x250, Size: 0x8]
	Widget* RotationWidget;//[Offset: 0x258, Size: 0x8]
	Image* SmallCircle;//[Offset: 0x260, Size: 0x8]
	Image* BigCircle;//[Offset: 0x268, Size: 0x8]
	Image* LineImage;//[Offset: 0x270, Size: 0x8]
	Image* HoverMouseBAckground;//[Offset: 0x278, Size: 0x8]
	class WW3CommoRoseConfig* CommoRoseConfig;//[Offset: 0x280, Size: 0x8]

--------------------------------
Class: WW3CREntity.UserWidget.Widget.Visual.Object
	WW3CommoRose* EntityOwner;//[Offset: 0x208, Size: 0x8]
	Vector2D EntityShiftPoint;//[Offset: 0x210, Size: 0x8]
	WW3KeyTooltip* EntityKey;//[Offset: 0x230, Size: 0x8]
	MultiLineEditableText* EntityText;//[Offset: 0x238, Size: 0x8]
	Image* EntityBackground;//[Offset: 0x240, Size: 0x8]
	Image* FrontDot;//[Offset: 0x248, Size: 0x8]
	Image* RearDot;//[Offset: 0x250, Size: 0x8]
	Image* EntityFrame;//[Offset: 0x258, Size: 0x8]
	SizeBox* CollisionArea;//[Offset: 0x260, Size: 0x8]
	bool bIsBaseEntity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	Image* CurrentDot;//[Offset: 0x270, Size: 0x8]

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 0x1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x118, Size: 0x1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x118, Size: 0x1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x118, Size: 0x1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x118, Size: 0x1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x118, Size: 0x1]
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x118, Size: 0x1]
	float WidthOverride;//[Offset: 0x11c, Size: 0x4]
	float HeightOverride;//[Offset: 0x120, Size: 0x4]
	float MinDesiredWidth;//[Offset: 0x124, Size: 0x4]
	float MinDesiredHeight;//[Offset: 0x128, Size: 0x4]
	float MaxDesiredWidth;//[Offset: 0x12c, Size: 0x4]
	float MaxDesiredHeight;//[Offset: 0x130, Size: 0x4]
	float MaxAspectRatio;//[Offset: 0x134, Size: 0x4]
	void SetWidthOverride(float InWidthOverride);// 0x1d0f3c0
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x1d0e6a0
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x1d0e620
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x1d0e5a0
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x1d0e520
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x1d0e4a0
	void SetHeightOverride(float InHeightOverride);// 0x1d0e200
	void ClearWidthOverride();// 0x1d0ce50
	void ClearMinDesiredWidth();// 0x1d0ce30
	void ClearMinDesiredHeight();// 0x1d0ce10
	void ClearMaxDesiredWidth();// 0x1d0cdf0
	void ClearMaxDesiredHeight();// 0x1d0cdd0
	void ClearMaxAspectRatio();// 0x1d0cdb0
	void ClearHeightOverride();// 0x1d0cd90

--------------------------------
Class: WW3CommoRoseConfig.Object
	class WW3CREntity* StrikeEntitiesTemplate;//[Offset: 0x28, Size: 0x8]
	class WW3CREntity* SocialEntitiesTemplate;//[Offset: 0x30, Size: 0x8]
	class WW3CREntity* HelpEntitiesTemplate;//[Offset: 0x38, Size: 0x8]
	class WW3CRCapturePointEntity* OrdersEntitiesTemplate;//[Offset: 0x40, Size: 0x8]
	class WW3StrikeEntityConfig[] StrikeEntitiesConfigs;//[Offset: 0x48, Size: 0x10]
	class WW3SocialEntityConfig[] SocialEntitiesConfigs;//[Offset: 0x58, Size: 0x10]
	class WW3HelpEntityConfig[] HelpEntitiesConfigs;//[Offset: 0x68, Size: 0x10]
	class WW3OrdersEntityConfig[] OrdersEntitiesConfigs;//[Offset: 0x78, Size: 0x10]
	FText StrikeBaseEntityText;//[Offset: 0x88, Size: 0x18]
	FText SocialBaseEntityText;//[Offset: 0xa0, Size: 0x18]
	FText HelpBaseEntityText;//[Offset: 0xb8, Size: 0x18]
	FText SquadLeaderOrdersBaseEntityText;//[Offset: 0xd0, Size: 0x18]
	FText SquadMemberOrdersBaseEntityText;//[Offset: 0xe8, Size: 0x18]
	float BaseEntitiesFadeOpacity;//[Offset: 0x100, Size: 0x4]
	class WW3CommoRoseDesignLibrary* EntitiesDesign;//[Offset: 0x108, Size: 0x8]

--------------------------------
Class: WW3CRCapturePointEntity.WW3CREntity.UserWidget.Widget.Visual.Object
	WW3CapturePointMark* CapturepointWidget;//[Offset: 0x280, Size: 0x8]

--------------------------------
Class: WW3CapturePointMark.UserWidget.Widget.Visual.Object
	WW3CaptureAreaComponent* CaptureAreaOwner;//[Offset: 0x208, Size: 0x8]
	DominationSummaryScreenCapturePointMarkerData StaticData;//[Offset: 0x210, Size: 0xb8]
	MaterialInstanceDynamic* MarkerDynamicMaterial;//[Offset: 0x2c8, Size: 0x8]
	Image* CapturePointIcon;//[Offset: 0x2d0, Size: 0x8]
	Image* UpArrow;//[Offset: 0x2d8, Size: 0x8]
	Image* DownArrow;//[Offset: 0x2e0, Size: 0x8]
	TextBlock* RemainingScoreText;//[Offset: 0x2e8, Size: 0x8]
	WW3TicketManager* TicketManager;//[Offset: 0x2f0, Size: 0x8]
	WW3DynamicGameRulesManager* DynamicGameRulesManager;//[Offset: 0x310, Size: 0x8]
	void OnUpperArrowVisibilityChanged(bool bNewVisibility);// 0x1395e00
	void OnMarkerUpdated();// 0xf5c2c0
	void OnLowerArrowVisibilityChanged(bool bNewVisibility);// 0x1395e00
	void GetCapturePointMarkerPercentage(WW3CaptureAreaComponent* InCapturePoint, float ReturnValue);// 0xf5c160

--------------------------------
Class: DominationSummaryScreenCapturePointMarkerData
	LinearColor FirstCaptureAreaMarkerColor;//[Offset: 0x0, Size: 0x10]
	LinearColor FirstCaptureAreaProgressColor;//[Offset: 0x10, Size: 0x10]
	float FirstCaptureAreaPercentageProgress;//[Offset: 0x20, Size: 0x4]
	SoftObjectPath FirstCaptureAreaMarkerTexturePath;//[Offset: 0x28, Size: 0x18]
	SoftObjectPath FirstCaptureAreaIconTexturePath;//[Offset: 0x40, Size: 0x18]
	enum FirstCaptureAreaCapturePointAsEnum;//[Offset: 0x58, Size: 0x1]
	int8 FirstCaptureAreaTeam;//[Offset: 0x59, Size: 0x1]
	LinearColor SecondCaptureAreaMarkerColor;//[Offset: 0x5c, Size: 0x10]
	LinearColor SecondCaptureAreaProgressColor;//[Offset: 0x6c, Size: 0x10]
	float SecondCaptureAreaPercentageProgress;//[Offset: 0x7c, Size: 0x4]
	SoftObjectPath SecondCaptureAreaMarkerTexturePath;//[Offset: 0x80, Size: 0x18]
	SoftObjectPath SecondCaptureAreaIconTexturePath;//[Offset: 0x98, Size: 0x18]
	enum SecondCaptureAreaCapturePointAsEnum;//[Offset: 0xb0, Size: 0x1]
	int8 SecondCaptureAreaTeam;//[Offset: 0xb1, Size: 0x1]

--------------------------------
Class: WW3TicketManager.Actor.Object
	WW3CapturePointData[] CapturePointsData;//[Offset: 0x330, Size: 0x10]
	int PersistentCapturePoints;//[Offset: 0x340, Size: 0x4]
	WW3CapturePointData[] AwaitingCapturePoints;//[Offset: 0x360, Size: 0x10]
	WW3CapturePoint*[] VisibleCapturePoints;//[Offset: 0x370, Size: 0x10]
	bool bAllPointsShowsRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	byte AwaitingPointsToEnableAtOnce;//[Offset: 0x381, Size: 0x1]
	int8 HiddenPointsToEnableNew;//[Offset: 0x382, Size: 0x1]
	byte CapturePointsEnabledOnStart;//[Offset: 0x383, Size: 0x1]
	float ExtraTimeOnPointHidden;//[Offset: 0x384, Size: 0x4]
	WW3GameMode* CurrentGameMode;//[Offset: 0x388, Size: 0x8]
	AkAudioEvent* ScoreLeftNotificationAudio;//[Offset: 0x398, Size: 0x8]
	WW3AudioSingleton* AudioSingleton;//[Offset: 0x3a0, Size: 0x8]
	WW3AkComponent* BarkAkComponent;//[Offset: 0x3a8, Size: 0x8]
	void Multicast_CPVisibilityChangedNotification(WW3CapturePoint* CapturePoint, bool bJustEnabled);// 0x10b0b20
	void CollectAllCapturePoints();// 0x10b0780

--------------------------------
Class: WW3CapturePointData
	WW3CapturePoint* CapturePoint;//[Offset: 0x0, Size: 0x8]
	WW3CapturePoint*[] Blacklist;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WW3GameMode.GameMode.GameModeBase.Info.Actor.Object
	WW3GameModeData DefaultDynamicRules;//[Offset: 0x418, Size: 0x170]
	WW3UserGameplaySettings GameplaySettings;//[Offset: 0x588, Size: 0x670]
	class WW3ScoreManager* ScoreManagerClass;//[Offset: 0xbf8, Size: 0x8]
	class WW3StrikesManager* StrikesManagerClass;//[Offset: 0xc00, Size: 0x8]
	bool bIgnoreBattleZoneWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc08, Size: 0x1]
	WW3FriendlyFireSettings FriendlyFireSettings;//[Offset: 0xc0c, Size: 0xc]
	WW3VehiclesSettings VehiclesSettings;//[Offset: 0xc18, Size: 0x1]
	class WW3PlayerRole[] PlayerRoles;//[Offset: 0xc20, Size: 0x10]
	class WW3InventoryItem[] AdditionalGameModeItems;//[Offset: 0xc30, Size: 0x10]
	float RagdollTime;//[Offset: 0xc40, Size: 0x4]
	byte SquadLimit;//[Offset: 0xc44, Size: 0x1]
	enum GameModeEnum;//[Offset: 0xc45, Size: 0x1]
	int DefaultMinPlayersAmountPerTeam;//[Offset: 0xc48, Size: 0x4]
	int DefaultMaxPlayersAmountPerTeam;//[Offset: 0xc4c, Size: 0x4]
	bool bIgnoreMinPlayersAmountPerTeamInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc50, Size: 0x1]
	float WaitingOnKillScreenTime;//[Offset: 0xc54, Size: 0x4]
	float HideViewOnKillScreenDelay;//[Offset: 0xc58, Size: 0x4]
	float WaitingForPlayerTime;//[Offset: 0xc5c, Size: 0x4]
	float SummaryScreenTime;//[Offset: 0xc60, Size: 0x4]
	bool bSkipSpectatorMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc64, Size: 0x1]
	bool bSkipWarmupOnPte;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc65, Size: 0x1]
	int WarmupTime;//[Offset: 0xc68, Size: 0x4]
	int RoundTime;//[Offset: 0xc6c, Size: 0x4]
	int TimeBetweenMatches;//[Offset: 0xc70, Size: 0x4]
	float DamageSelfScale;//[Offset: 0xc74, Size: 0x4]
	bool bNoTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc78, Size: 0x1]
	bool bAutoKillScreenSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc79, Size: 0x1]
	int XpForSwitchingTeam;//[Offset: 0xc7c, Size: 0x4]
	int TeamsPlayerDisproportionToSwitchToLosingTeam;//[Offset: 0xc80, Size: 0x4]
	int TeamsPlayerDisproportionToSwitchToWinningTeams;//[Offset: 0xc84, Size: 0x4]
	float AfterSuppressionOnPlayerSpawnDelay;//[Offset: 0xc88, Size: 0x4]
	float AfterSquadMateSpawnDelay;//[Offset: 0xc8c, Size: 0x4]
	float AfterJammedSpawnDelay;//[Offset: 0xc90, Size: 0x4]
	float AfterShotOnPlayerSpawnDelay;//[Offset: 0xc94, Size: 0x4]
	float InCombatSpawnEnemyPlayerDistance;//[Offset: 0xc98, Size: 0x4]
	float InCombatSpawnExplosiveGrenadeDistance;//[Offset: 0xc9c, Size: 0x4]
	<WW3MapModeWidgetActionSettings,None(None)> GameplayMapWidgetsSettings;//[Offset: 0xca0, Size: 0x50]
	WW3ScoreManager* ScoreManager;//[Offset: 0xcf0, Size: 0x8]
	WW3CentralRadioRouter* CentralRadioRouter;//[Offset: 0xcf8, Size: 0x8]
	WW3PoolManager* PoolManager;//[Offset: 0xd00, Size: 0x8]
	WW3GlobalSatelliteSupportSystem* GSSS;//[Offset: 0xd08, Size: 0x8]
	WW3GameState* GameStatePointer;//[Offset: 0xd30, Size: 0x8]
	float SlomoValueWhileLastKill;//[Offset: 0xd38, Size: 0x4]
	float SlomoTimeWhileLastKill;//[Offset: 0xd3c, Size: 0x4]
	float DelayTimeOfDeployMapDisplayAfterMatchEnd;//[Offset: 0xd40, Size: 0x4]
	class Pawn* BotPawnClass;//[Offset: 0xd48, Size: 0x8]
	class WW3DeadPlayerActorMarker* DeadPlayerActorMarkerClass;//[Offset: 0xd50, Size: 0x8]
	WW3RespawnRequestBase*[] PendingRespawnRequests;//[Offset: 0xd58, Size: 0x10]
	WW3RespawnRequestCharacter*[] PendingCharacterRespawnRequests;//[Offset: 0xd68, Size: 0x10]
	int MaxNumberOfProcessedRespawnRequestsPerFrame;//[Offset: 0xd78, Size: 0x4]
	WW3StrikesManager* StrikesManager;//[Offset: 0xd90, Size: 0x8]
	WW3BaseProtection* BaseProtectionComponent;//[Offset: 0xd98, Size: 0x8]
	byte BadServerPerformanceWarningThreshold;//[Offset: 0xda5, Size: 0x1]
	byte BadServerPerformanceSevereThreshold;//[Offset: 0xda6, Size: 0x1]
	float AutoDeployTimerDuration;//[Offset: 0xdec, Size: 0x4]
	WW3TDMSpawnSystem* TDMSpawnSystem;//[Offset: 0xe70, Size: 0x8]
	void CanSpawnStrike(class Actor StrikeActor, int8 OwnerTeam, bool ReturnValue);// 0xfc2860

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x3d0, Size: 0x8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d8, Size: 0x1]
	int NumSpectators;//[Offset: 0x3dc, Size: 0x4]
	int NumPlayers;//[Offset: 0x3e0, Size: 0x4]
	int NumBots;//[Offset: 0x3e4, Size: 0x4]
	float MinRespawnDelay;//[Offset: 0x3e8, Size: 0x4]
	int NumTravellingPlayers;//[Offset: 0x3ec, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x3f0, Size: 0x8]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x3f8, Size: 0x10]
	bool bShouldRestartPlayerAfterMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	float InactivePlayerStateLifeSpan;//[Offset: 0x40c, Size: 0x4]
	int MaxInactivePlayers;//[Offset: 0x410, Size: 0x4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1]
	void StartMatch();// 0x24de4e0
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x24dda60
	void Say(FString Msg);// 0x24dd9c0
	void RestartGame();// 0xf50270
	void ReadyToStartMatch(bool ReturnValue);// 0x24dd860
	void ReadyToEndMatch(bool ReturnValue);// 0x24dd830
	void K2_OnSetMatchState(FName NewState);// 0x1395e00
	void IsMatchInProgress(bool ReturnValue);// 0x24dd780
	void HasMatchEnded(bool ReturnValue);// 0x24dd750
	void GetMatchState(FName ReturnValue);// 0x24dd730
	void EndMatch();// 0x24dd710
	void AbortMatch();// 0x24dd2f0

--------------------------------
Class: WW3GameModeData
	WW3GameModeData_Revive Revive;//[Offset: 0x0, Size: 0x70]
	bool bAutoRegenAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool bPostDeathCameraEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool bSpectatorEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool bTppOpticsVehicleEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool bHUDEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	bool bLastKillShowcaseEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1]
	enum bInitialLoadoutSelectionUponEnteringRule;//[Offset: 0x76, Size: 0x1]
	bool bShouldStartSpectatorOnEnteringDuringWarmup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77, Size: 0x1]
	bool bShouldStartSpectatorOnEnteringDuringMatchInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	int RoundsToWin;//[Offset: 0x7c, Size: 0x4]
	float AddTeamScoreMultiplier;//[Offset: 0x80, Size: 0x4]
	WW3GameModeData_SquadSpawn SquadSpawn;//[Offset: 0x84, Size: 0x5]
	bool bCanSpawnOnCapturePoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	WW3GameModeData_Strikes strikes;//[Offset: 0x90, Size: 0x60]
	WW3CPRoleCapturing RoleCapturingData;//[Offset: 0xf0, Size: 0x3]
	<float,None(None)> TicketManagerSetup;//[Offset: 0xf8, Size: 0x50]
	WW3GameModeData_DogTag DogTag;//[Offset: 0x148, Size: 0x10]
	bool bReviveSupported;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	bool bSpectatorSupported;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]
	bool bRoundsSupported;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a, Size: 0x1]
	bool bUseTicketManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b, Size: 0x1]
	WW3InventoryOverride[] InventoryLevelArray;//[Offset: 0x160, Size: 0x10]

--------------------------------
Class: WW3GameModeData_Revive
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bKnockdownEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bFatalKnockdownEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bKnockdownDamageEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bKnockdownSideArmEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bKillReasonCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	int Time;//[Offset: 0x8, Size: 0x4]
	int Timeout;//[Offset: 0xc, Size: 0x4]
	int SingleLifeCooldown;//[Offset: 0x10, Size: 0x4]
	float TimeoutDecreaseWhileMoving;//[Offset: 0x14, Size: 0x4]
	int ComingHelpTimeout;//[Offset: 0x18, Size: 0x4]
	bool bSquadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bShouldPauseBleedingOnRevive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	float ShowPlayersMaxDistance;//[Offset: 0x20, Size: 0x4]
	byte KnockdownHealth;//[Offset: 0x24, Size: 0x1]
	byte AfterReviveHealth;//[Offset: 0x25, Size: 0x1]
	int ShowPlayersMaxCount;//[Offset: 0x28, Size: 0x4]
	int GiveUpButtonHoldDuration;//[Offset: 0x2c, Size: 0x4]
	enum[] InstantKillDamageTypes;//[Offset: 0x30, Size: 0x10]
	class WW3DamageType[] InstantKillDamageTypeClasses;//[Offset: 0x40, Size: 0x10]
	class WW3DamageType[] NonInstantKillDamageTypeClassesWhitelist;//[Offset: 0x50, Size: 0x10]
	enum[] DamageTypesAllowedWhileKnockdownDamageDisabled;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: WW3GameModeData_SquadSpawn
	bool bCanSpawnOnSquadMatesAsSquadMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bCanSpawnOnSquadLeaderAsSquadMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bCanSpawnOnSquadMatesAsLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bAllowedForFirstTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bAllowedForSecondTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: WW3GameModeData_Strikes
	bool bStrikesAvailableInGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int[] StrikesSlotsAvailableInGameMode;//[Offset: 0x8, Size: 0x10]
	bool bCombatFightingVehiclesAvailableInGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float StrikePointsMultiplier;//[Offset: 0x1c, Size: 0x4]
	enum[] DisabledScoreStrikes;//[Offset: 0x20, Size: 0x10]
	int CrateDropsScoreRequired;//[Offset: 0x30, Size: 0x4]
	FString CrateDropActorNameOverride_East;//[Offset: 0x38, Size: 0x10]
	FString CrateDropActorNameOverride_West;//[Offset: 0x48, Size: 0x10]
	bool bClearStrikePointsWhenPlayerRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: WW3CPRoleCapturing
	bool bCPRoleCapturing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte DefendingTeam;//[Offset: 0x1, Size: 0x1]
	byte AttackingTeam;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: WW3GameModeData_DogTag
	bool bUseDogTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bAddScoreOnPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bAddXpOnPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bAddStrikePointsOnPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bIsOnlyTeamScoreSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bCanOwnerPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	float TeamScoreOnEnemyDogTagPickUp;//[Offset: 0x8, Size: 0x4]
	float TeamScoreOnAllyDogTagPickUp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WW3InventoryOverride
	uint16 PrimaryWeaponId;//[Offset: 0x0, Size: 0x2]
	uint16[] PrimaryWeaponAttachmentsIds;//[Offset: 0x8, Size: 0x10]
	uint16 PrimaryGadgetId;//[Offset: 0x18, Size: 0x2]
	WW3SkinInfo PrimaryWeaponSkinInfo;//[Offset: 0x20, Size: 0x28]
	uint16 SecondaryWeaponId;//[Offset: 0x48, Size: 0x2]
	uint16[] SecondaryWeaponAttachmentsIds;//[Offset: 0x50, Size: 0x10]
	uint16 SecondaryGadgetId;//[Offset: 0x60, Size: 0x2]
	WW3SkinInfo SecondaryWeaponSkinInfo;//[Offset: 0x68, Size: 0x28]

--------------------------------
Class: WW3SkinInfo
	uint16 MainId;//[Offset: 0x0, Size: 0x2]
	uint16[] AttachmentsIds;//[Offset: 0x8, Size: 0x10]
	byte[] ItemTypes;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: WW3UserGameplaySettings
	enum GameLanguage;//[Offset: 0x0, Size: 0x1]
	WW3FloatWithRange HudOpacity;//[Offset: 0x8, Size: 0x28]
	WW3FloatWithRange MapOpacity;//[Offset: 0x30, Size: 0x28]
	WW3FloatWithRange HudResolutionScale;//[Offset: 0x58, Size: 0x28]
	bool HudEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool KillfeedEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	bool ContextOrdersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]
	bool GameplayTipsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83, Size: 0x1]
	bool ChatEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool PointsPanelEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	bool CompasEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1]
	bool MatchStatusEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87, Size: 0x1]
	bool SquadListEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	enum PlayerStatusesEnabled;//[Offset: 0x89, Size: 0x1]
	enum InventoryStatusesEnabled;//[Offset: 0x8a, Size: 0x1]
	enum StrikesPanelEnabled;//[Offset: 0x8b, Size: 0x1]
	bool ScoreFeedbackEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	bool InteractionTooltipsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d, Size: 0x1]
	bool RepairKitStatusEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e, Size: 0x1]
	bool WarningsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f, Size: 0x1]
	bool EnemyArmorHitStatusEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	bool SoldierPoseStatusEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]
	bool SoldierWeightStatusEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92, Size: 0x1]
	bool KeyBindingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93, Size: 0x1]
	bool KilledEnemiesBannersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool HealthPointsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
	bool HealthPanelEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1]
	bool QuickMapSquadInfoEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 0x1]
	bool VehicleFPPMapEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool VehicleFPPTipsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	bool VehicleFPPStrikeWidgetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1]
	bool VehicleTPPMapEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b, Size: 0x1]
	bool VehicleTPPTipsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	bool VehicleTPPStrikeWidgetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 0x1]
	enum VehicleFPPHealthStatusEnabled;//[Offset: 0x9e, Size: 0x1]
	enum VehicleFPPAmmoTypesEnabled;//[Offset: 0x9f, Size: 0x1]
	enum VehicleFPPCurrentAmmoEnabled;//[Offset: 0xa0, Size: 0x1]
	enum VehicleFPPAdditionalEquipmentEnabled;//[Offset: 0xa1, Size: 0x1]
	enum VehicleTPPHealthStatusEnabled;//[Offset: 0xa2, Size: 0x1]
	enum VehicleTPPAmmoTypesEnabled;//[Offset: 0xa3, Size: 0x1]
	enum VehicleTPPCurrentAmmoEnabled;//[Offset: 0xa4, Size: 0x1]
	enum VehicleTPPAdditionalEquipmentEnabled;//[Offset: 0xa5, Size: 0x1]
	bool CommoRoseStrikesOptionAvaliable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6, Size: 0x1]
	bool CommoRoseOrdersOptionAvaliable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa7, Size: 0x1]
	WW3Color TeamMembersColor;//[Offset: 0xa8, Size: 0x20]
	WW3Color SquadMembersColor;//[Offset: 0xc8, Size: 0x20]
	WW3Color SquadLeaderColor;//[Offset: 0xe8, Size: 0x20]
	WW3Color PartyMembersColor;//[Offset: 0x108, Size: 0x20]
	WW3Color EnemiesColor;//[Offset: 0x128, Size: 0x20]
	WW3Color NeutralColor;//[Offset: 0x148, Size: 0x20]
	WW3Color OwnerColor;//[Offset: 0x168, Size: 0x20]
	WW3Color HUDInfantryColor;//[Offset: 0x188, Size: 0x20]
	bool MinimapEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	WW3FloatWithRange MinimapOpacitySoldierValue;//[Offset: 0x1b0, Size: 0x28]
	WW3FloatWithRange MinimapScaleSoldierValue;//[Offset: 0x1d8, Size: 0x28]
	bool MinimapRotationSoldierEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	WW3FloatWithRange MinimapDistanceSoldierValue;//[Offset: 0x208, Size: 0x28]
	WW3FloatWithRange CrosshairOpacitySoldierValue;//[Offset: 0x230, Size: 0x28]
	WW3Color CrosshairSoldierColor;//[Offset: 0x258, Size: 0x20]
	bool CrosshairSoldierEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	WW3FloatWithRange MinimapOpacityVehicleValue;//[Offset: 0x280, Size: 0x28]
	WW3FloatWithRange MinimapScaleVehicleValue;//[Offset: 0x2a8, Size: 0x28]
	bool MinimapRotationVehicleEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	WW3FloatWithRange MinimapDistanceAirVehicleValue;//[Offset: 0x2d8, Size: 0x28]
	WW3FloatWithRange MinimapDistanceLandVehicleValue;//[Offset: 0x300, Size: 0x28]
	WW3FloatWithRange CrosshairOpacityVehicleValue;//[Offset: 0x328, Size: 0x28]
	WW3Color CrosshairVehicleColor;//[Offset: 0x350, Size: 0x20]
	bool CrosshairVehicleEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	WW3Color HUDVehicleColor;//[Offset: 0x374, Size: 0x20]
	bool TppOpticsVehicleEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 0x1]
	bool SpecialOpticsVehicleEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 0x1]
	bool NetworkStatusIndicatorsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396, Size: 0x1]
	bool HighPingIndicatorsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x397, Size: 0x1]
	WW3FloatWithRange HitMarkerOpacityValue;//[Offset: 0x398, Size: 0x28]
	WW3Color HitMarkerColorKill;//[Offset: 0x3c0, Size: 0x20]
	WW3Color HitMarkerColorKillingHeadshot;//[Offset: 0x3e0, Size: 0x20]
	WW3Color HitMarkerColorGeneralHit;//[Offset: 0x400, Size: 0x20]
	WW3Color HitMarkerColorHead;//[Offset: 0x420, Size: 0x20]
	WW3Color HitMarkerColorHeadwear;//[Offset: 0x440, Size: 0x20]
	WW3Color HitMarkerColorArmorPlate;//[Offset: 0x460, Size: 0x20]
	WW3Color HitMarkerColorVehicleDestroyed;//[Offset: 0x480, Size: 0x20]
	WW3Color HitMarkerColorVehicleGeneralHit;//[Offset: 0x4a0, Size: 0x20]
	WW3Color HitMarkerColorVehicleOpticsHit;//[Offset: 0x4c0, Size: 0x20]
	WW3Color HitMarkerColorVehicleArmorHit;//[Offset: 0x4e0, Size: 0x20]
	WW3Color HitMarkerColorVehicleRcwsHit;//[Offset: 0x500, Size: 0x20]
	WW3Color HitMarkerColorVehicleApsHit;//[Offset: 0x520, Size: 0x20]
	bool AnyMarkersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
	bool NamesMarkersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x541, Size: 0x1]
	bool DistancesMarkersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x542, Size: 0x1]
	WW3FloatWithRange MarkerOpacityMaximalValue;//[Offset: 0x548, Size: 0x28]
	WW3FloatWithRange MarkerWorldScaleValue;//[Offset: 0x570, Size: 0x28]
	WW3FloatWithRange CameraShakeValue;//[Offset: 0x598, Size: 0x28]
	WW3FloatWithRange CameraShakeVehicleValue;//[Offset: 0x5c0, Size: 0x28]
	WW3FloatWithRange CameraLagVehicleValue;//[Offset: 0x5e8, Size: 0x28]
	WW3FloatWithRange HeadRollValue;//[Offset: 0x610, Size: 0x28]
	WW3FloatWithRange EnemyNoiseEffectsValue;//[Offset: 0x638, Size: 0x28]
	bool FpsCounterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x660, Size: 0x1]
	enum UnitWeight;//[Offset: 0x661, Size: 0x1]
	enum UnitSpeed;//[Offset: 0x662, Size: 0x1]
	enum UnitDistance;//[Offset: 0x663, Size: 0x1]
	enum VehicleLockMode;//[Offset: 0x664, Size: 0x1]
	int CurrentGameplaySettingsVersion;//[Offset: 0x668, Size: 0x4]
	byte HUDElementSettingMaxValue;//[Offset: 0x66c, Size: 0x1]

--------------------------------
Class: WW3FloatWithRange
	float Value;//[Offset: 0x0, Size: 0x4]
	float UnscaledValue;//[Offset: 0x4, Size: 0x4]
	float MinValue;//[Offset: 0x8, Size: 0x4]
	float UnscaledMinValue;//[Offset: 0xc, Size: 0x4]
	float MaxValue;//[Offset: 0x10, Size: 0x4]
	float UnscaledMaxValue;//[Offset: 0x14, Size: 0x4]
	float[] PredefinedValues;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: WW3Color
	LinearColor Color;//[Offset: 0x0, Size: 0x10]
	LinearColor DefaultColor;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: WW3ScoreManager.Object
	<WW3ScoreSettings,None(None)> Scores;//[Offset: 0x28, Size: 0x50]
	<WW3CollectiveScoreSettings,None(None)> CollectiveScores;//[Offset: 0x78, Size: 0x50]
	<float,None(None)> KillerTypeMultipliers;//[Offset: 0xc8, Size: 0x50]

--------------------------------
Class: WW3ScoreSettings
	<float,None(None)> ScoreCategoryMultipliersMap;//[Offset: 0x0, Size: 0x50]
	FText ScoreDisplayName;//[Offset: 0x50, Size: 0x18]
	float PointsAmount;//[Offset: 0x68, Size: 0x4]
	bool bIsScorePerSecond;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	bool bShouldBeDisplayed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1]
	LinearColor ScoreAmountColor;//[Offset: 0x70, Size: 0x10]
	LinearColor ScoreNameColor;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: WW3CollectiveScoreSettings
	<float,None(None)> ScoreCategoryMultipliersMap;//[Offset: 0x0, Size: 0x50]
	FText ScoreDisplayName;//[Offset: 0x50, Size: 0x18]
	<float,None(None)> PointsAmount;//[Offset: 0x68, Size: 0x50]
	bool bIsScorePerSecond;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	bool bShouldBeDisplayed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	LinearColor ScoreAmountColor;//[Offset: 0xbc, Size: 0x10]
	LinearColor ScoreNameColor;//[Offset: 0xcc, Size: 0x10]

--------------------------------
Class: WW3StrikesManager.Object
	WW3StrikeLimits[] StrikesLimits;//[Offset: 0x28, Size: 0x10]
	void GetStrikesOfTeamAmount(World* World, class Actor StrikeClasses, int8 OwnerTeam, int ReturnValue);// 0x109d1d0
	void GetStrikeLimit(class Actor StrikeClass, int ReturnValue);// 0x109d140
	void CanSpawnStrike(World* World, class Actor StrikeActor, int8 OwnerTeam, bool ReturnValue);// 0x109cf80

--------------------------------
Class: WW3StrikeLimits
	class Actor* Class;//[Offset: 0x0, Size: 0x8]
	int AmountLimitPerTeam;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WW3FriendlyFireSettings
	bool bFriendlyFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bMinesFriendlyFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float ExplosionDamageReductionMultiplier;//[Offset: 0x4, Size: 0x4]
	float BulletDamageReductionMultiplier;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WW3VehiclesSettings
	bool bNoThirdPersonCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: WW3PlayerRole.Object
	enum Role;//[Offset: 0x28, Size: 0x1]
	FText RoleName;//[Offset: 0x30, Size: 0x18]
	Texture2D* RoleIcon;//[Offset: 0x48, Size: 0x8]
	LinearColor RoleColor;//[Offset: 0x50, Size: 0x10]
	<float,None(None)> ScoreMultiplier;//[Offset: 0x60, Size: 0x50]

--------------------------------
Class: WW3MapModeWidgetActionSettings
	<WW3UIActionSettings,None(None)> MapModeWidgetActionSettings;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: WW3UIActionSettings
	<bool,None(None)> UIActionSettings;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: WW3CentralRadioRouter.ActorComponent.Object
	<enum,None(None)> RadioCommandSingleCaptureAreaCapturedFromString;//[Offset: 0xf0, Size: 0x50]
	<enum,None(None)> RadioCommandSingleCaptureAreaLostFromString;//[Offset: 0x140, Size: 0x50]

--------------------------------
Class: WW3GlobalSatelliteSupportSystem.Actor.Object
	WW3RadarBase*[] ActiveRadars;//[Offset: 0x330, Size: 0x10]
	void SpawnRadar(class WW3RadarBase RadarToSpawn, Actor* RadarOwner, Pawn* InstigatorObject, Vector Location, WW3RadarBase* ReturnValue);// 0xfd5760

--------------------------------
Class: WW3RadarBase.WW3ActorStrike.Actor.Object
	float RadarDuration;//[Offset: 0x3e8, Size: 0x4]
	WW3SatelliteObject*[] ObjectsUnderRadarInfluence;//[Offset: 0x3f0, Size: 0x10]
	WW3SatelliteObject*[] ObjectsUnderRadarInfluenceHistory;//[Offset: 0x400, Size: 0x10]
	bool bHasStartedReplicated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x410, Size: 0x1]
	bool bWantToFlyInBeforeStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	void OnRep_HasStartedReplicated();// 0x105b5b0
	void OnRadarDurationFinished();// 0x105b590
	void OnRadarArrivalDurationFinished();// 0x105b570

--------------------------------
Class: WW3ActorStrike.Actor.Object
	class WW3VehicleData* StrikeData;//[Offset: 0x3a0, Size: 0x8]
	WW3StrikeData* StrikeDataPointer;//[Offset: 0x3a8, Size: 0x8]
	WW3StatisticsTrackingComponent* StatsTrackingComponent;//[Offset: 0x3b0, Size: 0x8]
	int8 StrikeTeam;//[Offset: 0x3b8, Size: 0x1]
	WW3VehicleAttachmentManager* AttachmentManager;//[Offset: 0x3c0, Size: 0x8]
	WW3NoiseManagerActor* NoiseManagerActor;//[Offset: 0x3c8, Size: 0x8]
	int16 HealthGeneral;//[Offset: 0x3d2, Size: 0x2]
	int HealthMax;//[Offset: 0x3d4, Size: 0x4]
	bool bAllowFriendlyFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1]
	void OnRep_StrikeTeam();// 0x45e170
	void OnRep_HealthGeneral(int16 Value);// 0xf26a10

--------------------------------
Class: WW3SatelliteObject.Actor.Object
	float LastPositionUpdateTime;//[Offset: 0x330, Size: 0x4]
	float ImpulseVisibilityDuration;//[Offset: 0x338, Size: 0x4]
	bool bShouldSkipOwnerReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 0x1]
	class WW3SatelliteObjectMapDrawingComp* SatelliteObjectMapDrawingCompClass;//[Offset: 0x340, Size: 0x8]
	WW3PlayerController* LocalPC;//[Offset: 0x348, Size: 0x8]
	enum DisplayType;//[Offset: 0x350, Size: 0x1]
	Vector2D MapPosition;//[Offset: 0x354, Size: 0x8]
	float WorldZPosition;//[Offset: 0x35c, Size: 0x4]
	float MapRotation;//[Offset: 0x360, Size: 0x4]
	WW3TeamSatelliteObjectReplication*[] TeamObjectReplicator;//[Offset: 0x368, Size: 0x10]
	WW3SatelliteObjectMapDrawingComp* SatelliteObjectMapDrawingComp;//[Offset: 0x388, Size: 0x8]

--------------------------------
Class: WW3SatelliteObjectMapDrawingComp.WW3MapDrawingComponent.ActorComponent.Object
	WW3SatelliteObject* CachedSatelliteObject;//[Offset: 0x238, Size: 0x8]
	<Texture*,None(None)> TexturesToDraw;//[Offset: 0x240, Size: 0x50]
	void GetTextureColor(LinearColor OutColor);// 0x107ea40

--------------------------------
Class: WW3TeamSatelliteObjectReplication.Object
	byte DisplayTypes;//[Offset: 0x28, Size: 0x1]
	WW3SatelliteObject* Owner;//[Offset: 0x30, Size: 0x8]
	<int,None(None)> DisplayTypesCounter;//[Offset: 0x58, Size: 0x50]
	UInt64Property ReplicatedSatelliteObjectTransform;//[Size: 0x8]
	int ReplicatedSatelliteObjectZPosition;//[Offset: 0xb0, Size: 0x4]
	byte ReplicatedSatelliteObjectDisplayType;//[Offset: 0xb4, Size: 0x1]
	AdditionalDisplayTypeSyncInfo[] DisplayTypesForPC;//[Offset: 0xb8, Size: 0x10]
	WW3ReplicatedRadarImpulseInfo RadarImpulseInfo;//[Offset: 0xc8, Size: 0xc]
	void OnRep_ReplicatedSatelliteObjectTransform();// 0x1079b80
	void OnRep_ReplicatedSatelliteObjectDisplayType(byte PrevDisplayType);// 0x1079b00
	void OnRep_ReplicatedRadarImpulseInfo(WW3ReplicatedRadarImpulseInfo InPrevRadarImpulseInfo);// 0x1079a50
	void OnRep_DisplayTypesForPC(AdditionalDisplayTypeSyncInfo[] DisplayTypesForPCPrev);// 0x1079980

--------------------------------
Class: AdditionalDisplayTypeSyncInfo
	byte ReplicatedSatelliteObjectDisplayType;//[Offset: 0x0, Size: 0x1]
	WW3PlayerController* PlayerController;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WW3ReplicatedRadarImpulseInfo
	UInt32Property RadarImpulseCounter;//[Size: 0x4]
	float ImpulseVisibilityDuration;//[Offset: 0x4, Size: 0x4]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: WW3VehicleAttachmentManager.WW3AttachmentManager.ActorComponent.Object
	WW3VehicleAttachmentSlot[] AvailableSlots;//[Offset: 0x490, Size: 0x10]
	WW3VehicleAttachmentAPS*[] APSsAttachments;//[Offset: 0x4a0, Size: 0x10]
	WW3VehicleAttachmentOptics*[] OpticsAttachments;//[Offset: 0x4b0, Size: 0x10]
	WW3VehicleAttachmentTower*[] TowerAttachments;//[Offset: 0x4c0, Size: 0x10]
	WW3VA_Equipment* EquipmentAttachment;//[Offset: 0x4d0, Size: 0x8]
	WW3Vehicle* OwnerVehicle;//[Offset: 0x4d8, Size: 0x8]

--------------------------------
Class: WW3VehicleAttachmentSlot.WW3AttachmentSlot
	enum AttachmentSlotType;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: WW3VehicleAttachmentOptics.WW3VehicleAttachment.WW3AttachmentDamageable.WW3Attachment.Object
	enum OpticsType;//[Offset: 0x550, Size: 0x1]
	Vector StartSpringArmLocation;//[Offset: 0x554, Size: 0xc]
	Rotator StartSpringArmRotation;//[Offset: 0x560, Size: 0xc]
	SpringArmComponent* AttachmentSpringArm;//[Offset: 0x570, Size: 0x8]
	WW3VehicleCameraComponent* AttachmentCamera;//[Offset: 0x578, Size: 0x8]
	float CameraFieldOfView;//[Offset: 0x580, Size: 0x4]
	float CameraFieldOfViewWithZoom;//[Offset: 0x584, Size: 0x4]
	SceneComponent* ComponentSettingYaw;//[Offset: 0x588, Size: 0x8]
	SceneComponent* ComponentSettingPitch;//[Offset: 0x590, Size: 0x8]
	float MaxViewOffsetYaw;//[Offset: 0x598, Size: 0x4]
	float BaseRotationOffsetYaw;//[Offset: 0x59c, Size: 0x4]
	MaterialInterface* CameraPostProcess;//[Offset: 0x5a0, Size: 0x8]
	MaterialInterface* CockpitCameraPostProcess;//[Offset: 0x5a8, Size: 0x8]
	MaterialInterface* PostProcessWhileDamaged;//[Offset: 0x5b0, Size: 0x28]
	float PostProcessWhileDamagedBlendMin;//[Offset: 0x5d8, Size: 0x4]
	float PostProcessWhileDamagedBlendMax;//[Offset: 0x5dc, Size: 0x4]
	float PostProcessWhileDamagedTimeMin;//[Offset: 0x5e0, Size: 0x4]
	float PostProcessWhileDamagedTimeMax;//[Offset: 0x5e4, Size: 0x4]
	FName LensFlareSocketName;//[Offset: 0x5e8, Size: 0x8]
	StaticMesh* LensFlare;//[Offset: 0x5f0, Size: 0x28]
	Vector LensFlareOffset;//[Offset: 0x618, Size: 0xc]
	MaterialInstanceDynamic* CameraPostProcessMID;//[Offset: 0x628, Size: 0x8]
	MaterialInstanceDynamic* CockpitCameraPostProcessMID;//[Offset: 0x630, Size: 0x8]
	float PaniniD;//[Offset: 0x638, Size: 0x4]
	float PaniniS;//[Offset: 0x63c, Size: 0x4]
	class WW3VehicleWidget* SpecificCrosshairWidget;//[Offset: 0x640, Size: 0x8]
	bool bRotateMeshOnlyWithCannon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 0x1]
	Pawn* Owner;//[Offset: 0x658, Size: 0x8]
	StaticMeshComponent* LensFlareComponent;//[Offset: 0x660, Size: 0x8]
	void UnsubscribeFromEvents();// 0x10e9780
	void SubscribeToEvents();// 0x10e9760

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x248, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x24c, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x258, Size: 0xc]
	float ProbeSize;//[Offset: 0x264, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x268, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26c, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x26c, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x26c, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x26c, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x26c, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x26c, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x26c, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26d, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x270, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x274, Size: 0x4]
	float CameraLagMaxTimeStep;//[Offset: 0x278, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x27c, Size: 0x4]
	void IsCollisionFixApplied(bool ReturnValue);// 0x25b33a0
	void GetUnfixedCameraPosition(Vector ReturnValue);// 0x25b3360
	void GetTargetRotation(Rotator ReturnValue);// 0x25b3320

--------------------------------
Class: WW3VehicleCameraComponent.WW3CameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	bool bForceInteriorSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b8, Size: 0x1]
	enum TurretAndCannonRotationMethod;//[Offset: 0x7b9, Size: 0x1]
	enum OpticsType;//[Offset: 0x7ba, Size: 0x1]
	enum bAutoRegisterAs;//[Offset: 0x7bb, Size: 0x1]
	bool bSkipSelectionCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7bc, Size: 0x1]
	bool bAlignCameraRotationOnChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7bd, Size: 0x1]
	float YawViewRange;//[Offset: 0x7c0, Size: 0x4]
	bool bRotateCameraWithBodyYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c4, Size: 0x1]
	bool bRotateCameraWithBodyPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c5, Size: 0x1]
	bool bIgnoreUserSettingsFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c6, Size: 0x1]
	float FieldOfViewWithZoom;//[Offset: 0x7c8, Size: 0x4]
	float PaniniD;//[Offset: 0x7cc, Size: 0x4]
	float PaniniS;//[Offset: 0x7d0, Size: 0x4]
	class WW3VehicleWidget* SpecificCrosshairWidget;//[Offset: 0x7d8, Size: 0x8]
	WW3Vehicle* OwnerVehicle;//[Offset: 0x7e0, Size: 0x8]
	PlayerController* Controller;//[Offset: 0x7f0, Size: 0x8]
	WW3VehicleData* VehicleDataPointer;//[Offset: 0x7f8, Size: 0x8]

--------------------------------
Class: WW3VehicleAttachmentTower.WW3VehicleAttachment_Armor.WW3VehicleAttachment.WW3AttachmentDamageable.WW3Attachment.Object
	MaterialInterface* PostProcessWhileDamaged;//[Offset: 0x5c8, Size: 0x8]
	float PostProcessWhileDamagedBlend;//[Offset: 0x5d0, Size: 0x4]
	MaterialInterface* PostProcessWhileDestroyed;//[Offset: 0x5d8, Size: 0x8]
	float PostProcessWhileDestroyedBlend;//[Offset: 0x5e0, Size: 0x4]
	MaterialInterface* PostProcessOnHit;//[Offset: 0x5e8, Size: 0x8]
	float PostProcessOnHitBlend;//[Offset: 0x5f0, Size: 0x4]
	class WW3VehicleTower* TowerToSpawn;//[Offset: 0x5f8, Size: 0x8]
	StaticMeshComponent* GunAttachmentMesh;//[Offset: 0x600, Size: 0x8]
	bool bWasPawnInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	MaterialInstanceDynamic* CameraOnDamagePostProcessMID;//[Offset: 0x610, Size: 0x8]
	void CameraDamagedEffects();// 0x10ebf00

--------------------------------
Class: WW3VehicleAttachment_Armor.WW3VehicleAttachment.WW3AttachmentDamageable.WW3Attachment.Object
	int MaskIndex;//[Offset: 0x550, Size: 0x4]
	<WW3TankImpactZoneInfo,None(None)> ArmorAdditionalZoneInfos;//[Offset: 0x560, Size: 0x50]
	void ApplyVisibilityMask();// 0x10e9250

--------------------------------
Class: WW3VehicleTower.WW3PawnStrike.Pawn.Actor.Object
	Vector StartSpringArmLocation;//[Offset: 0x658, Size: 0xc]
	Rotator StartSpringArmRotation;//[Offset: 0x664, Size: 0xc]
	float MinPitchRotation;//[Offset: 0x670, Size: 0x4]
	float MaxPitchRotation;//[Offset: 0x674, Size: 0x4]
	float MaxRecoilZ;//[Offset: 0x678, Size: 0x4]
	float RecoilZInterpSpeedToMax;//[Offset: 0x67c, Size: 0x4]
	float RecoilZInterpSpeedToNone;//[Offset: 0x680, Size: 0x4]
	float RecoilZPerShoot;//[Offset: 0x684, Size: 0x4]
	float CurrentRecoilZ;//[Offset: 0x688, Size: 0x4]
	float TargetRecoilZ;//[Offset: 0x68c, Size: 0x4]
	float RotationAngleWhenPatroling;//[Offset: 0x690, Size: 0x4]
	float MarkSphereRadius;//[Offset: 0x694, Size: 0x4]
	WW3VehicleCameraManager* VehicleCameraManager;//[Offset: 0x698, Size: 0x8]
	BillboardComponent* RootBillboard;//[Offset: 0x6a0, Size: 0x8]
	SpringArmComponent* SpringArm;//[Offset: 0x6a8, Size: 0x8]
	WW3VehicleCameraComponent* CameraTPP;//[Offset: 0x6b0, Size: 0x8]
	SpringArmComponent* SpringArmFPP;//[Offset: 0x6b8, Size: 0x8]
	WW3VehicleCameraComponent* CameraFPP;//[Offset: 0x6c0, Size: 0x8]
	WW3FireTypeManagerTower* FireTypeManager;//[Offset: 0x6c8, Size: 0x8]
	WW3VehicleAttachmentTower* AttachmentTowerBase;//[Offset: 0x6d0, Size: 0x8]
	WW3Character* UserPawnReference;//[Offset: 0x6d8, Size: 0x8]
	WW3SeatPossessable* SeatReference;//[Offset: 0x6e0, Size: 0x8]
	WW3VehicleCameraComponent*[] Cameras;//[Offset: 0x6e8, Size: 0x10]
	MeshComponent* GunMesh;//[Offset: 0x6f8, Size: 0x8]
	float CameraYReplicated;//[Offset: 0x700, Size: 0x4]
	float CameraZReplicated;//[Offset: 0x704, Size: 0x4]
	float MainFreeCameraFOVDecreaseWhileZoom;//[Offset: 0x708, Size: 0x4]
	bool bZoomActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70c, Size: 0x1]
	bool bFollowCameraReplicated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x714, Size: 0x1]
	bool bAdditiveRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x714, Size: 0x1]
	bool bSeatTaken;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x714, Size: 0x1]
	bool bWasFireTypeManagerInitialized;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x714, Size: 0x1]
	byte SelectedCamera;//[Offset: 0x715, Size: 0x1]
	WW3FireType* ClClipAmmoSynchronizationResponse_FireType;//[Offset: 0x740, Size: 0x8]
	class WW3AmmoType* ClClipAmmoSynchronizationResponse_AmmoType;//[Offset: 0x748, Size: 0x8]
	WW3PlayerState* ClClipAmmoSynchronizationResponse_Owner;//[Offset: 0x750, Size: 0x8]
	WW3PlayerState* SvClientClipAmmoSynchronizationRequestOwner;//[Offset: 0x758, Size: 0x8]
	void Server_SetCameraZ(float Value);// 0x10f7c60
	void Server_SetCameraY(float Value);// 0x10f7bb0
	void Server_RequestClipAmmoSynchronization(WW3PlayerState* InRequestOwner);// 0x10f7af0
	void Server_OwnerWantsToReload();// 0x10f7aa0
	void Server_OnMark(Actor* HitActor, Vector_NetQuantize ClientHitPosition, Vector_NetQuantize ClientMarkDirection, Vector_NetQuantize ClientMarkOrigin);// 0x10f78c0
	void Server_NextSeat(WW3PlayerController* UserController);// 0x10f7800
	void Server_ForceCameraZ(float Value);// 0x10f7750
	void Server_ForceCameraY(float Value);// 0x10f76a0
	void Server_Exit(float ViewYawRotation);// 0x10f75f0
	void Server_EnterSeat(WW3PlayerController* UserController, int NewSeatNumber);// 0x10f74f0
	void OnRep_UserPawnReference();// 0xff8ec0
	void OnDriverChanged();// 0xf639e0
	void NotifyOnStartFire();// 0x10f74b0
	void GetVehicleOwner(WW3Vehicle* ReturnValue);// 0x10f7480
	void Client_MarkedSuccessfully(Actor* MarkedActor);// 0x10f73c0
	void Client_ClipAmmoSynchronizationResponse(WW3PlayerState* InRequestOwner, WW3FireType* InCurrentFireType, int InClipAmmoAmount, class WW3AmmoType InClipAmmoType);// 0x10f7280

--------------------------------
Class: WW3VehicleCameraManager.ActorComponent.Object
	WW3SeatCameras[] VehicleSeatsCameras;//[Offset: 0xf0, Size: 0x10]
	WW3VehicleCameraComponent* CurrentlyActiveCamera;//[Offset: 0x100, Size: 0x8]
	WW3VehicleCameraComponent* GunnerZoomCamera;//[Offset: 0x108, Size: 0x8]

--------------------------------
Class: WW3SeatCameras
	enum CameraOwner;//[Offset: 0x0, Size: 0x1]
	WW3VehicleCameraComponent*[] SeatCameras;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WW3FireTypeManagerTower.WW3FireTypeManager.ActorComponent.Object
	SceneComponent* MuzzleOwner;//[Offset: 0x2c0, Size: 0x8]
	WW3VehicleTower* TowerPawn;//[Offset: 0x2c8, Size: 0x8]
	void Server_ChangeAmmoToType(enum AmmoType);// 0xfb3950
	void Server_ChangeAmmoToIndex(byte AmmoIndex);// 0xfb38a0

--------------------------------
Class: WW3SeatPossessable.WW3SeatBase.SceneComponent.ActorComponent.Object
	interface class None* SeatProxy;//[Offset: 0x388, Size: 0x10]
	BlendSpace1D* SteeringBlendspace;//[Offset: 0x398, Size: 0x8]
	bool bTakeAimOffsetsFromVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]

--------------------------------
Class: WW3SeatBase.SceneComponent.ActorComponent.Object
	bool bForceInteriorSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	int SeatNumber;//[Offset: 0x268, Size: 0x4]
	bool bPawnVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 0x1]
	bool bUsePawnMeshTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 0x1]
	FName CollisionName;//[Offset: 0x270, Size: 0x8]
	bool bSeatRemote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	bool bSeatExitable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 0x1]
	float PawnCapsuleHalfHeight;//[Offset: 0x27c, Size: 0x4]
	bool bUseYawCameraLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	float CameraYawLimit;//[Offset: 0x284, Size: 0x4]
	bool bUsePitchCameraLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	Vector2D CameraPitchDefaultLimits;//[Offset: 0x28c, Size: 0x8]
	bool bPlaySeatAimOffsetForMeshFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 0x1]
	enum SeatType;//[Offset: 0x295, Size: 0x1]
	Vector2D LeanMapLeftRight;//[Offset: 0x298, Size: 0x8]
	Vector2D LeanMapFrontBack;//[Offset: 0x2a0, Size: 0x8]
	AnimSequence* SeatIdle;//[Offset: 0x2a8, Size: 0x8]
	BlendSpace* LeanAccelerationBlendspace;//[Offset: 0x2b0, Size: 0x8]
	BlendSpace1D* PassengerTurnBlendspace;//[Offset: 0x2b8, Size: 0x8]
	BlendSpace1D* PassengerTurnBlendspaceFPP;//[Offset: 0x2c0, Size: 0x8]
	Vector2D[] PassengerTurnConfig;//[Offset: 0x2c8, Size: 0x10]
	Transform SeatRelativeTransform;//[Offset: 0x310, Size: 0x30]
	SceneComponent* ParentComponent;//[Offset: 0x340, Size: 0x8]
	FName ParentSocketName;//[Offset: 0x348, Size: 0x8]
	WW3PlayerController* User;//[Offset: 0x350, Size: 0x8]
	WW3PlayerState* PlayerState;//[Offset: 0x358, Size: 0x8]
	WW3PlayerController* UserThatReservedThisSeat;//[Offset: 0x360, Size: 0x8]
	Pawn* UserPawn;//[Offset: 0x368, Size: 0x8]
	WW3SeatReplicationInfo SeatReplication;//[Offset: 0x370, Size: 0x10]
	bool bIsReserved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	void OnRep_SeatReplication();// 0x1014e80

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]

--------------------------------
Class: WW3SeatReplicationInfo
	Pawn* UserPawn;//[Offset: 0x0, Size: 0x8]
	bool bSwitchingSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	int16 ServerTimeStamp;//[Offset: 0xa, Size: 0x2]

--------------------------------
Class: WW3TankImpactZoneInfo
	enum Type;//[Offset: 0x0, Size: 0x1]
	WW3DamageModifier[] DamageModifiers;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WW3DamageModifier
	class WW3DamageType* DamageType;//[Offset: 0x0, Size: 0x8]
	float DamageModifier;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WW3VA_Equipment.WW3VehicleAttachment.WW3AttachmentDamageable.WW3Attachment.Object
	FString DisplayName;//[Offset: 0x550, Size: 0x10]

--------------------------------
Class: WW3DeadPlayerActorMarker.Actor.Object
	WW3DeadPlayerMarker* PlayerDeadMarkerComponent;//[Offset: 0x330, Size: 0x8]
	float Distance;//[Offset: 0x338, Size: 0x4]
	float ShowTime;//[Offset: 0x33c, Size: 0x4]
	float ChangeVisibilityAnimationDuration;//[Offset: 0x340, Size: 0x4]
	float OpacityDuringADS;//[Offset: 0x344, Size: 0x4]

--------------------------------
Class: WW3DeadPlayerMarker.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WW3RespawnRequestCharacter.WW3RespawnRequestBase.Object
	WW3SatelliteObject_Character* SatelliteObjectCharacter;//[Offset: 0x38, Size: 0x8]
	WW3PlayerState* OwnerPlayerState;//[Offset: 0x68, Size: 0x8]
	WW3PlayerState* TargetPlayerState;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: WW3SatelliteObject_Character.WW3SatelliteObject.Actor.Object
	WW3PlayerState* OwnerPlayerState;//[Offset: 0x3b8, Size: 0x8]
	WW3Character* CharacterOwner;//[Offset: 0x3c0, Size: 0x8]
	enum SeatState;//[Offset: 0x3c8, Size: 0x1]
	void OnRep_SeatState();// 0x107ee60
	void OnRep_PlayerState();// 0x107ee20

--------------------------------
Class: WW3BaseProtection.ActorComponent.Object
	class DamageType[] DamageTypeBlackList;//[Offset: 0xf0, Size: 0x10]
	<float,None(None)> DamageTypeReduction;//[Offset: 0x100, Size: 0x50]
	float GenericDamageReduction;//[Offset: 0x150, Size: 0x4]

--------------------------------
Class: WW3TDMSpawnSystem.Actor.Object
	BillboardComponent* SpriteComponent;//[Offset: 0x330, Size: 0x8]
	int PerAllyScore;//[Offset: 0x338, Size: 0x4]
	int PerEnemyScore;//[Offset: 0x33c, Size: 0x4]
	int PerClaymoreScore;//[Offset: 0x340, Size: 0x4]
	enum UsableInGameModeAlias;//[Offset: 0x344, Size: 0x1]
	enum[] ShouldExistInGameAliases;//[Offset: 0x348, Size: 0x10]
	class WW3TDMSpawnPointGroup* SpawnPointGroupTemplate;//[Offset: 0x358, Size: 0x8]
	class WW3TDMSpawnPoint* SpawnPointTemplate;//[Offset: 0x360, Size: 0x8]
	WW3TDMSpawnPointGroup*[] SpawnPointGroups;//[Offset: 0x368, Size: 0x10]
	WW3TDMSpawnPointGroup* PreferredSpawnPointGroupOverride;//[Offset: 0x378, Size: 0x8]
	WW3TDMSpawnSystemTrigger*[] Triggers;//[Offset: 0x380, Size: 0x10]
	WW3TDMSpawnPoint*[] UngroupedPoints;//[Offset: 0x390, Size: 0x10]
	WW3TDMSpawnPoint*[] AllSpawnPoints;//[Offset: 0x3a0, Size: 0x10]
	WW3LevelStartPoint* DefaultLevelStartPoint;//[Offset: 0x3b0, Size: 0x8]
	WW3TDMSpawnPointGroup* PreferredGroups;//[Offset: 0x3b8, Size: 0x8]
	void UpdateNearbySpawnPoints();// 0x5d2c60
	void GenerateFromOldSystem();// 0x5d2c60
	void ClearOldSystem();// 0x5d2c60
	void ClearNearbySpawnPoints();// 0x5d2c60
	void ClearData();// 0x5d2c60

--------------------------------
Class: WW3TDMSpawnPointGroup.Actor.Object
	WW3TDMSpawnSystem* SpawnSystem;//[Offset: 0x330, Size: 0x8]
	BillboardComponent* SpriteComponent;//[Offset: 0x338, Size: 0x8]
	WW3TDMSpawnPoint*[] SpawnPoints;//[Offset: 0x340, Size: 0x10]
	WW3TDMSpawnPointGroup* OppositeGroup;//[Offset: 0x350, Size: 0x8]

--------------------------------
Class: WW3TDMSpawnPoint.PlayerStart.NavigationObjectBase.Actor.Object
	WW3TDMSpawnSystem* SpawnSystem;//[Offset: 0x360, Size: 0x8]
	WW3TDMSpawnPointGroup* PointGroup;//[Offset: 0x368, Size: 0x8]
	WW3TDMSpawnPoint*[] AllNearbySpawnPoints;//[Offset: 0x370, Size: 0x10]
	WW3TDMSpawnPoint* PreviousNearbySpawnPoint;//[Offset: 0x380, Size: 0x8]
	WW3TDMSpawnPoint* NextNearbySpawnPoint;//[Offset: 0x388, Size: 0x8]
	float EnemyDetectionCylinderTopOffset;//[Offset: 0x390, Size: 0x4]
	float EnemyDetectionCylinderBottomOffset;//[Offset: 0x394, Size: 0x4]
	float EnemyDetectionCylinderRadius;//[Offset: 0x398, Size: 0x4]
	float AllyDetectionCylinderTopOffset;//[Offset: 0x39c, Size: 0x4]
	float AllyDetectionCylinderBottomOffset;//[Offset: 0x3a0, Size: 0x4]
	float AllyDetectionCylinderRadius;//[Offset: 0x3a4, Size: 0x4]
	WW3TDMSpawnSystemTrigger*[] Triggers;//[Offset: 0x3a8, Size: 0x10]
	WW3Gadget_Claymore_Plantable*[] Claymores;//[Offset: 0x3b8, Size: 0x10]
	WW3PlayerState*[] Team0DirectPlayerStates;//[Offset: 0x3c8, Size: 0x10]
	WW3PlayerState*[] Team1DirectPlayerStates;//[Offset: 0x3d8, Size: 0x10]
	WW3PlayerState*[] Team0IndirectPlayerStates;//[Offset: 0x3e8, Size: 0x10]
	WW3PlayerState*[] Team1IndirectPlayerStates;//[Offset: 0x3f8, Size: 0x10]

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x358, Size: 0x8]

--------------------------------
Class: WW3TDMSpawnSystemTrigger.TriggerVolume.Volume.Brush.Actor.Object
	WW3TDMSpawnPoint*[] SpawnPoints;//[Offset: 0x368, Size: 0x10]
	WW3PlayerState*[] PlayerStatesInTrigger;//[Offset: 0x378, Size: 0x10]
	void OnPawnEndOverlap(Actor* InOverlappedActor, Actor* InOtherActor);// 0x10ad960
	void OnPawnBeginOverlap(Actor* InOverlappedActor, Actor* InOtherActor);// 0x10ad8a0

--------------------------------
Class: TriggerVolume.Volume.Brush.Actor.Object

--------------------------------
Class: WW3Gadget_Claymore_Plantable.WW3Gadget_Mine.WW3GadgetThrowable.Actor.Object
	class WW3GadgetClaymoreSounds* Sounds;//[Offset: 0x560, Size: 0x28]
	WW3ActorPool* ActorPoolReference;//[Offset: 0x588, Size: 0x8]
	ParticleSystemComponent* Laser1Component;//[Offset: 0x590, Size: 0x8]
	float DetectionXOffset;//[Offset: 0x598, Size: 0x4]
	float DetectionDistance;//[Offset: 0x59c, Size: 0x4]
	float DetectionMinDotProduct;//[Offset: 0x5a0, Size: 0x4]
	float MaxTriggerPingDelay;//[Offset: 0x5a4, Size: 0x4]
	float MinTriggerPingDelay;//[Offset: 0x5a8, Size: 0x4]
	float NextTriggerPingDelayMultiplier;//[Offset: 0x5ac, Size: 0x4]
	float ExplosionDelay;//[Offset: 0x5b0, Size: 0x4]
	WW3GadgetClaymoreSounds* SoundsData;//[Offset: 0x5b8, Size: 0x8]
	WW3AkComponent* SoundComponent;//[Offset: 0x5d0, Size: 0x8]
	bool bIsTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 0x1]
	WW3TDMSpawnPoint*[] InfluencedStartPoints;//[Offset: 0x5e0, Size: 0x10]
	void OnRep_IsTriggered(bool InPrevIsTriggered);// 0xfbbc20

--------------------------------
Class: WW3Gadget_Mine.WW3GadgetThrowable.Actor.Object
	WW3MineDetonationConfig MineDetonationConfig;//[Offset: 0x4d8, Size: 0x78]
	bool bExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	void Multicast_SpawnExplosionEffect();// 0xf26860

--------------------------------
Class: WW3GadgetClaymoreSounds.Object
	AkAudioEvent* PingSound;//[Offset: 0x28, Size: 0x8]
	AkAudioEvent* TriggerSound;//[Offset: 0x30, Size: 0x8]
	AkAudioEvent* PlantSound;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: WW3MineDetonationConfig
	class ShooterExplosionEffect* ExplosionTemplate;//[Offset: 0x0, Size: 0x8]
	ExplosiveDamageParams ExplosionParams;//[Offset: 0x8, Size: 0x40]
	enum ProjectilePenetratingType;//[Offset: 0x48, Size: 0x1]
	float PointDamageForEveryoneInRadius;//[Offset: 0x4c, Size: 0x4]
	class DamageType* PointDamageTypeForEveryoneInRadius;//[Offset: 0x50, Size: 0x8]
	WW3DamageModifier[] DamageTypeModifiers;//[Offset: 0x58, Size: 0x10]
	float MinDamageToDetonate;//[Offset: 0x68, Size: 0x4]
	bool bEnemyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	float EnemyDetectionDeltaTime;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: WW3LevelStartPoint.Actor.Object

--------------------------------
Class: WW3DynamicGameRulesManager.ActorComponent.Object
	WW3GameModeDebugManager* GameModeDebugManager;//[Offset: 0xf0, Size: 0x8]
	WW3GameModeData GameModeData;//[Offset: 0xf8, Size: 0x170]
	WW3TicketManager* TicketManager;//[Offset: 0x268, Size: 0x8]
	void SetCPRoleCapturing(bool bEnabled);// 0xfaa4c0
	void Multicast_ToggleStatisticForScoreboard(enum InStatistic, bool bTurnOn);// 0xfa9ef0
	void Multicast_SetHUDEnabled(bool bEnabled);// 0xfa9e60

--------------------------------
Class: WW3GameModeDebugManager.ActorComponent.Object
	WW3DynamicGameRulesManager* GameModeManagerPointer;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: WW3StrikeEntityConfig.WW3CommoRoseEntityConfig.Object
	enum StrikeType;//[Offset: 0x70, Size: 0x1]
	class WW3StrikeUseObjective* StrikeUseObjective;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: WW3CommoRoseEntityConfig.Object
	FText EntityName;//[Offset: 0x28, Size: 0x18]
	enum RadioCommandToPlay;//[Offset: 0x40, Size: 0x2]
	enum BarkToPlay;//[Offset: 0x42, Size: 0x2]
	AnimMontage* TauntToPlay;//[Offset: 0x48, Size: 0x8]
	FText ChatMessage;//[Offset: 0x50, Size: 0x18]
	enum UsedChatChannel;//[Offset: 0x68, Size: 0x1]

--------------------------------
Class: WW3StrikeUseObjective.WW3GameObjective.Object
	enum RequestedStrikeType;//[Offset: 0x140, Size: 0x1]

--------------------------------
Class: WW3SocialEntityConfig.WW3CommoRoseEntityConfig.Object

--------------------------------
Class: WW3HelpEntityConfig.WW3CommoRoseEntityConfig.Object

--------------------------------
Class: WW3OrdersEntityConfig.WW3CommoRoseEntityConfig.Object
	WW3CaptureAreaComponent* CapturePoint;//[Offset: 0x70, Size: 0x8]
	enum CapturePointAsEnum;//[Offset: 0x78, Size: 0x1]
	enum AdditionalBarktoPlay;//[Offset: 0x7a, Size: 0x2]

--------------------------------
Class: WW3CommoRoseDesignLibrary.Object
	LinearColor BorderUnMarkedColor;//[Offset: 0x28, Size: 0x10]
	LinearColor BorderMarkedColor;//[Offset: 0x38, Size: 0x10]
	LinearColor BackgroundSelectedColor;//[Offset: 0x48, Size: 0x10]
	LinearColor BackgroundUnSelectedColor;//[Offset: 0x58, Size: 0x10]
	float FadeAnimTimeStepInTime;//[Offset: 0x68, Size: 0x4]
	float MoveAnimStepInTime;//[Offset: 0x6c, Size: 0x4]
	float MainWidgetMoveStepInTime;//[Offset: 0x70, Size: 0x4]
	float GradientPositionMoveStepInTime;//[Offset: 0x74, Size: 0x4]
	float EntityAnimSpacing;//[Offset: 0x78, Size: 0x4]
	float EntityAnimSpacingStep;//[Offset: 0x7c, Size: 0x4]
	float CammoRoseHideAnimOpacityChange;//[Offset: 0x80, Size: 0x4]
	float HorizontalKeyShift;//[Offset: 0x84, Size: 0x4]
	float VerticalKeyShift;//[Offset: 0x88, Size: 0x4]
	float GradientHeight;//[Offset: 0x8c, Size: 0x4]
	float DownAndLeftGradientPlacement;//[Offset: 0x90, Size: 0x4]
	float UpAndRightGradientPlacement;//[Offset: 0x94, Size: 0x4]
	float BaseEntitieGradeintShift;//[Offset: 0x98, Size: 0x4]
	float EntitieGradeintShift;//[Offset: 0x9c, Size: 0x4]
	float OnMarkedDotsBaseOpacity;//[Offset: 0xa0, Size: 0x4]
	float OnUnMarkedDotsBaseOpacity;//[Offset: 0xa4, Size: 0x4]
	float OnMarkedDotsOpacity;//[Offset: 0xa8, Size: 0x4]
	float OnUnMarkedDotsOpacity;//[Offset: 0xac, Size: 0x4]
	float BaseEntityBackgroundOpacity;//[Offset: 0xb0, Size: 0x4]
	float EntityBackgroundOpacity;//[Offset: 0xb4, Size: 0x4]
	float BaseEntityBorderOpacity;//[Offset: 0xb8, Size: 0x4]
	float EntityBorderOpacity;//[Offset: 0xbc, Size: 0x4]
	float EntitySpacing;//[Offset: 0xc0, Size: 0x4]
	float EntityPlaceShift;//[Offset: 0xc4, Size: 0x4]

--------------------------------
Class: WW3BadServerPerformanceIcon.WW3NotificationIcon.UserWidget.Widget.Visual.Object

--------------------------------
Class: WW3NotificationIcon.UserWidget.Widget.Visual.Object
	Image* MainIcon;//[Offset: 0x208, Size: 0x8]
	LinearColor WarningColor;//[Offset: 0x214, Size: 0x10]
	LinearColor SevereColor;//[Offset: 0x224, Size: 0x10]
	float WarningTreshold;//[Offset: 0x234, Size: 0x4]
	float SevereTreshold;//[Offset: 0x238, Size: 0x4]

--------------------------------
Class: WW3HeadBobCache.ActorComponent.Object
	CurveFloat* ForwardCurve;//[Offset: 0xf0, Size: 0x8]
	CurveFloat* BackwardCurve;//[Offset: 0xf8, Size: 0x8]
	float Amplitude;//[Offset: 0x100, Size: 0x4]
	float MaxRange;//[Offset: 0x104, Size: 0x4]
	float MovingOnRotationScale;//[Offset: 0x108, Size: 0x4]
	Vector2D MovingAxisMultiplier;//[Offset: 0x10c, Size: 0x8]
	float InterpolationSpeed;//[Offset: 0x114, Size: 0x4]
	float IgnoredAngles;//[Offset: 0x118, Size: 0x4]
	float AccelerationChangeAnimationScale;//[Offset: 0x11c, Size: 0x4]
	float AccelerationChangeInterpolationSpeed;//[Offset: 0x120, Size: 0x4]
	float AccelerationIgnoreLimit;//[Offset: 0x124, Size: 0x4]

--------------------------------
Class: WW3ScoreListWidget.UserWidget.Widget.Visual.Object
	FText DefendersTeamName;//[Offset: 0x220, Size: 0x18]
	FText AttackersTeamName;//[Offset: 0x238, Size: 0x18]
	class WW3ScoreEntityWidget* HeaderClass;//[Offset: 0x250, Size: 0x8]
	class WW3ScoreEntityWidget* PlayerEntityClass;//[Offset: 0x258, Size: 0x8]
	class WW3ScoreSquadWidget* SquadEntityClass;//[Offset: 0x260, Size: 0x8]
	Border* TeamAHeaderContainer;//[Offset: 0x268, Size: 0x8]
	Border* TeamBHeaderContainer;//[Offset: 0x270, Size: 0x8]
	TextBlock* TeamANameTextBlock;//[Offset: 0x278, Size: 0x8]
	TextBlock* TeamBNameTextBlock;//[Offset: 0x280, Size: 0x8]
	Image* TeamAIcon;//[Offset: 0x288, Size: 0x8]
	Image* TeamBIcon;//[Offset: 0x290, Size: 0x8]
	TextBlock* TeamAScoreLimitTextBlock;//[Offset: 0x298, Size: 0x8]
	TextBlock* TeamBScoreLimitTextBlock;//[Offset: 0x2a0, Size: 0x8]
	ScrollBox* TeamAPlayersContainer;//[Offset: 0x2a8, Size: 0x8]
	ScrollBox* TeamBPlayersContainer;//[Offset: 0x2b0, Size: 0x8]
	WW3KeyTooltip* FocusTooltip;//[Offset: 0x2b8, Size: 0x8]
	TextBlock* ServerInfo;//[Offset: 0x2c0, Size: 0x8]
	TextBlock* TeamAPlayersAmountTextBlock;//[Offset: 0x2c8, Size: 0x8]
	TextBlock* TeamAPlayersMaxAmountTextBlock;//[Offset: 0x2d0, Size: 0x8]
	TextBlock* TeamBPlayersAmountTextBlock;//[Offset: 0x2d8, Size: 0x8]
	TextBlock* TeamBPlayersMaxAmountTextBlock;//[Offset: 0x2e0, Size: 0x8]
	TextBlock* GameModeNameTextBlock;//[Offset: 0x2e8, Size: 0x8]
	float ScoreboardRefreshSeconds;//[Offset: 0x2f0, Size: 0x4]
	DominationSummaryScreenScoreboardData StaticData;//[Offset: 0x300, Size: 0x30]
	WW3ScoreEntityWidget*[] CachedHeaderWidgets;//[Offset: 0x340, Size: 0x10]
	WW3ScoreSquadWidget*[] CachedSquadWidgets;//[Offset: 0x350, Size: 0x10]
	void GetTeamTotalScore(int Team, int ReturnValue);// 0x1082050
	void GetTeamBTotalScoreInText(FText ReturnValue);// 0x1081fd0
	void GetTeamBTotalScoreInPercent(float ReturnValue);// 0x1081fa0
	void GetTeamATotalScoreInText(FText ReturnValue);// 0x1081f20
	void GetTeamATotalScoreInPercent(float ReturnValue);// 0x1081ef0
	void GetOwnerTeam(int ReturnValue);// 0x1081e90
	void GetEnemyTeam(int ReturnValue);// 0x1081e60
	void GetCurrentDateTime(FText ReturnValue);// 0x1081de0
	void CalculateTeamsStatistics();// 0x1081dc0

--------------------------------
Class: WW3ScoreEntityWidget.WW3MarkableOption_Outline.WW3MarkableOption.WW3RMSelectableOption.WW3SelectableWidget.UserWidget.Widget.Visual.Object
	FString SubstitutionForExceedingText;//[Offset: 0x358, Size: 0x10]
	WW3SlotObject* BoundPlayerSlot;//[Offset: 0x368, Size: 0x8]
	int Number;//[Offset: 0x370, Size: 0x4]
	int SquadNumber;//[Offset: 0x374, Size: 0x4]
	int TeamNumber;//[Offset: 0x378, Size: 0x4]
	byte MaxPlayerNameLength;//[Offset: 0x37c, Size: 0x1]
	DominationSummaryScreenScoreboardEntry StaticData;//[Offset: 0x380, Size: 0x60]
	WW3TeamDeathmatchPlayerState* BoundTDMPlayerState;//[Offset: 0x3e0, Size: 0x8]
	void SetupTotalScore_External(bool bIsVisible, FText TotalScore);// 0x1395e00
	void SetupTag_External(bool bIsVisible, FText Tag);// 0x1395e00
	void SetupSpeakerIcon_External(bool bIsVisible, WW3PlayerState* BoundToPS);// 0x1395e00
	void SetupRevives_External(bool bIsVisible, FText RevivesAmount);// 0x1395e00
	void SetupRelationMarkers_External(bool bIsVisible, enum RelationToLocal);// 0x1395e00
	void SetupPlayerLevel_External(bool bIsVisible, FText PlayerLevel);// 0x1395e00
	void SetupPlayerConnection_External(bool bIsVisible);// 0x1395e00
	void SetupPlantsDefuses_External(bool bIsVisible, FText Amount);// 0x1395e00
	void SetupPing_External(bool bIsVisible, WW3SlotObject* InPlayerSlotToBound);// 0x1395e00
	void SetupPartyMemberIcon_External(bool bIsVisible, bool bIsSquadMemver, LinearColor InColor);// 0x1395e00
	void SetupOutline_External(bool bIsVisible, LinearColor Color);// 0x1395e00
	void SetupNickName_External(FText NickName);// 0x1395e00
	void SetupKills_External(bool bIsVisible, FText KillsAmount);// 0x1395e00
	void SetupHVTOwner_External(bool bIsVisible, bool bIsOwner);// 0x1395e00
	void SetupGadget_External(bool bIsVisible, Texture* GadgetTexture);// 0x1395e00
	void SetupEntityNumber_External(FText Rank);// 0x1395e00
	void SetupDogTags_External(bool bIsVisible, FText DogTagsAmount);// 0x1395e00
	void SetupDefences_External(bool bIsVisible, FText DefencesAmount);// 0x1395e00
	void SetupDeaths_External(bool bIsVisible, FText DeathsAmount);// 0x1395e00
	void SetupDeathIcon(bool bIsVisible);// 0x1395e00
	void SetupCaptures_External(bool bIsVisible, FText CapturesAmount);// 0x1395e00
	void SetupAssists_External(bool bIsVisible, FText AssistsAmount);// 0x1395e00
	void SetStaticData(DominationSummaryScreenScoreboardEntry InData, int SquadEntityNumber, int EntityNumber, int InfosBitmask);// 0x107efe0
	void SetInfoColor_External(LinearColor NewColor, enum InfoToChange);// 0x1395e00
	void SetBoundPlayerSlot(WW3SlotObject* PlayerSlot, int SquadEntityNumber, int EntityNumber, int InfosBitmask);// 0x107eea0
	void OnPlayerLifeStatusChanged(WW3PlayerState* PS);// 0x107ed60
	void IsInfoTypeVisible(enum TypeToCheck, bool ReturnValue);// 0x107eb70
	void IsBoundPlayerSquadLeader(bool ReturnValue);// 0x107eb40
	void IsBelongsToLocalPlayer(bool ReturnValue);// 0x107eb10
	void GetRelationColor(enum Relation, LinearColor ReturnValue);// 0x107e9b0
	void GetPing(FText ReturnValue);// 0x107e930

--------------------------------
Class: WW3MarkableOption_Outline.WW3MarkableOption.WW3RMSelectableOption.WW3SelectableWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: WW3MarkableOption.WW3RMSelectableOption.WW3SelectableWidget.UserWidget.Widget.Visual.Object
	void UnMark_External();// 0x1395e00
	void Mark_External();// 0x1395e00
	void IsOptionMarked(bool ReturnValue);// 0x101e600
	void GetMarkColor(LinearColor ReturnValue);// 0x101e530

--------------------------------
Class: WW3SlotObject.Object
	WW3SquadObject* Squad;//[Offset: 0x28, Size: 0x8]
	WW3PlayerState* PlayerState;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: WW3SquadObject.Object
	WW3TeamObject* Team;//[Offset: 0x88, Size: 0x8]
	WW3SlotObject*[] Slots;//[Offset: 0x90, Size: 0x10]
	WW3PlayerState* CurrentSquadLeader;//[Offset: 0xc8, Size: 0x8]

--------------------------------
Class: WW3TeamObject.Object
	byte TeamId;//[Offset: 0x28, Size: 0x1]
	WW3TeamManager* TeamManager;//[Offset: 0x30, Size: 0x8]
	WW3SquadObject*[] Squads;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: WW3TeamManager.Actor.Object
	WW3TeamObject*[] Teams;//[Offset: 0x3d8, Size: 0x10]
	WW3WarmupEntity[] WarmupEntities;//[Offset: 0x408, Size: 0x10]
	WW3ActionReplicator*[] ActionReplicators;//[Offset: 0x430, Size: 0x10]
	WW3PlayerState* LocalPlayerState;//[Offset: 0x448, Size: 0x8]

--------------------------------
Class: WW3WarmupEntity
	WW3WarmupSlot[] Slots;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WW3WarmupSlot
	WW3PlayerState* PlayerState;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WW3ActionReplicator.Actor.Object
	WW3ReplicatedAction* SvHeadAction;//[Offset: 0x330, Size: 0x8]
	WW3ReplicatedAction* SvTailAction;//[Offset: 0x338, Size: 0x8]
	WW3ReplicatedAction* ClHeadAction;//[Offset: 0x348, Size: 0x8]
	WW3ReplicatedAction* ClTailAction;//[Offset: 0x350, Size: 0x8]
	void Server_AckServerRequest();// 0xf22940
	void Server_AckActionsReceived();// 0xf228f0
	void Client_RequestResponse();// 0xf22330
	void Client_ReceivePacket(byte[] InData);// 0xf22290

--------------------------------
Class: WW3ReplicatedAction.Object
	WW3ReplicatedAction* NextAction;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: DominationSummaryScreenScoreboardEntry
	FString PlayerName;//[Offset: 0x0, Size: 0x10]
	int PlayerLevel;//[Offset: 0x10, Size: 0x4]
	int TeamId;//[Offset: 0x14, Size: 0x4]
	int Rank;//[Offset: 0x18, Size: 0x4]
	FString RoleName;//[Offset: 0x20, Size: 0x10]
	int Kills;//[Offset: 0x30, Size: 0x4]
	int Deaths;//[Offset: 0x34, Size: 0x4]
	int Assists;//[Offset: 0x38, Size: 0x4]
	int Captures;//[Offset: 0x3c, Size: 0x4]
	int Defences;//[Offset: 0x40, Size: 0x4]
	int Revives;//[Offset: 0x44, Size: 0x4]
	int DogTags;//[Offset: 0x48, Size: 0x4]
	int Defuses;//[Offset: 0x4c, Size: 0x4]
	int Plants;//[Offset: 0x50, Size: 0x4]
	int Score;//[Offset: 0x54, Size: 0x4]
	enum RelationTowardMe;//[Offset: 0x58, Size: 0x1]
	bool bIsSquadLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	int PlayerId;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: WW3TeamDeathmatchPlayerState.WW3PlayerState.WW3PlayerStateBase.ShooterPlayerState.PlayerState.Info.Actor.Object
	int PreviousRoundsNumKillsReplicated;//[Offset: 0x9c8, Size: 0x4]
	int PreviousRoundsNumDeathsReplicated;//[Offset: 0x9cc, Size: 0x4]
	int PreviousRoundsNumScoreReplicated;//[Offset: 0x9d0, Size: 0x4]
	int PreviousRoundsNumAssistsReplicated;//[Offset: 0x9d4, Size: 0x4]
	WW3TeamDeathmatchHUD* TeamDeathmatchHUD;//[Offset: 0x9d8, Size: 0x8]
	TimerHandle AutoDeployTimerHandle_T;//[Offset: 0x9e0, Size: 0x8]

--------------------------------
Class: WW3TeamDeathmatchHUD.WW3HUD.HUD.Actor.Object

--------------------------------
Class: WW3ScoreSquadWidget.UserWidget.Widget.Visual.Object
	VerticalBox* PlayersContainer;//[Offset: 0x238, Size: 0x8]
	DominationSummaryScreenScoreboardSquadEntry StaticDatInSquad;//[Offset: 0x248, Size: 0x58]
	WW3SquadObject* BoundSquad;//[Offset: 0x2a0, Size: 0x8]
	WW3ScoreEntityWidget*[] CachedPlayerWidgets;//[Offset: 0x2b0, Size: 0x10]
	void SetupTotalScore_External(bool bIsVisible, FText TotalScore);// 0x1395e00
	void SetupTag_External(bool bIsVisible);// 0x1395e00
	void SetupSquadName_External(FText NickName);// 0x1395e00
	void SetupSquadColor_External(LinearColor Color);// 0x1395e00
	void SetupRevives_External(bool bIsVisible, FText RevivesAmount);// 0x1395e00
	void SetupPlayerLevel_External(bool bIsVisible);// 0x1395e00
	void SetupPlantsDefuses_External(bool bIsVisible, FText DefusesAmount);// 0x1395e00
	void SetupPing_External(bool bIsVisible);// 0x1395e00
	void SetupPartyMember_External(bool bIsVisible);// 0x1395e00
	void SetupKills_External(bool bIsVisible, FText KillsAmount);// 0x1395e00
	void SetupHVTOwner_External(bool bIsVisible);// 0x1395e00
	void SetupGadgets_External(bool bIsVisible);// 0x1395e00
	void SetupDogTags_External(bool bIsVisible, FText DogTagsAmount);// 0x1395e00
	void SetupDefences_External(bool bIsVisible, FText DefencesAmount);// 0x1395e00
	void SetupDeaths_External(bool bIsVisible, FText DeathsAmount);// 0x1395e00
	void SetupCaptures_External(bool bIsVisible, FText CapturesAmount);// 0x1395e00
	void SetupAssists_External(bool bIsVisible);// 0x1395e00

--------------------------------
Class: DominationSummaryScreenScoreboardSquadEntry
	DominationSummaryScreenScoreboardEntry[] Entries;//[Offset: 0x0, Size: 0x10]
	int8 TeamId;//[Offset: 0x10, Size: 0x1]
	FText SquadName;//[Offset: 0x18, Size: 0x18]
	int Kills;//[Offset: 0x30, Size: 0x4]
	int Deaths;//[Offset: 0x34, Size: 0x4]
	int Captures;//[Offset: 0x38, Size: 0x4]
	int Defences;//[Offset: 0x3c, Size: 0x4]
	int Revives;//[Offset: 0x40, Size: 0x4]
	int DogTags;//[Offset: 0x44, Size: 0x4]
	int Defuses;//[Offset: 0x48, Size: 0x4]
	int Plants;//[Offset: 0x4c, Size: 0x4]
	int Score;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: DominationSummaryScreenScoreboardData
	int8 MyTeamID;//[Offset: 0x0, Size: 0x1]
	int8 MySquadID;//[Offset: 0x1, Size: 0x1]
	int Team0TotalScore;//[Offset: 0x4, Size: 0x4]
	int Team1TotalScore;//[Offset: 0x8, Size: 0x4]
	int TotalScoreLimit;//[Offset: 0xc, Size: 0x4]
	DominationSummaryScreenScoreboardSquadEntry[] LocalPlayerTeamEntries;//[Offset: 0x10, Size: 0x10]
	DominationSummaryScreenScoreboardSquadEntry[] EnemyTeamEntries;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: WW3WarmupWidget.UserWidget.Widget.Visual.Object
	WW3ThreeNumbersScrollCounter* TeamAPlayersNumber;//[Offset: 0x208, Size: 0x8]
	WW3ThreeNumbersCounter* TeamARequiredPlayersNumber;//[Offset: 0x210, Size: 0x8]
	WW3ThreeNumbersScrollCounter* TeamBPlayersNumber;//[Offset: 0x218, Size: 0x8]
	WW3ThreeNumbersCounter* TeamBRequiredPlayersNumber;//[Offset: 0x220, Size: 0x8]
	VerticalBox* WarmupVBox;//[Offset: 0x228, Size: 0x8]
	void OnEnemiesAmountIncreased();// 0x1395e00
	void OnEnemiesAmountDecreased();// 0x1395e00
	void OnAlliesAmountIncreased();// 0x1395e00
	void OnAlliesAmountDecreased();// 0x1395e00

--------------------------------
Class: WW3ThreeNumbersScrollCounter.WW3ThreeNumbersCounter.WW3UserWidgetAnimColor.WW3UserWidget.UserWidget.Widget.Visual.Object
	PanelWidget* ReplacementDigitsContainer;//[Offset: 0x368, Size: 0x8]
	CurveFloat* ReplacementDigitScaleCurve;//[Offset: 0x370, Size: 0x8]
	CurveFloat* MainDigitOpacityCurve;//[Offset: 0x378, Size: 0x8]
	CurveFloat* ReplacementDigitOpacityCurve;//[Offset: 0x380, Size: 0x8]
	float UpdateTimerRate;//[Offset: 0x388, Size: 0x4]
	float AnimationTimeModificator;//[Offset: 0x38c, Size: 0x4]
	float ScrollOffset;//[Offset: 0x390, Size: 0x4]
	int TargetNumber;//[Offset: 0x3a8, Size: 0x4]
	void SetRoughNumber(int NewNumber);// 0x10b1630

--------------------------------
Class: WW3CheatDebugInfo.UserWidget.Widget.Visual.Object
	VerticalBox* Container;//[Offset: 0x208, Size: 0x8]
	float EventVisibilityTime;//[Offset: 0x210, Size: 0x4]
	TimerHandle EventVisibilityTimer;//[Offset: 0x218, Size: 0x8]
	int[] SavedLoadout;//[Offset: 0x220, Size: 0x10]
	void OnShowMessage();// 0x1395e00
	void OnHideMessage();// 0x1395e00

--------------------------------
Class: WW3ChallengesLogWidget.UserWidget.Widget.Visual.Object
	VerticalBox* EntityContainer;//[Offset: 0x208, Size: 0x8]
	class UserWidget* AchievementClass;//[Offset: 0x210, Size: 0x8]
	class UserWidget* MasteryAchievementClass;//[Offset: 0x218, Size: 0x8]
	class UserWidget* ChallengeClass;//[Offset: 0x220, Size: 0x8]
	int NumerOfMessagesToDisplay;//[Offset: 0x228, Size: 0x4]
	WW3DeployScreenMessagesManager* MessagesManager;//[Offset: 0x230, Size: 0x8]

--------------------------------
Class: WW3DeployScreenMessagesManager.WW3MessagesManager.Object
	PanelWidget* MessagesContainer;//[Offset: 0x70, Size: 0x8]
	int SimultaneousWidgetsAmount;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: WW3MessagesManager.Object
	CachedMessage*[] CachedMessages;//[Offset: 0x30, Size: 0x10]
	CachedMessage*[] CurrentlyShownMessages;//[Offset: 0x40, Size: 0x10]
	WW3PlayerController* OwnerPlayerController;//[Offset: 0x50, Size: 0x8]
	QueuedMessage[] MessagesQueue;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: CachedMessage.Object
	TimerHandle ShowTimerHandle;//[Offset: 0x28, Size: 0x8]
	UserWidget* MessageWidget;//[Offset: 0x30, Size: 0x8]
	bool bIsAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int DisplayCounter;//[Offset: 0x3c, Size: 0x4]
	bool bIsInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: QueuedMessage
	CachedMessage* CachedMessage;//[Offset: 0x0, Size: 0x8]
	float Timesptamp;//[Offset: 0x8, Size: 0x4]
	int SequenceNumberInCurrentTick;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WW3EventsMessagesHandler.Object
	WW3PlayerController* OwnerPlayerController;//[Offset: 0x38, Size: 0x8]
	WW3OnScreenMessagesManager* OwnerMessageHandler;//[Offset: 0x40, Size: 0x8]
	class UserWidget* PromotedToSquadLeaderMessageClass;//[Offset: 0x48, Size: 0x8]
	class UserWidget* LostSquadLeaderMessageClass;//[Offset: 0x50, Size: 0x8]
	class UserWidget* KickedFromSquadMessageClass;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: WW3OnScreenMessagesManager.WW3MessagesManager.Object

--------------------------------
Class: WW3ProgressionMessagesHandler.WW3EventsMessagesHandler.Object
	class UserWidget* CheatChangeWidgetClass;//[Offset: 0x60, Size: 0x8]
	class UserWidget* CheatLoadoutExperienceWidgetClass;//[Offset: 0x68, Size: 0x8]
	class UserWidget* PlayerLevelUpWidgetClass;//[Offset: 0x70, Size: 0x8]
	class UserWidget* MasteryLevelUpWidgetClass;//[Offset: 0x78, Size: 0x8]
	class UserWidget* ItemUnlockWidgetClass;//[Offset: 0x80, Size: 0x8]
	class UserWidget* LoadoutUnlockedWidgetClass;//[Offset: 0x88, Size: 0x8]
	WW3PlayerLoadoutUIDataProvider* PlayerUIDataProvider;//[Offset: 0x90, Size: 0x8]
	bool bProgressionDebugCheatEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]

--------------------------------
Class: WW3OnScreenBannersEventsHandler.WW3EventsMessagesHandler.Object
	class UserWidget* KilledPlayerBannerClass;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: WW3BoltActionUnit.UserWidget.Widget.Visual.Object
	void SetupUnitWidget(FText InNotificationText);// 0x1395e00

--------------------------------
Class: WW3ScoreBoardInfosList
	<None(None)> ScoreToShow;//[Offset: 0x0, Size: 0x50]
	<None(None)> EnemyScoreToShow;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: WW3UserSettings.GameUserSettings.Object
	WW3UserGameplaySettings GameModeGameplaySettings;//[Offset: 0x118, Size: 0x670]
	WW3PlayerControllerBase* PC;//[Offset: 0x988, Size: 0x8]
	WW3AudioSingleton* AudioSingleton;//[Offset: 0x990, Size: 0x8]
	WW3KeyBindings* KeyBindings;//[Offset: 0x998, Size: 0x8]
	<MaterialInterface*,None(None)> IFFMaterials;//[Offset: 0x9a0, Size: 0x50]
	WW3UserVideoSettings VideoSettings;//[Offset: 0x9f0, Size: 0x2c8]
	WW3UserAudioSettings AudioSettings;//[Offset: 0xcb8, Size: 0x150]
	WW3UserGameplaySettings GameplaySettings;//[Offset: 0xe08, Size: 0x670]
	WW3UserControlsSettings ControlsSettings;//[Offset: 0x1478, Size: 0x110]
	WW3UserHubSettings HubSettings;//[Offset: 0x1588, Size: 0x6]
	WW3UserTipsDisplayCounters TipsDisplayCounters;//[Offset: 0x1590, Size: 0x50]
	WW3FrontendGamepadSettings GamepadSettings;//[Offset: 0x15e0, Size: 0x258]
	WW3FrontendKeybindings KeybindingsSettings;//[Offset: 0x1838, Size: 0x28]
	WW3HubEventsManager* HubEventsManager;//[Offset: 0x1870, Size: 0x8]
	byte CrosshairColor;//[Offset: 0x1878, Size: 0x1]
	byte MarkerHitColor;//[Offset: 0x1879, Size: 0x1]
	byte MarkerKillColor;//[Offset: 0x187a, Size: 0x1]
	byte MarkerHeadShotColor;//[Offset: 0x187b, Size: 0x1]
	byte MarkerArmororColor;//[Offset: 0x187c, Size: 0x1]
	void SetAdvancedAudioEnabledWW3(bool Value);// 0x10decb0

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	UInt32Property ResolutionSizeX;//[Size: 0x4]
	UInt32Property ResolutionSizeY;//[Size: 0x4]
	UInt32Property LastUserConfirmedResolutionSizeX;//[Size: 0x4]
	UInt32Property LastUserConfirmedResolutionSizeY;//[Size: 0x4]
	int WindowPosX;//[Offset: 0x88, Size: 0x4]
	int WindowPosY;//[Offset: 0x8c, Size: 0x4]
	int FullscreenMode;//[Offset: 0x90, Size: 0x4]
	int LastConfirmedFullscreenMode;//[Offset: 0x94, Size: 0x4]
	int PreferredFullscreenMode;//[Offset: 0x98, Size: 0x4]
	UInt32Property Version;//[Size: 0x4]
	int AudioQualityLevel;//[Offset: 0xa0, Size: 0x4]
	int LastConfirmedAudioQualityLevel;//[Offset: 0xa4, Size: 0x4]
	float FrameRateLimit;//[Offset: 0xa8, Size: 0x4]
	int DesiredScreenWidth;//[Offset: 0xb0, Size: 0x4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	int DesiredScreenHeight;//[Offset: 0xb8, Size: 0x4]
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xbc, Size: 0x4]
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xc0, Size: 0x4]
	float LastRecommendedScreenWidth;//[Offset: 0xc4, Size: 0x4]
	float LastRecommendedScreenHeight;//[Offset: 0xc8, Size: 0x4]
	float LastCPUBenchmarkResult;//[Offset: 0xcc, Size: 0x4]
	float LastGPUBenchmarkResult;//[Offset: 0xd0, Size: 0x4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xd8, Size: 0x10]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xe8, Size: 0x10]
	float LastGPUBenchmarkMultiplier;//[Offset: 0xf8, Size: 0x4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	int HDRDisplayOutputNits;//[Offset: 0x100, Size: 0x4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0x108, Size: 0x10]
	void ValidateSettings();// 0x1df5e20
	void SupportsHDRDisplayOutput(bool ReturnValue);// 0x24eed00
	void SetVSyncEnabled(bool bEnable);// 0x24eeb70
	void SetVisualEffectQuality(int Value);// 0x24eec80
	void SetViewDistanceQuality(int Value);// 0x24eec00
	void SetToDefaults();// 0xfcc370
	void SetTextureQuality(int Value);// 0x24eeaf0
	void SetShadowQuality(int Value);// 0x24eea70
	void SetScreenResolution(IntPoint Resolution);// 0x24ee9f0
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x24ee970
	void SetResolutionScaleValue(int NewScaleValue);// 0x24ee8f0
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x24ee870
	void SetPostProcessingQuality(int Value);// 0x24ee7f0
	void SetOverallScalabilityLevel(int Value);// 0x24ee760
	void SetFullscreenMode(byte InFullscreenMode);// 0x24ee6e0
	void SetFrameRateLimit(float NewLimit);// 0x24ee660
	void SetFoliageQuality(int Value);// 0x24ee5e0
	void SetDynamicResolutionEnabled(bool bEnable);// 0x24ee550
	void SetBenchmarkFallbackValues();// 0x24ee4a0
	void SetAudioQualityLevel(int QualityLevel);// 0x24ee420
	void SetAntiAliasingQuality(int Value);// 0x24ee3a0
	void SaveSettings();// 0x24c53d0
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x24ee2a0
	void RevertVideoMode();// 0x24ee280
	void ResetToCurrentSettings();// 0x24ee260
	void LoadSettings(bool bForceReload);// 0x24ee190
	void IsVSyncEnabled(bool ReturnValue);// 0x24ee160
	void IsVSyncDirty(bool ReturnValue);// 0x24ee130
	void IsScreenResolutionDirty(bool ReturnValue);// 0x24ee100
	void IsHDREnabled(bool ReturnValue);// 0x24ee0d0
	void IsFullscreenModeDirty(bool ReturnValue);// 0x24ee0a0
	void IsDynamicResolutionEnabled(bool ReturnValue);// 0x24ee070
	void IsDynamicResolutionDirty(bool ReturnValue);// 0x24ee040
	void IsDirty(bool ReturnValue);// 0x2491070
	void GetVisualEffectQuality(int ReturnValue);// 0x5e1d30
	void GetViewDistanceQuality(int ReturnValue);// 0x24edfb0
	void GetTextureQuality(int ReturnValue);// 0x24edf80
	void GetShadowQuality(int ReturnValue);// 0x24edf50
	void GetScreenResolution(IntPoint ReturnValue);// 0x24eded0
	void GetResolutionScaleInformationEx(float CurrentScaleNormalized, float CurrentScaleValue, float MinScaleValue, float MaxScaleValue);// 0x24edd30
	void GetResolutionScaleInformation(float CurrentScaleNormalized, int CurrentScaleValue, int MinScaleValue, int MaxScaleValue);// 0x24edb90
	void GetRecommendedResolutionScale(float ReturnValue);// 0x24edb50
	void GetPreferredFullscreenMode(byte ReturnValue);// 0x24edb20
	void GetPostProcessingQuality(int ReturnValue);// 0x24edaf0
	void GetOverallScalabilityLevel(int ReturnValue);// 0x24ed980
	void GetLastConfirmedScreenResolution(IntPoint ReturnValue);// 0x24ed940
	void GetLastConfirmedFullscreenMode(byte ReturnValue);// 0x24ed910
	static void GetGameUserSettings(GameUserSettings* ReturnValue);// 0x24ed8e0
	void GetFullscreenMode(byte ReturnValue);// 0x24ed8b0
	void GetFrameRateLimit(float ReturnValue);// 0x24ed880
	void GetFoliageQuality(int ReturnValue);// 0x24ed850
	void GetDesktopResolution(IntPoint ReturnValue);// 0x24ed810
	static void GetDefaultWindowPosition(IntPoint ReturnValue);// 0x24ed7d0
	static void GetDefaultWindowMode(byte ReturnValue);// 0x24ed7a0
	void GetDefaultResolutionScale(float ReturnValue);// 0x24ed760
	static void GetDefaultResolution(IntPoint ReturnValue);// 0x24ed720
	void GetCurrentHDRDisplayNits(int ReturnValue);// 0x24ed6f0
	void GetAudioQualityLevel(int ReturnValue);// 0x24ed6d0
	void GetAntiAliasingQuality(int ReturnValue);// 0x24ed6a0
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x24ed5e0
	void ConfirmVideoMode();// 0x1df5ed0
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x24ed550
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x24ed4c0
	void ApplyNonResolutionSettings();// 0x1da3f30
	void ApplyHardwareBenchmarkResults();// 0x24c54c0

--------------------------------
Class: WW3KeyBindings.Object
	WW3HubEventsManager* HubEventsManager;//[Offset: 0x28, Size: 0x8]
	FString Version;//[Offset: 0x30, Size: 0x10]
	<WW3InputFamilySection,None(None)> FamilyInputs;//[Offset: 0x40, Size: 0x50]
	WW3ControllerProfile[] ControllerProfiles;//[Offset: 0x90, Size: 0x10]
	WW3InputBindingInfo[] AllInputs;//[Offset: 0xa0, Size: 0x10]
	bool bSortKeyboardAndMouseInputs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	bool bSaveBindingsToFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	bool bAutomaticallyAssignSortIdx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 0x1]
	bool bUpdateInputCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3, Size: 0x1]
	bool bInitializeKeyMaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	bool bUpdateExcludedInputKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 0x1]
	bool bUpdateControllerInputs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 0x1]
	bool bChangeKeysToScanCodeKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7, Size: 0x1]
	bool bExportAllInputsToJson;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	WW3RuntimeInputActionDescriptor*[] RuntimeActionDescriptors;//[Offset: 0xc0, Size: 0x10]
	WW3RuntimeInputAxisDescriptor*[] RuntimeAxisDescriptors;//[Offset: 0xd0, Size: 0x10]
	<WW3RuntimeInputsCache,None(None)> InputsCache;//[Offset: 0xe0, Size: 0x50]
	bool bIsGamepadInUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	WW3InputCollisionInfo[] InputCollisionTable;//[Offset: 0x450, Size: 0x10]
	WW3InputCollisionInfo[] InputCollisionTableWithoutHVTInputs;//[Offset: 0x460, Size: 0x10]
	<int,None(None)> MapKeyToFrontendKeyCode;//[Offset: 0x470, Size: 0x50]
	<Key,None(None)> MapFrontendKeyCodeToKey;//[Offset: 0x4c0, Size: 0x50]
	<Key,None(None)> MapKeyNameToKey;//[Offset: 0x510, Size: 0x50]
	<WW3ExcludedInputKeys,None(None)> ExcludedInputKeys;//[Offset: 0x560, Size: 0x50]

--------------------------------
Class: WW3HubEventsManager.WW3HubSubManager.ActorComponent.Object

--------------------------------
Class: WW3HubSubManager.ActorComponent.Object
	WW3HubManagerBase* HubManagerPointer;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: WW3HubManagerBase.Actor.Object
	WW3HubData* HubDataPointer;//[Offset: 0x330, Size: 0x8]
	WW3HubSubManager*[] AllSubManagers;//[Offset: 0x338, Size: 0x10]
	WW3HubDatabaseManager* DatabaseManager;//[Offset: 0x348, Size: 0x8]
	WW3HubEventsManager* EventsManager;//[Offset: 0x350, Size: 0x8]
	WW3HubBrowserManager* BrowserManager;//[Offset: 0x358, Size: 0x8]
	WW3HubPlatformManager* PlatformManager;//[Offset: 0x360, Size: 0x8]
	WW3HubProfileManager* ProfileManager;//[Offset: 0x368, Size: 0x8]
	WW3HubViewManager* ViewManager;//[Offset: 0x370, Size: 0x8]
	WW3HubSceneManager* SceneManager;//[Offset: 0x378, Size: 0x8]
	WW3HubAudioManager* AudioManager;//[Offset: 0x380, Size: 0x8]
	WW3HubLoadingManager* LoadingManager;//[Offset: 0x388, Size: 0x8]
	WW3HubSquadManager* SquadManager;//[Offset: 0x390, Size: 0x8]
	WW3HubCheatManager* CheatManager;//[Offset: 0x398, Size: 0x8]

--------------------------------
Class: WW3HubDatabaseManager.WW3HubSubManager.ActorComponent.Object
	WW3HubStaticDatabase HubStaticDatabase;//[Offset: 0x100, Size: 0x308]
	WW3HubItemDatabase HubItemDatabase;//[Offset: 0x408, Size: 0x10]

--------------------------------
Class: WW3HubStaticDatabase
	FString[] EWW3HubEventTypeStrings;//[Offset: 0x0, Size: 0x10]
	FString[] EWW3HubSceneTypeStrings;//[Offset: 0x10, Size: 0x10]
	FString[] EWW3HubCityTypeStrings;//[Offset: 0x20, Size: 0x10]
	FString[] EWW3BackgroundPresentationTypeStrings;//[Offset: 0x30, Size: 0x10]
	FString[] EWW3HubEventParamsTypeStrings;//[Offset: 0x40, Size: 0x10]
	FString[] EWW3HubViewTypeStrings;//[Offset: 0x50, Size: 0x10]
	FString[] EWW3HubSubViewTypeStrings;//[Offset: 0x60, Size: 0x10]
	FString[] EWW3HubCameraViewModeStrings;//[Offset: 0x70, Size: 0x10]
	FString[] EWW3HubBackgroundLoadModeStrings;//[Offset: 0x80, Size: 0x10]
	FString[] EWW3HubViewTypeNewStrings;//[Offset: 0x90, Size: 0x10]
	FString[] EWW3HubCameraPositioningTypeStrings;//[Offset: 0xa0, Size: 0x10]
	FString[] EWW3GameModeAliasStrings;//[Offset: 0xb0, Size: 0x10]
	FString[] EWW3ItemTypeStrings;//[Offset: 0xc0, Size: 0x10]
	FString[] EWW3CustomizationObjectTypeStrings;//[Offset: 0xd0, Size: 0x10]
	FString[] EWW3HubSoundTypeStrings;//[Offset: 0xe0, Size: 0x10]
	FString[] EWW3PlayerProfileModifyResultStrings;//[Offset: 0xf0, Size: 0x10]
	FString[] EWW3CustomizationSourceTypeStrings;//[Offset: 0x100, Size: 0x10]
	FString[] EWW3EquipmentLoadoutSlotTypeStrings;//[Offset: 0x110, Size: 0x10]
	FString[] EWW3StrikesLoadoutSlotTypeStrings;//[Offset: 0x120, Size: 0x10]
	FString[] EWW3CustomizationStageTypeStrings;//[Offset: 0x130, Size: 0x10]
	FString[] CharacterAttachmentSlotsStrings;//[Offset: 0x140, Size: 0x10]
	FString[] BannerAttachmentSlotsStrings;//[Offset: 0x150, Size: 0x10]
	FString[] EWW3MatchmakingStoppedReasonStrings;//[Offset: 0x160, Size: 0x10]
	FString[] EWW3TauntSlotStrings;//[Offset: 0x170, Size: 0x10]
	FString[] EWW3AttachmentApplyingMethodStrings;//[Offset: 0x180, Size: 0x10]
	FString[] EWW3DSJoinFailedReasonStrings;//[Offset: 0x190, Size: 0x10]
	FString[] EWW3PlatformTypeStrings;//[Offset: 0x1a0, Size: 0x10]
	FString[] EWW3StrikeTypeStrings;//[Offset: 0x1b0, Size: 0x10]
	FString[] EWW3HubSeparationModeStrings;//[Offset: 0x1c0, Size: 0x10]
	FString[] EWW3ItemRarityStrings;//[Offset: 0x1d0, Size: 0x10]
	FString[] EWW3ToggleHoldTypeStrings;//[Offset: 0x1e0, Size: 0x10]
	FString[] EWW3EnabledDisabledTypeStrings;//[Offset: 0x1f0, Size: 0x10]
	FString[] EWW3USerVideoSettingScrenModeTypeStrings;//[Offset: 0x200, Size: 0x10]
	FString[] EWW3USerVideoSettingHdrModeTypeStrings;//[Offset: 0x210, Size: 0x10]
	FString[] EWW3USerVideoSettingQualityPresetTypeStrings;//[Offset: 0x220, Size: 0x10]
	FString[] EWW3UserVideoSettingQuickQualityPresetTypeStrings;//[Offset: 0x230, Size: 0x10]
	FString[] EWW3UserAudioSettingAudioOutputStrings;//[Offset: 0x240, Size: 0x10]
	FString[] EWW3UserAudioSettingVoiceLanguageStrings;//[Offset: 0x250, Size: 0x10]
	FString[] EWW3UserAudioSettingCommanderVoiceLanguageStrings;//[Offset: 0x260, Size: 0x10]
	FString[] EWW3UserAudioSettingVoiceSetStrings;//[Offset: 0x270, Size: 0x10]
	FString[] EWW3UserGameplaySettingLanguageStrings;//[Offset: 0x280, Size: 0x10]
	FString[] EWW3UserGameplaySettingUnitWeightStrings;//[Offset: 0x290, Size: 0x10]
	FString[] EWW3UserGameplaySettingUnitSpeedStrings;//[Offset: 0x2a0, Size: 0x10]
	FString[] EWW3UserGameplaySettingUnitDistanceStrings;//[Offset: 0x2b0, Size: 0x10]
	FString[] EWW3AimResponseCurveTypeStrings;//[Offset: 0x2c0, Size: 0x10]
	FString[] EWW3OnlineFriendStatusStrings;//[Offset: 0x2d0, Size: 0x10]
	int[] PlayerWeightThreshold;//[Offset: 0x2e0, Size: 0x10]
	bool IsCookedVersion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	bool UnlockCosmetics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]
	bool ForceUnlockItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 0x1]
	int PlatformVersion;//[Offset: 0x2f4, Size: 0x4]
	int[] AllowedBackpackItems;//[Offset: 0x2f8, Size: 0x10]

--------------------------------
Class: WW3HubItemDatabase
	WW3HubDatabaseItemData[] ItemDatabase;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3HubDatabaseItemData
	FString DatabaseItemData;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3HubBrowserManager.WW3HubSubManager.ActorComponent.Object
	WW3HubWidget* HubWidgetPointer;//[Offset: 0x100, Size: 0x8]
	WW3HubBackgroundWidget* HubBackgroundWidget;//[Offset: 0x118, Size: 0x8]
	TimerHandle CheckIfBrowserIsReadyForInitializationTimerHandle_T;//[Offset: 0x120, Size: 0x8]
	WW3InfantryHUD* InfantryHUD;//[Offset: 0x130, Size: 0x8]
	WW3GameInstance* GameInstance;//[Offset: 0x138, Size: 0x8]

--------------------------------
Class: WW3HubWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* MainCanvas;//[Offset: 0x208, Size: 0x8]
	FString URL;//[Offset: 0x210, Size: 0x10]

--------------------------------
Class: WW3HubBackgroundWidget.UserWidget.Widget.Visual.Object
	<MaterialInstance*,None(None)> Materials;//[Offset: 0x208, Size: 0x50]
	Image* BackgroundImage;//[Offset: 0x258, Size: 0x8]

--------------------------------
Class: WW3GameInstance.GameInstance.Object
	WW3TeamManager* TeamManager;//[Offset: 0x238, Size: 0x8]
	WW3DynamicAudioBankManager* DynamicAudioBankManager;//[Offset: 0x240, Size: 0x8]
	AkAudioBank*[] MapBanksLoaded;//[Offset: 0x248, Size: 0x10]
	AkAudioBank* CommanderBankLoaded;//[Offset: 0x258, Size: 0x8]
	FString EditorGameModeAlias;//[Offset: 0x260, Size: 0x10]
	FString[] GameModesToFilter;//[Offset: 0x270, Size: 0x10]
	FString[] MapsToFilter;//[Offset: 0x280, Size: 0x10]
	class WW3KeyBindings* KeyBindingsTemplate;//[Offset: 0x290, Size: 0x8]
	class WW3TutorialDirector* TutorialDirectorClass;//[Offset: 0x298, Size: 0x8]
	WW3NotificationsManager* NotificationsManager;//[Offset: 0x2c8, Size: 0x8]
	WW3KeyBindings* KeyBindings;//[Offset: 0x2d0, Size: 0x8]
	WW3AkEventCallbackManager* AkEventCallbackManager;//[Offset: 0x2d8, Size: 0x8]
	WW3AkAudioWeaponBankManager* AkAudioWeaponBankManager;//[Offset: 0x2e0, Size: 0x8]
	interface class None* HUBTreeProvider;//[Offset: 0x7c0, Size: 0x10]
	WW3InGameTreeProgressionProvider* InGameProgressionTreeProvider;//[Offset: 0x7d0, Size: 0x8]
	class Object[] LoadedSubClasses;//[Offset: 0x810, Size: 0x10]
	WW3PlatformManager* PlatformManager;//[Offset: 0x830, Size: 0x8]
	WW3ServerPlatformManager* ServerPlatformManager;//[Offset: 0x838, Size: 0x8]
	WW3BaseLoggerService* LoggerService;//[Offset: 0x840, Size: 0x8]
	WW3PlayerProfileManagerBase* ClientPlayerProfileManager;//[Offset: 0x870, Size: 0x8]
	WW3PlayerStatisticsManager* ClientStatisticsManager;//[Offset: 0x878, Size: 0x8]
	WW3ClientEventService* ClientEventService;//[Offset: 0x880, Size: 0x8]
	WW3CollectiveEventService* CollectiveEventService;//[Offset: 0x888, Size: 0x8]
	WW3ClientConnectionController* ClientConnectionController;//[Offset: 0x890, Size: 0x8]
	WW3TutorialDirector* TutorialDirector;//[Offset: 0x898, Size: 0x8]
	WW3DeadPlayerActorFactory* DeadPlayerActorMarkerFactory;//[Offset: 0x8a0, Size: 0x8]
	WW3AudioMediatorData* AudioMediatorData;//[Offset: 0x8a8, Size: 0x8]
	WW3NotificationScreen* NotificationScreen;//[Offset: 0x8b0, Size: 0x8]
	void ShowLoadingScreen(FString MapName);// 0xfc2e30
	void SetAudioMediatorData(class WW3AudioMediatorData InAudioMediatorDataClass, WW3AudioMediatorData* ReturnValue);// 0xfc2da0
	void OnAfterSetLightingScenario();// 0xfc2d80
	void GetWorldType(enum ReturnValue);// 0xfc2d50
	void GetSignedUpToPSN(int ReturnValue);// 0xfc2d20
	void GetKeyBindings(WW3KeyBindings* ReturnValue);// 0xfc2d00
	void GetGameModeMaximumPlayersNumber(int ReturnValue);// 0xfc2cd0
	void GetGameModeAlias(FString ReturnValue);// 0xfc2c50
	void ChangeLocalization(FString Culture);// 0xfc29a0

--------------------------------
Class: WW3TutorialDirector.ActorComponent.Object
	WW3TutorialSequenceDefinition*[] TutorialSequences;//[Offset: 0xf0, Size: 0x10]
	WW3TutorialSectionDescriptor[] HUBDescriptors;//[Offset: 0x100, Size: 0x10]
	bool bHideTutorialWidgets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	WW3Character* CurrentCharacter;//[Offset: 0x118, Size: 0x8]
	WW3FireType* CurrentFireType;//[Offset: 0x120, Size: 0x8]
	class WW3AmmoType* CurrentAmmoType;//[Offset: 0x128, Size: 0x8]
	WW3InventoryItem* CurrentItem;//[Offset: 0x130, Size: 0x8]
	WW3InventoryItem* PreviousItem;//[Offset: 0x138, Size: 0x8]
	WW3InventoryWeapon* CurrentWeapon;//[Offset: 0x140, Size: 0x8]
	enum CurrentShootingMode;//[Offset: 0x148, Size: 0x1]
	WW3GameInstance* GameInstance;//[Offset: 0x150, Size: 0x8]
	WW3TutorialSequenceDefinition*[] SequenceDefinitionsQueue;//[Offset: 0x158, Size: 0x10]
	WW3TutorialSequenceDefinition* ConcreteSequenceDefinitionToPlay;//[Offset: 0x168, Size: 0x8]
	WW3TutorialSectionDefinition* ConcreteSectionDefinitionToPlay;//[Offset: 0x170, Size: 0x8]
	WW3KeyBindings* KeyBindings;//[Offset: 0x178, Size: 0x8]
	bool bRegisteredForKeybindingsEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1]
	WW3TutorialSubtask* CurrentSubtask;//[Offset: 0x188, Size: 0x8]
	void SetCurrentCharacter(WW3Character* NewCharacter);// 0x10b6ff0
	void OnHelmetRestored();// 0x1048350
	void OnGrenadeAmountChanged();// 0x10b6ab0
	void OnGadgetAmountChanged();// 0x10b6a10
	void OnCurrentWeaponFireTypeChanged();// 0xfe6d50
	void OnCurrentWeaponFireModeChanged();// 0x10b69f0
	void OnCurrentWeaponAmmoTypeChanged();// 0xfae0a0
	void OnCurrentItemChanged();// 0x10b69d0
	void OnChestRestored();// 0x10b69b0
	void OnCharacterFullyHealed();// 0x10b6910
	void OnCharacterEquippedStrike(byte SlotIndex);// 0x10b6890
	void GetInventoryManager(WW3InventoryManager* ReturnValue);// 0x10b6660
	void GetCurrentWeapon(WW3InventoryWeapon* ReturnValue);// 0x10b6600

--------------------------------
Class: WW3TutorialSequenceDefinition.Object
	WW3TutorialSequence* Sequence;//[Offset: 0x28, Size: 0x28]
	bool bRecreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	WW3TutorialSectionDefinition*[] SectionDefinitions;//[Offset: 0x58, Size: 0x10]
	World* SequenceLevel;//[Offset: 0x68, Size: 0x28]
	World* SequencePersistentLevel;//[Offset: 0x90, Size: 0x28]
	FText SequenceName;//[Offset: 0xb8, Size: 0x18]

--------------------------------
Class: WW3TutorialSequence.Actor.Object
	WW3TutorialSection*[] Sections;//[Offset: 0x330, Size: 0x10]
	FText SequenceName;//[Offset: 0x340, Size: 0x18]
	bool bTeleportOnStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	SceneComponent* TeleportTransformComponent;//[Offset: 0x378, Size: 0x8]
	WW3TutorialSection*[] SectionsQueue;//[Offset: 0x380, Size: 0x10]

--------------------------------
Class: WW3TutorialSection.Actor.Object
	WW3TutorialTask*[] Tasks;//[Offset: 0x330, Size: 0x10]
	FText SectionName;//[Offset: 0x340, Size: 0x18]
	float FadeInTime;//[Offset: 0x358, Size: 0x4]
	AkAudioEvent* FadeInSound;//[Offset: 0x360, Size: 0x8]
	class Actor* FadeInEffectsActor;//[Offset: 0x368, Size: 0x8]
	float FadeOutTime;//[Offset: 0x370, Size: 0x4]
	AkAudioEvent* FadeOutSound;//[Offset: 0x378, Size: 0x8]
	class Actor* FadeOutEffectsActor;//[Offset: 0x380, Size: 0x8]
	bool bTeleportOnStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	SceneComponent* TeleportTransformComponent;//[Offset: 0x3a8, Size: 0x8]
	WW3TutorialTask*[] TasksQueue;//[Offset: 0x3b0, Size: 0x10]
	Actor* SpawnedFadeInEffectsActor;//[Offset: 0x3c0, Size: 0x8]
	Actor* SpawnedFadeOutEffectsActor;//[Offset: 0x3c8, Size: 0x8]

--------------------------------
Class: WW3TutorialTask.Actor.Object
	WW3TutorialSubtask*[] Subtasks;//[Offset: 0x330, Size: 0x10]
	float TaskCompletedCooldown;//[Offset: 0x340, Size: 0x4]
	float TaskFailedMessageDuration;//[Offset: 0x344, Size: 0x4]
	WW3TaskViewInfo TaskInfo;//[Offset: 0x348, Size: 0x50]
	FText TaskCompletedText;//[Offset: 0x398, Size: 0x18]
	FText TaskFailedText;//[Offset: 0x3b0, Size: 0x18]
	AkAudioEvent* TaskStartedSound;//[Offset: 0x3c8, Size: 0x8]
	AkAudioEvent* TaskCompletedSound;//[Offset: 0x3d0, Size: 0x8]
	AkAudioEvent*[] TaskFailedSounds;//[Offset: 0x3d8, Size: 0x10]
	WW3TutorialVoiceOver TaskStartedVoiceOver;//[Offset: 0x3e8, Size: 0x50]
	WW3TutorialVoiceOver TaskCompletedVoiceOver;//[Offset: 0x438, Size: 0x50]
	WW3TutorialVoiceOver TaskFailedVoiceOver;//[Offset: 0x488, Size: 0x50]
	SceneComponent* StartingPointComponent;//[Offset: 0x4e0, Size: 0x8]
	WW3TutorialSubtask*[] SubTasksQueue;//[Offset: 0x4e8, Size: 0x10]
	void RestartTask();// 0x1395e00
	void OnTaskStarted();// 0x1395e00
	void OnTaskEnded();// 0x1395e00

--------------------------------
Class: WW3TutorialSubtask.Actor.Object
	FText OptionalControlsTip;//[Offset: 0x360, Size: 0x18]
	StaticMeshComponent* MarkerMeshComponent;//[Offset: 0x378, Size: 0x8]
	bool bShowWorldMarker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	WW3TutorialDirector* DirectorReference;//[Offset: 0x388, Size: 0x8]
	WW3WidgetHighlightConfig WidgetHighlightConfig;//[Offset: 0x398, Size: 0x38]
	class WW3SubtaskPausedStateWidget* SubtaskPausedStateWidgetClass;//[Offset: 0x3d0, Size: 0x8]
	WW3SubtaskPausedStateWidget* SubtaskPausedStateWidget;//[Offset: 0x3e0, Size: 0x8]
	void ShowHighlight(enum WidgetType);// 0x10b7210
	void SetCharacterHealth(WW3Character* Character, float HealthValue);// 0x10b6f20
	void RemoveAmmoFromClip(WW3Character* Character, int AmountToRemove);// 0x10b6e60
	void OnSubtaskStarted();// 0x1395e00
	void OnSubtaskFailed();// 0x10b6e40
	void OnSubtaskEnded();// 0x1395e00
	void OnSubtaskCompleted();// 0x10b6e20
	void OnInventoryItemChanged();// 0x10b6ad0
	void OnGrenadeAmountChanged();// 0xf26e50
	void OnGadgetAmountChanged();// 0x429e30
	void OnFireTypeChanged();// 0x429e50
	void OnFireModeChanged();// 0x45e3c0
	void OnCharacterUsedStrike(byte StrikeIndex);// 0x10b6930
	void OnCharacterLeftCollision();// 0x45e170
	void OnCharacterFullyHealed();// 0x45e0b0
	void OnCharacterEnteredCollision();// 0xf22330
	void OnCharacterArmorRestored();// 0xf26860
	void OnAmmoTypeChanged();// 0x45e3e0
	void IsQuickMapOpen(bool ReturnValue);// 0x10b6860
	void IsChangingAmmoType(WW3Character* Character, bool ReturnValue);// 0x10b67d0
	void HideHighlight();// 0x10b67b0
	void GetWidget(enum WidgetType, UserWidget* ReturnValue);// 0x10b6720
	void GetMaxAmmoAmount(WW3Character* Character, int ReturnValue);// 0x10b6690
	void GetDirector(WW3TutorialDirector* ReturnValue);// 0x10b6630
	void GetCurrentTeamScore(int ReturnValue);// 0x10b65d0
	void GetCurrentArmorHealth(float ReturnValue);// 0x10b65a0
	void GetCurrentAmmoAmount(WW3Character* Character, int ReturnValue);// 0x10b6510
	void DamageCharacterArmor(WW3Character* Character);// 0x10b6490
	void CharacterLeftCollision();// 0x10b6470
	void CharacterEnteredCollision();// 0x10b6450
	void CanRestoreAnyAmmo(WW3Character* Character, bool ReturnValue);// 0x10b63c0
	void AddStrikePoints(int PointsAmount);// 0x10b6340

--------------------------------
Class: WW3SubtaskPausedStateWidget.UserWidget.Widget.Visual.Object
	void OnPausedStateStarted();// 0x1395e00
	void ExitPausedState();// 0xfa60d0

--------------------------------
Class: WW3TaskViewInfo
	FText TaskTitle;//[Offset: 0x0, Size: 0x18]
	FText TaskDescription;//[Offset: 0x18, Size: 0x18]
	FText TaskControlTip;//[Offset: 0x30, Size: 0x18]
	MediaSource* TutorialMovie;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: MediaSource.Object
	void Validate(bool ReturnValue);// 0x25470a0
	void GetUrl(FString ReturnValue);// 0x249cef0

--------------------------------
Class: WW3TutorialVoiceOver
	<AkAudioEvent*,None(None)> EventPerLanguage;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: WW3TutorialSectionDefinition.Object
	FText SectionName;//[Offset: 0x28, Size: 0x18]
	WW3TutorialSection* Section;//[Offset: 0x40, Size: 0x28]
	World* SectionLevel;//[Offset: 0x68, Size: 0x28]
	World* SectionPersistentLevel;//[Offset: 0x90, Size: 0x28]

--------------------------------
Class: WW3TutorialSectionDescriptor
	FName SectionTitle;//[Offset: 0x0, Size: 0x8]
	FString SectionPath;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WW3NotificationsManager.Object
	WW3GameInstance* GameInstance;//[Offset: 0x38, Size: 0x8]
	WW3HubManagerBase* HubManager;//[Offset: 0x40, Size: 0x8]
	TimerHandle NotificationShowTimer;//[Offset: 0x58, Size: 0x8]
	TimerHandle ExitModalShowTimer;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: WW3AkEventCallbackManager.Object

--------------------------------
Class: WW3AkAudioWeaponBankManager.Object
	WW3AkAudioWeaponBank[] AudioWeaponBanks;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: WW3AkAudioWeaponBank
	AkAudioBank* AudioWeaponBank;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: WW3InGameTreeProgressionProvider.Object
	WW3GameInstance* GameInstance;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: WW3PlatformManager.Object
	WW3GameInstance* GameInstancePointer;//[Offset: 0x40, Size: 0x8]
	WW3MatchmakingServiceBase* MatchmakingService;//[Offset: 0x58, Size: 0x8]
	WW3PlayerProfileManagerBase* PlayerProfileManager;//[Offset: 0x60, Size: 0x8]
	WW3OnlineFriends* OnlineFriends;//[Offset: 0x68, Size: 0x8]
	WW3HubManagerBase* HubManager;//[Offset: 0x70, Size: 0x8]
	WW3ClientWebSocket* ClientWebSocket;//[Offset: 0x78, Size: 0x8]
	WW3XmppService* XmppService;//[Offset: 0x80, Size: 0x8]
	WW3SquadService* SquadService;//[Offset: 0x88, Size: 0x8]
	WW3ClientAntiCheatService* ClientAntiCheatService;//[Offset: 0x90, Size: 0x8]
	WW3SquadMessagesHandler* SquadMessagesHandler;//[Offset: 0x98, Size: 0x8]
	WW3ClientRejoinService* RejoinService;//[Offset: 0xa0, Size: 0x8]
	WW3DateTimeKeeper* DateTimeKeeper;//[Offset: 0xa8, Size: 0x8]
	WW3OnlineParametersRpcBuilder* OnlineParametersBuilder;//[Offset: 0xb0, Size: 0x8]
	WW3PlayerDataHandler* PlayerDataHandler;//[Offset: 0xb8, Size: 0x8]
	UInt32Property InternalPlayerId;//[Size: 0x4]

--------------------------------
Class: WW3MatchmakingServiceBase.Object
	WW3GameInstance* OwnerGameInstance;//[Offset: 0x40, Size: 0x8]
	WW3HubManagerBase* OwnerHubManager;//[Offset: 0x48, Size: 0x8]
	WW3SquadService* SquadService;//[Offset: 0x50, Size: 0x8]
	WW3PlayerPartyData PlayerPartyData;//[Offset: 0x58, Size: 0x48]
	WW3LobbyData LobbyData;//[Offset: 0xa0, Size: 0x110]
	WW3GameServer[] MatchingGameServers;//[Offset: 0x1b8, Size: 0x10]
	WW3MatchmakingMaps MatchmakingMaps;//[Offset: 0x1c8, Size: 0x58]
	WW3PlatformManager* PlatformManager;//[Offset: 0x230, Size: 0x8]
	enum MatchmakingState;//[Offset: 0x238, Size: 0x1]
	WW3MatchmakingParameters MatchmakingParameters;//[Offset: 0x240, Size: 0x40]
	WW3MatchmakingDataToSynchronize MatchmakingDataToSynchronize;//[Offset: 0x280, Size: 0x50]
	TimerHandle MatchMakingDelayTimer;//[Offset: 0x2d0, Size: 0x8]
	TimerHandle MatchMakingLoopDelayTimer;//[Offset: 0x2d8, Size: 0x8]
	TimerHandle EntryToMenuTimer;//[Offset: 0x2e0, Size: 0x8]
	TimerHandle MatchmakingAntispamTimer;//[Offset: 0x2e8, Size: 0x8]
	TimerHandle ForceMainMenuHandle;//[Offset: 0x2f0, Size: 0x8]
	void RequestCreateLobby();// 0xf54b90

--------------------------------
Class: WW3SquadService.Object
	WW3GameInstance* OwnerGameInstance;//[Offset: 0x28, Size: 0x8]
	WW3ClientWebSocket* ClientWebSocket;//[Offset: 0x30, Size: 0x8]
	WW3ClientMatchmakingService* ClCachedMatchmakingService;//[Offset: 0x38, Size: 0x8]
	WW3XmppService* XmppService;//[Offset: 0x40, Size: 0x8]
	WW3ClientRejoinService* RejoinService;//[Offset: 0x48, Size: 0x8]
	WW3HubManagerBase* OwnerHubManager;//[Offset: 0x50, Size: 0x8]
	WW3HubSquadManager* HubSquadManager;//[Offset: 0x58, Size: 0x8]
	WW3PlayerProfileManagerBase* PlayerProfileManagerPointer;//[Offset: 0x60, Size: 0x8]
	WW3SquadMessagesBuilder* SquadMessagesBuilder;//[Offset: 0x68, Size: 0x8]
	WW3WsSyncSender* WsSyncSender;//[Offset: 0x70, Size: 0x8]
	WW3PartyMatchmakingService* PartyMatchmakingService;//[Offset: 0x78, Size: 0x8]
	<WW3SquadMemberInfo,None(None)> SquadMembers;//[Offset: 0x90, Size: 0x50]
	<WW3AddToSquadInfo,None(None)> SquadInvitationsData;//[Offset: 0x108, Size: 0x50]

--------------------------------
Class: WW3ClientWebSocket.WW3WebSocket.Object
	WW3MatchmakingServiceBase* MatchmakingServiceBase;//[Offset: 0x1d0, Size: 0x8]
	WW3OnlineFriends* OnlineFriendsService;//[Offset: 0x1d8, Size: 0x8]
	WW3SquadService* SquadService;//[Offset: 0x1e0, Size: 0x8]
	WW3SquadMessagesHandler* SquadMessagesHandler;//[Offset: 0x1e8, Size: 0x8]
	WW3ClientRejoinService* RejoinService;//[Offset: 0x1f0, Size: 0x8]
	WW3NotificationScreen* NotificationScreen;//[Offset: 0x1f8, Size: 0x8]

--------------------------------
Class: WW3WebSocket.Object
	WW3GameInstance* OwnerGameInstance;//[Offset: 0x28, Size: 0x8]
	FString ServerURL;//[Offset: 0x58, Size: 0x10]
	FString ServerProtocol;//[Offset: 0x68, Size: 0x10]
	float ReconnectWebSocketInverval;//[Offset: 0x78, Size: 0x4]
	float CustomWebSocketTickElapsed;//[Offset: 0x7c, Size: 0x4]
	bool bIsWebSocketInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool bReconnectSend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	int64 LastReconnectRequestTimestamp;//[Offset: 0x88, Size: 0x8]
	WW3WebSocketHeartbeat* WebSocketHeartbeat;//[Offset: 0x90, Size: 0x8]
	WW3BaseLoggerService* LoggerService;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: WW3OnlineFriends.Object
	WW3GameInstance* GameInstance;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WW3SquadMessagesHandler.Object
	WW3XmppService* XmppService;//[Offset: 0x28, Size: 0x8]
	WW3SquadService* SquadService;//[Offset: 0x30, Size: 0x8]
	WW3ClientMatchmakingService* MatchmakingService;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: WW3XmppService.Object
	WW3GameInstance* OwnerGameInstance;//[Offset: 0x28, Size: 0x8]
	WW3SquadMessagesHandler* SquadMessagesHandler;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: WW3ClientMatchmakingService.WW3MatchmakingServiceBase.Object
	TimerHandle MatchmakingStuckTimer;//[Offset: 0x470, Size: 0x8]

--------------------------------
Class: WW3ClientRejoinService.Object
	WW3FarmOnlineRejoinRpcBuilder* RpcBuilder;//[Offset: 0x28, Size: 0x8]
	WW3GameInstance* GameInstance;//[Offset: 0x30, Size: 0x8]
	WW3SquadService* SquadService;//[Offset: 0x38, Size: 0x8]
	void HandleTimeoutTicketDeclined();// 0xf888e0
	void HandleTimeoutTicketAccepted();// 0xf888c0

--------------------------------
Class: WW3FarmOnlineRejoinRpcBuilder.Object
	WW3CommonRpcBuilder* CommonRpcBuilder;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WW3CommonRpcBuilder.Object

--------------------------------
Class: WW3NotificationScreen.Object
	WW3NotificationScreenRpcBuilder* RpcBuilder;//[Offset: 0x28, Size: 0x8]
	WW3GameInstance* GameInstance;//[Offset: 0x30, Size: 0x8]
	WW3ClientWebSocket* ClientWebSocket;//[Offset: 0x38, Size: 0x8]
	UInt32Property CachedInternalNetId;//[Size: 0x4]

--------------------------------
Class: WW3NotificationScreenRpcBuilder.Object
	WW3CommonRpcBuilder* CommonRpcBuilder;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WW3WebSocketHeartbeat.Object
	WW3GameInstance* GameInstance;//[Offset: 0x30, Size: 0x8]
	WW3WebSocket* WebSocket;//[Offset: 0x38, Size: 0x8]
	WW3ClientConnectionController* ClientConnectionController;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: WW3ClientConnectionController.Object
	WW3GameInstance* OwnerGameInstance;//[Offset: 0x28, Size: 0x8]
	FString ServerAddress;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: WW3BaseLoggerService.Object
	void SetNodeId(int NewNodeId);// 0xf460d0
	void SetLobbyId(NewLobbyId(UInt32Property) NewLobbyId);// 0xf46050

--------------------------------
Class: WW3HubSquadManager.WW3HubSubManager.ActorComponent.Object
	WW3HubEventsManager* HubEventsManager;//[Offset: 0x100, Size: 0x8]
	<WW3HubSquadMemberMainCustomization,None(None)> SquadMembersCustomization;//[Offset: 0x108, Size: 0x50]
	WW3HubSquadMemberMainCustomization OurMainCustomization;//[Offset: 0x158, Size: 0x1e0]

--------------------------------
Class: WW3HubSquadMemberMainCustomization
	WW3CustomizationConfig CharacterConfig;//[Offset: 0x0, Size: 0xd8]
	uint16 WeaponId;//[Offset: 0xd8, Size: 0x2]
	WW3CustomizationConfig WeaponConfig;//[Offset: 0xe0, Size: 0xd8]
	WW3BannerCustomizationConfig BannerCustomizationConfig;//[Offset: 0x1b8, Size: 0x10]
	WW3SquadMemberProfileConfig SquadMemberProfileConfig;//[Offset: 0x1c8, Size: 0x18]

--------------------------------
Class: WW3SquadMemberProfileConfig
	FString MemberName;//[Offset: 0x0, Size: 0x10]
	int PlayerLevel;//[Offset: 0x10, Size: 0x4]
	bool bIsLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: WW3PlayerProfileManagerBase.WW3BaseObjectDataManager.Object
	WW3HubEventsManager* HubEventsManager;//[Offset: 0x580, Size: 0x8]
	WW3CustomizationConfigDatabase* CustomizationConfigDatabasePointer;//[Offset: 0x588, Size: 0x8]

--------------------------------
Class: WW3BaseObjectDataManager.Object
	WW3GameInstance* OwnerGameInstance;//[Offset: 0x30, Size: 0x8]
	WW3PlayerState* OwnerPlayerState;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: WW3SquadMessagesBuilder.Object
	WW3SquadCommonMessagesBuilder* CommonMessagesBuilder;//[Offset: 0x28, Size: 0x8]
	WW3CommonRpcBuilder* CommonRpcBuilder;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: WW3SquadCommonMessagesBuilder.Object

--------------------------------
Class: WW3WsSyncSender.Object
	<WW3WsMessage*,None(None)> MsgQueue;//[Offset: 0x30, Size: 0x50]
	void OnResponse(RequestID(UInt32Property) RequestID, FString Response);// 0x11034a0

--------------------------------
Class: WW3WsMessage.WW3OnlineMessage.Object
	void OnWsResponse(RequestID(UInt32Property) RequestID, FString Response);// 0x1103580

--------------------------------
Class: WW3OnlineMessage.Object

--------------------------------
Class: WW3PartyMatchmakingService.Object
	WW3GameInstance* GameInstance;//[Offset: 0x28, Size: 0x8]
	WW3WebsocketRpcRequestBuilder* RpcRequestBuilder;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: WW3WebsocketRpcRequestBuilder.Object
	WW3CommonRpcBuilder* CommonRpcBuilder;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WW3SquadMemberInfo
	WW3PlayerBannerInfo PlayerBannerInfo;//[Offset: 0x38, Size: 0x28]
	WW3HubSquadMemberMainCustomization SquadMemberMainCustomization;//[Offset: 0x60, Size: 0x1e0]

--------------------------------
Class: WW3AddToSquadInfo
	int SenderInternalNetId;//[Offset: 0x8, Size: 0x4]
	FString LeaderName;//[Offset: 0x10, Size: 0x10]
	int LeaderEmblemId;//[Offset: 0x20, Size: 0x4]
	FString SenderXmppUsername;//[Offset: 0x28, Size: 0x10]
	UInt32Property SquadId;//[Size: 0x4]
	int64 Revision;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: WW3PlayerPartyData
	UInt32Property InternalNetId;//[Size: 0x4]
	UInt32Property PartyLeader;//[Size: 0x4]
	PlayersInParty(UInt32Property)[] PlayersInParty;//[Offset: 0x18, Size: 0x10]
	UInt32Property LobbyId;//[Size: 0x4]
	FString DedicatedServerGroup;//[Offset: 0x30, Size: 0x10]
	bool bAllowRejoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: WW3LobbyData
	UInt32Property LobbyId;//[Size: 0x4]
	UInt32Property LocalPlayerId;//[Size: 0x4]
	UInt32Property PlayersLimit;//[Size: 0x4]
	UInt32Property GameMode;//[Size: 0x4]
	FString Map;//[Offset: 0x18, Size: 0x10]
	WW3PlayersInLobby PlayersInLobby;//[Offset: 0x28, Size: 0x18]
	WW3LobbyServerData LobbyServerData;//[Offset: 0x40, Size: 0x50]
	UInt32Property MatchmakingState;//[Size: 0x4]
	UInt32Property LobbyVersion;//[Size: 0x4]
	FString TimeInLobbyTimestamp;//[Offset: 0x98, Size: 0x10]
	WW3LobbyTokens LobbyTokens;//[Offset: 0xa8, Size: 0x68]

--------------------------------
Class: WW3PlayersInLobby
	WW3PlayerLobbyInfo[] Players;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WW3PlayerLobbyInfo
	UInt32Property PlayerId;//[Size: 0x4]
	FString PlayerName;//[Offset: 0x10, Size: 0x10]
	UInt32Property PlayerLevel;//[Size: 0x4]
	BannerAttachmentsIds(UInt32Property)[] BannerAttachmentsIds;//[Offset: 0x28, Size: 0x10]
	UInt32Property LevelIconId;//[Size: 0x4]

--------------------------------
Class: WW3LobbyServerData
	int DedicatedServerId;//[Offset: 0x8, Size: 0x4]
	FString ServerAddress;//[Offset: 0x10, Size: 0x10]
	UInt32Property ServerGamePort;//[Size: 0x4]
	UInt32Property ServerQueryPort;//[Size: 0x4]
	FString ServerGroup;//[Offset: 0x28, Size: 0x10]
	enum GameMode;//[Offset: 0x38, Size: 0x1]
	FString Map;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: WW3LobbyTokens
	FString LeaderToken;//[Offset: 0x8, Size: 0x10]
	<FString,None(None)> SquadMemberTokens;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: WW3GameServer
	FString IPAddressString;//[Offset: 0x10, Size: 0x10]
	int ServerId;//[Offset: 0x20, Size: 0x4]
	uint16 ConnectionPort;//[Offset: 0x24, Size: 0x2]
	int QueryPort;//[Offset: 0x28, Size: 0x4]
	int Ping;//[Offset: 0x2c, Size: 0x4]
	FString Map;//[Offset: 0x30, Size: 0x10]
	FString GameDescription;//[Offset: 0x40, Size: 0x10]
	int NumPlayers;//[Offset: 0x50, Size: 0x4]
	int MaxPlayers;//[Offset: 0x54, Size: 0x4]
	int BotPlayers;//[Offset: 0x58, Size: 0x4]
	bool Password;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool Secure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	int ServerVersion;//[Offset: 0x60, Size: 0x4]
	FString ServerName;//[Offset: 0x68, Size: 0x10]
	FString ServerString;//[Offset: 0x78, Size: 0x10]
	FString ServerSteamAddr;//[Offset: 0x88, Size: 0x10]
	FString StringSteamID;//[Offset: 0xa0, Size: 0x10]
	int EmptySlotsForPlayers;//[Offset: 0xb0, Size: 0x4]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	FString GameMode;//[Offset: 0xb8, Size: 0x10]
	enum GameModeAlias;//[Offset: 0xc8, Size: 0x1]
	int CityId;//[Offset: 0xcc, Size: 0x4]

--------------------------------
Class: WW3MatchmakingMaps
	<WW3Maps,None(None)> AvailableMaps;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: WW3Maps
	FString[] Maps;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3MatchmakingParameters
	GameModes(UInt32Property)[] GameModes;//[Offset: 0x8, Size: 0x10]
	FString[] MapNames;//[Offset: 0x18, Size: 0x10]
	FString DedicatedServerGroup;//[Offset: 0x28, Size: 0x10]
	bool bAllGamemodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: WW3MatchmakingDataToSynchronize
	WW3MatchmakingParameters CachedMatchmakingParameters;//[Offset: 0x8, Size: 0x40]
	bool bIsLobbyResolved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bMemberIds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool bSendUnregister;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]

--------------------------------
Class: WW3ClientAntiCheatService.Object
	WW3GameInstance* GameInstance;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WW3DateTimeKeeper.Object
	WW3GameInstance* GameInstance;//[Offset: 0x30, Size: 0x8]
	void RemoteDateTimeRequest();// 0xf98c20

--------------------------------
Class: WW3OnlineParametersRpcBuilder.Object
	WW3CommonRpcBuilder* CommonRpcBuilder;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WW3PlayerDataHandler.Object
	WW3GameInstance* GameInstancePointer;//[Offset: 0x28, Size: 0x8]
	WW3PlatformManager* PlatformManager;//[Offset: 0x30, Size: 0x8]
	WW3MatchmakingServiceBase* MatchmakingService;//[Offset: 0x38, Size: 0x8]
	TimerHandle PlayerDataResponseTimer;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: WW3ServerPlatformManager.Object
	WW3GameInstance* GameInstance;//[Offset: 0x28, Size: 0x8]
	WW3DedicatedServerWebSocket* DedicatedServerWebSocket;//[Offset: 0x40, Size: 0x8]
	WW3ServerAntiCheatService* ServerAntiCheatService;//[Offset: 0x48, Size: 0x8]
	WW3PerformanceDataManager* ServerPerformanceDataManager;//[Offset: 0x50, Size: 0x8]
	WW3ServerRejoinService* ServerRejoinService;//[Offset: 0x58, Size: 0x8]
	WW3ServerGamemodeService* ServerGamemodeService;//[Offset: 0x60, Size: 0x8]
	WW3ServerConnectionsMonitor* ServerConnectionsMonitor;//[Offset: 0x68, Size: 0x8]
	WW3WebsocketRpcRequestBuilder* RpcRequestBuilder;//[Offset: 0x128, Size: 0x8]

--------------------------------
Class: WW3DedicatedServerWebSocket.WW3WebSocket.Object
	WW3ServerAntiCheatService* AntiCheatService;//[Offset: 0x1a0, Size: 0x8]
	WW3ServerRejoinService* RejoinService;//[Offset: 0x1a8, Size: 0x8]
	WW3ServerConnectionsMonitor* ServerConnectionsMonitorService;//[Offset: 0x1b0, Size: 0x8]
	WW3ServerGamemodeService* ServerGamemodeService;//[Offset: 0x1b8, Size: 0x8]

--------------------------------
Class: WW3ServerAntiCheatService.Object

--------------------------------
Class: WW3ServerRejoinService.Object
	float DeltaTimeSeconds;//[Offset: 0x30, Size: 0x4]
	float RejoinStatusCheckPeriodSeconds;//[Offset: 0x34, Size: 0x4]
	WW3GameInstance* ParentGameInstance;//[Offset: 0x38, Size: 0x8]
	WW3CommonRpcResponseBuilder* RpcBuilder;//[Offset: 0x40, Size: 0x8]
	void OnRejoinLockedChange(bool bIsLocked);// 0x1086d50
	void OnMatchStateChangedCallback(WW3GameState* GS);// 0x1086c50

--------------------------------
Class: WW3CommonRpcResponseBuilder.Object

--------------------------------
Class: WW3ServerConnectionsMonitor.Object
	WW3GameInstance* ParentGameInstance;//[Offset: 0x88, Size: 0x8]
	WW3CommonRpcResponseBuilder* RpcResponseBuilder;//[Offset: 0x90, Size: 0x8]
	WW3WebsocketRpcRequestBuilder* RpcRequestBuilder;//[Offset: 0x98, Size: 0x8]
	void MasterServerConnectionStatusChanged(WW3PlayerState* PS);// 0x1086a20

--------------------------------
Class: WW3ServerGamemodeService.Object
	WW3GameInstance* ParentGameInstance;//[Offset: 0x28, Size: 0x8]
	TimerHandle WarmupTimerLimitHandle;//[Offset: 0x30, Size: 0x8]
	WW3CommonRpcResponseBuilder* RpcBuilder;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: WW3PerformanceDataManager.Object
	WW3GameInstance* GameInstance;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: WW3PlayerStatisticsManager.WW3BaseObjectDataManager.Object

--------------------------------
Class: WW3ClientEventService.Object
	WW3GameInstance* GameInstance;//[Offset: 0x28, Size: 0x8]
	WW3ClientWebSocket* ClientWebSocket;//[Offset: 0x30, Size: 0x8]
	WW3CommonRpcResponseBuilder* RpcBuilder;//[Offset: 0x38, Size: 0x8]
	UInt32Property CachedInternalNetId;//[Size: 0x4]

--------------------------------
Class: WW3CollectiveEventService.Object
	WW3DedicatedServerWebSocket* DedicatedServerWebSocket;//[Offset: 0x28, Size: 0x8]
	TimerHandle EventServiceTimerHandle;//[Offset: 0x30, Size: 0x8]
	float EventDelayTime;//[Offset: 0x38, Size: 0x4]
	<WW3StorePlayerProgressionData,None(None)> StoreDefendCapturePointsMultiplier;//[Offset: 0x40, Size: 0x50]
	<WW3StorePlayerProgressionData,None(None)> StoreAttackCapturePointsMultiplier;//[Offset: 0x90, Size: 0x50]
	<WW3RepairEventMessage,None(None)> StoreVehicleRepairMessages;//[Offset: 0xe0, Size: 0x50]
	<WW3StorePlayerVehicleHitData,None(None)> StorePlayerVehicleHitPoints;//[Offset: 0x130, Size: 0x50]
	<WW3StorePlayerVehicleHitData,None(None)> StorePlayerVehicleHitByRepairKitPoints;//[Offset: 0x180, Size: 0x50]
	<WW3StorePlayerProgressionData,None(None)> StorePassiveBonusPlayersData;//[Offset: 0x1d0, Size: 0x50]
	<WW3StorePlayerProgressionData,None(None)> StoreCapturePointSquadBonusData;//[Offset: 0x220, Size: 0x50]

--------------------------------
Class: WW3StorePlayerProgressionData
	WW3PlayerWithWeapon[] PlayerProgressionData;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3PlayerWithWeapon
	UInt32Property Player;//[Size: 0x4]
	uint16 ItemId;//[Offset: 0x4, Size: 0x2]
	float PointsMultiplier;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WW3RepairEventMessage.WW3BaseEventMessage
	<float,None(None)> RepairTypeAndValue;//[Offset: 0x10, Size: 0x50]

--------------------------------
Class: WW3BaseEventMessage
	enum EventType;//[Offset: 0x8, Size: 0x1]
	UInt32Property Player;//[Size: 0x4]

--------------------------------
Class: WW3StorePlayerVehicleHitData
	WW3PlayerVehicleHitData[] PlayerVehicleHitData;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3PlayerVehicleHitData
	int weapon;//[Offset: 0x0, Size: 0x4]
	float Score;//[Offset: 0x4, Size: 0x4]
	enum FriendOrFoe;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: WW3DeadPlayerActorFactory.Object
	WW3DeadPlayerActorMarker*[] DeadPlayersActorMarkers;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: WW3HubPlatformManager.WW3HubSubManager.ActorComponent.Object
	WW3PlatformManager* PlatformManagerPointer;//[Offset: 0x100, Size: 0x8]

--------------------------------
Class: WW3HubProfileManager.WW3HubSubManager.ActorComponent.Object
	WW3PlayerProfileManagerBase* PlayerProfileManagerPointer;//[Offset: 0x100, Size: 0x8]
	WW3CustomizationConfigDatabase* CustomizationConfigDatabasePointer;//[Offset: 0x118, Size: 0x8]
	WW3PlayerProfileData PlayerProfileForShootingRange;//[Offset: 0x120, Size: 0x280]
	void OnPlayerProfileModified();// 0xfe6cf0

--------------------------------
Class: WW3HubViewManager.WW3HubSubManager.ActorComponent.Object
	WW3HubPlayerController* HubPlayerControllerPointer;//[Offset: 0x100, Size: 0x8]

--------------------------------
Class: WW3HubPlayerController.WW3PlayerControllerBase.ShooterPlayerController.PlayerController.Controller.Actor.Object
	class WW3HubWidget* HubHUDWidgetClass;//[Offset: 0x7e8, Size: 0x8]
	class WW3HubBackgroundWidget* HubBackgroundWidgetClass;//[Offset: 0x7f0, Size: 0x8]
	void OnRightMouseButtonReleased_Input();// 0xfe6d30
	void OnRightMouseButtonPressed_Input();// 0xfe6d10
	void OnLeftMouseButtonReleased_Input();// 0xfe6cd0
	void OnLeftMouseButtonPressed_Input();// 0xfe6cb0
	void LookVertical_Input_Mouse(float Val);// 0xfe6c30
	void LookVertical_Input(float Val);// 0xfe6bb0
	void LookHorizontal_Input_Mouse(float Val);// 0xfe6b30
	void LookHorizontal_Input(float Val);// 0xfe6ab0

--------------------------------
Class: WW3HubSceneManager.WW3HubSubManager.ActorComponent.Object

--------------------------------
Class: WW3HubAudioManager.WW3HubSubManager.ActorComponent.Object
	WW3HubAkComponent* MenuSoundComponent;//[Offset: 0x100, Size: 0x8]
	WW3HubData* HubDataPointer;//[Offset: 0x108, Size: 0x8]

--------------------------------
Class: WW3HubAkComponent.WW3AkComponent.AkComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WW3HubLoadingManager.WW3HubSubManager.ActorComponent.Object
	WW3HubEventsManager* HubEventsManager;//[Offset: 0x108, Size: 0x8]
	WW3HubPlayerController* HubPlayerControllerPointer;//[Offset: 0x110, Size: 0x8]
	WW3AssetManager* AssetManager;//[Offset: 0x118, Size: 0x8]
	WW3HubPreviewActorManager*[] CrutialPreviewActorsToLoad;//[Offset: 0x120, Size: 0x10]
	TimerHandle AutoStartBackgroundLoadTimerHandle_T;//[Offset: 0x140, Size: 0x8]
	void PreShowLoadingScreen();// 0xfe1010
	void OnViewChanged(WW3HubIntArray InValue);// 0xfe0f60
	void OnLobbyChange(WW3LobbyData InLobbyData);// 0xfe0d90
	void OnLevelAssetsAsyncLoadFinished();// 0xfe0d70
	void OnAudioAssetsAsyncLoadFinished();// 0xfe0d50
	void OnAllGameplayAssetsAsyncLoadFinished();// 0xfe0d30
	void ContinueNextLevelAssetsAsyncLoading();// 0xfe0d10
	void ContinueNextGameplayAssetsAsyncLoading();// 0xfe0cf0
	void AutostartBackgroundAssetsLoading();// 0xfe0cd0

--------------------------------
Class: WW3AssetManager.AssetManager.Object
	WorldSettings* WorldSettings;//[Offset: 0x3d8, Size: 0x8]
	SoftObjectPath[] HardLoadedAssets;//[Offset: 0x440, Size: 0x10]
	int FoldersNameBasedIdGenerationMaxDepth;//[Offset: 0x450, Size: 0x4]
	bool bIncludeFilenameWhileGeneratingChunkId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 0x1]
	<WW3AssetManagerPaths,None(None)> PackageChunksIdsDepthOverrides;//[Offset: 0x458, Size: 0x50]

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x260, Size: 0x10]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 0x1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x272, Size: 0x1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x273, Size: 0x1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 0x1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x276, Size: 0x1]
	bool bIsPrimaryAssetDirectoryCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x277, Size: 0x1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 0x1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27a, Size: 0x1]
	int NumberOfSpawnedNotifications;//[Offset: 0x27c, Size: 0x4]

--------------------------------
Class: WW3AssetManagerPaths
	FString[] Paths;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3HubPreviewActorManager.ActorComponent.Object
	class Object* BasedItemClassForSkin;//[Offset: 0xf0, Size: 0x8]
	Actor* SpawnedMenuActor;//[Offset: 0xf8, Size: 0x8]
	WW3HubPreviewActor* PreviewActorOwner;//[Offset: 0x100, Size: 0x8]
	WW3HubManagerBase* HubManagerPointer;//[Offset: 0x108, Size: 0x8]
	WW3PlayerProfileManagerBase* PlayerProfileManager;//[Offset: 0x110, Size: 0x8]
	TextRenderActor* DebugTextRender;//[Offset: 0x118, Size: 0x8]
	WW3CustomizationConfig CustomizationConfig;//[Offset: 0x138, Size: 0xd8]
	WW3CustomizationSource CustomizationSource;//[Offset: 0x212, Size: 0x6]
	uint16 AppliedItemId;//[Offset: 0x21c, Size: 0x2]
	uint16[] AppliedAttachmentsIds;//[Offset: 0x220, Size: 0x10]
	uint16 AppliedMainSkinId;//[Offset: 0x230, Size: 0x2]
	uint16[] AppliedSkinsAttachmentsIds;//[Offset: 0x238, Size: 0x10]
	byte[] AppliedAttachmentToSkinTypes;//[Offset: 0x248, Size: 0x10]
	WW3CustomizationSource PreviousLoadedSource;//[Offset: 0x25e, Size: 0x6]
	uint16[] PartialAttachmentsIds;//[Offset: 0x290, Size: 0x10]
	uint16[] PartsOverrideForPartialAttachmentsIds;//[Offset: 0x2a0, Size: 0x10]
	MeshComponent* PreviewMeshComponent;//[Offset: 0x2b8, Size: 0x8]
	StaticMeshActor* LoadingStaticMeshActor;//[Offset: 0x2c0, Size: 0x8]
	WW3HubPreviewActorSeparator* ActivePreviewActorSeparator;//[Offset: 0x2d0, Size: 0x8]
	WW3HubPreviewActorSneakPeak* ActivePreviewActorSneakPeak;//[Offset: 0x2d8, Size: 0x8]
	WW3HubPreviewActorPickUp* ActivePreviewActorPickUp;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: WW3HubPreviewActor.Actor.Object
	WW3HubPreviewActor* AttachedPreviewActor;//[Offset: 0x368, Size: 0x8]
	WW3HubPreviewActor* AttachingPreviewActor;//[Offset: 0x370, Size: 0x8]
	WW3HubPreviewActorManager* PreviewActorManager;//[Offset: 0x378, Size: 0x8]
	BillboardComponent* RootBillboard;//[Offset: 0x3b0, Size: 0x8]
	WW3Skin* CurrentSkin;//[Offset: 0x3b8, Size: 0x8]

--------------------------------
Class: TextRenderActor.Actor.Object
	TextRenderComponent* TextRender;//[Offset: 0x330, Size: 0x8]

--------------------------------
Class: WW3HubPreviewActorSeparator.ActorComponent.Object
	WW3HubPreviewActorManager* HubPreviewActorManager;//[Offset: 0xf0, Size: 0x8]
	WW3HubAudioManager* HubAudioManager;//[Offset: 0xf8, Size: 0x8]
	WW3HubSeparationConfig Config;//[Offset: 0x100, Size: 0x38]

--------------------------------
Class: WW3HubSeparationConfig
	CurveFloat* Curve;//[Offset: 0x0, Size: 0x8]
	CurveFloat* SeparateDistanceOverDelta;//[Offset: 0x8, Size: 0x8]
	float SeparateDuration;//[Offset: 0x10, Size: 0x4]
	float CombineDuration;//[Offset: 0x14, Size: 0x4]
	float SeparateDistance;//[Offset: 0x18, Size: 0x4]
	WW3HubSeparateSounds Sounds;//[Offset: 0x20, Size: 0x18]

--------------------------------
Class: WW3HubSeparateSounds
	WW3HubSeparateSound[] Sounds;//[Offset: 0x0, Size: 0x10]
	enum DefaultSound;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: WW3HubSeparateSound
	float TimeMin;//[Offset: 0x0, Size: 0x4]
	float TimeMax;//[Offset: 0x4, Size: 0x4]
	bool bRising;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum Sound;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: WW3HubPreviewActorSneakPeak.ActorComponent.Object

--------------------------------
Class: WW3HubPreviewActorPickUp.ActorComponent.Object
	CurveFloat* Curve;//[Offset: 0x138, Size: 0x8]
	WW3HubCameraPickUpData PickUpData;//[Offset: 0x140, Size: 0x14]
	WW3HubManagerBase* HubManagerPointer;//[Offset: 0x158, Size: 0x8]

--------------------------------
Class: WW3HubCameraPickUpData
	float ActorOffset;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]
	Vector OffsetDirection;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: WW3HubIntArray
	int[] Value;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3HubCheatManager.WW3HubSubManager.ActorComponent.Object
	LocalPlayer* CachedLocalPlayer;//[Offset: 0x108, Size: 0x8]
	World* CachedWorld;//[Offset: 0x110, Size: 0x8]
	void CheatDebugHub_TriggerOnRequestItemTypesToBlockFromBrowser();// 0x5d2c60
	void CheatDebugHub_TriggerOnRemoveLoadout(int InObjectTypeValue, int InLoadoutIndex);// 0xf4a850
	void CheatDebugHub_TriggerOnLoadoutSlotModified(enum InStage, int InCustomizationSource, int InLoadoutType, int InItemId, int InConfigId, int InLoadoutIndex, int InObjectIndex);// 0xfd9f90
	void CheatDebugHub_TriggerOnFocusedItemChanged(int InViewIndex, int InLoadoutIndex, int InSlotIndex);// 0xfd9e90
	void CheatDebugHub_TriggerOnCreateLoadout(int InObjectTypeValue, int InSourceTypeValue, int InIndexToUse);// 0xfd9e90
	void CheatDebugHub_TreatConfigAsPartial(bool bValue);// 0xf4a120
	void CheatDebugHub_ToggleStructured();// 0x5d2c60
	void CheatDebugHub_TogglePhotoMode();// 0x5d2c60
	void CheatDebugHub_ToggleDebugCamera();// 0x5d2c60
	void CheatDebugHub_StartBackgroundAsyncLoading_GameplayMap(FString InMapName);// 0xfd9db0
	void CheatDebugHub_StartBackgroundAsyncLoading_GameplayAudioBanks();// 0x5d2c60
	void CheatDebugHub_StartBackgroundAsyncLoading();// 0x5d2c60
	void CheatDebugHub_Squads_Show(int InValue);// 0xf3a3b0
	void CheatDebugHub_Squads_SetRandomCustomization(int InValue);// 0xf3a3b0
	void CheatDebugHub_Squads_OnSizeChanged(int InValue);// 0xf3a3b0
	void CheatDebugHub_SkipNewcomer();// 0x5d2c60
	void CheatDebugHub_ShowProductionBuild(bool bValue);// 0xf75030
	void CheatDebugHub_ShowNotification(FString InMessage);// 0xf4a5d0
	void CheatDebugHub_ShowMaintenanceExitModal();// 0x5d2c60
	void CheatDebugHub_ShowExitModal(int ModalOption);// 0xfd9d20
	void CheatDebugHub_ShowError(int ErrorCode, FString ErrorMessage);// 0xfd9c40
	void CheatDebugHub_SetEditorSimulateActive(bool bInActive);// 0xf4a120
	void CheatDebugHub_SendNotificationWithTranslation(bool bWithNick);// 0xf75030
	void CheatDebugHub_PilotStopAndApply();// 0x5d2c60
	void CheatDebugHub_PilotStop();// 0x5d2c60
	void CheatDebugHub_PilotActiveCamera_SpringArmComponent();// 0xf4a230
	void CheatDebugHub_PilotActiveCamera_CameraComponent();// 0xf4a380
	void CheatDebugHub_PilotActiveCamera_Actor();// 0xf4a300
	void CheatDebugHub_PilotActiveCamera(enum InPilotingMode);// 0xfc2a40
	void CheatDebugHub_LoadHub2DSublevel(bool bValue);// 0xf4a120
	void CheatDebugHub_LoadAllGameModesDetalis();// 0x5d2c60
	void CheatDebugHub_LaunchRange(int InRangeType);// 0xf3a3b0
	void CheatDebugHub_GenerateItemBlueprintableConfig(FString InConfigName, FString InConfigCheatName, FString InRarity, bool bInIsPartialBlueprint, int SlotCount, int InUniqueId);// 0xfd9990
	void CheatDebugHub_EnableDebugMode();// 0x5d2c60
	void CheatDebugHub_DisableDebugMode();// 0x5d2c60
	void CheatDebugHub_DebugModificationData(int InIndex);// 0xf3a3b0

--------------------------------
Class: WW3InputFamilySection
	FName[] FamilyInputs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3ControllerProfile
	<WW3ControllerProfileSection,None(None)> ProfileSection;//[Offset: 0x0, Size: 0x50]
	<WW3ControllerButtonOrAxisDescription,None(None)> MultiFamilyBindings;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: WW3ControllerProfileSection
	bool bApplyExponentToLeftThumbstick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bApplyExponentToRightThumbstick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	<WW3ControllerButtonOrAxisDescription,None(None)> Bindings;//[Offset: 0x8, Size: 0x50]
	WW3ControllerButtonOrAxisDescription[] ControllerInputs;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: WW3ControllerButtonOrAxisDescription
	enum RequiredBehaviour;//[Offset: 0x0, Size: 0x1]
	FName InputName;//[Offset: 0x8, Size: 0x8]
	Key InputKey;//[Offset: 0x10, Size: 0x20]
	bool bUseActionKeybinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	WW3ControllerInputActionDescription ActionDescription;//[Offset: 0x38, Size: 0x40]
	WW3ControllerInputAxisDescription AxisDescription;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: WW3ControllerInputActionDescription
	enum ActionInputMappingFamily;//[Offset: 0x0, Size: 0x1]
	FName ActionInputMapping;//[Offset: 0x8, Size: 0x8]
	enum OnHoldActionInputMappingFamily;//[Offset: 0x10, Size: 0x1]
	FName OnHoldActionInputMapping;//[Offset: 0x18, Size: 0x8]
	WW3ControllerStateDependentInputActionDescription[] StateDependentActions;//[Offset: 0x20, Size: 0x10]
	WW3ControllerAdvancedStateDependentInputActionDescription[] AdvancedStateDependentActions;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: WW3ControllerStateDependentInputActionDescription
	enum ActionInputMappingFamily;//[Offset: 0x0, Size: 0x1]
	FName ActionInputMapping;//[Offset: 0x8, Size: 0x8]
	WW3ControllerActionStateRequirement[] RequiredStates;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: WW3ControllerActionStateRequirement
	FName RequiredStateName;//[Offset: 0x0, Size: 0x8]
	bool bRequiredState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: WW3ControllerAdvancedStateDependentInputActionDescription
	WW3ControllerActionStateRequirement[] RequiredStates;//[Offset: 0x0, Size: 0x10]
	enum BaseActionFamily;//[Offset: 0x10, Size: 0x1]
	FName BaseActionName;//[Offset: 0x18, Size: 0x8]
	enum OnHoldActionFamily;//[Offset: 0x20, Size: 0x1]
	FName OnHoldActionName;//[Offset: 0x28, Size: 0x8]
	WW3ControllerStateDependentInputActionDescription[] StateDependentActions;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: WW3ControllerInputAxisDescription
	enum AxisInputMappingFamily;//[Offset: 0x0, Size: 0x1]
	FName AxisInputMapping;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WW3InputBindingInfo
	enum Tab;//[Offset: 0x0, Size: 0x1]
	int SortIdx;//[Offset: 0x4, Size: 0x4]
	bool bUseActionKeybinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	FName ActionName;//[Offset: 0x10, Size: 0x8]
	bool bPrimaryActionKeyMappingChangedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bAlternativeActionKeyMappingChangedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	InputActionKeyMapping PrimaryActionKeyMapping;//[Offset: 0x20, Size: 0x30]
	InputActionKeyMapping AlternativeActionKeyMapping;//[Offset: 0x50, Size: 0x30]
	InputActionKeyMapping DefaultPrimaryActionKeyMapping;//[Offset: 0x80, Size: 0x30]
	InputActionKeyMapping DefaultAlternativeActionKeyMapping;//[Offset: 0xb0, Size: 0x30]
	bool bPrimaryAxisFirstKeyMappingChangedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	bool bPrimaryAxisSecondKeyMappingChangedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	float bPrimaryAxisFirstScale;//[Offset: 0xe4, Size: 0x4]
	InputAxisKeyMapping PrimaryAxisFirstKeyMapping;//[Offset: 0xe8, Size: 0x30]
	float bPrimaryAxisSecondScale;//[Offset: 0x118, Size: 0x4]
	InputAxisKeyMapping PrimaryAxisSecondKeyMapping;//[Offset: 0x120, Size: 0x30]
	bool bAlternativeAxisFirstKeyMappingChangedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	bool bAlternativeAxisSecondKeyMappingChangedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 0x1]
	float bAlternativeAxisFirstScale;//[Offset: 0x154, Size: 0x4]
	InputAxisKeyMapping AlternativeAxisFirstKeyMapping;//[Offset: 0x158, Size: 0x30]
	float bAlternativeAxisSecondScale;//[Offset: 0x188, Size: 0x4]
	InputAxisKeyMapping AlternativeAxisSecondKeyMapping;//[Offset: 0x190, Size: 0x30]
	float DefaultPrimaryAxisFirstScale;//[Offset: 0x1c0, Size: 0x4]
	InputAxisKeyMapping DefaultPrimaryAxisFirstKeyMapping;//[Offset: 0x1c8, Size: 0x30]
	float DefaultPrimaryAxisSecondScale;//[Offset: 0x1f8, Size: 0x4]
	InputAxisKeyMapping DefaultPrimaryAxisSecondKeyMapping;//[Offset: 0x200, Size: 0x30]
	float DefaultAlternativeAxisFirstScale;//[Offset: 0x230, Size: 0x4]
	InputAxisKeyMapping DefaultAlternativeAxisFirstKeyMapping;//[Offset: 0x238, Size: 0x30]
	float DefaultAlternativeAxisSecondScale;//[Offset: 0x268, Size: 0x4]
	InputAxisKeyMapping DefaultAlternativeAxisSecondKeyMapping;//[Offset: 0x270, Size: 0x30]

--------------------------------
Class: InputActionKeyMapping
	FName ActionName;//[Offset: 0x0, Size: 0x8]
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	Key Key;//[Offset: 0x10, Size: 0x20]

--------------------------------
Class: InputAxisKeyMapping
	FName AxisName;//[Offset: 0x0, Size: 0x8]
	float Scale;//[Offset: 0x8, Size: 0x4]
	Key Key;//[Offset: 0x10, Size: 0x20]

--------------------------------
Class: WW3RuntimeInputActionDescriptor.WW3RuntimeInputDescriptor.Object
	<WW3RuntimeInputFamilyActionBindings,None(None)> FamilyActionBindings;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: WW3RuntimeInputDescriptor.Object

--------------------------------
Class: WW3RuntimeInputFamilyActionBindings

--------------------------------
Class: WW3RuntimeInputAxisDescriptor.WW3RuntimeInputDescriptor.Object
	<WW3RuntimeInputFamilyAxisBindings,None(None)> FamilyAxisBindings;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: WW3RuntimeInputFamilyAxisBindings

--------------------------------
Class: WW3RuntimeInputsCache
	WW3RuntimeInputsCache_Section KeyboardAndMouse;//[Offset: 0x0, Size: 0x30]
	WW3RuntimeInputsCache_Section[] Gamepad;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: WW3RuntimeInputsCache_Section
	WW3RuntimeLocalInputActionDescriptor*[] RuntimeActionDescriptors;//[Offset: 0x10, Size: 0x10]
	WW3RuntimeLocalInputAxisDescriptor*[] RuntimeAxisDescriptors;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: WW3RuntimeLocalInputActionDescriptor.WW3RuntimeLocalInputDescriptor.Object
	WW3RuntimeInputActionDescriptor* ActionInputMappingDescriptor;//[Offset: 0x50, Size: 0x8]
	WW3RuntimeInputActionDescriptor* OnHoldActionInputMappingDescriptor;//[Offset: 0x68, Size: 0x8]
	WW3RuntimeStateDependentInputActionDescription[] StateDependentActions;//[Offset: 0x80, Size: 0x10]
	WW3RuntimeAdvancedStateDependentInputActionDescription[] AdvancedStateDependentActions;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: WW3RuntimeLocalInputDescriptor.Object
	enum RequiredBehaviour;//[Offset: 0x28, Size: 0x1]
	WW3InputComponent* WW3InputComponent;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: WW3InputComponent.InputComponent.ActorComponent.Object
	WW3RuntimeLocalInputActionDescriptor*[] RuntimeActionDescriptors;//[Offset: 0x188, Size: 0x10]
	WW3RuntimeLocalInputAxisDescriptor*[] RuntimeAxisDescriptors;//[Offset: 0x198, Size: 0x10]
	WW3RuntimeLocalInputActionDescriptor*[] RuntimeActionDescriptorsToUpdate;//[Offset: 0x1a8, Size: 0x10]
	WW3KeyBindings* WW3KeyBindings;//[Offset: 0x1c0, Size: 0x8]
	WW3RuntimeLocalInputAxisDescriptor* Gamepad_LeftX_Descriptor;//[Offset: 0x2a8, Size: 0x8]
	WW3RuntimeLocalInputAxisDescriptor* Gamepad_LeftY_Descriptor;//[Offset: 0x2b0, Size: 0x8]
	WW3RuntimeLocalInputAxisDescriptor* Gamepad_RightX_Descriptor;//[Offset: 0x2b8, Size: 0x8]
	WW3RuntimeLocalInputAxisDescriptor* Gamepad_RightY_Descriptor;//[Offset: 0x2c0, Size: 0x8]
	WW3AimAssistData AimAssistData;//[Offset: 0x2d0, Size: 0xb0]

--------------------------------
Class: WW3RuntimeLocalInputAxisDescriptor.WW3RuntimeLocalInputDescriptor.Object
	WW3RuntimeInputAxisDescriptor* InputAxisDescriptor;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: WW3AimAssistData

--------------------------------
Class: WW3RuntimeStateDependentInputActionDescription
	WW3RuntimeInputActionDescriptor* ActionInputMappingDescriptor;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: WW3RuntimeAdvancedStateDependentInputActionDescription
	WW3RuntimeInputActionDescriptor* BaseActionDescriptor;//[Offset: 0x10, Size: 0x8]
	WW3RuntimeInputActionDescriptor* OnHoldActionDescriptor;//[Offset: 0x28, Size: 0x8]
	WW3RuntimeStateDependentInputActionDescription[] StateDependentActions;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: WW3InputCollisionInfo
	FName InputName;//[Offset: 0x0, Size: 0x8]
	bool bIsAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bIsFirstPrimaryKeySetByUser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bIsSecondPrimaryKeySetByUser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bIsFirstAlternativeKeySetByUser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	bool bIsSecondAlternativeKeySetByUser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	Key FirstPrimaryKey;//[Offset: 0x10, Size: 0x20]
	Key SecondPrimaryKey;//[Offset: 0x30, Size: 0x20]
	Key FirstAlternativeKey;//[Offset: 0x50, Size: 0x20]
	Key SecondAlternativeKey;//[Offset: 0x70, Size: 0x20]
	Key DefaultFirstPrimaryKey;//[Offset: 0x90, Size: 0x20]
	Key DefaultSecondPrimaryKey;//[Offset: 0xb0, Size: 0x20]
	Key DefaultFirstAlternativeKey;//[Offset: 0xd0, Size: 0x20]
	Key DefaultSecondAlternativeKey;//[Offset: 0xf0, Size: 0x20]
	enum[] Families;//[Offset: 0x110, Size: 0x10]
	enum[] AdditionalFamilies;//[Offset: 0x120, Size: 0x10]
	WW3InputInfoForFrontendTab[] FrontendTabs;//[Offset: 0x130, Size: 0x10]
	int SrcCollisionMask;//[Offset: 0x140, Size: 0x4]
	int DstCollisionMask;//[Offset: 0x144, Size: 0x4]
	int[] CollisionTable;//[Offset: 0x148, Size: 0x10]

--------------------------------
Class: WW3InputInfoForFrontendTab
	enum Tab;//[Offset: 0x0, Size: 0x1]
	FString FirstTranslationKey;//[Offset: 0x8, Size: 0x10]
	FString SecondTranslationKey;//[Offset: 0x18, Size: 0x10]
	int SortIdx;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: WW3ExcludedInputKeys
	Key[] KeysToExclude;//[Offset: 0x0, Size: 0x10]
	int[] FrontendKeysToExclude;//[Offset: 0x10, Size: 0x10]
	FString ExcludeReasonTranslationKey;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: WW3UserVideoSettings
	enum QuickQuality;//[Offset: 0x0, Size: 0x1]
	enum ScreenModePreset;//[Offset: 0x1, Size: 0x1]
	WW3UserVideoSettingMonitors Monitors;//[Offset: 0x8, Size: 0x60]
	WW3UserVideoSettingResolutions Resolutions;//[Offset: 0x68, Size: 0x18]
	WW3FloatWithRange BrightnessValue;//[Offset: 0x80, Size: 0x28]
	bool VsyncEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	WW3FloatWithRange FieldOfViewSoldierValue;//[Offset: 0xb0, Size: 0x28]
	bool SprintFieldOfViewChangeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	WW3FloatWithRange FieldOfViewVehicleValue;//[Offset: 0xe0, Size: 0x28]
	WW3FloatWithRange DepthOfFieldWeaponValue;//[Offset: 0x108, Size: 0x28]
	WW3FloatWithRange DepthOfFieldVehicleValue;//[Offset: 0x130, Size: 0x28]
	WW3FloatWithRange MotionBlurValue;//[Offset: 0x158, Size: 0x28]
	WW3FloatWithRange MotionBlurCharacterValue;//[Offset: 0x180, Size: 0x28]
	WW3FloatWithRange SharpenValue;//[Offset: 0x1a8, Size: 0x28]
	enum ColorBlindessPreset;//[Offset: 0x1d0, Size: 0x1]
	bool AdsDOFEffectsValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 0x1]
	WW3FloatWithRange ResolutionScaleValue;//[Offset: 0x1d8, Size: 0x28]
	bool FrameRateLockEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	WW3FloatWithRange FrameRateLockValue;//[Offset: 0x208, Size: 0x28]
	WW3FloatWithRange FrameRateLockMenuValue;//[Offset: 0x230, Size: 0x28]
	bool Dx12Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	bool HighDynamicRangeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 0x1]
	enum HdrMode;//[Offset: 0x25a, Size: 0x1]
	bool FramerateSmoothingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25b, Size: 0x1]
	bool DynamicResolutionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	WW3FloatWithRange DynamicResolutionFrameRateValue;//[Offset: 0x260, Size: 0x28]
	WW3FloatWithRange DynamicResolutionMinScreenPercentageValue;//[Offset: 0x288, Size: 0x28]
	bool OneFrameThreadLagEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	bool FinishCurrentFrameEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1]
	bool AutoDetectQualityEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 0x1]
	enum TexturesQuality;//[Offset: 0x2b3, Size: 0x1]
	enum MeshesQuality;//[Offset: 0x2b4, Size: 0x1]
	enum LightingQuality;//[Offset: 0x2b5, Size: 0x1]
	enum EffectsQuality;//[Offset: 0x2b6, Size: 0x1]
	enum PostProcessingQuality;//[Offset: 0x2b7, Size: 0x1]
	enum ViewDistaceQuality;//[Offset: 0x2b8, Size: 0x1]
	enum ShadowsQuality;//[Offset: 0x2b9, Size: 0x1]
	enum FoliageQuality;//[Offset: 0x2ba, Size: 0x1]
	enum AntiAliasingQuality;//[Offset: 0x2bb, Size: 0x1]
	bool FogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1]
	enum AOQuality;//[Offset: 0x2bd, Size: 0x1]
	enum SSRQuality;//[Offset: 0x2be, Size: 0x1]
	int CurrentVideoSettingsVersion;//[Offset: 0x2c0, Size: 0x4]

--------------------------------
Class: WW3UserVideoSettingMonitors
	WW3UserVideoSettingMonitor[] Monitors;//[Offset: 0x0, Size: 0x10]
	WW3UserVideoSettingMonitor CurrentMonitor;//[Offset: 0x10, Size: 0x50]

--------------------------------
Class: WW3UserVideoSettingMonitor
	FString Name;//[Offset: 0x0, Size: 0x10]
	FString ID;//[Offset: 0x10, Size: 0x10]
	int NativeWidth;//[Offset: 0x20, Size: 0x4]
	int NativeHeight;//[Offset: 0x24, Size: 0x4]
	bool bIsPrimary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	int Index;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: WW3UserVideoSettingResolutions
	WW3UserVideoSettingResolution[] Resolutions;//[Offset: 0x0, Size: 0x10]
	int CurrentResolutionFullscreen;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WW3UserVideoSettingResolution
	IntPoint Resolution;//[Offset: 0x0, Size: 0x8]
	FString ResolutionString;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WW3UserAudioSettings
	WW3FloatWithRange MasterVolumeValue;//[Offset: 0x0, Size: 0x28]
	WW3FloatWithRange MusicVolumeValue;//[Offset: 0x28, Size: 0x28]
	WW3FloatWithRange SfxVolumeValue;//[Offset: 0x50, Size: 0x28]
	WW3FloatWithRange VoicesVolumeValue;//[Offset: 0x78, Size: 0x28]
	WW3FloatWithRange RadioVolumeValue;//[Offset: 0xa0, Size: 0x28]
	WW3FloatWithRange RadioVehiclesVolumeValue;//[Offset: 0xc8, Size: 0x28]
	WW3FloatWithRange VoipMicVolumeValue;//[Offset: 0xf0, Size: 0x28]
	WW3FloatWithRange VoipSpkVolumeValue;//[Offset: 0x118, Size: 0x28]
	bool AutoDetectOutputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	enum AudioOutput;//[Offset: 0x141, Size: 0x1]
	enum SoundDevice;//[Offset: 0x142, Size: 0x1]
	bool HrtfEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x143, Size: 0x1]
	bool VOIPEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	bool VOIPPushToTalkEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 0x1]
	enum AllyVoicesLanguage;//[Offset: 0x146, Size: 0x1]
	enum EnemyVoicesLanguage;//[Offset: 0x147, Size: 0x1]
	enum CommanderVoicesLanguage;//[Offset: 0x148, Size: 0x1]
	enum CommanderVoiceSet;//[Offset: 0x149, Size: 0x1]
	bool SubtitlesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 0x1]
	bool bAdvancedAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b, Size: 0x1]
	int CurrentAudioSettingsVersion;//[Offset: 0x14c, Size: 0x4]

--------------------------------
Class: WW3UserControlsSettings
	WW3FloatWithRange MouseSensitivitySoldierValue;//[Offset: 0x0, Size: 0x28]
	WW3FloatWithRange MouseZoomSensitivitySoldierValue;//[Offset: 0x28, Size: 0x28]
	enum ZoomSoldierType;//[Offset: 0x50, Size: 0x1]
	enum CrouchSoldierType;//[Offset: 0x51, Size: 0x1]
	enum SprintSoldierType;//[Offset: 0x52, Size: 0x1]
	enum LookAroundSoldierType;//[Offset: 0x53, Size: 0x1]
	enum LeanSoldierType;//[Offset: 0x54, Size: 0x1]
	WW3FloatWithRange MouseSensitivityVehicleValue;//[Offset: 0x58, Size: 0x28]
	WW3FloatWithRange MouseZoomSensitivityVehicleValue;//[Offset: 0x80, Size: 0x28]
	enum ZoomVehicleType;//[Offset: 0xa8, Size: 0x1]
	enum LookAroundVehicleType;//[Offset: 0xa9, Size: 0x1]
	bool InvertHelidronesVerticalEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa, Size: 0x1]
	WW3FloatWithRange CursorSensitivityValue;//[Offset: 0xb0, Size: 0x28]
	bool RawMouseInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	bool InvertMouseVerticalEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	bool InvertMouseHorizontalEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1]
	WW3FloatWithRange MouseSensitivityVerticalMultiplierValue;//[Offset: 0xe0, Size: 0x28]
	enum RadialMenuToggleHoldType;//[Offset: 0x108, Size: 0x1]
	bool SingleTapCreatesWorldSpaceMarkerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 0x1]
	int CurrentBindingVersion;//[Offset: 0x10c, Size: 0x4]

--------------------------------
Class: WW3UserHubSettings
	WW3QuickJoinGameModeOptions QuickJoinGameModeOptions;//[Offset: 0x0, Size: 0x6]

--------------------------------
Class: WW3QuickJoinGameModeOptions
	bool IsWarzoneAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool IsTeamDeathmatchAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool IsReconAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool IsGameMode4Allowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool IsGameMode5Allowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool IsGameMode6Allowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]

--------------------------------
Class: WW3UserTipsDisplayCounters

--------------------------------
Class: WW3FrontendGamepadSettings
	bool bShouldBeConsidered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int NumProfiles;//[Offset: 0x4, Size: 0x4]
	int SelectedProfile;//[Offset: 0x8, Size: 0x4]
	bool bVerticalLookAxisInverted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	enum AimResponseCurveType;//[Offset: 0xd, Size: 0x1]
	WW3FloatWithRange LookThumbstickExponent;//[Offset: 0x10, Size: 0x28]
	WW3FloatWithRange LeftThumbstickDeadZone;//[Offset: 0x38, Size: 0x28]
	WW3FloatWithRange RightThumbstickDeadZone;//[Offset: 0x60, Size: 0x28]
	WW3FloatWithRange SoldierLookSensitivity;//[Offset: 0x88, Size: 0x28]
	WW3FloatWithRange SoldierLookSensitivityADS;//[Offset: 0xb0, Size: 0x28]
	WW3FloatWithRange VehicleLookSensitivity;//[Offset: 0xd8, Size: 0x28]
	WW3FloatWithRange VehicleLookSensitivityZoom;//[Offset: 0x100, Size: 0x28]
	bool bHelidronesVerticalLookAxisInverted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	bool bInvertCrossAndCircleButtonsBehaviour;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 0x1]
	enum SprintSoldierType;//[Offset: 0x12a, Size: 0x1]
	int DefaultSelectedProfile;//[Offset: 0x12c, Size: 0x4]
	bool bDefaultVerticalLookAxisInverted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	enum DefaultAimResponseCurveType;//[Offset: 0x131, Size: 0x1]
	WW3FloatWithRange DefaultLookThumbstickExponent;//[Offset: 0x138, Size: 0x28]
	WW3FloatWithRange DefaultLeftThumbstickDeadZone;//[Offset: 0x160, Size: 0x28]
	WW3FloatWithRange DefaultRightThumbstickDeadZone;//[Offset: 0x188, Size: 0x28]
	WW3FloatWithRange DefaultSoldierLookSensitivity;//[Offset: 0x1b0, Size: 0x28]
	WW3FloatWithRange DefaultSoldierLookSensitivityADS;//[Offset: 0x1d8, Size: 0x28]
	WW3FloatWithRange DefaultVehicleLookSensitivity;//[Offset: 0x200, Size: 0x28]
	WW3FloatWithRange DefaultVehicleLookSensitivityZoom;//[Offset: 0x228, Size: 0x28]
	bool bDefaultHelidronesVerticalLookAxisInverted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	bool bDefaultInvertCrossAndCircleButtonsBehaviour;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1]
	enum DefaultSprintSoldierType;//[Offset: 0x252, Size: 0x1]

--------------------------------
Class: WW3FrontendKeybindings
	bool bShouldBeConsidered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	WW3FrontendKeybindingsInputData[] Inputs;//[Offset: 0x8, Size: 0x10]
	WW3FrontendKeybindingsTabData[] Tabs;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: WW3FrontendKeybindingsInputData
	bool bIsAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName InputName;//[Offset: 0x8, Size: 0x8]
	bool bIsFirstPrimaryKeySetByUser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bIsSecondPrimaryKeySetByUser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool bIsFirstAlternativeKeySetByUser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	bool bIsSecondAlternativeKeySetByUser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]
	int FirstPrimaryKey;//[Offset: 0x14, Size: 0x4]
	int SecondPrimaryKey;//[Offset: 0x18, Size: 0x4]
	int FirstAlternativeKey;//[Offset: 0x1c, Size: 0x4]
	int SecondAlternativeKey;//[Offset: 0x20, Size: 0x4]
	int DefaultFirstPrimaryKey;//[Offset: 0x24, Size: 0x4]
	int DefaultSecondPrimaryKey;//[Offset: 0x28, Size: 0x4]
	int DefaultFirstAlternativeKey;//[Offset: 0x2c, Size: 0x4]
	int DefaultSecondAlternativeKey;//[Offset: 0x30, Size: 0x4]
	int[] CollisionTable;//[Offset: 0x38, Size: 0x10]
	int[] KeysToExclude;//[Offset: 0x48, Size: 0x10]
	FString ExcludeReasonTranslationKey;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: WW3FrontendKeybindingsTabData
	enum Tab;//[Offset: 0x0, Size: 0x1]
	FString TabName;//[Offset: 0x8, Size: 0x10]
	WW3FrontendKeybindingsItemData[] items;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: WW3FrontendKeybindingsItemData
	int InputIdx;//[Offset: 0x0, Size: 0x4]
	bool bUsesFirstKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	FString TranslationKey;//[Offset: 0x8, Size: 0x10]
	int SortIdx;//[Offset: 0x18, Size: 0x4]
	bool bDrawLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: WW3InteractionInfo
	Texture2D* EventTexture;//[Offset: 0x0, Size: 0x28]

--------------------------------
Class: WW3SimpleUIStateMachine.Object
	WW3UIStateUnit[] PoolOfChanges;//[Offset: 0x48, Size: 0x10]
	byte Status;//[Offset: 0x58, Size: 0x1]
	byte PrevStatus;//[Offset: 0x59, Size: 0x1]
	float WaitTaimer;//[Offset: 0x5c, Size: 0x4]
	bool bIsTickable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bStopTickAfterClearPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]

--------------------------------
Class: WW3UIStateUnit

--------------------------------
Class: WW3ContextualWidgetInfo
	Widget* Widget;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WW3ReconEndGameWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	void SwitchSpectateToMatchResults();// 0x1395e00
	void ShowWinnerScreen();// 0x1395e00
	void ShowWidget();// 0x1395e00
	void ShowEvacScreen();// 0x1395e00
	void OnSpectateButtonClicked();// 0x1062b90
	void OnMatchResultsButtonClicked();// 0xfa61b0
	void OnMainMenuButtonClicked();// 0xfa5cd0

--------------------------------
Class: WW3VehicleSpawner.WW3AdvancedSpawner.WW3Spawner.Actor.Object
	Volume* CollisionCheckVolume;//[Offset: 0x3e8, Size: 0x8]
	WW3Vehicle* SpawnedVehicle;//[Offset: 0x3f0, Size: 0x8]
	bool bOffensiveVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	bool bSpawnAsCrateDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1]

--------------------------------
Class: WW3AdvancedSpawner.WW3Spawner.Actor.Object
	bool bShouldRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 0x1]
	bool bShouldSpawnWithNoTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 0x1]
	float SpawnDelay;//[Offset: 0x3d4, Size: 0x4]
	float TimeBetweenSpawns;//[Offset: 0x3d8, Size: 0x4]
	int8 OwnerTeam;//[Offset: 0x3dc, Size: 0x1]
	bool bLockTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dd, Size: 0x1]
	TimerHandle CountdownTimerHandle;//[Offset: 0x3e0, Size: 0x8]

--------------------------------
Class: WW3Spawner.Actor.Object
	BillboardComponent* Billboard;//[Offset: 0x338, Size: 0x8]
	class Object* ActorToSpawn;//[Offset: 0x340, Size: 0x28]
	FString OverrideActorNametoSpawn;//[Offset: 0x368, Size: 0x10]
	uint16[] AttachmentsIds;//[Offset: 0x378, Size: 0x10]
	uint16 SkinID;//[Offset: 0x388, Size: 0x2]
	int ConfigId;//[Offset: 0x38c, Size: 0x4]
	enum UsableInGamemode;//[Offset: 0x390, Size: 0x1]
	enum[] UsableInGamemodes;//[Offset: 0x398, Size: 0x10]
	float FirstSpawnDelay;//[Offset: 0x3a8, Size: 0x4]
	Actor* SpawnedActor;//[Offset: 0x3b0, Size: 0x8]
	TimerHandle FirstSpawnDelayTimerHandle;//[Offset: 0x3b8, Size: 0x8]

--------------------------------
Class: WW3CapturePointVehicleSpawn
	class Object* Team0Vehicle;//[Offset: 0x0, Size: 0x8]
	FString Team0OverrideActorNameToSpawn;//[Offset: 0x8, Size: 0x10]
	class Object* Team1Vehicle;//[Offset: 0x18, Size: 0x8]
	FString Team1OverrideActorNameToSpawn;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: WW3RemainingScoreNotifications
	int PlayOnScore;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: WW3ServerObjectiveSystem.ActorComponent.Object
	WW3GameObjective*[] PlayersObjectivesArray;//[Offset: 0xf0, Size: 0x10]
	<TimerHandle,None(None)> ObjectiveLifetimeTimerHandles;//[Offset: 0x100, Size: 0x50]
	void RemoveObjective_T(WW3GameObjective* GameObjective);// 0x1086ea0
	void RemoveObjective(WW3GameObjective* GameObjective);// 0x1086e20
	void OnObjectiveLifeTimeEnded(WW3GameObjective* GameObjective);// 0x1086cd0

--------------------------------
Class: WW3TeamGameMode.WW3GameMode.GameMode.GameModeBase.Info.Actor.Object
	WW3BotsManager* BotsManager;//[Offset: 0xe78, Size: 0x8]
	int NumTeams;//[Offset: 0xe80, Size: 0x4]
	int MaxNumberOfSquadsPerTeam;//[Offset: 0xe84, Size: 0x4]
	int StartAutobalanceDifference;//[Offset: 0xe88, Size: 0x4]
	bool bIsUsingSquads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8c, Size: 0x1]
	float TeamScoreLimit;//[Offset: 0xe90, Size: 0x4]
	float TeamStartPointsUpdateInterval;//[Offset: 0xe94, Size: 0x4]
	float InProgressUploadStatsInterval;//[Offset: 0xe98, Size: 0x4]
	<int,None(None)> PlayersToAutobalance;//[Offset: 0xea0, Size: 0x50]
	float WaitingForMorePlayersTime;//[Offset: 0xef0, Size: 0x4]
	float[] MaxTimerPerRemainingPlayers;//[Offset: 0xef8, Size: 0x10]
	WW3MessagePerScore[] MessagesPerScores;//[Offset: 0xf08, Size: 0x10]
	bool bInformAboutTeamWinningAndLosing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf18, Size: 0x1]
	bool bInformAboutHalfWayInScore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf19, Size: 0x1]
	bool bAutowinWhileNoPlayersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1a, Size: 0x1]
	int StrikesAwerenessLimitOnBattlefieldForTeam;//[Offset: 0xf1c, Size: 0x4]
	int StrikesLongRangeSupportLimitOnBattlefieldForTeam;//[Offset: 0xf20, Size: 0x4]
	int StrikesGuardsLimitOnBattlefieldForTeam;//[Offset: 0xf24, Size: 0x4]
	int StrikesAutonomousFightingRobotsLimitOnBattlefieldForTeam;//[Offset: 0xf28, Size: 0x4]
	int StrikesDronesWithoutCannonLimitOnBattlefieldForTeam;//[Offset: 0xf2c, Size: 0x4]
	int StrikesCombatFightingVehiclesLimitOnBattlefieldForTeam;//[Offset: 0xf30, Size: 0x4]
	int StrikesTransportVehiclesLimitOnBattlefieldForTeam;//[Offset: 0xf34, Size: 0x4]
	int StrikesUnmannedFlyingVehiclesLimitOnBattlefieldForTeam;//[Offset: 0xf38, Size: 0x4]
	int StrikesSquadSpawnVehiclesLimitOnBattlefieldForSquad;//[Offset: 0xf3c, Size: 0x4]
	float Slot0CooldownDuration;//[Offset: 0xf40, Size: 0x4]
	float Slot1CooldownDuration;//[Offset: 0xf44, Size: 0x4]
	float Slot2CooldownDuration;//[Offset: 0xf48, Size: 0x4]
	WW3TeamStrikesOnBattlefieldData[] TeamStrikesOnBattlefield;//[Offset: 0xf50, Size: 0x10]
	bool bStrikesAvailableInGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf60, Size: 0x1]
	bool bAllowOffensiveVehicles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf61, Size: 0x1]
	TimerHandle InProgressUploadStatsHandle;//[Offset: 0xf70, Size: 0x8]
	WW3DynamicGameRulesManager* DynamicGameRulesManager;//[Offset: 0xf80, Size: 0x8]
	WW3GameModePhaseManager* GameModePhaseManager;//[Offset: 0xf88, Size: 0x8]
	static void GetTeamColor(Object* WorldContextObject, int InTeam, LinearColor ReturnValue);// 0x10ad7d0

--------------------------------
Class: WW3BotsManager.ActorComponent.Object
	WW3CharacterBot*[] CharacterBots;//[Offset: 0xf0, Size: 0x10]
	WW3AIController*[] AIControllers;//[Offset: 0x100, Size: 0x10]
	bool bAutofillWithBots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	WW3BotsAutofillManager* BotsAutofillManager;//[Offset: 0x118, Size: 0x8]
	WW3BotsDebugManager* BotsDebugManager;//[Offset: 0x120, Size: 0x8]

--------------------------------
Class: WW3CharacterBot.WW3Character.Character.Pawn.Actor.Object
	float NavigationMeshMaxStepHeight;//[Offset: 0x1634, Size: 0x4]
	float DashRunRetryRate;//[Offset: 0x1638, Size: 0x4]
	float DashRunRetryRateDeviation;//[Offset: 0x163c, Size: 0x4]
	BehaviorTree* GameplayBehavior;//[Offset: 0x1640, Size: 0x8]
	BehaviorTree* GameplayDebugBehavior;//[Offset: 0x1648, Size: 0x8]
	Vector BotVelocity;//[Offset: 0x1650, Size: 0xc]
	BoxComponent* BoxComponent;//[Offset: 0x1660, Size: 0x8]
	void OnStopTargeting();// 0xf6e930
	void OnStartTargeting();// 0xf6e910
	void OnRespawnTimerFinished_T();// 0xf6e8f0
	void OnBoxBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult);// 0xf6e680
	void BotVault(bool ReturnValue);// 0xf6e620
	void BotUnCrouch();// 0xf6e600
	void BotStopRunning();// 0xf6e5e0
	void BotStartRunning();// 0xf6e5c0
	void BotStand();// 0xf6e5a0
	void BotProne();// 0xf6e580
	void BotLieOnBack();// 0xf6e560
	void BotCrouch();// 0xf6e540

--------------------------------
Class: WW3BotsAutofillManager.ActorComponent.Object
	WW3TeamGameMode* TeamGameModePointer;//[Offset: 0xf0, Size: 0x8]
	WW3BotsManager* BotsManagerPointer;//[Offset: 0xf8, Size: 0x8]
	TimerHandle AutofillTickTimerHandle_T;//[Offset: 0x100, Size: 0x8]
	void TickAutofill();// 0xf4abb0

--------------------------------
Class: WW3BotsDebugManager.ActorComponent.Object
	WW3BotsManager* BotsManagerPointer;//[Offset: 0xf0, Size: 0x8]
	World* WorldPointer;//[Offset: 0xf8, Size: 0x8]
	WW3PlayerController*[] ControllersRequestingReports;//[Offset: 0x100, Size: 0x10]
	TimerHandle ReportToControllersTimerHandle_T;//[Offset: 0x110, Size: 0x8]

--------------------------------
Class: WW3MessagePerScore
	int ScoreLeftToWin;//[Offset: 0x0, Size: 0x4]
	int PointsBellowToAccept;//[Offset: 0x4, Size: 0x4]
	enum AllyMessage;//[Offset: 0x8, Size: 0x1]
	enum EnemyMessage;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: WW3TeamStrikesOnBattlefieldData
	Actor*[] Awereness;//[Offset: 0x0, Size: 0x10]
	Actor*[] LongRangeSupport;//[Offset: 0x10, Size: 0x10]
	Actor*[] AutonomousFightingRobots;//[Offset: 0x20, Size: 0x10]
	Actor*[] DronesWithoutCannon;//[Offset: 0x30, Size: 0x10]
	Actor*[] CombatFightingVehicles;//[Offset: 0x40, Size: 0x10]
	Actor*[] UnmannedFlyingVehicles;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: WW3GameModePhaseManager.ActorComponent.Object
	WW3DynamicGameRulesManager* DynamicGameRulesManager;//[Offset: 0xf0, Size: 0x8]
	WW3GameState* CurrentGameState;//[Offset: 0xf8, Size: 0x8]
	WW3GameModeData[] PhasesData;//[Offset: 0x100, Size: 0x10]
	float[] PhaseScoreLimits;//[Offset: 0x110, Size: 0x10]
	int[] PhaseRemainingTimeLimit;//[Offset: 0x120, Size: 0x10]
	bool bUseScoreToChangePhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	bool bUseTimeToChangePhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 0x1]
	bool bUseTimeAndScoreToChangePhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x132, Size: 0x1]

--------------------------------
Class: WW3OrderRequestObjective.WW3GameObjective.Object
	WW3PlayerState* LeaderPlayerState;//[Offset: 0x140, Size: 0x8]

--------------------------------
Class: WW3PerformanceMeasureManager.ActorComponent.Object
	<enum,None(None)> ControllersRequestingReports;//[Offset: 0xf8, Size: 0x50]
	WW3PerformanceMeasurePeriod PeriodicMeasurement;//[Offset: 0x148, Size: 0x80]
	WW3ActorPool* ActorPool;//[Offset: 0x1c8, Size: 0x8]

--------------------------------
Class: WW3PerformanceMeasurePeriod
	float PeriodLengthInSeconds;//[Offset: 0x0, Size: 0x4]
	WW3PerformanceLastMeasurePeriodCache PeriodCache;//[Offset: 0x8, Size: 0x58]
	int VerbosePeriods;//[Offset: 0x60, Size: 0x4]
	int WarningPeriods;//[Offset: 0x64, Size: 0x4]
	int ErrorPeriods;//[Offset: 0x68, Size: 0x4]
	int ControllersCount;//[Offset: 0x6c, Size: 0x4]
	int ReplicationNotPausedCounter_Characters;//[Offset: 0x70, Size: 0x4]
	int ReplicationNotPausedCounter_Vehicles;//[Offset: 0x74, Size: 0x4]
	int ReplicationNotPausedCounter_Weapons;//[Offset: 0x78, Size: 0x4]
	int ReplicationNotPausedCounter_Gadgets;//[Offset: 0x7c, Size: 0x4]

--------------------------------
Class: WW3PerformanceLastMeasurePeriodCache
	float PeriodStartTime;//[Offset: 0x0, Size: 0x4]
	float PeriodEndTime;//[Offset: 0x4, Size: 0x4]
	uint16[] FramesPerSecondHistory;//[Offset: 0x8, Size: 0x10]
	enum ReportLevel;//[Offset: 0x1a, Size: 0x1]
	FString[] ActionsHistory;//[Offset: 0x20, Size: 0x10]
	int Vehicle_OnHit_Calls;//[Offset: 0x30, Size: 0x4]
	int Vehicle_BeginOverlap_Calls;//[Offset: 0x34, Size: 0x4]
	int Vehicle_PerformServerMovement_Calls;//[Offset: 0x38, Size: 0x4]
	int DestroyPackManager_OnUsingVersionChanged_Calls;//[Offset: 0x3c, Size: 0x4]
	int DestroyPackManager_SpawnPhysActor_Calls;//[Offset: 0x40, Size: 0x4]
	int DestroyPackManager_TakeDamage_Calls;//[Offset: 0x44, Size: 0x4]
	int ProjectileSpawned_Calls;//[Offset: 0x48, Size: 0x4]
	int Explosion_Calls;//[Offset: 0x4c, Size: 0x4]
	int CharacterTakeDamage_Calls;//[Offset: 0x50, Size: 0x4]
	int VehicleTakeStrikeDamage_Calls;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: WW3ServerTickRateManager.ActorComponent.Object
	<uint16,Explosion_Calls(None)> TickRatePerGameModeAlias;//[Offset: 0xf8, Size: 0x50]

--------------------------------
Class: WW3GameObjectiveSettings
	enum ObjectiveReceiver;//[Offset: 0x0, Size: 0x1]
	enum PrimaryPriority;//[Offset: 0x1, Size: 0x1]
	enum SecondaryPriority;//[Offset: 0x2, Size: 0x1]
	enum RewardReceiver;//[Offset: 0x3, Size: 0x1]
	enum ObjectiveCompletedScore;//[Offset: 0x4, Size: 0x1]
	FText NameText;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: WW3HealRequest.WW3HelpRequests
	int HealthLevelToSendRequest;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: WW3HelpRequests
	class WW3HelpRequestObjective* RequestRelatedObjective;//[Offset: 0x0, Size: 0x8]
	float RequestSendDelay;//[Offset: 0x8, Size: 0x4]
	int RequestVisiblityDistanceThreshold;//[Offset: 0xc, Size: 0x4]
	int RequestAcceptanceDistanceThreshold;//[Offset: 0x10, Size: 0x4]
	enum RequiredGadgetTypeForRequest;//[Offset: 0x14, Size: 0x1]

--------------------------------
Class: WW3HelpRequestObjective.WW3GadgetUseObjective.WW3GameObjective.Object
	enum RequestType;//[Offset: 0x148, Size: 0x1]
	bool bIsManualRequest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1]

--------------------------------
Class: WW3AmmoRequest.WW3HelpRequests

--------------------------------
Class: WW3ArmorRequest.WW3HelpRequests
	float HelmetLevelToSendRequest;//[Offset: 0x18, Size: 0x4]
	float VestLevelToSendRequest;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: WW3EquipmentRequest.WW3HelpRequests

--------------------------------
Class: WW3KnockdownHelpRequest.WW3HelpRequests

--------------------------------
Class: WW3HelpRequestsManager.Object
	<TimerHandle,None(None)> RequestsTimestamp;//[Offset: 0x28, Size: 0x50]
	WW3GameState* CachedGameState;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: WW3GameEventsContainer.Object
	FireTypeOnPostShootEntry[] OnFireTypeOnPostShootForSpecyficController;//[Offset: 0x358, Size: 0x10]

--------------------------------
Class: FireTypeOnPostShootEntry
	WW3PlayerController* PlayerController;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: WW3VehicleSpawnSlotManager.ActorComponent.Object
	WW3LandVehicleSpawnSlot*[] LandVehiclesSpawnSlots;//[Offset: 0xf0, Size: 0x10]
	<WW3LandVehicleSpawnSlots,None(None)> LandVehiclesSpawnSlotsAtCapturePoints;//[Offset: 0x100, Size: 0x50]
	WW3AirVehicleSpawnSlot*[] AirVehiclesSpawnSlots;//[Offset: 0x150, Size: 0x10]
	<WW3AirVehicleSpawnSlots,None(None)> AirVehiclesSpawnSlotsAtCapturePoints;//[Offset: 0x160, Size: 0x50]
	WW3CrateSpawnSlot*[] CrateSpawnSlots;//[Offset: 0x1b0, Size: 0x10]
	<WW3CrateSpawnSlots,None(None)> CrateSpawnSlotsAtCapturePoints;//[Offset: 0x1c0, Size: 0x50]

--------------------------------
Class: WW3LandVehicleSpawnSlot.WW3VehicleSpawnSlot.Actor.Object
	class WW3CrateDropingJet* VehicleTransportClass;//[Offset: 0x348, Size: 0x8]

--------------------------------
Class: WW3VehicleSpawnSlot.Actor.Object
	BoxComponent* CollisionCheckVolume;//[Offset: 0x330, Size: 0x8]
	WW3GameAliasActorRemover* GameAliasActorRemover;//[Offset: 0x338, Size: 0x8]
	enum CapturePoint;//[Offset: 0x340, Size: 0x1]
	int8 Team;//[Offset: 0x341, Size: 0x1]

--------------------------------
Class: WW3CrateDropingJet.Actor.Object
	BillboardComponent* Root;//[Offset: 0x338, Size: 0x8]
	StaticMeshComponent* BodyMesh;//[Offset: 0x340, Size: 0x8]
	SkeletalMeshComponent* PlaneSkeletalMesh;//[Offset: 0x348, Size: 0x8]
	WW3ArtilleryMovementConfig MovementConfig;//[Offset: 0x350, Size: 0x8]
	class WW3FallingCrateBase* FallingCrateClass;//[Offset: 0x358, Size: 0x8]
	WW3AkComponent* AudioComponent;//[Offset: 0x360, Size: 0x8]
	FName CrateAttachSocket;//[Offset: 0x368, Size: 0x8]
	float SpawnHeight;//[Offset: 0x370, Size: 0x4]
	WW3FallingCrateBase* FallingCrate;//[Offset: 0x378, Size: 0x8]
	enum UsedMapWidgetMode;//[Offset: 0x380, Size: 0x1]
	WW3ScoreStreakPreview* ScoreStreakPreview;//[Offset: 0x3a8, Size: 0x8]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x4a8, Size: 0x8]
	PlayerController* AutoViewController;//[Offset: 0x4b0, Size: 0x8]
	float AnimationPercentage;//[Offset: 0x4b8, Size: 0x4]
	float AnimationStart;//[Offset: 0x4bc, Size: 0x4]
	class WW3VehicleDropPointMDC* DropPointMapMarkerClass;//[Offset: 0x4c0, Size: 0x8]
	WW3VehicleDropPointMDC* DropPointMapMarker;//[Offset: 0x4c8, Size: 0x8]
	WW3ActorMarker* MarkerComp;//[Offset: 0x4d0, Size: 0x8]
	WW3InventoryGadgetStrike* InventoryGadgetRef;//[Offset: 0x4e0, Size: 0x8]
	PlayerController* ActiveViewController;//[Offset: 0x4e8, Size: 0x8]
	float FadeLength;//[Offset: 0x4f0, Size: 0x4]
	class Actor* CustomCrateClass;//[Offset: 0x4f8, Size: 0x8]
	void OnRep_FallingCrate();// 0xf8c420
	void OnRep_AutoViewController();// 0xf8c400
	void OnActorStopOverlapLandingArea(Actor* InActor);// 0xf8c2c0
	void OnActorStartOverlapLandingArea(Actor* InActor);// 0xf8c2c0
	void Movement(float DeltaTime);// 0xf8c240

--------------------------------
Class: WW3ArtilleryMovementConfig
	float Speed;//[Offset: 0x0, Size: 0x4]
	float FlightTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WW3FallingCrateBase.Actor.Object
	WW3ScoreStreakPreview* ScoreStreakPreview;//[Offset: 0x338, Size: 0x8]
	PlayerController* AutoViewController;//[Offset: 0x430, Size: 0x8]
	float FadeLength;//[Offset: 0x438, Size: 0x4]
	float FadeOutLength;//[Offset: 0x43c, Size: 0x4]
	float LifeSpanAfterDropFinished;//[Offset: 0x460, Size: 0x4]
	float VehicleSpawnDeplay;//[Offset: 0x464, Size: 0x4]
	float CrateFromGroundOffset;//[Offset: 0x468, Size: 0x4]
	float DropSpeed;//[Offset: 0x46c, Size: 0x4]
	float DropTime;//[Offset: 0x470, Size: 0x4]
	SkeletalMeshComponent* CrateMesh;//[Offset: 0x478, Size: 0x8]
	BoxComponent* KillingBoxComponent;//[Offset: 0x480, Size: 0x8]
	WW3FallingCrateEffects Effects;//[Offset: 0x488, Size: 0x88]
	WW3Vehicle* CarriedVehicle;//[Offset: 0x520, Size: 0x8]
	WW3InventoryGadgetStrike* InventoryGadgetRef;//[Offset: 0x528, Size: 0x8]
	ViewTargetTransitionParams TransitionParams;//[Offset: 0x530, Size: 0x10]
	enum SoundDistance;//[Offset: 0x540, Size: 0x1]
	enum SoundPriority;//[Offset: 0x541, Size: 0x1]
	float TargetHeight;//[Offset: 0x550, Size: 0x4]
	enum CrateFallingStateReplicated;//[Offset: 0x554, Size: 0x1]
	WW3FallingCrateStateEffects ActiveStateEffects;//[Offset: 0x558, Size: 0x18]
	BillboardComponent* RootBillboard;//[Offset: 0x578, Size: 0x8]
	WW3AkComponent* SoundComponent;//[Offset: 0x580, Size: 0x8]
	float DropStartTime;//[Offset: 0x588, Size: 0x4]
	Vector DropStartPos;//[Offset: 0x58c, Size: 0xc]
	Vector DropStartPos_Local;//[Offset: 0x598, Size: 0xc]
	Rotator DropStartRot;//[Offset: 0x5a4, Size: 0xc]
	Rotator DropTargetRot;//[Offset: 0x5b0, Size: 0xc]
	WW3Vehicle* SpawnedVehicleReference;//[Offset: 0x5c8, Size: 0x8]
	void OnVehicleReachedFinalLocation();// 0xfae980
	void OnRep_DropStartPos();// 0xfae890
	void OnRep_CrateFallingStateReplicated();// 0xf22330
	void OnRep_CarriedVehicle(WW3Vehicle* PreviousVehicle);// 0xfae6f0
	void OnRep_AutoViewController();// 0xfae6b0
	void OnKillingBoxBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult);// 0xfae4a0
	void OnFadeOutFinished();// 0xfae480

--------------------------------
Class: WW3FallingCrateEffects
	<WW3FallingCrateStateEffects,None(None)> States;//[Offset: 0x0, Size: 0x50]
	AkAudioEvent* FallingSound;//[Offset: 0x50, Size: 0x8]
	AkAudioEvent* GroundHitSound;//[Offset: 0x58, Size: 0x8]
	ParticleSystem* ParticleOnReachTargetPlace;//[Offset: 0x60, Size: 0x28]

--------------------------------
Class: WW3FallingCrateStateEffects
	AnimSequence* Anim;//[Offset: 0x0, Size: 0x8]
	float SpeedMultiplier;//[Offset: 0x8, Size: 0x4]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float StateEndDropAlpha;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WW3VehicleDropPointMDC.WW3MapDrawingComponent.ActorComponent.Object

--------------------------------
Class: WW3GameAliasActorRemover.ActorComponent.Object
	enum[] ShouldExistInGameAliases;//[Offset: 0xf0, Size: 0x10]

--------------------------------
Class: WW3LandVehicleSpawnSlots
	WW3LandVehicleSpawnSlot*[] Slots;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3AirVehicleSpawnSlot.WW3VehicleSpawnSlot.Actor.Object

--------------------------------
Class: WW3AirVehicleSpawnSlots
	WW3AirVehicleSpawnSlot*[] Slots;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3CrateSpawnSlot.WW3VehicleSpawnSlot.Actor.Object
	class WW3AirVehicleRotorEvac* EvacActorClass;//[Offset: 0x348, Size: 0x8]

--------------------------------
Class: WW3CrateSpawnSlots
	WW3CrateSpawnSlot*[] Slots;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a0, Size: 0x1]
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a0, Size: 0x1]
	static void LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, bool bOutSuccess, LevelStreamingDynamic* ReturnValue);// 0x2545d80
	static void LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, bool bOutSuccess, LevelStreamingDynamic* ReturnValue);// 0x2545b80

--------------------------------
Class: WW3LastKillShowcaseInfo
	WW3PlayerState* LastKiller;//[Offset: 0x0, Size: 0x8]
	WW3PlayerState* LastVictim;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WW3ServerInfo
	FString ServerIP;//[Offset: 0x0, Size: 0x10]
	FString GamePort;//[Offset: 0x10, Size: 0x10]
	UInt32Property QueryPort;//[Size: 0x4]
	UInt32Property RejoinServicePort;//[Size: 0x4]
	FString GroupName;//[Offset: 0x28, Size: 0x10]
	FString GroupID;//[Offset: 0x38, Size: 0x10]
	FString MapName;//[Offset: 0x48, Size: 0x10]
	FString GameModeAlias;//[Offset: 0x58, Size: 0x10]
	FString GameProfileID;//[Offset: 0x68, Size: 0x10]
	FString ResourceID;//[Offset: 0x78, Size: 0x10]
	byte DedicatedServerManagerPlayersAmount;//[Offset: 0x88, Size: 0x1]
	byte PlayerStatesAmount;//[Offset: 0x89, Size: 0x1]
	FString ServiceID;//[Offset: 0x90, Size: 0x10]
	FString BuildID;//[Offset: 0xa0, Size: 0x10]
	bool bReserved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]

--------------------------------
Class: WW3StrikeSlotPickerWidgetContext
	enum ScoreStreakCategory;//[Offset: 0x0, Size: 0x1]
	CustomizationItemData ItemData;//[Offset: 0x8, Size: 0xd8]
	int StrikeCost;//[Offset: 0xe0, Size: 0x4]
	WW3UIStrikeStatsTableRow UIStrikeStats;//[Offset: 0xe8, Size: 0x18]
	Texture2D* StrikeIcon;//[Offset: 0x100, Size: 0x8]

--------------------------------
Class: WW3UIStrikeStatsTableRow.TableRowBase
	FText[] Stats;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TableRowBase

--------------------------------
Class: WW3FakeMinimap.UserWidget.Widget.Visual.Object
	WW3GameplayMap* GameplayMap;//[Offset: 0x210, Size: 0x8]
	CanvasRenderTarget2D* MinimapRenderTarget;//[Offset: 0x218, Size: 0x8]

--------------------------------
Class: WW3RecordingActor.Actor.Object
	SceneComponent* SceneComponent;//[Offset: 0x330, Size: 0x8]
	ChildActorComponent* ChildActorComponent;//[Offset: 0x338, Size: 0x8]
	class AnimInstance* InAnimClass;//[Offset: 0x340, Size: 0x8]
	SceneComponent* Capture2DSceneComponent;//[Offset: 0x348, Size: 0x8]
	SceneCaptureComponent2D* Capture2DComponent;//[Offset: 0x350, Size: 0x8]
	ArrowComponent* HeadArrowComponent;//[Offset: 0x358, Size: 0x8]
	ArrowComponent* LegsArrowComponent;//[Offset: 0x360, Size: 0x8]
	float CameraMoveTime;//[Offset: 0x368, Size: 0x4]

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ArrowColor;//[Offset: 0x580, Size: 0x4]
	float ArrowSize;//[Offset: 0x584, Size: 0x4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]
	float ScreenSize;//[Offset: 0x58c, Size: 0x4]
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x590, Size: 0x1]
	void SetArrowColor(LinearColor NewColor);// 0x24a4790

--------------------------------
Class: WW3InGameBackpackWidget.UserWidget.Widget.Visual.Object
	TileView* TileView;//[Offset: 0x208, Size: 0x8]
	void OnItemDoubleClicked(Object* ListItem);// 0xff2a40

--------------------------------
Class: TileView.ListView.ListViewBase.Widget.Visual.Object
	float EntryHeight;//[Offset: 0x328, Size: 0x4]
	float EntryWidth;//[Offset: 0x32c, Size: 0x4]
	enum TileAlignment;//[Offset: 0x330, Size: 0x1]
	bool bWrapHorizontalNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1]
	void SetEntryWidth(float NewWidth);// 0x1d16560
	void SetEntryHeight(float NewHeight);// 0x1d164e0

--------------------------------
Class: ListView.ListViewBase.Widget.Visual.Object
	byte SelectionMode;//[Offset: 0x2b0, Size: 0x1]
	enum ConsumeMouseWheel;//[Offset: 0x2b1, Size: 0x1]
	bool bClearSelectionOnClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 0x1]
	float EntrySpacing;//[Offset: 0x2b4, Size: 0x4]
	Object*[] ListItems;//[Offset: 0x2b8, Size: 0x10]
	delegate BP_OnItemClicked;//[Offset: 0x2d8, Size: 0x10]
	delegate BP_OnItemDoubleClicked;//[Offset: 0x2e8, Size: 0x10]
	delegate BP_OnItemIsHoveredChanged;//[Offset: 0x2f8, Size: 0x10]
	delegate BP_OnItemSelectionChanged;//[Offset: 0x308, Size: 0x10]
	delegate BP_OnItemScrolledIntoView;//[Offset: 0x318, Size: 0x10]
	void SetSelectionMode(byte SelectionMode);// 0x1d09be0
	void SetSelectedIndex(int Index);// 0x1d09b60
	void ScrollIndexIntoView(int Index);// 0x1d09830
	void NavigateToIndex(int Index);// 0x1d09700
	void IsRefreshPending(bool ReturnValue);// 0x1d096d0
	void GetNumItems(int ReturnValue);// 0x1d09490
	void GetListItems(Object*[] ReturnValue);// 0x1d09420
	void GetItemAt(int Index, Object* ReturnValue);// 0x1d09360
	void GetIndexForItem(Object* Item, int ReturnValue);// 0x1d092d0
	void ClearListItems();// 0x1d091d0
	void BP_SetSelectedItem(Object* Item);// 0x1d09150
	void BP_SetListItems(Object*[] InListItems);// 0x1d090a0
	void BP_SetItemSelection(Object* Item, bool bSelected);// 0x1d08fd0
	void BP_ScrollItemIntoView(Object* Item);// 0x1d08f50
	void BP_NavigateToItem(Object* Item);// 0x1d08ed0
	void BP_IsItemVisible(Object* Item, bool ReturnValue);// 0x1d08e40
	void BP_GetSelectedItems(Object*[] items, bool ReturnValue);// 0x1d08d80
	void BP_GetSelectedItem(Object* ReturnValue);// 0x1d08d50
	void BP_GetNumItemsSelected(int ReturnValue);// 0x1d08d20
	void BP_ClearSelection();// 0x1d08d00
	void BP_CancelScrollIntoView();// 0x1d08ce0
	void AddItem(Object* Item);// 0x1d08c60

--------------------------------
Class: ListViewBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x100, Size: 0x8]
	delegate BP_OnEntryGenerated;//[Offset: 0x108, Size: 0x10]
	delegate BP_OnEntryReleased;//[Offset: 0x118, Size: 0x10]
	void ScrollToTop();// 0x1d098d0
	void ScrollToBottom();// 0x1d098b0
	void RegenerateAllEntries();// 0x1d09810
	void GetDisplayedEntryWidgets(UserWidget*[] ReturnValue);// 0x1d09240

--------------------------------
Class: WW3LocalPlayerHighlightMDC.WW3MapDrawingComponent.ActorComponent.Object
	Vector2D MapSize;//[Offset: 0x238, Size: 0x8]
	Vector2D MarkerOffset;//[Offset: 0x240, Size: 0x8]

--------------------------------
Class: WW3BattleZoneVolume.PhysicsVolume.Volume.Brush.Actor.Object
	int8 Team;//[Offset: 0x380, Size: 0x1]
	enum UsableInGamemode;//[Offset: 0x381, Size: 0x1]
	enum[] AdditionalUsableInGamemode;//[Offset: 0x388, Size: 0x10]
	WW3BattleZoneVolume* WaitingZoneReference;//[Offset: 0x3a0, Size: 0x8]
	TimerHandle RetreatUpdateTimerHandle_T;//[Offset: 0x3a8, Size: 0x8]
	bool bIsRetreatZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 0x1]
	bool bIsRegroupZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b1, Size: 0x1]
	void OnOverlapEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xf45d30
	void OnOverlapBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult);// 0xf45a00

--------------------------------
Class: WW3InGameCustomizationDisp.Object
	WW3WeaponAttachment*[] CurrentAttachments;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: WW3InGameSeparateAttachments.Object

--------------------------------
Class: WW3PlayerInventoryBackpack.Actor.Object
	StaticMeshComponent* StaticMesh;//[Offset: 0x338, Size: 0x8]
	bool DebugFillBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	AttachmentData[] InGameAttachmentsData;//[Offset: 0x348, Size: 0x10]
	FName PlayerName;//[Offset: 0x358, Size: 0x8]
	void Multicast_UpdateBackpackView(AttachmentData[] GameAttachmentsData);// 0x1048370

--------------------------------
Class: AttachmentData
	int Amount;//[Offset: 0x0, Size: 0x4]
	uint16 AttachmentId;//[Offset: 0x4, Size: 0x2]
	uint16 SkinID;//[Offset: 0x6, Size: 0x2]
	uint16 ArmorType;//[Offset: 0x8, Size: 0x2]
	enum GadgetSlotType;//[Offset: 0xa, Size: 0x1]
	enum AttachmentOrigin;//[Offset: 0xb, Size: 0x1]

--------------------------------
Class: SpectatePoint
	SpectateCapturePoint SpectateCapturePoint;//[Offset: 0x0, Size: 0x10]
	Actor* SpectateActor;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SpectateCapturePoint
	WW3CapturePoint* CapturePoint;//[Offset: 0x0, Size: 0x8]
	enum CapturePointType;//[Offset: 0x8, Size: 0x1]
	bool FirstItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: WW3ProfileLoadoutOptimized
	WW3CustomizationConfigOptimized CharacterAttachments;//[Offset: 0x0, Size: 0x38]
	uint16[] Taunts;//[Offset: 0x38, Size: 0x10]
	uint16[] Emblems;//[Offset: 0x48, Size: 0x10]
	FString VoiceOver;//[Offset: 0x58, Size: 0x10]
	WW3EquipmentLoadoutOptimized[] SelectedConfig;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: WW3CustomizationConfigOptimized
	uint16[] AttachmentsIds;//[Offset: 0x0, Size: 0x10]
	uint16 CurrentSkinId;//[Offset: 0x10, Size: 0x2]
	uint16[] CurrentAttachmentSkinsIds;//[Offset: 0x18, Size: 0x10]
	byte[] CurrentAttachmentToSkinTypes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: WW3EquipmentLoadoutOptimized
	WW3ItemConfigOptimized[] WeaponsCustomization;//[Offset: 0x0, Size: 0x10]
	WW3ItemConfigOptimized[] StrikesLoadout;//[Offset: 0x10, Size: 0x10]
	uint16 ArmorId;//[Offset: 0x20, Size: 0x2]
	uint16 HelmetArmorId;//[Offset: 0x22, Size: 0x2]
	uint16 PrimaryGadgetId;//[Offset: 0x24, Size: 0x2]
	uint16 SecondaryGadgetId;//[Offset: 0x26, Size: 0x2]

--------------------------------
Class: WW3ItemConfigOptimized
	uint16 ItemId;//[Offset: 0x0, Size: 0x2]
	WW3CustomizationConfigOptimized SelectedConfig;//[Offset: 0x8, Size: 0x38]

--------------------------------
Class: WW3MobileSpawnGadget.Actor.Object
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x340, Size: 0x8]
	class WW3MapDrawingComponent* MobileSpawnGadgetMDCClass;//[Offset: 0x348, Size: 0x8]
	class WW3BorderSelectorMDC* BorderSelectorMDCClass;//[Offset: 0x350, Size: 0x8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	float DamageToTake;//[Offset: 0x35c, Size: 0x4]
	WW3MobileSpawnDetonationConfig DetonationConfig;//[Offset: 0x360, Size: 0x8]
	byte Team;//[Offset: 0x368, Size: 0x1]
	bool ReturnToInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 0x1]
	WW3MapDrawingComponent* MobileSpawnGadgetMDC;//[Offset: 0x370, Size: 0x8]
	WW3BorderSelectorMDC* BorderSelectorMDC;//[Offset: 0x378, Size: 0x8]
	void OnRep_Team(byte TeamOld);// 0xfc2a40
	void Multicast_SpawnExplosionEffect();// 0xf3d810

--------------------------------
Class: WW3BorderSelectorMDC.WW3MapDrawingComponent.ActorComponent.Object
	WW3MapDrawingComponent* FollowedMDC;//[Offset: 0x238, Size: 0x8]

--------------------------------
Class: WW3MobileSpawnDetonationConfig
	class ShooterExplosionEffect* ExplosionTemplate;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: WW3SatelliteObject_Vehicle.WW3SatelliteObject.Actor.Object
	class WW3SatelliteObjectMapDrawingComp* MobileSpawnMDC;//[Offset: 0x3b8, Size: 0x8]
	WW3SatelliteObjectVehicleConfigurationData Configuration;//[Offset: 0x3c0, Size: 0x7]
	WW3PlayerState*[] PlayersInsideVehicle;//[Offset: 0x3c8, Size: 0x10]
	WW3PlayerState*[] LastValidPlayersInVehicle;//[Offset: 0x3d8, Size: 0x10]
	WW3PlayerState* ClMySquadLeaderInside;//[Offset: 0x400, Size: 0x8]
	WW3SatelliteVehicleData ClSatelliteVehicleData;//[Offset: 0x408, Size: 0x78]
	void OnRep_PlayersInsideVehicle();// 0x107ee40
	void OnRep_Configuration();// 0x107ee00

--------------------------------
Class: WW3SatelliteObjectVehicleConfigurationData
	enum MDCVariableToUse;//[Offset: 0x0, Size: 0x1]
	enum VehicleType;//[Offset: 0x1, Size: 0x1]
	int8 TotalNumberOfSeats;//[Offset: 0x2, Size: 0x1]
	byte TeamSetExternally;//[Offset: 0x3, Size: 0x1]
	enum VehicleExactType;//[Offset: 0x4, Size: 0x1]
	enum MarkerConfigType;//[Offset: 0x5, Size: 0x1]
	bool bApplyTeamSetExternallyAsCurrentTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]

--------------------------------
Class: WW3SatelliteVehicleData
	class WW3MarkerConfig* MarkerConfigClass;//[Offset: 0x0, Size: 0x28]
	WW3MarkerConfig* MarkerConfig;//[Offset: 0x38, Size: 0x8]
	MaterialInstanceDynamic* MapMaterialInstance;//[Offset: 0x40, Size: 0x8]
	Texture* Texture;//[Offset: 0x48, Size: 0x8]
	Texture2D* IconTexture;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x170, Size: 0x10]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x2735020
	void GetTagCooldownEndTime(GameplayTag CooldownTag, float ReturnValue);// 0x2734930
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x27346c0

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: WW3TeamStrikeSpawnPoint.Actor.Object
	Actor*[] AllowedActors;//[Offset: 0x338, Size: 0x10]
	int Team;//[Offset: 0x348, Size: 0x4]

--------------------------------
Class: WW3ThrowableGrenade.WW3Throwable.Actor.Object
	class ShooterExplosionEffect* ExplosionTemplate;//[Offset: 0x518, Size: 0x8]
	WW3GrenadeMovementComponent* m_ProjectileMovementComponent;//[Offset: 0x520, Size: 0x8]
	WW3AkComponent* BouncingSoundComponent;//[Offset: 0x528, Size: 0x8]
	float TimeToExplode;//[Offset: 0x530, Size: 0x4]
	float OwnerInvisibilityAfterThrowRange;//[Offset: 0x538, Size: 0x4]
	WW3SoundEffect EquipGrenadeSound;//[Offset: 0x540, Size: 0x10]
	WW3SoundEffect PullingOutSound;//[Offset: 0x550, Size: 0x10]
	WW3SoundEffect ThrowingSound;//[Offset: 0x560, Size: 0x10]
	WW3SoundEffect BouncingSound;//[Offset: 0x570, Size: 0x10]
	WW3ProgressableMarkerGrenade* MarkerComponent;//[Offset: 0x580, Size: 0x8]
	enum BarkToPlayOnThrown;//[Offset: 0x588, Size: 0x2]
	Vector StartTraceLocation;//[Offset: 0x58c, Size: 0xc]
	Vector GrenadeThrowDiretion;//[Offset: 0x598, Size: 0xc]
	float UpCameraGrenadeThrowMultiply;//[Offset: 0x5a4, Size: 0x4]
	float DownCameraGrenadeThrowMultiply;//[Offset: 0x5a8, Size: 0x4]
	float GrenadeThrowPower;//[Offset: 0x5ac, Size: 0x4]
	float AdditionalGrenadeThrowPower;//[Offset: 0x5b0, Size: 0x4]
	float ThrowMultiplier;//[Offset: 0x5b4, Size: 0x4]
	float OffsetGrenadeLoc;//[Offset: 0x5b8, Size: 0x4]
	int8 Team;//[Offset: 0x5bc, Size: 0x1]
	bool SoldierDetectionDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5bd, Size: 0x1]
	bool bDisablePhysicsOnExplode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5bd, Size: 0x1]
	bool bShouldExplodeInHand;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5bd, Size: 0x1]
	bool bShouldSimulatePhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5bd, Size: 0x1]
	bool bRotateExplosionParticle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5bd, Size: 0x1]
	bool bShouldExplosionBeAttachedToGrenade;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5bd, Size: 0x1]
	bool bShouldUseInterp;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5bd, Size: 0x1]
	ShooterExplosionEffect* EffectActor;//[Offset: 0x5d8, Size: 0x8]
	ParticleSystemComponent* ParticleComponent;//[Offset: 0x5e0, Size: 0x8]
	TimerHandle ExplodeTimerHandle;//[Offset: 0x5e8, Size: 0x8]
	TimerHandle SoldierCloseCheckTimerHandle;//[Offset: 0x5f0, Size: 0x8]
	bool bIsArmed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 0x1]
	bool bIsExploding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f9, Size: 0x1]
	float ReplicationInterpSpeed;//[Offset: 0x608, Size: 0x4]
	float TargetInterpSpeed;//[Offset: 0x60c, Size: 0x4]
	bool bIsDropBomb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1]
	float DropBombWobbleSinMod;//[Offset: 0x614, Size: 0x4]
	float BombDropAngleMultiplier;//[Offset: 0x680, Size: 0x4]
	void SimulatedCacheMovementOnGrenadeBounce(HitResult ImpactResult, Vector ImpactVelocity);// 0x10b16b0
	void OnThrowableGrenadeStop(HitResult InImpactResult);// 0x10b12c0
	void OnGrenadeBounce(HitResult ImpactResult, Vector ImpactVelocity);// 0x10b0cd0
	void Multicast_OnGrenadeBounce(HitResult ImpactResult, Vector ImpactVelocity);// 0x10b0bf0
	void Multicast_OnExploded();// 0x105b470

--------------------------------
Class: WW3GrenadeMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	CurveFloat* GravityScaleCurve;//[Offset: 0x200, Size: 0x8]
	bool bRotationInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1]
	WW3ThrowableGrenade* ProjectileOwner;//[Offset: 0x280, Size: 0x8]

--------------------------------
Class: WW3ProgressableMarkerGrenade.WW3ProgressableMarker.WW3ActorMarker.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	WW3ThrowableGrenade* OwnerGrenade;//[Offset: 0xc98, Size: 0x8]
	float DamagableDistance;//[Offset: 0xca0, Size: 0x4]
	void OnOwnerGrenadeBounce();// 0x10577d0

--------------------------------
Class: WW3AreaOfEffect.Actor.Object
	ParticleSystem* AreaOfEffectExplosion;//[Offset: 0x380, Size: 0x28]
	Vector AreaOfEffectExplosionScale;//[Offset: 0x3a8, Size: 0xc]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x3b8, Size: 0x8]
	float EffectDuration;//[Offset: 0x3c0, Size: 0x4]
	class WW3DamageType* DamageTypeToApply;//[Offset: 0x3c8, Size: 0x8]
	float DamagePerSecond;//[Offset: 0x3d0, Size: 0x4]
	float DelayBetweenHits;//[Offset: 0x3d4, Size: 0x4]
	Controller* DamageInstigator;//[Offset: 0x3d8, Size: 0x8]
	ParticleSystem* SelectedAreaOfEffectExplosionParticle;//[Offset: 0x3e0, Size: 0x28]
	WW3AreaOfEffect*[] AoFGrenades;//[Offset: 0x418, Size: 0x10]
	Actor*[] ActorsToDamage;//[Offset: 0x428, Size: 0x10]
	OverlapResult[] OverlapResults;//[Offset: 0x438, Size: 0x10]
	class WW3InventoryItem* InventoryItemClass;//[Offset: 0x458, Size: 0x8]
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x460, Size: 0x8]
	bool bShouldDamageOnlyPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xf3a8d0
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult);// 0xf3a6c0
	void OnAoFDestroyed(Actor* DestroyedActor);// 0xf3a600

--------------------------------
Class: OverlapResult
	Actor* Actor;//[Offset: 0x0, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x8, Size: 0x8]
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: WW3HVT.Actor.Object
	SkeletalMeshComponent* RootComponentSkeletalMesh;//[Offset: 0x340, Size: 0x8]
	Texture2D* RadialRangeTexture;//[Offset: 0x348, Size: 0x8]
	class WW3HVTObjectMDC* HVTObjectMDCClass;//[Offset: 0x350, Size: 0x8]
	class WW3ReconHVTLocationMDC* HVTLocationMDCClass;//[Offset: 0x358, Size: 0x8]
	SphereComponent* UsableVolume;//[Offset: 0x360, Size: 0x8]
	float HVTRadarRadius;//[Offset: 0x368, Size: 0x4]
	bool RevealHVTLocationOnStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 0x1]
	float InteractionTime;//[Offset: 0x370, Size: 0x4]
	Vector ActorLocationRelativeOffsetForTraces;//[Offset: 0x374, Size: 0xc]
	HVTSyncInfo HVTSyncInfoState;//[Offset: 0x380, Size: 0x10]
	Vector RadarLocation;//[Offset: 0x390, Size: 0xc]
	AkAudioEvent* BeepStartEvent;//[Offset: 0x3b0, Size: 0x8]
	AkAudioEvent* BeepStopEvent;//[Offset: 0x3b8, Size: 0x8]
	class WW3GameObjective* StartHVTTransmissionObjectiveClass;//[Offset: 0x3c0, Size: 0x8]
	class WW3GameObjective* StartEvacObjectiveClass;//[Offset: 0x3c8, Size: 0x8]
	WW3AkComponent* HVTSoundComponent;//[Offset: 0x3d0, Size: 0x8]
	float HVTDropRadious;//[Offset: 0x3d8, Size: 0x4]
	bool AddScorePoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 0x1]
	WW3ActorMarker* MarkerComponent;//[Offset: 0x420, Size: 0x8]
	WW3HVTObjectMDC* HVTObjectMDC;//[Offset: 0x428, Size: 0x8]
	WW3ReconHVTLocationMDC* HVTLocationMDC;//[Offset: 0x430, Size: 0x8]
	HVTIntelData IntelData;//[Offset: 0x438, Size: 0xc]
	enum MarkerConfig;//[Offset: 0x450, Size: 0x1]
	Texture2D* EventTexture;//[Offset: 0x458, Size: 0x8]
	WW3PlayerState* PrevOwner;//[Offset: 0x460, Size: 0x8]
	void OnShowHVTMesh();// 0x1395e00
	void OnRep_IntelData(HVTIntelData OldIntelData);// 0xfe9a90
	void OnRep_HVTInformation(HVTSyncInfo OldValue);// 0xfe99f0
	void OnOwnerDestroyed(Actor* DestroyedActor);// 0xfe9760
	void OnOwnerDeath();// 0xfe9740
	void Multicast_OnStopCloseAnimFX();// 0xf3d810
	void Multicast_OnStartCloseAnimFX();// 0x45e170

--------------------------------
Class: WW3HVTObjectMDC.WW3MapDrawingComponent.ActorComponent.Object
	WW3HVT* CachedOwner;//[Offset: 0x238, Size: 0x8]

--------------------------------
Class: WW3ReconHVTLocationMDC.WW3MapDrawingComponent.ActorComponent.Object

--------------------------------
Class: HVTSyncInfo
	int8 syncState;//[Offset: 0x0, Size: 0x1]
	Pawn* PawnOwner;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: HVTIntelData
	int8 VisibleToTeam1;//[Offset: 0x0, Size: 0x1]
	int8 VisibleToTeam2;//[Offset: 0x1, Size: 0x1]
	Vector2D MapRandomPosition;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: WW3ReconZoneVolume.PhysicsVolume.Volume.Brush.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x380, Size: 0x8]
	FString VolumeName;//[Offset: 0x388, Size: 0x10]
	float NormalAngleThreshold;//[Offset: 0x398, Size: 0x4]
	float VerticesMergeThreshold;//[Offset: 0x39c, Size: 0x4]
	Texture2D* AreaMainTexture;//[Offset: 0x3a0, Size: 0x8]
	Texture2D* ZoneMainTextureSoftObjPtr;//[Offset: 0x3a8, Size: 0x28]
	FString[] ConnectedVolumes;//[Offset: 0x3d0, Size: 0x10]
	Actor*[] EvacPoints;//[Offset: 0x3e0, Size: 0x10]
	WW3ReconItemSpawner*[] ReconDropPoints;//[Offset: 0x3f0, Size: 0x10]
	WW3AkComponent* AkComponent;//[Offset: 0x400, Size: 0x8]
	enum ZoneState;//[Offset: 0x408, Size: 0x1]
	WW3ReconZoneVolumeMDC* ReconZoneVolumeMDC;//[Offset: 0x410, Size: 0x8]
	Actor*[] VolumeActorArray;//[Offset: 0x418, Size: 0x10]
	Texture2D* ZoneMainTexture;//[Offset: 0x430, Size: 0x8]
	WW3ReconZoneMarker* ReconZoneMarker;//[Offset: 0x448, Size: 0x8]
	MaterialInstanceDynamic* ZoneVolumeDynamicMaterialInstance;//[Offset: 0x450, Size: 0x8]
	TimerHandle ZoneHeightChangeTimer;//[Offset: 0x458, Size: 0x8]
	TimerHandle UpdateZoneOpacityTimer;//[Offset: 0x460, Size: 0x8]
	void UpdateZoneOpacity_T();// 0x10703c0
	void UpdateZoneHeight_T();// 0x10703a0
	void OnRep_ZoneState();// 0x10702c0
	void OnOverlapEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x106fe80
	void OnOverlapBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult);// 0x106fc90

--------------------------------
Class: WW3ReconItemSpawner.WW3Spawner.Actor.Object
	enum ReconItemSpawnGroup;//[Offset: 0x3d0, Size: 0x1]
	float InitialVehicleHealth;//[Offset: 0x3d4, Size: 0x4]
	int8 SpawnerGroup;//[Offset: 0x3d8, Size: 0x1]
	WW3InventoryItem* SpawnedItem;//[Offset: 0x3f0, Size: 0x8]
	WW3Vehicle* SpawnedVehicle;//[Offset: 0x3f8, Size: 0x8]
	Actor* SpawnedCrate;//[Offset: 0x400, Size: 0x8]
	void DropVehicle_T();// 0x1066de0

--------------------------------
Class: WW3ReconZoneVolumeMDC.WW3MapDrawingComponent.ActorComponent.Object
	WW3ReconZoneVolume* CachedOwner;//[Offset: 0x238, Size: 0x8]
	WW3DrawZoneInternalBase* DrawZoneInternal;//[Offset: 0x240, Size: 0x8]

--------------------------------
Class: WW3DrawZoneInternalBase.Object
	WW3ReconZoneVolume* CachedOwner;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WW3ReconZoneMarker.WW3CapturePointMarker.WW3ProgressableMarker.WW3ActorMarker.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WW3ReconTransmissionObject.Actor.Object
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x350, Size: 0x8]
	byte TransmissionTime;//[Offset: 0x358, Size: 0x1]
	int8 JammerSlowDown;//[Offset: 0x359, Size: 0x1]
	float TransmissionRadious;//[Offset: 0x35c, Size: 0x4]
	AkAudioEvent* transmissionStartEvent;//[Offset: 0x360, Size: 0x8]
	AkAudioEvent* transmissionSuccessEvent;//[Offset: 0x368, Size: 0x8]
	AkAudioEvent* transmissionFailedEvent;//[Offset: 0x370, Size: 0x8]
	AkAudioEvent* transmissionSuccessEventGlobal;//[Offset: 0x378, Size: 0x8]
	class WW3GameObjective* FinalizeHVTTransmissionObjectiveClass;//[Offset: 0x380, Size: 0x8]
	WW3ReconTransmissionobjectMDC* ReconTransmissionObjectMDC;//[Offset: 0x388, Size: 0x8]
	WW3NoiseManagerActor* NoiseManagerActor;//[Offset: 0x390, Size: 0x8]
	WW3AkComponent* TransmissionStartComponent;//[Offset: 0x398, Size: 0x8]
	class WW3ReconTransmissionobjectMDC* TransmissionObjectMDCClass;//[Offset: 0x3a0, Size: 0x8]
	enum TransmitionState;//[Offset: 0x3a8, Size: 0x1]
	byte TeamNumber;//[Offset: 0x3a9, Size: 0x1]
	int16 RemainingTime;//[Offset: 0x3aa, Size: 0x2]
	byte actualTransmissionTime;//[Offset: 0x3ac, Size: 0x1]
	Vector2D TransmissionLocation;//[Offset: 0x3b0, Size: 0x8]
	WW3HVT*[] OwningHVT;//[Offset: 0x3b8, Size: 0x10]
	TimerHandle transmissionTimerHandle;//[Offset: 0x3c8, Size: 0x8]
	WW3ProgressableMarker* MarkerComponent;//[Offset: 0x3d0, Size: 0x8]
	class Object* StrikeCrateToSpawn;//[Offset: 0x3d8, Size: 0x28]
	bool IsInTransmissionZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 0x1]
	void OnRep_TransmitionState();// 0x10702a0
	void OnRep_TrannsmissionLocation();// 0x1070280
	void OnRep_TeamNumber();// 0x5d2c60
	void OnRep_RemainingTime();// 0x1070240
	void Multicast_StopTransmissionEffects();// 0xf3d810

--------------------------------
Class: WW3ReconTransmissionobjectMDC.WW3MapDrawingComponent.ActorComponent.Object
	WW3ReconTransmissionObject* CachedOwner;//[Offset: 0x238, Size: 0x8]

--------------------------------
Class: WW3AudioVolumeInfo
	WW3AudioVolume* AudioVolume;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: WW3FootstepVolume.Volume.Brush.Actor.Object
	class WW3PhysicalMaterialWrapper* OverrideMaterial;//[Offset: 0x388, Size: 0x8]
	enum Type;//[Offset: 0x390, Size: 0x1]

--------------------------------
Class: WW3PassingByBulletSoundPool.ActorComponent.Object
	WW3PassingByBulletSound*[] FreePool;//[Offset: 0xf0, Size: 0x10]
	WW3PassingByBulletSound*[] UsedPool;//[Offset: 0x100, Size: 0x10]

--------------------------------
Class: WW3PassingByBulletSound.Actor.Object
	WW3AkComponent* SoundComponent;//[Offset: 0x330, Size: 0x8]

--------------------------------
Class: WW3NoiseGeneratorManager.SceneComponent.ActorComponent.Object
	WW3NoiseParams NoiseParams;//[Offset: 0x250, Size: 0x20]
	WW3ActorPool* ActorPool;//[Offset: 0x270, Size: 0x8]
	int8 Team;//[Offset: 0x278, Size: 0x1]

--------------------------------
Class: WW3NoiseParams
	float InnerRadius;//[Offset: 0x0, Size: 0x4]
	float OuterRadius;//[Offset: 0x4, Size: 0x4]
	bool bNoiseIn2DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bForceVehicleDestruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	int InfluencedChannels;//[Offset: 0xc, Size: 0x4]
	float NoiseInterval;//[Offset: 0x10, Size: 0x4]
	bool bBlockSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	CurveFloat* FalloffCurve;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: WW3AttachmentImpactZoneInfo
	Vector BoxExtent;//[Offset: 0x0, Size: 0xc]
	Vector LocationOffset;//[Offset: 0xc, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x18, Size: 0xc]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: WW3AttachmentDestructionEffectsInfo
	class Actor* ActorToSpawnOnDestroy;//[Offset: 0x0, Size: 0x28]
	bool bShouldSwapMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	StaticMesh* NewMesh;//[Offset: 0x30, Size: 0x28]
	SkeletalMesh* NewSkeletalMesh;//[Offset: 0x58, Size: 0x28]
	WW3AttachmentGibInfo[] Gibs;//[Offset: 0x80, Size: 0x10]
	WW3AttachmentDestuctionParticleInfo[] Particles;//[Offset: 0x90, Size: 0x10]
	AkAudioEvent* AkHitSoundToPlay;//[Offset: 0xa0, Size: 0x8]
	AkAudioEvent* AkSoundToPlay;//[Offset: 0xa8, Size: 0x8]
	bool bCalculateFloorDifference;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]

--------------------------------
Class: WW3AttachmentGibInfo
	StaticMesh* Mesh;//[Offset: 0x0, Size: 0x28]
	StaticMesh* GibMesh;//[Offset: 0x28, Size: 0x8]
	bool bKeepMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float LifeTime;//[Offset: 0x34, Size: 0x4]
	float InitialImpulseStrength;//[Offset: 0x38, Size: 0x4]
	float[] InitialImpulseStrengthArray;//[Offset: 0x40, Size: 0x10]
	bool bInheritHitDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	Vector ImpulseDirectionOverride;//[Offset: 0x54, Size: 0xc]
	Vector AngularForceDirectionMin;//[Offset: 0x60, Size: 0xc]
	Vector AngularForceDirectionMax;//[Offset: 0x6c, Size: 0xc]
	float AngularForceScalarMin;//[Offset: 0x78, Size: 0x4]
	float AngularForceScalarMax;//[Offset: 0x7c, Size: 0x4]
	Vector TranslationDisabled;//[Offset: 0x80, Size: 0xc]
	WW3AttachmentDestuctionParticleInfo[] Particles;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: WW3AttachmentDestuctionParticleInfo
	ParticleSystem* Particle;//[Offset: 0x0, Size: 0x28]
	ParticleSystem* ParticleSystem;//[Offset: 0x28, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x30, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x3c, Size: 0xc]
	Vector Scale;//[Offset: 0x48, Size: 0xc]
	FName AttachToSocket;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: NotificationSounds
	WW3SoundNotifications HitNotification;//[Offset: 0x0, Size: 0x18]
	WW3SoundNotifications DestroyNotification;//[Offset: 0x18, Size: 0x18]
	WW3SoundNotifications RestoreNotification;//[Offset: 0x30, Size: 0x18]

--------------------------------
Class: WW3TakeHitInfo
	WW3Character* CharacterOwner;//[Offset: 0x0, Size: 0x8]
	int ActualDamage;//[Offset: 0x8, Size: 0x4]
	class Object* DamageTypeClass;//[Offset: 0x10, Size: 0x8]
	enum DamageType;//[Offset: 0x18, Size: 0x1]
	PlayerState* PlayerStateInstigator;//[Offset: 0x20, Size: 0x8]
	Pawn* PawnInstigator;//[Offset: 0x28, Size: 0x8]
	Pawn* DamagedPawn;//[Offset: 0x30, Size: 0x8]
	Actor* DamageCauser;//[Offset: 0x38, Size: 0x8]
	FText DamageCauserName;//[Offset: 0x40, Size: 0x18]
	PrimitiveComponent* HitComponent;//[Offset: 0x58, Size: 0x8]
	Vector_NetQuantize HitLocation;//[Offset: 0x60, Size: 0xc]
	Vector_NetQuantizeNormal HitDirection;//[Offset: 0x6c, Size: 0xc]
	enum HitBoneType;//[Offset: 0x78, Size: 0x1]
	PhysicalMaterial* HitPhysMaterial;//[Offset: 0x80, Size: 0x8]
	byte HitType;//[Offset: 0x88, Size: 0x1]
	Vector_NetQuantizeNormal DirectionAttackerToVictim;//[Offset: 0x8c, Size: 0xc]
	bool bIsKillingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	int ScoreValue;//[Offset: 0x9c, Size: 0x4]
	uint16 ClCurrentLifeCount;//[Offset: 0xa2, Size: 0x2]

--------------------------------
Class: WW3AttachmentGib.Actor.Object
	StaticMeshComponent* MeshComponent;//[Offset: 0x338, Size: 0x8]
	WW3AttachmentDamageable* ParentAttachmentRef;//[Offset: 0x340, Size: 0x8]
	void OnHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComponent, Vector NormalImpulse, HitResult Hit);// 0xf3db60

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WW3VehicleRepairComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInstanceDynamic* EffectMaterial;//[Offset: 0x620, Size: 0x8]

--------------------------------
Class: WW3AttachmentDamageAbsorptionInfo
	class WW3DamageType* DamageType;//[Offset: 0x0, Size: 0x8]
	float DamageAbsoptionPercentage;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WW3AirVehicleRotorData.WW3AirVehicleData.WW3VehicleData.WW3StrikeData.Object
	bool bCombatDroneMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	CurveFloat* MinThrottleAtAngle;//[Offset: 0x450, Size: 0x8]
	CurveFloat* ForceAtAngleMultiplier;//[Offset: 0x458, Size: 0x8]
	CurveFloat* GravityBalanceAtForwardAngleMultiplier;//[Offset: 0x460, Size: 0x8]
	CurveFloat* GravityBalanceAtSideAngleMultiplier;//[Offset: 0x468, Size: 0x8]
	float TargetRotationReachSpeedYawForBigAngle;//[Offset: 0x470, Size: 0x4]
	float TargetRotationReachSpeedPitchForBigAngle;//[Offset: 0x474, Size: 0x4]
	float YawingSpeed;//[Offset: 0x478, Size: 0x4]
	float InputEasingSpeed;//[Offset: 0x47c, Size: 0x4]
	float AutoCorrectionPitchSpeed;//[Offset: 0x480, Size: 0x4]
	float AutoCorrectionYawSpeed;//[Offset: 0x484, Size: 0x4]
	float AutoCorrectionRollSpeed;//[Offset: 0x488, Size: 0x4]
	float MinAngleRollToYaw;//[Offset: 0x48c, Size: 0x4]
	float MinVelocityRollToYaw;//[Offset: 0x490, Size: 0x4]
	float AutoCorrectionExp;//[Offset: 0x494, Size: 0x4]
	float AutoCorrectionAlpha;//[Offset: 0x498, Size: 0x4]
	float AscendingTension;//[Offset: 0x49c, Size: 0x4]
	float OrientationTension;//[Offset: 0x4a0, Size: 0x4]
	float OrientationDamping;//[Offset: 0x4a4, Size: 0x4]

--------------------------------
Class: WW3AirVehicleRotorSM.WW3AirVehicleSM.WW3VehicleSM.ActorComponent.Object

--------------------------------
Class: WW3AirVehicleSM.WW3VehicleSM.ActorComponent.Object
	WW3AkComponent* GroundDustSoundComponentAk;//[Offset: 0x1b8, Size: 0x8]
	WW3AirVehicle* AirVehicle;//[Offset: 0x1c0, Size: 0x8]
	WW3AirVehicleSMData* AirVehicleSMDataPointer;//[Offset: 0x1c8, Size: 0x8]

--------------------------------
Class: WW3VehicleSM.ActorComponent.Object
	WW3VehicleSMData* SMDataPointer;//[Offset: 0x108, Size: 0x8]
	WW3EnginePitchCalculator EnginePitchCalculator;//[Offset: 0x110, Size: 0x50]
	WW3Vehicle* Vehicle;//[Offset: 0x160, Size: 0x8]
	WW3AkComponent* HitSoundComponent;//[Offset: 0x168, Size: 0x8]
	WW3AkComponent* CosmeticSoundsComponent;//[Offset: 0x170, Size: 0x8]
	float HitSoundLength;//[Offset: 0x178, Size: 0x4]
	bool bPlayCannonReadyToShootSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	WW3AudioSingleton* AudioSingleton;//[Offset: 0x1a8, Size: 0x8]

--------------------------------
Class: WW3AirVehicleSMData.WW3VehicleSMData.Object
	AkAudioEvent* GroundDustAk;//[Offset: 0x210, Size: 0x8]

--------------------------------
Class: WW3EnginePitchCalculator
	float MaxSpeed;//[Offset: 0x18, Size: 0x4]
	float PitchToSet;//[Offset: 0x1c, Size: 0x4]
	float PitchMultiplier;//[Offset: 0x20, Size: 0x4]
	CurveFloat* AccelPitchCurve;//[Offset: 0x40, Size: 0x8]
	CurveFloat* DeccelPitchCurve;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: WW3AirVehicleRotorSimComp.WW3AirVehicleSimComp.WW3VehicleSimComp.ActorComponent.Object
	WW3AirVehicleRotor* AirVehicleRotorOwner;//[Offset: 0x130, Size: 0x8]
	float LastUpVelocity;//[Offset: 0x138, Size: 0x4]

--------------------------------
Class: WW3AirVehicleSimComp.WW3VehicleSimComp.ActorComponent.Object
	WW3AirVehicle* AirVehicleOwner;//[Offset: 0x128, Size: 0x8]

--------------------------------
Class: WW3VehicleSimComp.ActorComponent.Object
	bool bEnableCustomTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	WW3Vehicle* VehicleOwner;//[Offset: 0xf8, Size: 0x8]

--------------------------------
Class: BackpackData
	AttachmentData[] InGameAttachmentsDefaultData;//[Offset: 0x0, Size: 0x10]
	AttachmentData[] OverwritedDataForDefaultAttachments;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: WW3CurrentItemRepInfo
	WW3InventoryItem* CurrentItem;//[Offset: 0x0, Size: 0x8]
	bool bIsFromResetInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	byte ForceItemID;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: WW3SimProxyEquipInfo
	WW3InventoryItem* NewItem;//[Offset: 0x0, Size: 0x8]
	float StartUnequip_Timestamp;//[Offset: 0x8, Size: 0x4]
	float SwitchItem_Timestamp;//[Offset: 0xc, Size: 0x4]
	float FinishEquip_Timestamp;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WW3ReplicatedInventory
	WW3InventoryWeapon* PrimaryWeapon;//[Offset: 0x0, Size: 0x8]
	WW3InventoryWeapon* SecondaryWeapon;//[Offset: 0x8, Size: 0x8]
	WW3InventoryItem* PrimaryGadget;//[Offset: 0x10, Size: 0x8]
	WW3InventoryItem* SecondaryGadget;//[Offset: 0x18, Size: 0x8]
	WW3InventoryItem* AdditionalGadget;//[Offset: 0x20, Size: 0x8]
	enum PrimaryWeaponSlotState;//[Offset: 0x28, Size: 0x1]
	enum SecondaryWeaponSlotState;//[Offset: 0x29, Size: 0x1]
	enum PrimaryGadgetSlotState;//[Offset: 0x2a, Size: 0x1]
	enum SecondaryGadgetSlotState;//[Offset: 0x2b, Size: 0x1]
	enum AdditionalGadgetSlotState;//[Offset: 0x2c, Size: 0x1]
	UInt32Property BatchID;//[Size: 0x4]
	UInt64Property ClientInventoryID;//[Size: 0x8]
	UInt32Property ForceReplicationVar;//[Size: 0x4]

--------------------------------
Class: WW3BaseDeferredModifyInventoryAction.Object
	WW3PlayerController* PlayerController;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WW3WeaponSynchronizationDataReplicator
	UInt32Property ForceRepliction;//[Size: 0x4]

--------------------------------
Class: WW3FPPWeaponAudioBankManager.ActorComponent.Object

--------------------------------
Class: WW3InventoryWeaponPostUpdateTicker.ActorComponent.Object
	WW3InventoryWeapon* WeaponOwner;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: WW3WorldProxy.Object
	World* WorldInstance;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WW3WeaponReplicatedSyncStruct
	UInt64Property RequestID;//[Size: 0x8]
	int8 SelectedFireType;//[Offset: 0x8, Size: 0x1]
	WW3WeaponReplicatedFireType[] FireTypes;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: WW3WeaponReplicatedFireType
	WW3FireType* FireType;//[Offset: 0x0, Size: 0x8]
	class WW3AmmoType* AllowedAmmoType;//[Offset: 0x8, Size: 0x8]
	int CurrentAmmoAmountInClip;//[Offset: 0x10, Size: 0x4]
	int8 SelectedAmmoInfo;//[Offset: 0x14, Size: 0x1]
	UInt32Property NextProjectileID;//[Size: 0x4]
	WW3WeaponReplicatedAmmoInfo[] AmmoInfos;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: WW3WeaponReplicatedAmmoInfo
	WW3AmmoInfo* AmmoInfo;//[Offset: 0x0, Size: 0x8]
	int Amount;//[Offset: 0x8, Size: 0x4]
	int MaximumAmount;//[Offset: 0xc, Size: 0x4]
	class WW3AmmoType* AmmoType;//[Offset: 0x10, Size: 0x8]
	enum VehicleAmmoSlot;//[Offset: 0x18, Size: 0x1]
	byte AmmoPackRemoveMultiplier;//[Offset: 0x19, Size: 0x1]

--------------------------------
Class: WW3SkinsIds
	uint16 MainId;//[Offset: 0x0, Size: 0x2]
	WW3PartSkinsIds Parts;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: WW3PartSkinsIds
	uint16[] AttachmentsIds;//[Offset: 0x0, Size: 0x10]
	byte[] ItemTypes;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: WW3PlayerDataComponent.Object
	float AssistClearTime;//[Offset: 0x28, Size: 0x4]
	<WW3DamageDoneInfo,None(None)> DamageMap;//[Offset: 0x30, Size: 0x50]
	<TimerHandle,None(None)> TimerHandles;//[Offset: 0x80, Size: 0x50]

--------------------------------
Class: WW3DamageDoneInfo
	<int,None(None)> WeaponDamageMap;//[Offset: 0x0, Size: 0x50]
	<int,None(None)> VehicleDamageMap;//[Offset: 0x50, Size: 0x50]
	WW3BasicDamageInfo HighestDamageCache;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: WW3BasicDamageInfo
	int Damage;//[Offset: 0x0, Size: 0x4]
	uint16 ItemId;//[Offset: 0x4, Size: 0x2]
	enum TrackingCategory;//[Offset: 0x6, Size: 0x1]

--------------------------------
Class: WW3EventService.Object
	bool bIsProgressionDebugInfoEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	WW3CommonRpcBuilder* CommonRpcBuilder;//[Offset: 0x48, Size: 0x8]
	int CachedInternalPlayerId;//[Offset: 0x50, Size: 0x4]
	<CachedPlayerIDs(UInt32Property),None(None)> CachedPlayerIDs;//[Offset: 0x58, Size: 0x50]
	WW3DedicatedServerWebSocket* DedicatedServerWebSocket;//[Offset: 0xa8, Size: 0x8]
	WW3InventoryLoadoutProgressionData InventoryLoadoutProgressionData;//[Offset: 0xb0, Size: 0x48]
	float DebounceDelayTime;//[Offset: 0x100, Size: 0x4]
	<float,None(None)> StoreVehicleRepairValues;//[Offset: 0x108, Size: 0x50]

--------------------------------
Class: WW3InventoryLoadoutProgressionData

--------------------------------
Class: WW3TPPWeaponsAudioBanksManager.ActorComponent.Object
	uint16 ReplicatedPrimaryWeaponID;//[Offset: 0xf0, Size: 0x2]
	uint16 ReplicatedSecondaryWeaponID;//[Offset: 0xf2, Size: 0x2]
	void OnRep_ReplicatedSecondaryWeaponID(uint16 InPrevSecondaryWeaponID);// 0x10b6d60
	void OnRep_ReplicatedPrimaryWeaponID(uint16 InPrevPrimaryWeaponID);// 0x10b6cc0

--------------------------------
Class: WW3PlayerReviveManager.ActorComponent.Object
	WW3RevivingNotifyInfo ReviveInfo;//[Offset: 0xf0, Size: 0x10]
	WW3PlayersWhichCanReviveMe SortedPlayersWhichCanReviveMe;//[Offset: 0x100, Size: 0x10]
	WW3PlayersComingToReviveMe svPlayersComingToReviveMe;//[Offset: 0x110, Size: 0x10]
	WW3PlayerWhichCanReviveMe clPlayerComingToReviveMe;//[Offset: 0x120, Size: 0x18]
	WW3ReconPlayerRevive* ReviveActor;//[Offset: 0x168, Size: 0x8]
	float ReturnToGameTimerBeforePauseRemainingTime;//[Offset: 0x170, Size: 0x4]
	int16 ReturnToGameTimer;//[Offset: 0x174, Size: 0x2]
	byte BleedoutProgressPercentageReplicated;//[Offset: 0x176, Size: 0x1]
	float ReturnToGameTimerStartTime;//[Offset: 0x178, Size: 0x4]
	bool bLatestCanLocalPayerBeRevived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 0x1]
	void Server_SendHelpComingToPlayer(WW3PlayerState* InDyingPlayer);// 0x104ce70
	void Server_ReviveExpired();// 0x104ce20
	void ReturnToGameTimerTick_T();// 0x104c970
	void OnRep_ReviveInfo();// 0x104c7d0
	void OnRep_ReviveActor();// 0x104c7b0
	void OnPlayerReviveActorLoaded();// 0x104c190
	void OnComingToReviveMePlayerPlayingStateChanged(WW3PlayerState* InSender, enum InPrevPlayingState, enum InCurrentPlayingState);// 0x104c090
	void Client_SetComingToReviveMePlayer(WW3PlayerState* InPlayer);// 0x104be40

--------------------------------
Class: WW3RevivingNotifyInfo
	WW3PlayerState* Initiator;//[Offset: 0x0, Size: 0x8]
	float StartTime;//[Offset: 0x8, Size: 0x4]
	byte Duration;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: WW3PlayersWhichCanReviveMe
	WW3PlayerWhichCanReviveMe[] Players;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3PlayerWhichCanReviveMe
	float DistanceToPlayerInCm;//[Offset: 0x0, Size: 0x4]
	WW3Character* Character;//[Offset: 0x8, Size: 0x8]
	WW3PlayerState* PlayerState;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: WW3PlayersComingToReviveMe
	WW3PlayerComingToReviveMe[] Players;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3PlayerComingToReviveMe
	WW3Character* Character;//[Offset: 0x0, Size: 0x8]
	WW3PlayerState* PlayerState;//[Offset: 0x8, Size: 0x8]
	float SubmissionToReviveTimestamp;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WW3ReconPlayerRevive.Actor.Object
	CapsuleComponent* UsableVolume;//[Offset: 0x350, Size: 0x8]
	Texture2D* EventTexture;//[Offset: 0x358, Size: 0x8]
	WW3ProgressableMarkerReviveActor* MarkerComponent;//[Offset: 0x360, Size: 0x8]
	float InteractionTime;//[Offset: 0x368, Size: 0x4]
	WW3WorldProxy* WorldProxy;//[Offset: 0x370, Size: 0x8]
	WW3PlayerState* DyingPlayerState;//[Offset: 0x378, Size: 0x8]
	WW3Character* DyingPlayerCharacter;//[Offset: 0x380, Size: 0x8]
	float BleedoutTimeoutDecrease;//[Offset: 0x388, Size: 0x4]
	void OnRep_DyingPlayerState();// 0x10676f0

--------------------------------
Class: WW3ProgressableMarkerReviveActor.WW3ProgressableMarker.WW3ActorMarker.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WW3PlayersProfileReplicationData
	WW3ReplicatedAccountInfo AccountInfo;//[Offset: 0x0, Size: 0x4]
	WW3ReplicatedCharacterLoadout CharacterLoadout;//[Offset: 0x8, Size: 0x18]
	WW3ReplicatedStrikesLoadout StrikesLoadout;//[Offset: 0x20, Size: 0x20]
	WW3ReplicatedEquipmentLoadout EquipmentLoadout;//[Offset: 0x40, Size: 0x30]
	WW3BannerCustomizationConfig BannerInfo;//[Offset: 0x70, Size: 0x10]
	UInt32Property PlayerId;//[Size: 0x4]

--------------------------------
Class: WW3ReplicatedAccountInfo
	int PlayerLevel;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: WW3ReplicatedCharacterLoadout
	FString Name;//[Offset: 0x0, Size: 0x10]
	WW3CustomizationSource CustomizationSource;//[Offset: 0x10, Size: 0x6]

--------------------------------
Class: WW3ReplicatedStrikesLoadout
	FString Name;//[Offset: 0x0, Size: 0x10]
	WW3CustomizationSource[] StrikesSource;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: WW3ReplicatedEquipmentLoadout
	FString Name;//[Offset: 0x0, Size: 0x10]
	WW3CustomizationSource[] WeaponsSource;//[Offset: 0x10, Size: 0x10]
	WW3CustomizationSource BackpackSource;//[Offset: 0x20, Size: 0x6]
	uint16 ArmorId;//[Offset: 0x26, Size: 0x2]
	uint16 HelmetArmorId;//[Offset: 0x28, Size: 0x2]
	uint16 PrimaryGadgetId;//[Offset: 0x2a, Size: 0x2]
	uint16 SecondaryGadgetId;//[Offset: 0x2c, Size: 0x2]

--------------------------------
Class: WW3SquadLeaderCaptureObjective.WW3GameObjective.Object
	WW3CaptureAreaComponent* CaptureAreaComponent;//[Offset: 0x140, Size: 0x8]
	<enum,ArrayProperty(None)> CapturePointEnumToAttackBarkMap;//[Offset: 0x148, Size: 0x50]
	<enum,MapProperty(None)> CapturePointEnumToDefendBarkMap;//[Offset: 0x198, Size: 0x50]

--------------------------------
Class: WW3WebSocketEventReplicator

--------------------------------
Class: WW3ProjectileParticleEffect.Actor.Object
	ParticleSystemComponent* ParticleComponent;//[Offset: 0x330, Size: 0x8]

--------------------------------
Class: WW3CharacterFootstepsBetterImprovement.ActorComponent.Object
	WW3Character* OwnerFBICharacter;//[Offset: 0xf0, Size: 0x8]
	WW3CharacterAttachmentManager* AssosiatedFBICharacterAttachmentManager;//[Offset: 0xf8, Size: 0x8]
	WW3CharacterAnimInstance* OwnerFIBCharacterAnimInstance;//[Offset: 0x100, Size: 0x8]
	WW3AkComponent* FBIAkComponent;//[Offset: 0x108, Size: 0x8]
	WW3CharacterAnimationSet* CurrentAnimationSet;//[Offset: 0x110, Size: 0x8]
	BlendSpace* CurrentBlendSpace;//[Offset: 0x118, Size: 0x8]
	BlendSpace* PreviousBlendSpace;//[Offset: 0x120, Size: 0x8]
	AnimSequence* CurrentAnimSequence;//[Offset: 0x128, Size: 0x8]
	WW3CharacterMovementAnimations Idles;//[Offset: 0x140, Size: 0x358]
	AnimNotifyQueue FBINotifyQueue;//[Offset: 0x498, Size: 0x70]
	enum CurrentMovementPosition;//[Offset: 0x5b0, Size: 0x1]
	enum CurrentMovementSpeed;//[Offset: 0x5b1, Size: 0x1]
	enum CharacterWeight;//[Offset: 0x5b2, Size: 0x1]

--------------------------------
Class: WW3CharacterAnimInstance.WW3AnimInstance.AnimInstance.Object
	enum CurrentMovementPosition;//[Offset: 0x35a, Size: 0x1]
	enum CurrentMovementSpeed;//[Offset: 0x35b, Size: 0x1]
	enum VaultStage;//[Offset: 0x35e, Size: 0x1]
	enum VaultInfo;//[Offset: 0x35f, Size: 0x1]
	bool bIsTransitionPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	WW3CharacterMovementAnimations Idles;//[Offset: 0x380, Size: 0x358]
	AnimSequence* CurrentGripIdle;//[Offset: 0x6f8, Size: 0x8]
	WW3CharacterAnimationIdles LayeredIdles;//[Offset: 0x700, Size: 0x50]
	WW3CharacterAnimationIdlesValidCheck LayeredIdleValidCheck;//[Offset: 0x750, Size: 0xa]
	AnimSequence* CurrentIdleAnimation;//[Offset: 0x760, Size: 0x8]
	FString InputPrint;//[Offset: 0x768, Size: 0x10]
	FString DebugPrint;//[Offset: 0x778, Size: 0x10]
	bool bDebugMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x788, Size: 0x1]
	bool bEditorMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x789, Size: 0x1]
	bool bDebugStopSway;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78a, Size: 0x1]
	FString IsPrint;//[Offset: 0x790, Size: 0x10]
	FString DebugCurvePrint;//[Offset: 0x7a0, Size: 0x10]
	bool ExtraPrints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b0, Size: 0x1]
	Vector AimOffsetLocation;//[Offset: 0x7b4, Size: 0xc]
	Rotator MeshRotation;//[Offset: 0x7c0, Size: 0xc]
	WW3MovementPositionOffsets WeaponScreenOffsets;//[Offset: 0x7cc, Size: 0x78]
	WW3MovementPositionOffsets PointShootingScreenOffsets;//[Offset: 0x844, Size: 0x78]
	WW3MovementPositionOffsets InspectScreenOffsets;//[Offset: 0x8bc, Size: 0x78]
	WW3MovementPositionOffsets UnderbarrelScreenOffsets;//[Offset: 0x934, Size: 0x78]
	WW3CharacterPositionSequence TPPFiringShoulderBump;//[Offset: 0x9b0, Size: 0x28]
	bool IsHeavySniper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d8, Size: 0x1]
	Actor* AnimProp;//[Offset: 0x9e0, Size: 0x8]
	class WW3CharacterAnimationSet* DefaultAnimationSetsClass;//[Offset: 0x9e8, Size: 0x8]
	WW3CharacterAnimationSet* CurrentAnimationSet;//[Offset: 0x9f0, Size: 0x8]
	WW3TransitionSet* CurrentTransitionSet;//[Offset: 0x9f8, Size: 0x8]
	CurveFloat* LandingLegCurve;//[Offset: 0xa00, Size: 0x8]
	float LandingCurveValue;//[Offset: 0xa0c, Size: 0x4]
	CurveVector* WeaponSwayOffsetCurve;//[Offset: 0xa10, Size: 0x8]
	CurveFloat* TPPFireCurve;//[Offset: 0xa20, Size: 0x8]
	float WeaponFireEffectAlpha;//[Offset: 0xa30, Size: 0x4]
	Vector WeaponFireOffset;//[Offset: 0xa34, Size: 0xc]
	CurveVector* WeaponFireOffsetCurve;//[Offset: 0xa50, Size: 0x8]
	Rotator WeaponRotationFireOffset;//[Offset: 0xa60, Size: 0xc]
	CurveVector* LandingWeaponLocationCurve;//[Offset: 0xa80, Size: 0x8]
	CurveVector* LandingWeaponRotationCurve;//[Offset: 0xa90, Size: 0x8]
	CurveVector* JumpWeaponLocationCurve;//[Offset: 0xaa0, Size: 0x8]
	CurveVector* JumpWeaponRotationCurve;//[Offset: 0xab0, Size: 0x8]
	CurveVector* WeaponRotationFireOffsetCurve;//[Offset: 0xac0, Size: 0x8]
	CurveFloat* WeaponRotationFireOffsetCurveY;//[Offset: 0xad0, Size: 0x8]
	CurveVector* WeaponRotationAfterFireOffsetCurve;//[Offset: 0xaf0, Size: 0x8]
	CurveFloat* WeaponRotationAfterFireOffsetCurveY;//[Offset: 0xb00, Size: 0x8]
	CurveFloat* SprintCurveTimeMultiplierCurve;//[Offset: 0xb18, Size: 0x8]
	CurveFloat* SprintCurveStrengthMultiplierCurve;//[Offset: 0xb28, Size: 0x8]
	CurveFloat* CrouchSprintCurveTimeMultiplierCurve;//[Offset: 0xb38, Size: 0x8]
	CurveFloat* CrouchSprintCurveStrengthMultiplierCurve;//[Offset: 0xb48, Size: 0x8]
	CurveVector* SprintWeaponLocationOffsetCurve;//[Offset: 0xb58, Size: 0x8]
	CurveVector* SprintWeaponRotationOffsetCurve;//[Offset: 0xb68, Size: 0x8]
	CurveVector* SprintDashWeaponLocationOffsetCurve;//[Offset: 0xb78, Size: 0x8]
	CurveVector* SprintDashWeaponRotationOffsetCurve;//[Offset: 0xb88, Size: 0x8]
	CurveVector* SprintCrouchWeaponLocationOffsetCurve;//[Offset: 0xb98, Size: 0x8]
	CurveVector* SprintCrouchWeaponRotationOffsetCurve;//[Offset: 0xba8, Size: 0x8]
	CurveVector* StandWalkLocationOffsetCurve;//[Offset: 0xbb8, Size: 0x8]
	CurveVector* StandWalkRotationOffsetCurve;//[Offset: 0xbc8, Size: 0x8]
	CurveVector* CrouchWalkLocationOffsetCurve;//[Offset: 0xbd8, Size: 0x8]
	CurveVector* CrouchWalkRotationOffsetCurve;//[Offset: 0xbe8, Size: 0x8]
	CurveVector* StandIdleLocationOffsetCurve;//[Offset: 0xc08, Size: 0x8]
	CurveVector* StandIdleRotationOffsetCurve;//[Offset: 0xc18, Size: 0x8]
	CurveVector* CrouchIdleLocationOffsetCurve;//[Offset: 0xc28, Size: 0x8]
	CurveVector* CrouchIdleRotationOffsetCurve;//[Offset: 0xc38, Size: 0x8]
	CurveVector* InteractionFXWeaponLocationOffsetCurve;//[Offset: 0xc48, Size: 0x8]
	CurveVector* InteractionFXWeaponRotationOffsetCurve;//[Offset: 0xc58, Size: 0x8]
	float FiringTime;//[Offset: 0xc78, Size: 0x4]
	float BlendDuration;//[Offset: 0xca0, Size: 0x4]
	float LookAroundInterpSpeed;//[Offset: 0xca4, Size: 0x4]
	WW3Character* CharacterOwner;//[Offset: 0xd00, Size: 0x8]
	WW3CharacterSkeletalMeshComponent* MyMesh;//[Offset: 0xd08, Size: 0x8]
	WW3CharacterMovement* CharacterMovement;//[Offset: 0xd10, Size: 0x8]
	WW3SequencePoseSplit CurrentPose;//[Offset: 0xd18, Size: 0x28]
	enum CharacterWeight;//[Offset: 0x17f8, Size: 0x1]
	Rotator HeadAimOffset;//[Offset: 0x180c, Size: 0xc]
	float HeadAimOffsetPitch;//[Offset: 0x1818, Size: 0x4]
	float HeadAimOffsetYaw;//[Offset: 0x1820, Size: 0x4]
	Rotator AimOffsetRotation;//[Offset: 0x1828, Size: 0xc]
	Rotator SmoothAimOfset;//[Offset: 0x1834, Size: 0xc]
	float Movespeed;//[Offset: 0x1854, Size: 0x4]
	float MovementPlayRate;//[Offset: 0x1858, Size: 0x4]
	float CurveSpeedMultiplier;//[Offset: 0x185c, Size: 0x4]
	Rotator DesiredAimingWeaponRotation;//[Offset: 0x1864, Size: 0xc]
	Vector TargetingCameraRelativeLocation;//[Offset: 0x1870, Size: 0xc]
	Vector WeaponOffset;//[Offset: 0x187c, Size: 0xc]
	Vector ScopeOffset;//[Offset: 0x1888, Size: 0xc]
	Vector TargetingWeaponOffset;//[Offset: 0x1894, Size: 0xc]
	bool bIsLookingAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18ab, Size: 0x1]
	bool bIsTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18ac, Size: 0x1]
	bool bIsInspecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18ae, Size: 0x1]
	bool bIsUsingUnderbarrel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18af, Size: 0x1]
	bool bIsReviving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18b0, Size: 0x1]
	bool bIsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18b3, Size: 0x1]
	bool bIsTurningRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18b4, Size: 0x1]
	float TurningPlayRate;//[Offset: 0x18b8, Size: 0x4]
	bool bShouldLeanLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c0, Size: 0x1]
	bool bShouldLeanRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c1, Size: 0x1]
	float LeanOffset;//[Offset: 0x18c4, Size: 0x4]
	bool bIsGadgetEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c8, Size: 0x1]
	bool bIsReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c9, Size: 0x1]
	float PlayLeanOffsetAlpha;//[Offset: 0x18cc, Size: 0x4]
	float MaxLeanOffset;//[Offset: 0x18d0, Size: 0x4]
	float LeanCameraMultiplier;//[Offset: 0x18e0, Size: 0x4]
	Vector2D SwayOffset;//[Offset: 0x18e4, Size: 0x8]
	float MouseDeltaX;//[Offset: 0x18ec, Size: 0x4]
	float MouseDeltaY;//[Offset: 0x18f0, Size: 0x4]
	bool bDrawDebugSockets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18f4, Size: 0x1]
	WW3CharacterHandIK RightArmIK;//[Offset: 0x18f8, Size: 0xb8]
	WW3CharacterHandIK LeftArmIK;//[Offset: 0x19b0, Size: 0xb8]
	WW3CharacterLegIK LegIK;//[Offset: 0x1a68, Size: 0x44]
	float TPPIsFiringAlpha;//[Offset: 0x1aac, Size: 0x4]
	bool bIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ab0, Size: 0x1]
	float HorizontalSpeed;//[Offset: 0x1ab4, Size: 0x4]
	float VerticalSpeed;//[Offset: 0x1ab8, Size: 0x4]
	float FallingSpeed;//[Offset: 0x1abc, Size: 0x4]
	float MoveForward;//[Offset: 0x1ac4, Size: 0x4]
	float MoveRight;//[Offset: 0x1ac8, Size: 0x4]
	byte MovementMode;//[Offset: 0x1acc, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x1acd, Size: 0x1]
	float MoveRotation;//[Offset: 0x1ad0, Size: 0x4]
	float MoveRotationDivider;//[Offset: 0x1ad4, Size: 0x4]
	Vector2D SeatLeanMapFrontBack;//[Offset: 0x1af8, Size: 0x8]
	Vector2D SeatLeanMapLeftRight;//[Offset: 0x1b00, Size: 0x8]
	AnimSequenceBase* SeatIdle;//[Offset: 0x1b08, Size: 0x8]
	BlendSpace* SeatLeanAccelerationBlendspace;//[Offset: 0x1b10, Size: 0x8]
	BlendSpace1D* SeatPassengerTurnBlendspace;//[Offset: 0x1b18, Size: 0x8]
	BlendSpace1D* SeatSteeringBlendspace;//[Offset: 0x1b20, Size: 0x8]
	Vector VehicleVelocity;//[Offset: 0x1b28, Size: 0xc]
	Vector VehicleLocation;//[Offset: 0x1b34, Size: 0xc]
	float FinalHeight;//[Offset: 0x1b40, Size: 0x4]
	float SpringStiffness;//[Offset: 0x1b44, Size: 0x4]
	float Damping;//[Offset: 0x1b48, Size: 0x4]
	float SpeedFinal;//[Offset: 0x1b50, Size: 0x4]
	float SlowInterpSpeed;//[Offset: 0x1b5c, Size: 0x4]
	float FastInterpSpeed;//[Offset: 0x1b60, Size: 0x4]
	float SpeedThreshold;//[Offset: 0x1b64, Size: 0x4]
	float MoveSensitivity;//[Offset: 0x1b68, Size: 0x4]
	float PassagerLeanDirection;//[Offset: 0x1b6c, Size: 0x4]
	float SeatSteeringDirection;//[Offset: 0x1b70, Size: 0x4]
	float SeatWheelRotationOffset;//[Offset: 0x1b74, Size: 0x4]
	float VehicleSpeedL;//[Offset: 0x1b78, Size: 0x4]
	float VehicleSpeedR;//[Offset: 0x1b7c, Size: 0x4]
	bool bIsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b80, Size: 0x1]
	bool bIsPassenger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b81, Size: 0x1]
	bool bIsRemoteSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b98, Size: 0x1]
	bool bIsSeatIdleValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b99, Size: 0x1]
	bool bIsSeatLeanAccelerationValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9a, Size: 0x1]
	bool bIsSeatSteeringBlendspaceValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9b, Size: 0x1]
	bool bIsTurning180;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9c, Size: 0x1]
	bool bIsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9e, Size: 0x1]
	float ShootingModeLean;//[Offset: 0x1ba4, Size: 0x4]
	bool bIsHoldingBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba9, Size: 0x1]
	bool bIsAfterHoldingBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1baa, Size: 0x1]
	float DisableWeaponOffsetAlpha;//[Offset: 0x1bb8, Size: 0x4]
	float CameraSmoothingAlpha;//[Offset: 0x1bbc, Size: 0x4]
	float ElbowAlpha;//[Offset: 0x1bc0, Size: 0x4]
	float LegIKAlpha;//[Offset: 0x1bc4, Size: 0x4]
	float GadgetGripAlpha;//[Offset: 0x1bc8, Size: 0x4]
	float OverrideMontageGrip;//[Offset: 0x1bcc, Size: 0x4]
	float TPPTurnTolerance;//[Offset: 0x1bd4, Size: 0x4]
	float IsTargetingAlpha;//[Offset: 0x1bd8, Size: 0x4]
	MeshComponent* LeftAttachmentMesh;//[Offset: 0x1c00, Size: 0x8]
	MeshComponent* RightAttachmentMesh;//[Offset: 0x1c08, Size: 0x8]
	FString SocketNameSuffix;//[Offset: 0x1c10, Size: 0x10]
	float TurnInput;//[Offset: 0x1d20, Size: 0x4]
	float LookUpInput;//[Offset: 0x1d24, Size: 0x4]
	CurveFloat*[] MorphCurveArray;//[Offset: 0x1d40, Size: 0x10]
	float[] MorphCurveValueArray;//[Offset: 0x1d50, Size: 0x10]
	Vector DeltaLocation;//[Offset: 0x1da0, Size: 0xc]
	Rotator DeltaRotation;//[Offset: 0x1dac, Size: 0xc]
	float DeltaMoveRight;//[Offset: 0x1db8, Size: 0x4]
	float DeltaMoveForward;//[Offset: 0x1dbc, Size: 0x4]
	float DeltaMoveForwardRun;//[Offset: 0x1dc0, Size: 0x4]
	float LeanAngle;//[Offset: 0x1dc4, Size: 0x4]
	Vector SwayLocation;//[Offset: 0x1dc8, Size: 0xc]
	Rotator SwayRotation;//[Offset: 0x1dd4, Size: 0xc]
	float ZOffsetValue;//[Offset: 0x1de0, Size: 0x4]
	bool bClientAdjustPositionFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e04, Size: 0x1]
	WW3CharacterAnimDebugMode DebugMode;//[Offset: 0x1e06, Size: 0x5]
	FString CurrentMontageName;//[Offset: 0x1e10, Size: 0x10]
	Vector CameraPoseLocation;//[Offset: 0x1e20, Size: 0xc]
	Vector SpinePoseLocation;//[Offset: 0x1e2c, Size: 0xc]
	float CameraPoseLocationAlpha;//[Offset: 0x1e38, Size: 0x4]
	float SpinePoseLocationAlpha;//[Offset: 0x1e3c, Size: 0x4]
	WW3CharacterBoneDebug[] DebugBoneStruct;//[Offset: 0x1e40, Size: 0x10]
	FString TransitionWeightsLog;//[Offset: 0x1e50, Size: 0x10]
	FString CurveWeightsLog;//[Offset: 0x1e60, Size: 0x10]
	FString FireCurvesLog;//[Offset: 0x1e70, Size: 0x10]
	FString BonePosLog;//[Offset: 0x1e80, Size: 0x10]
	FString DebugSocketLog;//[Offset: 0x1e90, Size: 0x10]
	FString DebugAttachmentLog;//[Offset: 0x1ea0, Size: 0x10]
	FString DebugMovementLog;//[Offset: 0x1eb0, Size: 0x10]
	WW3InventoryWeapon* CurrentWeapon;//[Offset: 0x2050, Size: 0x8]
	WW3CharacterAnimationCurveAlpha IdleStandCurveStruct;//[Offset: 0x2058, Size: 0x90]
	WW3CharacterAnimationCurveAlpha IdleCrouchCurveStruct;//[Offset: 0x20e8, Size: 0x90]
	WW3CharacterAnimationCurveAlpha WalkStandCurveStruct;//[Offset: 0x2178, Size: 0x90]
	WW3CharacterAnimationCurveAlpha WalkCrouchCurveStruct;//[Offset: 0x2208, Size: 0x90]
	WW3CharacterAnimationCurveAlpha RunStandCurveStruct;//[Offset: 0x2298, Size: 0x90]
	WW3CharacterAnimationCurveAlpha RunCrouchCurveStruct;//[Offset: 0x2328, Size: 0x90]
	WW3CharacterAnimationCurveAlpha RunSlideCurveStruct;//[Offset: 0x23b8, Size: 0x90]
	WW3CharacterAnimationCurveAlpha TurboRunCurveStruct;//[Offset: 0x2448, Size: 0x90]
	WW3CharacterAnimationCurveAlpha TurboRunSlideCurveStruct;//[Offset: 0x24d8, Size: 0x90]
	WW3CharacterAnimationCurves[] SwayCurveStructs;//[Offset: 0x2578, Size: 0x10]
	WW3CharacterAnimationCurveAlpha SwayBlendCurveStruct;//[Offset: 0x2598, Size: 0x90]
	bool bIsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2720, Size: 0x1]
	void StartUsing();// 0xf6c190
	void OnSpecialTransitionEnd();// 0x5d2c60
	void OnSectionStarted(AnimMontage* Montage, int SectionIndex);// 0xf6c0d0
	void OnPlayerSynchronized();// 0x1395e00
	void OnLand(float LastFallingSpeed);// 0x1395e00
	void OnAnimMontageStarted(AnimMontage* Montage);// 0xf6c050
	void OnAnimMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0xf6bf80
	void OnAnimMontageBlendingout(AnimMontage* Montage, bool bInterrupted);// 0xf6beb0
	void OnAllAnimMontagesEnded();// 0xf6be90
	void IsSliding(bool ReturnValue);// 0xf6be60
	void IsNoSpeedTransition(bool ReturnValue);// 0xf6be30
	void IsFalling(bool ReturnValue);// 0xf6be00
	void GetVaultStage(enum ReturnValue);// 0xf6bdd0
	void GetVaultInfo(enum ReturnValue);// 0xf6bda0
	void GetScopeLerpData(WW3ChangeScopeLerpData ReturnValue);// 0xf6bd50

--------------------------------
Class: WW3AnimInstance.AnimInstance.Object
	void IsSlotAnimationPlaying(FName SlotName, bool ReturnValue);// 0xf36750
	void ChangeRootMotionMode(byte NewRootMotionMode);// 0xf366d0

--------------------------------
Class: WW3CharacterAnimationIdlesValidCheck
	bool Stand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool StandFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool Crouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool CrouchFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool ProneFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool OnBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool OnBackFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool Knockdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool KnockdownFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: WW3MovementPositionOffsets
	Vector StandLocation;//[Offset: 0x0, Size: 0xc]
	Rotator StandRotation;//[Offset: 0xc, Size: 0xc]
	Vector CrouchLocation;//[Offset: 0x18, Size: 0xc]
	Rotator CrouchRotation;//[Offset: 0x24, Size: 0xc]
	Vector ProneLocation;//[Offset: 0x30, Size: 0xc]
	Rotator ProneRotation;//[Offset: 0x3c, Size: 0xc]
	Vector OnBackLocation;//[Offset: 0x48, Size: 0xc]
	Rotator OnBackRotation;//[Offset: 0x54, Size: 0xc]
	Vector KnockdownLocation;//[Offset: 0x60, Size: 0xc]
	Rotator KnockdownRotation;//[Offset: 0x6c, Size: 0xc]

--------------------------------
Class: WW3CharacterSkeletalMeshComponent.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	WW3RagdollPositionPreservationSettings RagdollPositionPreservation;//[Offset: 0xb90, Size: 0x130]
	BoxSphereBounds FixedBounds;//[Offset: 0xcc0, Size: 0x1c]
	SkeletalMesh* DedicatedServerSkeletalMesh;//[Offset: 0xce0, Size: 0x28]
	class AnimInstance* DedicatedAnimInstanceClass;//[Offset: 0xd08, Size: 0x28]
	float MuscleStrength;//[Offset: 0xd30, Size: 0x4]
	float DeathMuscleStrength;//[Offset: 0xd34, Size: 0x4]
	float RagdollBlendTime;//[Offset: 0xd38, Size: 0x4]
	<enum,None(None)> BonesData;//[Offset: 0xd40, Size: 0x50]
	WW3Character* CharacterOwner;//[Offset: 0xdd8, Size: 0x8]
	FName[] SocketsForVisibilityCheck;//[Offset: 0xde0, Size: 0x10]
	SkeletalMeshComponent* MyVisibleMeshComponent;//[Offset: 0xe00, Size: 0x8]
	SceneComponent*[] MyAttachments;//[Offset: 0xe08, Size: 0x10]

--------------------------------
Class: WW3RagdollPositionPreservationSettings
	FName[] Bones;//[Offset: 0x0, Size: 0x10]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x10, Size: 0x104]
	class WW3RagdollBoneConstraintActor* Template;//[Offset: 0x118, Size: 0x8]
	WW3RagdollBoneConstraintActor*[] ActiveConstraints;//[Offset: 0x120, Size: 0x10]

--------------------------------
Class: WW3RagdollBoneConstraintActor.Actor.Object
	StaticMeshComponent* BoneAttachComponent;//[Offset: 0x330, Size: 0x8]
	PhysicsConstraintComponent* ConstraintComponent;//[Offset: 0x338, Size: 0x8]

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x248, Size: 0x8]
	ConstrainComponentPropName ComponentName1;//[Offset: 0x250, Size: 0x8]
	Actor* ConstraintActor2;//[Offset: 0x258, Size: 0x8]
	ConstrainComponentPropName ComponentName2;//[Offset: 0x260, Size: 0x8]
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x278, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x280, Size: 0x10]
	ConstraintInstance ConstraintInstance;//[Offset: 0x290, Size: 0x1b8]
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x2573100
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0x2573070
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0x2572fb0
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0x2572ef0
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0x2572e30
	void SetLinearVelocityTarget(Vector InVelTarget);// 0x2572da0
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x2572c80
	void SetLinearPositionTarget(Vector InPosTarget);// 0x2572bf0
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x2572ad0
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x25729c0
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0x25728f0
	void SetDisableCollision(bool bDisableCollision);// 0x2572860
	void SetConstraintReferencePosition(byte frame, Vector RefPosition);// 0x2572790
	void SetConstraintReferenceOrientation(byte frame, Vector PriAxis, Vector SecAxis);// 0x2572670
	void SetConstraintReferenceFrame(byte frame, Transform RefFrame);// 0x2572550
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0x2572400
	void SetAngularVelocityTarget(Vector InVelTarget);// 0x25722a0
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x25721d0
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0x2572140
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x2572070
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0x2571fb0
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0x2571ef0
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0x2571e30
	void SetAngularOrientationTarget(Rotator InPosTarget);// 0x2571da0
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x2571cd0
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x2571bc0
	void SetAngularDriveMode(byte DriveMode);// 0x2571b40
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0x2571a70
	void IsBroken(bool ReturnValue);// 0x25715d0
	void GetCurrentTwist(float ReturnValue);// 0x25713a0
	void GetCurrentSwing2(float ReturnValue);// 0x2571370
	void GetCurrentSwing1(float ReturnValue);// 0x2571340
	void GetConstraintForce(Vector OutLinearForce, Vector OutAngularForce);// 0x2571200
	void BreakConstraint();// 0x2571060

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: WW3CharacterMovement.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	WW3Character* WW3CharacterOwner;//[Offset: 0x7b0, Size: 0x8]
	WW3CharacterAnimInstance* AnimInstance;//[Offset: 0x7b8, Size: 0x8]
	float ProneHalfHeight;//[Offset: 0x7c0, Size: 0x4]
	float SpecialJumpHalfHeight;//[Offset: 0x7c4, Size: 0x4]
	WW3TurnData TurnData;//[Offset: 0x7c8, Size: 0x14]
	WW3TurnData CrouchedTurnData;//[Offset: 0x7dc, Size: 0x14]
	WW3TurnData ProneTurnData;//[Offset: 0x7f0, Size: 0x14]
	WW3TurnData OnBackTurnData;//[Offset: 0x804, Size: 0x14]
	WW3TurnData SlideTurnData;//[Offset: 0x818, Size: 0x14]
	WW3TurnData KnockdownTurnData;//[Offset: 0x82c, Size: 0x14]
	float InteractionTraceAheadDistance;//[Offset: 0x840, Size: 0x4]
	float FocusADSTraceAheadDistance;//[Offset: 0x844, Size: 0x4]
	float FocusTraceAheadDistance;//[Offset: 0x848, Size: 0x4]
	float TraceBelowDistance;//[Offset: 0x84c, Size: 0x4]
	float MeshRotationInterpSpeed;//[Offset: 0x850, Size: 0x4]
	float SoftLandFallingSpeed;//[Offset: 0x854, Size: 0x4]
	float MidLandFallingSpeed;//[Offset: 0x858, Size: 0x4]
	float HardLandFallingSpeed;//[Offset: 0x85c, Size: 0x4]
	float DeadlyFallingSpeed;//[Offset: 0x860, Size: 0x4]
	float LeanInterpolationSpeed;//[Offset: 0x864, Size: 0x4]
	float AnimStandMoveSpeed;//[Offset: 0x868, Size: 0x4]
	float AnimCrouchMoveSpeed;//[Offset: 0x86c, Size: 0x4]
	float AnimProneMoveSpeed;//[Offset: 0x870, Size: 0x4]
	float AnimOnBackMoveSpeed;//[Offset: 0x874, Size: 0x4]
	float AnimKnockdownMoveSpeed;//[Offset: 0x878, Size: 0x4]
	float AnimSprintStandMoveSpeed;//[Offset: 0x87c, Size: 0x4]
	float AnimSprintCrouchMoveSpeed;//[Offset: 0x880, Size: 0x4]
	float AnimStandADSMoveSpeed;//[Offset: 0x884, Size: 0x4]
	float AnimCrouchADSMoveSpeed;//[Offset: 0x888, Size: 0x4]
	float AnimBackwardsMultiplier;//[Offset: 0x88c, Size: 0x4]
	float AnimTargetingMultiplier;//[Offset: 0x890, Size: 0x4]
	float AnimLeanMultiplier;//[Offset: 0x894, Size: 0x4]
	bool bUseMaxSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x898, Size: 0x1]
	float BackwardsMovementModifier;//[Offset: 0x89c, Size: 0x4]
	float TargetingSpeedModifier;//[Offset: 0x8a4, Size: 0x4]
	float RunningSpeedModifier;//[Offset: 0x8a8, Size: 0x4]
	float RunningAccelerationModifier;//[Offset: 0x8ac, Size: 0x4]
	float RunningAndReloadingSpeedModifier;//[Offset: 0x8b0, Size: 0x4]
	float ProneAccelerationModifier;//[Offset: 0x8b4, Size: 0x4]
	float LeanSpeedModifier;//[Offset: 0x8b8, Size: 0x4]
	float RunningBrakingDeceleration;//[Offset: 0x8bc, Size: 0x4]
	float CrouchRunningBrakingDeceleration;//[Offset: 0x8c0, Size: 0x4]
	float CrouchBrakingDeceleration;//[Offset: 0x8c4, Size: 0x4]
	float ProneBrakingDeceleration;//[Offset: 0x8c8, Size: 0x4]
	float InFrontCollisionPushOutPower;//[Offset: 0x8cc, Size: 0x4]
	float CollisionSearchTraceLength;//[Offset: 0x8d0, Size: 0x4]
	float JumpDelay;//[Offset: 0x8d4, Size: 0x4]
	CurveFloat* OnLandDecelerationCurve;//[Offset: 0x8d8, Size: 0x8]
	CurveFloat* AnyLandingCurve;//[Offset: 0x8e0, Size: 0x8]
	CurveFloat* SoftLandingCurve;//[Offset: 0x8e8, Size: 0x8]
	CurveFloat* MidLandingCurve;//[Offset: 0x8f0, Size: 0x8]
	CurveFloat* HardLandingCurve;//[Offset: 0x8f8, Size: 0x8]
	CurveFloat* DeadlyLandingCurve;//[Offset: 0x900, Size: 0x8]
	float FloorAngleDecelerationMultiplier;//[Offset: 0x908, Size: 0x4]
	float MinSpeedToBeginFloorSliding;//[Offset: 0x90c, Size: 0x4]
	float MinSpeedToFinishFloorSliding;//[Offset: 0x910, Size: 0x4]
	float FloorSlideAheadDistance;//[Offset: 0x914, Size: 0x4]
	float FloorSlideStepUpHeight;//[Offset: 0x918, Size: 0x4]
	float FloorSlideMinimalZNormal;//[Offset: 0x91c, Size: 0x4]
	float MaxFloorSlideSpeed;//[Offset: 0x920, Size: 0x4]
	float FloorSlideMinimumAngle;//[Offset: 0x924, Size: 0x4]
	float MaxVaultSlideSpeed;//[Offset: 0x928, Size: 0x4]
	float VaultSlideSpeedMultiplier;//[Offset: 0x92c, Size: 0x4]
	float SlideSpeedMultiplier;//[Offset: 0x930, Size: 0x4]
	float DashSprintSlideSpeedMultiplier;//[Offset: 0x934, Size: 0x4]
	float TimeBetweenSlides;//[Offset: 0x938, Size: 0x4]
	float TraceDistanceWalk;//[Offset: 0x93c, Size: 0x4]
	float TraceDistanceRun;//[Offset: 0x940, Size: 0x4]
	float MinimumVaultObjectHeight;//[Offset: 0x944, Size: 0x4]
	float MaximumVaultObjectHeight;//[Offset: 0x948, Size: 0x4]
	float MinimumClimbObjectLength;//[Offset: 0x94c, Size: 0x4]
	float MinimumVaultSlideObjectLength;//[Offset: 0x950, Size: 0x4]
	Vector2D MaximumVaultObjectHeightDifference;//[Offset: 0x954, Size: 0x8]
	float MinimumHeightToEndSlide;//[Offset: 0x95c, Size: 0x4]
	float MinimumRunVaultDistance;//[Offset: 0x960, Size: 0x4]
	float MaxHeightForLowestClimb;//[Offset: 0x964, Size: 0x4]
	WW3VaultTimeSetupMovementSplit VaultDuration;//[Offset: 0x968, Size: 0x24]
	WW3VaultTimeSetupMovementSplit ClimbLowDuration;//[Offset: 0x98c, Size: 0x24]
	WW3VaultTimeSetupMovementSplit ClimbHighDuration;//[Offset: 0x9b0, Size: 0x24]
	float TigerBrakingDeceleration;//[Offset: 0x9d4, Size: 0x4]
	float SlideTransitionBrakingDeceleration;//[Offset: 0x9d8, Size: 0x4]
	float SprintMaxAngle;//[Offset: 0x9dc, Size: 0x4]
	float FallSpeedMultiplier;//[Offset: 0x9e0, Size: 0x4]
	float LadderSprintMultiplier;//[Offset: 0x9e4, Size: 0x4]
	float InLadderCameraLimit;//[Offset: 0x9e8, Size: 0x4]
	float LadderJumpOffImpulsePower;//[Offset: 0x9ec, Size: 0x4]
	float SkydivingDistanceToFloorToOpenParachute;//[Offset: 0x9f0, Size: 0x4]
	WW3SkydivingProperties SkydivingProperties;//[Offset: 0x9f4, Size: 0x1c]
	WW3SkydivingProperties ParachutingProperties;//[Offset: 0xa10, Size: 0x1c]
	class WW3Parachute* ParachuteClass;//[Offset: 0xa30, Size: 0x28]
	float UphillsAngleLimit;//[Offset: 0xa58, Size: 0x4]
	float WalkTraceDistanceUphillsAheadLimit;//[Offset: 0xa60, Size: 0x4]
	float RunTraceDistanceUphillsAheadLimit;//[Offset: 0xa64, Size: 0x4]
	float DashRunTraceDistanceUphillsAheadLimit;//[Offset: 0xa68, Size: 0x4]
	float DrawVaultDuration;//[Offset: 0xa84, Size: 0x4]
	float CheatLookSpeed;//[Offset: 0xa88, Size: 0x4]
	WW3Parachute* Parachute;//[Offset: 0xe08, Size: 0x8]
	Actor* LastInteractiveObject;//[Offset: 0xe28, Size: 0x8]
	HitResult CurrentBelowFloor;//[Offset: 0xec0, Size: 0x88]
	HitResult CurrentUsableAheadObject;//[Offset: 0xf50, Size: 0x88]

--------------------------------
Class: WW3TurnData
	bool TurnEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector2D AngleToRotateActor;//[Offset: 0x4, Size: 0x8]
	float AnimationSpeed;//[Offset: 0xc, Size: 0x4]
	float TurnSpeed;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WW3VaultTimeSetupMovementSplit
	WW3VaultTimeSetup Walk;//[Offset: 0x0, Size: 0xc]
	WW3VaultTimeSetup Sprint;//[Offset: 0xc, Size: 0xc]
	WW3VaultTimeSetup Turbo;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: WW3VaultTimeSetup
	bool bUseThisDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float MinDuration;//[Offset: 0x4, Size: 0x4]
	float MaxDuration;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WW3SkydivingProperties
	float MaxAcceleration;//[Offset: 0x0, Size: 0x4]
	float FallAccelerationMultiplier;//[Offset: 0x4, Size: 0x4]
	float ForwardAcceleration;//[Offset: 0x8, Size: 0x4]
	float MinFallingSpeed;//[Offset: 0xc, Size: 0x4]
	float MaxFallingSpeed;//[Offset: 0x10, Size: 0x4]
	float MaxHorizontalSpeed;//[Offset: 0x14, Size: 0x4]
	float SpeedReduction;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: WW3Parachute.Actor.Object
	float DestroyingTime;//[Offset: 0x330, Size: 0x4]

--------------------------------
Class: WW3CharacterHandIK
	WW3CharacterIK Hand;//[Offset: 0x8, Size: 0x38]
	WW3CharacterIK ArmRoll;//[Offset: 0x40, Size: 0x38]
	WW3CharacterIK HandReload;//[Offset: 0x78, Size: 0x38]
	float IKAlpha;//[Offset: 0xb0, Size: 0x4]
	float ReloadIKAlpha;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: WW3CharacterIK
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	bool Exists;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: WW3CharacterLegIK
	float OffsetLeft;//[Offset: 0x0, Size: 0x4]
	float OffsetRight;//[Offset: 0x4, Size: 0x4]
	Rotator RotFootLeft;//[Offset: 0x8, Size: 0xc]
	Rotator RotFootRight;//[Offset: 0x14, Size: 0xc]
	float Alpha;//[Offset: 0x20, Size: 0x4]
	float HipsOffset;//[Offset: 0x24, Size: 0x4]
	Vector LeftTarget;//[Offset: 0x28, Size: 0xc]
	Vector RightTarget;//[Offset: 0x34, Size: 0xc]
	float InterpolationSpeed;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: WW3CharacterAnimDebugMode
	bool Sockets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool BonePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool FixIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool Attachments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool Movement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: WW3CharacterBoneDebug
	FString Name;//[Offset: 0x0, Size: 0x10]
	byte Space;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: WW3CharacterAnimationCurveAlpha

--------------------------------
Class: WW3CharacterAnimationCurves
	CurveVector* Curve;//[Offset: 0x0, Size: 0x8]
	float MaxTime;//[Offset: 0x8, Size: 0x4]
	float Speed;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WW3ChangeScopeLerpData

--------------------------------
Class: WW3CameraShakeManager.ActorComponent.Object
	CameraShake*[] ShakeInstances;//[Offset: 0xf8, Size: 0x10]

--------------------------------
Class: WW3PlayerStrikesManager.ActorComponent.Object
	WW3StrikesLoadout StrikesLoadout;//[Offset: 0x108, Size: 0x30]
	WW3InventoryGadgetStrike*[] StrikesGadgets;//[Offset: 0x138, Size: 0x10]
	class WW3Vehicle[] VehiclesTakenBack;//[Offset: 0x148, Size: 0x10]
	<class Object,None(None)> StoredStrikeClasses;//[Offset: 0x158, Size: 0x50]
	WW3DynamicGameRulesManager* DynamicRules;//[Offset: 0x1d0, Size: 0x8]
	void SpendStrikePoints(int StrikePointsToSpend);// 0x1050590
	void SpawnStrikesGadgetsNewPlayerProfile(WW3PlayerProfileData PlayerProfile);// 0x10504e0
	void SpawnStrikesGadgets();// 0x10504c0
	void SetGadgetsOwningPawn(WW3Character* NewOwner);// 0x1050420
	void RemoveStrikesGadget(WW3InventoryItem* StrikesGadget);// 0x10502f0
	void OnRep_StrikesGadgets();// 0x10502d0
	void OnLoadoutChanged(WW3EquipmentLoadout NewLoadout, WW3Character* Character);// 0x1050120
	void ManagerCreated();// 0x1050100
	void IsEnabledStrikeByCooldown(enum InScoreStreakType, bool ReturnValue);// 0x1050070
	void HasEnoughStrikePoints(int8 Index, bool ReturnValue);// 0x104ffe0
	void GetStrikesLoadout(WW3StrikesLoadout ReturnValue);// 0x104fe70
	void GetStrikePoints(int ReturnValue);// 0x104fe40
	void EmptyAndAddZeroedStrikesGadgetsNewPlayerProfile();// 0x104fe20
	void EmptyAndAddZeroedStrikesGadgets();// 0x104fe00
	void DetachGadgetActors(bool bDestroyActors);// 0x104fd70
	void DestroyStrikesGadgets();// 0x104fd50
	void CreateStrikeWidgets();// 0x104fd30
	void AttachGadgetActors(WW3Character* Character);// 0x104fcb0
	void AddStrikeGadget(WW3InventoryGadgetStrike* StrikeGadget, int Index, class Object StrikeGadgetClass, WW3CustomizationConfig StrikeConfig, WW3CustomizationSource ConfigSource);// 0x104f9a0

--------------------------------
Class: WW3CharacterDriverManager.WW3VehicleDriverManager.ActorComponent.Object
	WW3Character* CharacterOwner;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: WW3VehicleDriverManager.ActorComponent.Object

--------------------------------
Class: WW3CharacterEffectsManager.ActorComponent.Object
	float FadeInTime;//[Offset: 0xf8, Size: 0x4]
	float FadeOutTime;//[Offset: 0xfc, Size: 0x4]
	float KnockdownFadeInTime;//[Offset: 0x100, Size: 0x4]
	float KnockdownFadeOutTime;//[Offset: 0x104, Size: 0x4]
	float HealthPercentageWhenToShow;//[Offset: 0x108, Size: 0x4]
	Vector FootstepsRelativeLocation;//[Offset: 0x10c, Size: 0xc]
	WW3AkComponent* FootstepAudioComponent;//[Offset: 0x118, Size: 0x8]
	float HighHealthPercentageWhenToShow;//[Offset: 0x120, Size: 0x4]
	float ADSFootstepsVolume;//[Offset: 0x124, Size: 0x4]
	float ADSEnemyFootstepsVolume;//[Offset: 0x128, Size: 0x4]
	float NonADSFootstepsVolume;//[Offset: 0x12c, Size: 0x4]
	float NonADSEnemyFootstepsVolume;//[Offset: 0x130, Size: 0x4]
	float CurrentDelay;//[Offset: 0x134, Size: 0x4]
	float DelayRate;//[Offset: 0x138, Size: 0x4]
	byte[] ObjectTypes;//[Offset: 0x140, Size: 0x10]
	WW3Character* CharacterOwner;//[Offset: 0x150, Size: 0x8]
	AkAudioEvent* LatestMovementStateAkEvent;//[Offset: 0x168, Size: 0x8]
	void OnFootstep(enum FootstepType);// 0xf6e870
	void GetFootstepAudioComponent(WW3AkComponent* ReturnValue);// 0xf6e650

--------------------------------
Class: WW3ProgressableMarkerSoldier.WW3ProgressableMarker.WW3ActorMarker.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* SavedGadgetTexture;//[Offset: 0xc98, Size: 0x28]
	WW3Character* CharacterOwner;//[Offset: 0xcc0, Size: 0x8]
	Vector DefaultRelativeLocation;//[Offset: 0xce8, Size: 0xc]
	Vector DefaultRelativeLocationCrouch;//[Offset: 0xcf4, Size: 0xc]
	Vector DefaultRelativeLocationProne;//[Offset: 0xd00, Size: 0xc]
	FName SocketNameToAttach;//[Offset: 0xd10, Size: 0x8]
	float MarkerSizeInAirStrike;//[Offset: 0xd18, Size: 0x4]
	CurveFloat* OpacityOverDistanceCurveForCurrentGameMode;//[Offset: 0xd20, Size: 0x8]

--------------------------------
Class: WW3HVTActorMarker.WW3ActorMarker.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* SavedGadgetTexture;//[Offset: 0xc80, Size: 0x28]
	Texture2D* SavedHVTTexture;//[Offset: 0xca8, Size: 0x28]
	WW3Character* CharacterOwner;//[Offset: 0xcd0, Size: 0x8]

--------------------------------
Class: WW3StrikeTargetOutlineComponent.WW3OnScreenActorOutlineComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WW3OnScreenActorOutlineComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector2D SizeMin;//[Offset: 0x6c8, Size: 0x8]
	Vector2D OutlineOffset;//[Offset: 0x6d0, Size: 0x8]
	void ShowActorOutline();// 0xf63b20
	void HideActorOutline();// 0xff8e80

--------------------------------
Class: WW3AimAssistCapsuleComponent.CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WW3DetonatorComponent.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor*[] DetonableObjects;//[Offset: 0xb88, Size: 0x10]

--------------------------------
Class: WW3SatelliteObjectComponent.ActorComponent.Object
	class WW3SatelliteObject* SatelliteActorClass;//[Offset: 0xf0, Size: 0x8]
	WW3SatelliteObject* SatelliteActor;//[Offset: 0xf8, Size: 0x8]

--------------------------------
Class: WW3DistanceRelevantCharacter.Actor.Object
	void NewReload_Multicast_StartReloadWithMissingAmmo(WW3InventoryWeapon* weapon, float ServerTimeStamp, enum ReloadType, float StartTime, byte MissingAmmo);// 0xfa2130
	void NewReload_Multicast_StartReload(WW3InventoryWeapon* weapon, float ServerTimeStamp, enum ReloadType, float StartTime);// 0xfa1ff0
	void NewReload_Multicast_CancelReload(WW3InventoryWeapon* weapon, float ServerTimeStamp);// 0xfa1f20
	void Multicast_StartMelee();// 0xfa1f00
	void Multicast_SimulateMultipleMissedImpactEffects(WW3FireType* FireTypeOwner, byte ImpactsAmount, Vector_NetQuantize ShootingPosition, Vector_NetQuantizeNormal ShootingDirection);// 0xfa1d80
	void Multicast_PlayTaunt(AnimMontage* TauntToPlay);// 0xfa1cf0
	void Multicast_PlayReloadEffectsWithMissingAmmo(WW3InventoryWeapon* weapon, enum ReloadState, byte MissingAmmo);// 0xfa1bf0
	void Multicast_PlayReloadEffects(WW3InventoryWeapon* weapon, enum ReloadState, bool bUseLongReload);// 0xfa1af0
	void Multicast_PlayOutOfAmmoEffects(WW3FireTypeManager* FireTypeManager);// 0xfa1a60
	void Multicast_PlayLoadAmmoEffects(WW3InventoryWeapon* weapon);// 0xfa19d0
	void Multicast_PlayGestureAnimation(int AnimIndex);// 0xfa1940
	void Multicast_PlayChangeAmmoTypeEffectsWithUnloadAmmo(WW3InventoryWeapon* weapon, enum ReloadState, byte AmmoToUnload, byte MissingAmmo);// 0xfa1800
	void Multicast_PlayChangeAmmoEffects(WW3InventoryWeapon* weapon, enum ReloadState);// 0xfa1730
	void Multicast_OnWeaponPickup(WW3Character* NewOwner);// 0xfa16a0
	void Multicast_OnWantsToStopUsingSecondaryGadget_Grenade();// 0xfa1680
	void Multicast_OnReconTransmissionStateChanged(WW3Character* TransmissionStarter, enum NewTransmissionState);// 0xfa15b0
	void Multicast_OnLongFiringSeries(WW3Character* ShooterCharacter);// 0xfa1520
	void Multicast_CreateMultipleTraceImpactEffects(WW3FireType* FireTypeOwner, WW3ImpactData[] ImpactData, Vector_NetQuantize ShootingPosition, Vector_NetQuantizeNormal ShootingDirection);// 0xfa13a0
	void Multicast_CreateGuidedProjectileImpactEffect(WW3Projectile* Projectile, WW3ImpactData ImpactData);// 0xfa12a0
	void Multicast_CancelReloadEffects(WW3InventoryWeapon* weapon);// 0xf2f870

--------------------------------
Class: WW3ImpactData
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize ImpactPosition;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x14, Size: 0xc]
	Vector_NetQuantizeNormal ShootDirection;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* HitComponent;//[Offset: 0x30, Size: 0x8]
	bool bIsRicochet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bIsPenetrationExit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: WW3NoiseManagerCharacter.WW3NoiseManagerPawn.WW3NoiseManager.SceneComponent.ActorComponent.Object
	float PostProcessNoiseMaxBlend;//[Offset: 0x2d8, Size: 0x4]
	MaterialInterface* PostProcessNoise;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: WW3NoiseManagerPawn.WW3NoiseManager.SceneComponent.ActorComponent.Object
	Pawn* CurrentPawn;//[Offset: 0x2c0, Size: 0x8]
	WW3AudioSingleton* AudioSingleton;//[Offset: 0x2c8, Size: 0x8]

--------------------------------
Class: WW3PlayerSettings
	float RegenSpeed;//[Offset: 0x0, Size: 0x4]
	float RegenDisableTime;//[Offset: 0x4, Size: 0x4]
	float ThrowPower;//[Offset: 0x8, Size: 0x4]
	float ReloadHoldTimeToChangeAmmoType;//[Offset: 0xc, Size: 0x4]
	float FullSuppressSwayModifier;//[Offset: 0x10, Size: 0x4]
	float StandingSwayMultiplier;//[Offset: 0x14, Size: 0x4]
	float StandingMovingSwayMultiplier;//[Offset: 0x18, Size: 0x4]
	float CrouchSwayMultiplier;//[Offset: 0x1c, Size: 0x4]
	float CrouchMovingSwayMultiplier;//[Offset: 0x20, Size: 0x4]
	float ProneSwayMultiplier;//[Offset: 0x24, Size: 0x4]
	float ProneMovingSwayMultiplier;//[Offset: 0x28, Size: 0x4]
	Vector2D MaxLookingAroundViewPitch;//[Offset: 0x2c, Size: 0x8]
	Vector2D MaxLookingAroundCameraYaw;//[Offset: 0x34, Size: 0x8]
	float ConcassionGrenadeInstigatorResetTime;//[Offset: 0x3c, Size: 0x4]
	float RagdollImpulsePower;//[Offset: 0x40, Size: 0x4]
	float AdrenalineDecreaseSpeed;//[Offset: 0x44, Size: 0x4]
	float DashRunInputTimer;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: WW3VoiceLanguageAndSetPlayerSettings
	enum PlayerUsedVoiceset;//[Offset: 0x0, Size: 0x1]
	enum PlayerUsedVoiceLanguage;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: WW3RecoilManager.ActorComponent.Object
	WW3Character* ParentCharacter;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: WW3CharacterCameraComponent.WW3CameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	float SprintFOVMultiplier;//[Offset: 0x7b8, Size: 0x4]
	CurveFloat* SprintFOVBlendInCurve;//[Offset: 0x7c0, Size: 0x8]
	CurveFloat* SprintFOVBlendOutCurve;//[Offset: 0x7c8, Size: 0x8]
	float FloorSlidingFOVMultiplier;//[Offset: 0x7d0, Size: 0x4]
	float MinLyingBackViewPitch;//[Offset: 0x7d4, Size: 0x4]
	float MaxLyingBackViewPitch;//[Offset: 0x7d8, Size: 0x4]
	float MaxLyingBackCameraYaw;//[Offset: 0x7dc, Size: 0x4]
	float MinProneViewPitch;//[Offset: 0x7e0, Size: 0x4]
	float MaxProneViewPitch;//[Offset: 0x7e4, Size: 0x4]
	float MaxProneCameraYaw;//[Offset: 0x7e8, Size: 0x4]
	float MaxLookingAroundViewPitch;//[Offset: 0x7ec, Size: 0x4]
	float MaxLookingAroundCameraYaw;//[Offset: 0x7f0, Size: 0x4]
	float MaxFloorSlidingCameraYaw;//[Offset: 0x7f4, Size: 0x4]
	float FocusActorInterpSpeed;//[Offset: 0x7f8, Size: 0x4]
	WW3CameraLimitSetupMovementSplit CameraLimits;//[Offset: 0x7fc, Size: 0x78]
	WW3CameraLimitSetupMovementSplit LookingAroundCameraLimits;//[Offset: 0x874, Size: 0x78]
	WW3Character* OwnerCharacter;//[Offset: 0x8f0, Size: 0x8]
	SceneComponent* FocusComp;//[Offset: 0x8f8, Size: 0x8]
	bool bUpdateCameraPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x900, Size: 0x1]
	WW3PlayerCameraManager* CameraManager;//[Offset: 0x908, Size: 0x8]
	WW3FoVBlend SprintBlend;//[Offset: 0x910, Size: 0x20]
	WW3TargetingFOVManager TargetingFOVManager;//[Offset: 0x930, Size: 0x38]
	float CurrentTargetingFov;//[Offset: 0x968, Size: 0x4]
	float CurrentSprintFov;//[Offset: 0x96c, Size: 0x4]

--------------------------------
Class: WW3CameraLimitSetupMovementSplit
	WW3CameraLimitSetup Stand;//[Offset: 0x0, Size: 0x14]
	WW3CameraLimitSetup Crouch;//[Offset: 0x14, Size: 0x14]
	WW3CameraLimitSetup Prone;//[Offset: 0x28, Size: 0x14]
	WW3CameraLimitSetup OnBack;//[Offset: 0x3c, Size: 0x14]
	WW3CameraLimitSetup Slide;//[Offset: 0x50, Size: 0x14]
	WW3CameraLimitSetup Knockdown;//[Offset: 0x64, Size: 0x14]

--------------------------------
Class: WW3CameraLimitSetup
	bool bEnablePitchLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float MaxPitch;//[Offset: 0x4, Size: 0x4]
	float MinPitch;//[Offset: 0x8, Size: 0x4]
	bool bEnableYawLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float Yaw;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WW3PlayerCameraManager.PlayerCameraManager.Actor.Object
	delegate OnCameraChange;//[Offset: 0x2470, Size: 0x10]
	WW3CameraComponent* ActiveCameraComponent;//[Offset: 0x2498, Size: 0x8]
	CameraComponent* RealActiveCameraComponent;//[Offset: 0x24a0, Size: 0x8]
	WW3GamePlayerController* WW3GamePlayerControllerOwner;//[Offset: 0x2520, Size: 0x8]
	void SetCameraDOF(float FocalDistance, float Scale);// 0x10439d0
	void GetDeltaRotation(Rotator ReturnValue);// 0x1040d40
	void GetCameraDOFScale(float ReturnValue);// 0x1040d10
	void GetCameraDOFFocalDistance(float ReturnValue);// 0x1040ce0

--------------------------------
Class: WW3FoVBlend
	float Source;//[Offset: 0x0, Size: 0x4]
	float Target;//[Offset: 0x4, Size: 0x4]
	float ElapsedTime;//[Offset: 0x8, Size: 0x4]
	float Duration;//[Offset: 0xc, Size: 0x4]
	float Alpha;//[Offset: 0x10, Size: 0x4]
	CurveFloat* CustomCurve;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: WW3TargetingFOVManager
	CurveFloat* Ads_Curve;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: WW3EnviroEffectsController.ActorComponent.Object
	WW3Character* OwningCharacter;//[Offset: 0xf0, Size: 0x8]
	float ChemicalLossPerSecondWhenIdle;//[Offset: 0xf8, Size: 0x4]
	float HeatLossPerSecondWhenIdle;//[Offset: 0xfc, Size: 0x4]
	float RadiationLossPerSecondWhenIdle;//[Offset: 0x100, Size: 0x4]
	float SuffocationLossPerSecondWhenIdle;//[Offset: 0x104, Size: 0x4]
	float ChemicalLossWhenOverflowed;//[Offset: 0x108, Size: 0x4]
	float HeatLossWhenOverflowed;//[Offset: 0x10c, Size: 0x4]
	float RadiationLossWhenOverflowed;//[Offset: 0x110, Size: 0x4]
	float SuffocationLossWhenOverflowed;//[Offset: 0x114, Size: 0x4]
	float ChemicalDamagePerTick;//[Offset: 0x118, Size: 0x4]
	float HeatDamagePerTick;//[Offset: 0x11c, Size: 0x4]
	float RadiationDamagePerTick;//[Offset: 0x120, Size: 0x4]
	float SuffocationDamagePerTick;//[Offset: 0x124, Size: 0x4]
	interface classNone[] OverlappedEnvironmentAreas;//[Offset: 0x178, Size: 0x10]
	WW3EnvironmentalCapsuleComponent*[] OverlappedEnvironmentalAreaComponents;//[Offset: 0x188, Size: 0x10]
	WW3AudioSingleton* AudioSingleton;//[Offset: 0x198, Size: 0x8]
	CurveFloat* ConcussionLostPerSecondCurve;//[Offset: 0x208, Size: 0x8]
	CurveFloat* BlindnessLostPerSecondCurve;//[Offset: 0x210, Size: 0x8]
	CurveFloat* ConcussionToAdrenalineFactorCurve;//[Offset: 0x218, Size: 0x8]
	CurveFloat* BlindnessToAdrenalineFactorCurve;//[Offset: 0x220, Size: 0x8]

--------------------------------
Class: WW3EnvironmentalCapsuleComponent.CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float AdrenalineAmountPerSecond;//[Offset: 0x5a8, Size: 0x4]
	float ChemicalAmountPerSecond;//[Offset: 0x5ac, Size: 0x4]
	float HeatAmountPerSecond;//[Offset: 0x5b0, Size: 0x4]
	float RadiationAmountPerSecond;//[Offset: 0x5b4, Size: 0x4]
	float SuffocationAmountPerSecond;//[Offset: 0x5b8, Size: 0x4]
	bool IsAreaEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5bc, Size: 0x1]
	WW3Character*[] CharactersInside;//[Offset: 0x5c8, Size: 0x10]
	void SetIsAreaEnabled(bool bInIsAreaEnabled);// 0xfaa550
	void OnRep_IsAreaEnabled(bool bInPrevIsAreaEnabled);// 0xfaa350
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xfaa1b0
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult);// 0xfa9fc0

--------------------------------
Class: WW3SuppressEffectController.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	WW3Character* OwningCharacter;//[Offset: 0x5a0, Size: 0x8]
	CurveFloat* SuppressMultiplierFromDistanceToAttackerCurve;//[Offset: 0x5c8, Size: 0x8]
	PlayerState*[] Attackers;//[Offset: 0x600, Size: 0x10]
	void EndOverlapComponent(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xfae340
	void BeginOverlapComponent(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult);// 0x10a7a50

--------------------------------
Class: WW3ThrowableFlashGrenade.WW3ThrowableGrenade.WW3Throwable.Actor.Object
	FlashDamageParams FlashExplosionParams;//[Offset: 0x688, Size: 0x30]
	Texture2D* BakedTexture;//[Offset: 0x6b8, Size: 0x8]
	TextureRenderTarget2D* TargetTexture;//[Offset: 0x6c0, Size: 0x8]
	SceneCaptureComponent2D* SceneCapture;//[Offset: 0x6c8, Size: 0x8]
	Texture* GeneratedTexture;//[Offset: 0x6d0, Size: 0x8]
	bool bIsActorFlashed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1]
	float Intensity;//[Offset: 0x6e4, Size: 0x4]
	WW3Character* PostProcessOwner;//[Offset: 0x6f0, Size: 0x8]
	WW3CameraComponent* WW3CameraComponent;//[Offset: 0x6f8, Size: 0x8]
	MaterialInstanceDynamic* PostProcessMID;//[Offset: 0x700, Size: 0x8]
	WW3PlayerController* LocalPlayerController;//[Offset: 0x710, Size: 0x8]
	void PreGenerate(MeshComponent* HideMesh);// 0x10b1410
	void PostGenerate(MeshComponent* HideMesh);// 0x10b1380
	void OnExploded();// 0x10502b0
	void GenerateTexture(Texture* ReturnValue);// 0x10b07a0

--------------------------------
Class: FlashDamageParams
	float FlashIntensity;//[Offset: 0x0, Size: 0x4]
	float FlashDuration;//[Offset: 0x4, Size: 0x4]
	float InnerFlashRange;//[Offset: 0x8, Size: 0x4]
	float OuterFlashRange;//[Offset: 0xc, Size: 0x4]
	CurveFloat* ExplosiveDamageCurve;//[Offset: 0x10, Size: 0x8]
	class CameraShake* FlashCamShake;//[Offset: 0x18, Size: 0x8]
	float FlashForwardMultiplier;//[Offset: 0x20, Size: 0x4]
	float FlashSideMultiplier;//[Offset: 0x24, Size: 0x4]
	float FlashBacksideMultiplier;//[Offset: 0x28, Size: 0x4]
	float FlashBackwardMultiplier;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: WW3CharacterReplicatedMovement
	Vector Location;//[Offset: 0x0, Size: 0xc]
	byte YawRotation;//[Offset: 0xc, Size: 0x1]
	byte VelocityYaw;//[Offset: 0xd, Size: 0x1]
	WW3SeatBase* UsingSeat;//[Offset: 0x10, Size: 0x8]
	byte PackedSpeed;//[Offset: 0x18, Size: 0x1]
	byte ReplicatedMovementMode;//[Offset: 0x19, Size: 0x1]
	byte ReplicatedCustomMovementMode;//[Offset: 0x1a, Size: 0x1]
	byte ReplicatedMovementPosition;//[Offset: 0x1b, Size: 0x1]
	enum SpecialInfo;//[Offset: 0x1c, Size: 0x1]
	bool PerformingVaults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	float VaultTimeAlongCurve;//[Offset: 0x20, Size: 0x4]
	float VaultApexTime;//[Offset: 0x24, Size: 0x4]
	float VaultDuration;//[Offset: 0x28, Size: 0x4]
	Vector_NetQuantize VaultStartLocation;//[Offset: 0x2c, Size: 0xc]
	Vector_NetQuantize VaultApexLocation;//[Offset: 0x38, Size: 0xc]
	Vector_NetQuantize VaultEndLocation;//[Offset: 0x44, Size: 0xc]
	byte TurnDataFinalRotYaw;//[Offset: 0x50, Size: 0x1]
	float TurnDataElapsed;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: WW3Gadget_SemtexC4.WW3Gadget_Mine.WW3GadgetThrowable.Actor.Object
	WW3ReplicatedSemtexC4State ReplicatedState;//[Offset: 0x568, Size: 0x58]
	float FallVelocityLimit;//[Offset: 0x5c0, Size: 0x4]
	float TimeDelayToExplode;//[Offset: 0x5c4, Size: 0x4]
	Vector ActorLocationRelativeOffsetForTraces;//[Offset: 0x5c8, Size: 0xc]
	WW3InstancedDestroyPackComponent* AttachDestroyPackComponent;//[Offset: 0x638, Size: 0x8]
	void OnRep_State(WW3ReplicatedSemtexC4State InPrevState);// 0xfbbf20
	void OnGadgetPackDestroyed(Actor* DestroyedActor);// 0xfbb950

--------------------------------
Class: WW3ReplicatedSemtexC4State
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector Location;//[Offset: 0xc, Size: 0xc]
	Rotator Rotation;//[Offset: 0x18, Size: 0xc]
	enum State;//[Offset: 0x24, Size: 0x1]
	Vector AttachRelativeLocation;//[Offset: 0x28, Size: 0xc]
	Rotator AttachRelativeRotation;//[Offset: 0x34, Size: 0xc]
	FString AttachBoneName;//[Offset: 0x40, Size: 0x10]
	SceneComponent* AttachTarget;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: WW3InstancedDestroyPackComponent.HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] DestroyPackDataIndexes;//[Offset: 0x790, Size: 0x10]
	enum DestroyPackInstanceType;//[Offset: 0x7a0, Size: 0x1]

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x6b0, Size: 0x10]
	int NumBuiltInstances;//[Offset: 0x6c0, Size: 0x4]
	Box BuiltInstanceBounds;//[Offset: 0x6c8, Size: 0x1c]
	Box UnbuiltInstanceBounds;//[Offset: 0x6e4, Size: 0x1c]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x700, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x710, Size: 0x1]
	int OcclusionLayerNumNodes;//[Offset: 0x718, Size: 0x4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x71c, Size: 0x1c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73c, Size: 0x1]
	int InstanceCountToRender;//[Offset: 0x740, Size: 0x4]
	void RemoveInstances(int[] InstancesToRemove, bool ReturnValue);// 0x24f44a0

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x610, Size: 0x10]
	int InstancingRandomSeed;//[Offset: 0x620, Size: 0x4]
	int InstanceStartCullDistance;//[Offset: 0x624, Size: 0x4]
	int InstanceEndCullDistance;//[Offset: 0x628, Size: 0x4]
	int[] InstanceReorderTable;//[Offset: 0x630, Size: 0x10]
	int NumPendingLightmaps;//[Offset: 0x688, Size: 0x4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x690, Size: 0x10]
	void UpdateInstanceTransform(int InstanceIndex, Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport, bool ReturnValue);// 0x24f9160
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x24f90a0
	void RemoveInstance(int InstanceIndex, bool ReturnValue);// 0x24f8fe0
	void GetInstanceTransform(int InstanceIndex, Transform OutInstanceTransform, bool bWorldSpace, bool ReturnValue);// 0x24f8650
	void GetInstancesOverlappingSphere(Vector Center, float Radius, bool bSphereInWorldSpace, int[] ReturnValue);// 0x24f88e0
	void GetInstancesOverlappingBox(Box Box, bool bBoxInWorldSpace, int[] ReturnValue);// 0x24f87b0
	void GetInstanceCount(int ReturnValue);// 0x24f8620
	void ClearInstances();// 0xf64a10
	void AddInstanceWorldSpace(Transform WorldTransform, int ReturnValue);// 0x24f7d10
	void AddInstance(Transform InstanceTransform, int ReturnValue);// 0x24f7c30

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40]

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: WW3KillScreenKillerInfo
	WW3SimplifiedTakenHitInfo[] HitsInfo;//[Offset: 0x0, Size: 0x10]
	FText[] AttachmentsNames;//[Offset: 0x10, Size: 0x10]
	Texture2D*[] AttachmentsTextures;//[Offset: 0x20, Size: 0x10]
	Texture2D* DeathCauserImage;//[Offset: 0x30, Size: 0x8]
	Texture2D* DeathCauserRarityImage;//[Offset: 0x38, Size: 0x8]
	WW3PlayerState* KillerPlayerState;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: WW3SimplifiedTakenHitInfo
	FText DamageCauserName;//[Offset: 0x0, Size: 0x18]
	PlayerState* InstigatorPlayerState;//[Offset: 0x18, Size: 0x8]
	Actor* DamageCauser;//[Offset: 0x20, Size: 0x8]
	class Object* DamageTypeClass;//[Offset: 0x28, Size: 0x8]
	uint16 ConfigId;//[Offset: 0x30, Size: 0x2]
	int16 ActualDamage;//[Offset: 0x32, Size: 0x2]
	enum DamageType;//[Offset: 0x34, Size: 0x1]
	enum HitType;//[Offset: 0x35, Size: 0x1]
	enum ConfigType;//[Offset: 0x36, Size: 0x1]
	enum HitBoneType;//[Offset: 0x37, Size: 0x1]
	bool bIsConfigCustomized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: WW3ReplicatedCharacterStateAndAnimation
	WW3CharacterReplicatedAnimation CharacterReplicatedAnimation;//[Offset: 0x0, Size: 0x8]
	WW3ReplicatedCharacterState ReplicatedCharacterStateStruct;//[Offset: 0x8, Size: 0x6]

--------------------------------
Class: WW3CharacterReplicatedAnimation
	float EndAnimTime;//[Offset: 0x0, Size: 0x4]
	byte AnimMovePosition;//[Offset: 0x4, Size: 0x1]
	byte AnimMovePositionPrev;//[Offset: 0x5, Size: 0x1]
	byte AnimMoveSpeed;//[Offset: 0x6, Size: 0x1]
	byte AnimMoveSpeedPrev;//[Offset: 0x7, Size: 0x1]

--------------------------------
Class: WW3ReplicatedCharacterState
	uint16 CurrentLifeCount;//[Offset: 0x0, Size: 0x2]
	uint16 ClientCurrentLifeCount;//[Offset: 0x2, Size: 0x2]
	byte ReplicatedCharacterStateBitMask;//[Offset: 0x4, Size: 0x1]
	bool bShouldResetAttachments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]

--------------------------------
Class: WW3KnockdownHitInfo
	WW3SimplifiedTakenHitInfo[] SimplifiedHitsInfo;//[Offset: 0x0, Size: 0x10]
	WW3TakeHitInfo HitInfo;//[Offset: 0x10, Size: 0xa8]
	enum DeathType;//[Offset: 0xb8, Size: 0x1]
	Controller* KillerPlayer;//[Offset: 0xc0, Size: 0x8]
	uint16 DeathCauserItemID;//[Offset: 0xc8, Size: 0x2]
	enum MarkType;//[Offset: 0xca, Size: 0x1]

--------------------------------
Class: WW3FreeCameraPawn.Pawn.Actor.Object
	CameraComponent* CameraComponent;//[Offset: 0x390, Size: 0x8]
	SpectatorPawnMovement* MovementComponent;//[Offset: 0x398, Size: 0x8]

--------------------------------
Class: SpectatorPawnMovement.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x190, Size: 0x1]

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x178, Size: 0x4]
	float Acceleration;//[Offset: 0x17c, Size: 0x4]
	float Deceleration;//[Offset: 0x180, Size: 0x4]
	float TurningBoost;//[Offset: 0x184, Size: 0x4]
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 0x1]

--------------------------------
Class: WW3Ladder.Actor.Object
	SceneComponent* Scene;//[Offset: 0x330, Size: 0x8]
	ArrowComponent* arrow;//[Offset: 0x338, Size: 0x8]
	BoxComponent* TriggerBox;//[Offset: 0x340, Size: 0x8]
	StaticMeshComponent*[] LadderMeshes;//[Offset: 0x348, Size: 0x10]
	StaticMesh* StepMesh;//[Offset: 0x358, Size: 0x8]
	StaticMesh* EndStepMesh;//[Offset: 0x360, Size: 0x8]
	float BottomLeaveOffset;//[Offset: 0x368, Size: 0x4]
	int StepsNumber;//[Offset: 0x36c, Size: 0x4]
	int TopEndStepsNumber;//[Offset: 0x370, Size: 0x4]
	float StepHeight;//[Offset: 0x374, Size: 0x4]
	float LadderBottom;//[Offset: 0x378, Size: 0x4]
	float HeightToTopLeave;//[Offset: 0x37c, Size: 0x4]
	float HeightToBottomLeave;//[Offset: 0x380, Size: 0x4]
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult);// 0x1010e20
	void GetStepHeight(float ReturnValue);// 0x1010cc0
	void GetHeightToTopLeave(float ReturnValue);// 0x1010c90
	void GetHeightToTopEnter(float ReturnValue);// 0x1010c60
	void GetHeightToBottomLeave(float ReturnValue);// 0x1010c30
	void GetHeightToBottomEnter(float CharacterPositionZ, float ReturnValue);// 0x1010ba0

--------------------------------
Class: SkeletalMeshActor.Actor.Object
	bool bShouldDoAnimNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	bool bWakeOnLevelStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 0x1]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x340, Size: 0x8]
	SkeletalMesh* ReplicatedMesh;//[Offset: 0x348, Size: 0x8]
	PhysicsAsset* ReplicatedPhysAsset;//[Offset: 0x350, Size: 0x8]
	MaterialInterface* ReplicatedMaterial0;//[Offset: 0x358, Size: 0x8]
	MaterialInterface* ReplicatedMaterial1;//[Offset: 0x360, Size: 0x8]
	void OnRep_ReplicatedPhysAsset();// 0x45e170
	void OnRep_ReplicatedMesh();// 0xf3d810
	void OnRep_ReplicatedMaterial1();// 0xf26860
	void OnRep_ReplicatedMaterial0();// 0xf22330

--------------------------------
Class: WW3CABodyPart_Chest.WW3CABodyArmor.WW3CABodyPart.WW3CharacterAttachment.WW3AttachmentDamageable.WW3Attachment.Object
	int ProxyMeshMaterialSlotToUse;//[Offset: 0x5d0, Size: 0x4]

--------------------------------
Class: WW3CABodyArmor.WW3CABodyPart.WW3CharacterAttachment.WW3AttachmentDamageable.WW3Attachment.Object
	float DefaultDamageAbsorptionPercentage;//[Offset: 0x580, Size: 0x4]
	WW3AttachmentDamageAbsorptionInfo[] OverrideDamageAbsorptionPerDamageType;//[Offset: 0x588, Size: 0x10]
	enum ArmorPlateType;//[Offset: 0x598, Size: 0x1]
	byte BallisticProtectionNumberOfDisplayedUIBars;//[Offset: 0x599, Size: 0x1]
	uint16 ArmorPlateID;//[Offset: 0x59a, Size: 0x2]
	class Object* LoadedArmorPreview;//[Offset: 0x5a0, Size: 0x8]
	class Object* LoadedArmor;//[Offset: 0x5a8, Size: 0x8]
	void OnRep_ArmorPlateId();// 0xf54bd0

--------------------------------
Class: WW3CABodyPart.WW3CharacterAttachment.WW3AttachmentDamageable.WW3Attachment.Object
	class MeshComponent* FPPBaseMeshTemplate;//[Offset: 0x4e8, Size: 0x28]
	bool bHideMeshFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 0x1]
	MeshComponent* FPPBaseMeshComp;//[Offset: 0x550, Size: 0x8]
	class AnimInstance* CachedAnimClass;//[Offset: 0x570, Size: 0x8]

--------------------------------
Class: WW3CharacterAttachment.WW3AttachmentDamageable.WW3Attachment.Object
	WW3CharacterAttachmentSlot[] AvailableSlots;//[Offset: 0x4d0, Size: 0x10]
	enum AttachmentType;//[Offset: 0x4e0, Size: 0x1]
	enum AttachmentTypeCompatibility;//[Offset: 0x4e1, Size: 0x1]

--------------------------------
Class: WW3InventoryGrenade.WW3InventoryItem.Actor.Object
	WW3ThrowableGrenade* CurrentGrenadeToThrow;//[Offset: 0x890, Size: 0x8]
	WW3Character* GrenadeOwner;//[Offset: 0x898, Size: 0x8]
	int Amount;//[Offset: 0x8a0, Size: 0x4]
	int CurrentAmount;//[Offset: 0x8a4, Size: 0x4]
	bool bUseSpawnMethodFromIdentity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8aa, Size: 0x1]
	class WW3Throwable* GrenadeClass;//[Offset: 0x8b0, Size: 0x8]
	Texture2D* GrenadeIcon;//[Offset: 0x8b8, Size: 0x8]
	enum SoldierGrenadeType;//[Offset: 0x8c0, Size: 0x1]
	float ThrowSpeed;//[Offset: 0x8c4, Size: 0x4]
	enum GadgetSlotType;//[Offset: 0x8c8, Size: 0x1]
	void OnRep_CurrentAmount();// 0xffc4d0

--------------------------------
Class: WW3WeaponAnimationConfig
	float ReloadDelay;//[Offset: 0x0, Size: 0x4]
	float AfterShotDelay;//[Offset: 0x4, Size: 0x4]
	float SingleShotHoldTimer;//[Offset: 0x8, Size: 0x4]
	bool bCanHipFireInStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bCanHipFireInCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool bCanHipFireInProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]
	bool bCanHipFireInOnback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 0x1]
	bool bCanHipFireInSlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bCanHipFireInKnockdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool bCanADSInStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	bool bCanADSInCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]
	bool bCanADSInProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool bCanADSInOnback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	bool bCanADSInSlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 0x1]
	bool bCanADSInKnockdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17, Size: 0x1]
	bool bCanEquipInKnockdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bCanADSWhileLoadingAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool bCanFireToCancelReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	float CancelReloadDuration;//[Offset: 0x1c, Size: 0x4]
	float EquipDuration;//[Offset: 0x20, Size: 0x4]
	float UnequipDuration;//[Offset: 0x24, Size: 0x4]
	float VehicleExitAnimationDuration;//[Offset: 0x28, Size: 0x4]
	float ReloadShortDuration;//[Offset: 0x2c, Size: 0x4]
	float ReloadLongDuration;//[Offset: 0x30, Size: 0x4]
	float ReloadUnderbarrelDuration;//[Offset: 0x34, Size: 0x4]
	float AfterFireDuration;//[Offset: 0x38, Size: 0x4]
	WW3WeaponAnimDurationMultipliers AnimDurationMagazineMultipliers;//[Offset: 0x40, Size: 0x1e0]
	float FireSelectorCooldown;//[Offset: 0x220, Size: 0x4]
	CurveFloat* FPPBlendInADSCurve;//[Offset: 0x228, Size: 0x8]
	float FPPBlendInADSTimeMultiplier;//[Offset: 0x230, Size: 0x4]
	float FPPBlendOutADSTimeMultiplier;//[Offset: 0x234, Size: 0x4]
	CurveFloat* FPPBlendOutADSCurve;//[Offset: 0x238, Size: 0x8]
	float FPPAfterFirePower;//[Offset: 0x240, Size: 0x4]
	float FPPAfterFireLerpSpeed;//[Offset: 0x244, Size: 0x4]
	bool FPPUseAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	WW3MovementPositionOffsets WeaponScreenOffsets;//[Offset: 0x24c, Size: 0x78]
	WW3MovementPositionOffsets PointShootingScreenOffsets;//[Offset: 0x2c4, Size: 0x78]
	bool bDisablePSTLean;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 0x1]
	WW3DeltaProperties SwayProperties;//[Offset: 0x340, Size: 0x40]
	WW3BreathProperties BreathProperties;//[Offset: 0x380, Size: 0x28]
	bool IsHeavySniper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	float WeaponFireBlendout;//[Offset: 0x3ac, Size: 0x4]
	float ChangingShootingModeWeaponLean;//[Offset: 0x3b0, Size: 0x4]
	Vector2D WeaponSwayLimit;//[Offset: 0x3b4, Size: 0x8]
	CurveFloat* TPPFiringCurve;//[Offset: 0x3c0, Size: 0x8]
	float TPPFiringADSMultiplier;//[Offset: 0x3c8, Size: 0x4]
	WW3AnimFireOffsets FireCurves;//[Offset: 0x3d0, Size: 0x140]
	WW3AnimSwayOffsets SwayADSCurves;//[Offset: 0x510, Size: 0x50]
	WW3AnimMoveOffsets IdleCurves;//[Offset: 0x560, Size: 0x180]
	WW3AnimMoveOffsets WalkCurves;//[Offset: 0x6e0, Size: 0x180]
	WW3AnimSprintOffsets SprintCurves;//[Offset: 0x860, Size: 0x50]
	CurveVector* InteractionTranslationCurve;//[Offset: 0x8b0, Size: 0x8]
	CurveVector* InteractionRotationCurve;//[Offset: 0x8b8, Size: 0x8]
	WW3MovementPositionOffsets InspectWeaponScreenOffsets;//[Offset: 0x8c0, Size: 0x78]
	WW3MovementPositionOffsets UnderbarrelScreenOffsets;//[Offset: 0x938, Size: 0x78]
	WW3AttachmentSocketPriorityList[] AttachmentSocketPriorityList;//[Offset: 0x9b0, Size: 0x10]

--------------------------------
Class: WW3WeaponAnimDurationMultipliers
	<float,None(None)> Equip;//[Offset: 0x0, Size: 0x50]
	<float,None(None)> UnEquip;//[Offset: 0x50, Size: 0x50]
	<float,None(None)> ReloadShort;//[Offset: 0xa0, Size: 0x50]
	<float,None(None)> ReloadLong;//[Offset: 0xf0, Size: 0x50]
	<float,None(None)> ReloadUnderbarrel;//[Offset: 0x140, Size: 0x50]
	<float,None(None)> AfterFire;//[Offset: 0x190, Size: 0x50]

--------------------------------
Class: WW3BreathProperties
	float StartThresholdPercent;//[Offset: 0x0, Size: 0x4]
	float MaxDuration;//[Offset: 0x4, Size: 0x4]
	float RegenSpeed;//[Offset: 0x8, Size: 0x4]
	CurveFloat* BlendCurve;//[Offset: 0x10, Size: 0x8]
	CurveFloat* AfterBreathCurve;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: WW3AnimFireOffsets
	WW3AnimADSCurves WeaponFireOffset;//[Offset: 0x0, Size: 0x60]
	CurveFloat* WeaponRotationFireOffsetY;//[Offset: 0x60, Size: 0x8]
	bool bEnableWeaponRotationFireOffsetYInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	WW3AnimADSCurves WeaponRotationFireOffset;//[Offset: 0x70, Size: 0x60]
	CurveFloat* WeaponRotationAfterFireOffsetY;//[Offset: 0xd0, Size: 0x8]
	bool bEnableWeaponRotationAfterFireOffsetYInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	WW3AnimADSCurves WeaponRotationAfterFireOffset;//[Offset: 0xe0, Size: 0x60]

--------------------------------
Class: WW3AnimADSCurves
	CurveVector* Offset;//[Offset: 0x0, Size: 0x8]
	float ADSModifier;//[Offset: 0x8, Size: 0x4]
	<float,None(None)> ScopeMap;//[Offset: 0x10, Size: 0x50]

--------------------------------
Class: WW3AnimSwayOffsets
	CurveVector* StandCurve;//[Offset: 0x0, Size: 0x8]
	float StandSpeed;//[Offset: 0x8, Size: 0x4]
	CurveVector* CrouchCurve;//[Offset: 0x10, Size: 0x8]
	float CrouchSpeed;//[Offset: 0x18, Size: 0x4]
	CurveVector* ProneCurve;//[Offset: 0x20, Size: 0x8]
	float ProneSpeed;//[Offset: 0x28, Size: 0x4]
	CurveVector* OnbackCurve;//[Offset: 0x30, Size: 0x8]
	float OnbackSpeed;//[Offset: 0x38, Size: 0x4]
	CurveVector* KnockdownCurve;//[Offset: 0x40, Size: 0x8]
	float KnockdownSpeed;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: WW3AnimMoveOffsets
	WW3AnimADSCurves StandLocationOffsets;//[Offset: 0x0, Size: 0x60]
	WW3AnimADSCurves StandRotationOffsets;//[Offset: 0x60, Size: 0x60]
	WW3AnimADSCurves CrouchLocationOffsets;//[Offset: 0xc0, Size: 0x60]
	WW3AnimADSCurves CrouchRotationOffsets;//[Offset: 0x120, Size: 0x60]

--------------------------------
Class: WW3AnimSprintOffsets
	CurveFloat* SprintCurveTimeMultiplier;//[Offset: 0x0, Size: 0x8]
	CurveFloat* SprintCurveStrengthMultiplier;//[Offset: 0x8, Size: 0x8]
	CurveVector* StandWeaponLocationOffset;//[Offset: 0x10, Size: 0x8]
	CurveVector* StandWeaponRotationOffset;//[Offset: 0x18, Size: 0x8]
	CurveVector* DashWeaponLocationOffset;//[Offset: 0x20, Size: 0x8]
	CurveVector* DashWeaponRotationOffset;//[Offset: 0x28, Size: 0x8]
	CurveFloat* CrouchSprintCurveTimeMultiplier;//[Offset: 0x30, Size: 0x8]
	CurveFloat* CrouchSprintCurveStrengthMultiplier;//[Offset: 0x38, Size: 0x8]
	CurveVector* CrouchWeaponLocationOffset;//[Offset: 0x40, Size: 0x8]
	CurveVector* CrouchWeaponRotationOffset;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: WW3AttachmentSocketPriorityList
	WW3AttachmentSocketCondition Condition;//[Offset: 0x0, Size: 0x2]
	enum[] PriorityList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WW3AttachmentSocketCondition
	enum Attachment;//[Offset: 0x0, Size: 0x1]
	enum Condition;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: WW3SavedItemAnimation
	WW3ItemAnim Animation;//[Offset: 0x0, Size: 0x40]
	float PlayRate;//[Offset: 0x40, Size: 0x4]
	float StartTime;//[Offset: 0x44, Size: 0x4]
	bool bUseDurationInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	float WorldTimeStart;//[Offset: 0x4c, Size: 0x4]
	bool bIsCanceled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: WW3TPPCameraProperties
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bRotateWithArmedVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bRotateWithTransportVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bCanRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	float RotationLagSpeed_Pitch;//[Offset: 0x4, Size: 0x4]
	float MaxPitchRotationUp;//[Offset: 0x8, Size: 0x4]
	float MaxPitchRotationDown;//[Offset: 0xc, Size: 0x4]
	bool bUseMinZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float MinZ;//[Offset: 0x14, Size: 0x4]
	CurveFloat* PivotLagSpeed_X;//[Offset: 0x18, Size: 0x8]
	CurveFloat* PivotLagSpeed_Y;//[Offset: 0x20, Size: 0x8]
	CurveFloat* PivotLagSpeed_Z;//[Offset: 0x28, Size: 0x8]
	float PivotMaxLag_Y;//[Offset: 0x30, Size: 0x4]
	float PivotMaxLag_Z;//[Offset: 0x34, Size: 0x4]
	CurveVector* PivotOffset;//[Offset: 0x40, Size: 0x8]
	CurveFloat* CameraLookAtOffset_X;//[Offset: 0x48, Size: 0x8]
	CurveVector* CameraOffset;//[Offset: 0x50, Size: 0x8]
	float V_PitchRotation;//[Offset: 0x58, Size: 0x4]
	CurveFloat* V_RollEffectAmount;//[Offset: 0x60, Size: 0x8]
	CurveFloat* V_RollEffectSpeed;//[Offset: 0x68, Size: 0x8]
	float CollisionTolerance;//[Offset: 0x70, Size: 0x4]
	class CameraShake* OnHitShake_X;//[Offset: 0x78, Size: 0x8]
	class CameraShake* OnHitShake_Y;//[Offset: 0x80, Size: 0x8]
	class CameraShake* Shake_Z;//[Offset: 0x88, Size: 0x8]
	CurveVector* ShakeCurve;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: WW3FPPCameraProperties
	class WW3VehicleCockpit* VehicleCockpitClass;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: WW3VehicleCockpit.Actor.Object
	bool bRotateCameraWithVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	SceneComponent* Root;//[Offset: 0x338, Size: 0x8]
	StaticMeshComponent* CockpitMesh;//[Offset: 0x340, Size: 0x8]
	StaticMeshComponent* ScreenMesh;//[Offset: 0x348, Size: 0x8]
	StaticMeshComponent* LightBlockerMesh;//[Offset: 0x350, Size: 0x8]
	SceneComponent* ScreenCenterSC;//[Offset: 0x358, Size: 0x8]
	SceneComponent* ScreenTopLeftSC;//[Offset: 0x360, Size: 0x8]
	SceneComponent* ScreenTopRightSC;//[Offset: 0x368, Size: 0x8]
	SceneComponent* ScreenBottomRightSC;//[Offset: 0x370, Size: 0x8]
	SceneComponent* ScreenBottomLeftSC;//[Offset: 0x378, Size: 0x8]
	WW3Vehicle* OwnerVehicle;//[Offset: 0x380, Size: 0x8]
	WW3VehicleCameraComponent* Camera;//[Offset: 0x388, Size: 0x8]
	PlayerController* Controller;//[Offset: 0x390, Size: 0x8]
	Vector CockpitLocationOffset;//[Offset: 0x398, Size: 0xc]
	bool bMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1]
	Vector MaxAcceleration;//[Offset: 0x3a8, Size: 0xc]
	Vector MaxAccelerationMinus;//[Offset: 0x3b4, Size: 0xc]
	Vector AccelerationMultiplier;//[Offset: 0x3c0, Size: 0xc]
	float AccelerationInterpAlpha;//[Offset: 0x3cc, Size: 0x4]
	float LocationInterpAlpha;//[Offset: 0x3d0, Size: 0x4]
	bool bRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 0x1]
	bool bHoldRollRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d5, Size: 0x1]
	float MaxRollRotation;//[Offset: 0x3d8, Size: 0x4]
	float PitchRotationSpeed;//[Offset: 0x3dc, Size: 0x4]
	float YawRotationSpeed;//[Offset: 0x3e0, Size: 0x4]
	float RollRotationSpeed;//[Offset: 0x3e4, Size: 0x4]
	CurveVector* RotationMultiplier;//[Offset: 0x3e8, Size: 0x8]
	Vector CockpitInitialOffset;//[Offset: 0x460, Size: 0xc]
	Rotator CockpitInitialRotation;//[Offset: 0x46c, Size: 0xc]
	Vector4 CockpitMovement;//[Offset: 0x480, Size: 0x10]
	Vector4 TopCockpitScreenCorners;//[Offset: 0x490, Size: 0x10]
	Vector4 BottomCockpitScreenCorners;//[Offset: 0x4a0, Size: 0x10]

--------------------------------
Class: WW3VehicleHUDInfo
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum VehicleType;//[Offset: 0x10, Size: 0x1]
	enum VehicleHudCategory;//[Offset: 0x11, Size: 0x1]
	bool bShouldBeVisibleInKillList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]

--------------------------------
Class: WW3AttachmentPreview.Object
	WW3RealAttachmentData[] RealAttachments;//[Offset: 0x40, Size: 0x10]
	WW3DefaultAttachmentData[] DefaultAttachments;//[Offset: 0x50, Size: 0x10]
	CustomizationItemData ItemData;//[Offset: 0x60, Size: 0xd8]
	bool bHiddenByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	enum ItemType;//[Offset: 0x139, Size: 0x1]
	FString ItemCategory;//[Offset: 0x140, Size: 0x10]
	enum ChallengeAttachmentType;//[Offset: 0x150, Size: 0x1]
	enum[] ItemTypesToBlock;//[Offset: 0x158, Size: 0x10]
	<FString,None(None)> HubCameraOverrides;//[Offset: 0x168, Size: 0x50]
	MaterialInterface* TabletMaterial;//[Offset: 0x1b8, Size: 0x8]
	Texture2D* TabletTextureUI;//[Offset: 0x1c0, Size: 0x8]
	void GetRealAttachmentIndex(WW3Attachment* Attachment, int ReturnValue);// 0xf3d720

--------------------------------
Class: WW3RealAttachmentData
	class WW3Attachment* RealAttachment;//[Offset: 0x0, Size: 0x28]
	FName SlotName;//[Offset: 0x28, Size: 0x8]
	bool bMenuOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bDeprecated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	Vector InvidualSeparateMultiplier;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: WW3DefaultAttachmentData
	class WW3AttachmentPreview* DefaultAttachment;//[Offset: 0x0, Size: 0x8]
	enum ApplyingMethod;//[Offset: 0x8, Size: 0x1]
	class WW3AttachmentPreview* DefaultAttachmentWhenEquipped;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: WW3StrikeDestructionData.Object
	class ShooterExplosionEffect* ExplosionTemplate;//[Offset: 0x28, Size: 0x8]
	bool bShouldWreckBlockPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	ExplosiveDamageParams ExplosiveDamageParams;//[Offset: 0x38, Size: 0x40]
	WW3AttachmentDestructionProbability[] AttachmentDestructionProbability;//[Offset: 0x78, Size: 0x10]
	ParticleSystem* SmokeAfterDeath;//[Offset: 0x88, Size: 0x28]
	Vector SmokeScaleAfterDeath;//[Offset: 0xb0, Size: 0xc]
	Material* MaterialAfterDeath;//[Offset: 0xc0, Size: 0x8]
	bool bSnapExplosionToGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	Vector ExplosionRelativeOffset;//[Offset: 0xcc, Size: 0xc]
	bool bRenderSmokeWhileCriticalHP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	ParticleSystem* SmokeWhileCriticalHPTemp;//[Offset: 0xe0, Size: 0x8]
	Vector SmokeScaleWhileCriticalHP;//[Offset: 0xe8, Size: 0xc]
	FName SocketForSmokeWhileCriticalHP;//[Offset: 0xf8, Size: 0x8]
	float HPforSpawnSmokeWhileCriticalHP;//[Offset: 0x100, Size: 0x4]
	float CriticalHPMaxSpeed;//[Offset: 0x104, Size: 0x4]
	float CriticalHPSpeedMultiplier;//[Offset: 0x108, Size: 0x4]
	float CriticalHPMaxTurretSpeed;//[Offset: 0x10c, Size: 0x4]
	float CriticalHPTurningModifier;//[Offset: 0x110, Size: 0x4]
	float C4NotAttachedDamagePercentage;//[Offset: 0x114, Size: 0x4]
	AkAudioEvent* BurningSoundAk;//[Offset: 0x118, Size: 0x8]
	AkAudioEvent* BurningSoundStopAk;//[Offset: 0x120, Size: 0x8]
	float ImpulseOnDestroy;//[Offset: 0x128, Size: 0x4]
	float MinSafeDistanceFromPlayersToRemove;//[Offset: 0x12c, Size: 0x4]
	float MinUnsafeDistanceFromPlayersToRemove;//[Offset: 0x130, Size: 0x4]
	bool bShouldCheckVehicleUtilityInSpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1]
	float TickDurationBetweenDistanceChecks;//[Offset: 0x138, Size: 0x4]
	float TickDurationBetweenDamage;//[Offset: 0x13c, Size: 0x4]
	int8 NumberOfTicksToDestroy;//[Offset: 0x140, Size: 0x1]

--------------------------------
Class: WW3AttachmentDestructionProbability
	enum AttachmentType;//[Offset: 0x0, Size: 0x1]
	float DestructionProbability;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WW3VehicleMovementComponent.MovementComponent.ActorComponent.Object
	float ReplicationFreezeTimer;//[Offset: 0x130, Size: 0x4]
	bool bEnableCustomTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1]
	WW3VehicleRepMovement RepMovement;//[Offset: 0x144, Size: 0x28]
	StaticMeshComponent* BodyComponent;//[Offset: 0x170, Size: 0x8]
	WW3Vehicle* VehicleOwner;//[Offset: 0x178, Size: 0x8]
	WW3MovementReplicationData[] ReplicationHistory;//[Offset: 0x180, Size: 0x10]
	float MinLinearVelocity;//[Offset: 0x190, Size: 0x4]
	float SafeVelocityDistance;//[Offset: 0x194, Size: 0x4]
	float ScreenPercentageUpdateReduction;//[Offset: 0x198, Size: 0x4]
	bool bIsPhysicsDriven;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 0x1]
	bool bServerAuthority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19d, Size: 0x1]
	float SendMovementToServerFrequency;//[Offset: 0x1a0, Size: 0x4]
	float MaxAcceptedServerDistance;//[Offset: 0x1a4, Size: 0x4]
	float MaxAcceptedServerDistanceCalculated;//[Offset: 0x1a8, Size: 0x4]
	float InterpolationSpeed;//[Offset: 0x1b4, Size: 0x4]
	float RotationInterpolationSpeed;//[Offset: 0x1b8, Size: 0x4]
	float BufferDelay;//[Offset: 0x1bc, Size: 0x4]
	float SingleLocationWaitTime;//[Offset: 0x1c4, Size: 0x4]
	float MaxInterpolateDistance;//[Offset: 0x1c8, Size: 0x4]
	float ExitTransitionDurationTime;//[Offset: 0x1cc, Size: 0x4]
	float ModifiedBufferDelay;//[Offset: 0x1d8, Size: 0x4]
	float BufferTimeDifference;//[Offset: 0x1e0, Size: 0x4]
	bool bSwitchNextFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 0x1]
	DebugFloatHistory RecivedDisplacementHistory;//[Offset: 0x1e8, Size: 0x20]
	DebugFloatHistory DeltaPositionHistory;//[Offset: 0x208, Size: 0x20]
	DebugFloatHistory RecDeltaPositionHistory;//[Offset: 0x228, Size: 0x20]
	DebugFloatHistory UpdateHistory;//[Offset: 0x248, Size: 0x20]
	Vector RecivedDisplacementOffset;//[Offset: 0x268, Size: 0xc]
	Vector DeltaPositionOffset;//[Offset: 0x274, Size: 0xc]
	Vector RecDeltaPositionOffset;//[Offset: 0x280, Size: 0xc]
	Vector UpdateOffset;//[Offset: 0x28c, Size: 0xc]
	float DeaccelerationScale;//[Offset: 0x2d4, Size: 0x4]
	float VelocityScale;//[Offset: 0x2d8, Size: 0x4]
	Vector PendingNewServerLocation;//[Offset: 0x2e0, Size: 0xc]
	Vector PendingNewServerVelocity;//[Offset: 0x2ec, Size: 0xc]
	Vector PendingNewServerAngularVelocity;//[Offset: 0x2f8, Size: 0xc]
	Rotator PendingNewServerRotation;//[Offset: 0x304, Size: 0xc]
	float PendingNewServerDeltatime;//[Offset: 0x310, Size: 0x4]
	void Server_SendReplicationToServer(Vector NewLocation, Vector NewVelocity, Vector NewAngularVelocity, Rotator NewRotator, float DeltaTime);// 0x10f05a0
	void OnRep_RepMovement();// 0x10f0440
	void Client_AdjustVehicleLocation(Vector NewLocation, Rotator NewRotator);// 0x10ef360

--------------------------------
Class: WW3VehicleRepMovement
	Vector_NetQuantize RepLocation;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantize RepVelocity;//[Offset: 0xc, Size: 0xc]
	int RepRotation;//[Offset: 0x18, Size: 0x4]
	int RepAngularVelocity;//[Offset: 0x1c, Size: 0x4]
	bool bShouldMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	float DeltaTime;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: WW3MovementReplicationData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	bool bShouldMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float ReplicationTime;//[Offset: 0x1c, Size: 0x4]
	Vector LinearVelocity;//[Offset: 0x20, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0x2c, Size: 0xc]
	float InterpSpeed;//[Offset: 0x38, Size: 0x4]
	float DeltaTime;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: DebugFloatHistory
	float[] Samples;//[Offset: 0x0, Size: 0x10]
	float MaxSamples;//[Offset: 0x10, Size: 0x4]
	float MinValue;//[Offset: 0x14, Size: 0x4]
	float MaxValue;//[Offset: 0x18, Size: 0x4]
	bool bAutoAdjustMinMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: WW3AmmoEquipmentVehicle.WW3AmmoEquipment.ActorComponent.Object
	WW3Vehicle* VehicleOwner;//[Offset: 0x178, Size: 0x8]

--------------------------------
Class: WW3TankImpactZoneManager.SceneComponent.ActorComponent.Object
	WW3TankImpactZoneInfo[] ZoneInfos;//[Offset: 0x248, Size: 0x10]
	WW3TankImpactZoneInfo DefaultZoneInfo;//[Offset: 0x258, Size: 0x18]
	<WW3TankImpactZoneInfo,None(None)> ArmorAdditionalZoneInfos;//[Offset: 0x270, Size: 0x50]
	Vector ImpactZonesExtent;//[Offset: 0x2c0, Size: 0xc]
	float FrontImpactZoneSize;//[Offset: 0x2cc, Size: 0x4]
	float SideImpactZoneSize;//[Offset: 0x2d0, Size: 0x4]
	float BackImpactZoneSize;//[Offset: 0x2d4, Size: 0x4]
	BoxComponent* ImpactZones;//[Offset: 0x2d8, Size: 0x8]
	void OnConstruction(Transform Transform);// 0x10a80f0
	void GetZoneInfo(enum ZoneType, WW3TankImpactZoneInfo ReturnValue);// 0x10a7e50
	void GetZoneAtWorldLocation(Vector Location, enum ReturnValue);// 0x10a7db0
	void CreateImpactZones();// 0x10a7d30
	void CleanupImpactZones();// 0x10a7c40

--------------------------------
Class: WW3SeatManager.ActorComponent.Object
	WW3SeatBase*[] AllSeats;//[Offset: 0x110, Size: 0x10]
	Vector[] AllExitsPositions;//[Offset: 0x120, Size: 0x10]
	void OnLocalSeatEnterOrExit(bool bInValue);// 0x1086bc0
	void OnLocalSeatChange();// 0x1086ba0

--------------------------------
Class: WW3NoiseManagerVehicle.WW3NoiseManagerPawn.WW3NoiseManager.SceneComponent.ActorComponent.Object

--------------------------------
Class: WW3HeatVision.ActorComponent.Object
	TextureRenderTarget2D* RenderTarget;//[Offset: 0xf0, Size: 0x8]
	MaterialInstanceDynamic* HeatPostProcess;//[Offset: 0xf8, Size: 0x8]
	MaterialInterface* HeatObjectMaterial;//[Offset: 0x100, Size: 0x8]
	int RTSizeDivider;//[Offset: 0x108, Size: 0x4]
	bool bApplyRenderingSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]

--------------------------------
Class: WW3VehicleAimComp.ActorComponent.Object
	WW3Vehicle* VehicleOwner;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: WW3VehicleGrenadesToThrow
	WW3ThrowableGrenade* GrenadePointer;//[Offset: 0x0, Size: 0x8]
	Vector Velocity;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: WW3VehicleCameraComponentTPP.WW3VehicleCameraComponent.WW3CameraComponent.CameraComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WW3WidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WW3VA_VehicleTurret.WW3VehicleAttachment.WW3AttachmentDamageable.WW3Attachment.Object
	class WW3FireTypeManagerVehicle* FireTypeManagerBlueprint;//[Offset: 0x568, Size: 0x8]
	WW3FireTypeManagerVehicle* FireTypeManager;//[Offset: 0x570, Size: 0x8]
	WW3CameraShakeParams CameraShakeForPlayersAroundOnShoot;//[Offset: 0x578, Size: 0x30]
	WW3CameraShakeParams CameraShakeForGrenadesThrow;//[Offset: 0x5a8, Size: 0x30]
	CurveFloat* V_CannonBackMove;//[Offset: 0x5d8, Size: 0x8]
	CurveFloat* V_CannonUpMove;//[Offset: 0x5e0, Size: 0x8]
	bool bMachinegunSocketIncluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 0x1]
	FName[] BlockHatches;//[Offset: 0x5f0, Size: 0x10]
	float TurretYawSpeed;//[Offset: 0x600, Size: 0x4]
	float CannonPitchSpeed;//[Offset: 0x604, Size: 0x4]
	float CannonMaxPitchRotation;//[Offset: 0x608, Size: 0x4]
	float CannonMinPitchRotation;//[Offset: 0x60c, Size: 0x4]
	bool bOverrideTppCameraPitchRotationLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1]
	class WW3AmmoTypeVehicleGrenades* GrenadeAmmoType;//[Offset: 0x618, Size: 0x8]
	int GrenadeAmount;//[Offset: 0x620, Size: 0x4]
	enum GrenadeAmmoSlot;//[Offset: 0x624, Size: 0x1]
	bool bUseCameraOffsetY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x625, Size: 0x1]
	CurveFloat* CameraOffsetY;//[Offset: 0x628, Size: 0x8]
	void OnRep_FireTypeManager();// 0x10e4ba0

--------------------------------
Class: WW3FireTypeManagerVehicle.WW3FireTypeManager.ActorComponent.Object
	WW3Vehicle* VehicleOwner;//[Offset: 0x2c0, Size: 0x8]
	WW3FireType* CannonFireType;//[Offset: 0x2e0, Size: 0x8]
	bool CustomSocketsForSecondaryFireType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	FName SFTMuzzleProjectileSpawnPoint;//[Offset: 0x2f0, Size: 0x8]
	FName SFTMuzzleEffectAttachPoint;//[Offset: 0x2f8, Size: 0x8]
	void Server_ChangeAmmoToType(WW3FireType* InDstFireType, enum AmmoType);// 0xfb3a00
	void Server_ChangeAmmoToIndex(byte AmmoIndex);// 0xfb38a0

--------------------------------
Class: WW3AmmoTypeVehicleGrenades.WW3AmmoTypeVehicle.WW3AmmoType.Object
	class WW3ThrowableGrenade* GrenadeToSpawn;//[Offset: 0x140, Size: 0x8]
	float InitialVelocity;//[Offset: 0x148, Size: 0x4]
	float TimeToExplode;//[Offset: 0x14c, Size: 0x4]

--------------------------------
Class: WW3AmmoTypeVehicle.WW3AmmoType.Object
	float EffectsStrengthMultiplier;//[Offset: 0xc8, Size: 0x4]
	float ForceAfterShootScale;//[Offset: 0xcc, Size: 0x4]
	float TorqueAfterShootScale;//[Offset: 0xd0, Size: 0x4]
	enum ShootAmbientParticleScale;//[Offset: 0xd4, Size: 0x1]
	WW3ProjectileConfig ProjectileConfigOverride;//[Offset: 0xd8, Size: 0x58]
	class WW3Projectile* ProjectileBlueprintOverride;//[Offset: 0x130, Size: 0x8]
	enum VehicleAmmoSlot;//[Offset: 0x138, Size: 0x1]

--------------------------------
Class: WW3VehicleAttachmentHatch.WW3VehicleAttachment.WW3AttachmentDamageable.WW3Attachment.Object
	SeatHatchData SeatHatchData;//[Offset: 0x550, Size: 0x30]
	bool bIsOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1]
	void OnRep_bIsOccupied();// 0x10e9470

--------------------------------
Class: SeatHatchData
	Rotator RotationWhileOpened;//[Offset: 0x0, Size: 0xc]
	Rotator RotationWhileClosed;//[Offset: 0xc, Size: 0xc]
	int SeatNumber;//[Offset: 0x18, Size: 0x4]
	FName SocketForSeat;//[Offset: 0x20, Size: 0x8]
	FName RemovingHatchSocket;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WW3VehicleSkin.WW3Skin.Object
	WW3VehiclePartSkinInfo[] PartSkins;//[Offset: 0x158, Size: 0x10]

--------------------------------
Class: WW3VehiclePartSkinInfo.WW3PartSkinInfo
	enum PartType;//[Offset: 0x30, Size: 0x1]
	WW3VehicleSkinCustomsInfo SkinCustoms;//[Offset: 0x38, Size: 0x268]

--------------------------------
Class: WW3PartSkinInfo
	class WW3SkinBaseMaterial* BaseMaterial;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: WW3SkinBaseMaterial.Object

--------------------------------
Class: WW3VehicleSkinCustomsInfo.WW3SkinCustomsInfo
	WW3VSC_PaintInfo Paint1;//[Offset: 0x8, Size: 0x90]
	WW3VSC_PaintInfo Paint2;//[Offset: 0x98, Size: 0x90]
	WW3VSC_PaintInfo Paint3;//[Offset: 0x128, Size: 0x90]
	WW3VSC_DecalInfo decal;//[Offset: 0x1b8, Size: 0x50]
	WW3VSC_DecalInfo SecondaryDecal;//[Offset: 0x208, Size: 0x50]

--------------------------------
Class: WW3SkinCustomsInfo

--------------------------------
Class: WW3VSC_PaintInfo
	Texture* PatternMask;//[Offset: 0x0, Size: 0x28]
	LinearColor PaintColor1;//[Offset: 0x28, Size: 0x10]
	LinearColor PaintColor2;//[Offset: 0x38, Size: 0x10]
	LinearColor PaintColor3;//[Offset: 0x48, Size: 0x10]
	LinearColor PaintColor4;//[Offset: 0x58, Size: 0x10]
	float Metallic;//[Offset: 0x68, Size: 0x4]
	float Roughness;//[Offset: 0x6c, Size: 0x4]
	float Multiply;//[Offset: 0x70, Size: 0x4]
	float Power;//[Offset: 0x74, Size: 0x4]
	Vector2D Tiling;//[Offset: 0x78, Size: 0x8]
	float Rotation;//[Offset: 0x80, Size: 0x4]
	Vector2D Location;//[Offset: 0x84, Size: 0x8]

--------------------------------
Class: WW3VSC_DecalInfo
	Texture* DecalPattern;//[Offset: 0x0, Size: 0x28]
	Vector2D Position;//[Offset: 0x28, Size: 0x8]
	float Rotation;//[Offset: 0x30, Size: 0x4]
	LinearColor Color;//[Offset: 0x34, Size: 0x10]
	float Metallic;//[Offset: 0x44, Size: 0x4]
	float Roughness;//[Offset: 0x48, Size: 0x4]
	float Scale;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: WW3VehicleMobileSpawnPointComp.WW3MobileSpawnPointComp.ActorComponent.Object
	WW3Vehicle* VehicleOwner;//[Offset: 0xf0, Size: 0x8]
	bool bIsAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	enum MSPTarget;//[Offset: 0x104, Size: 0x1]
	int8 CurrentSquadID;//[Offset: 0x105, Size: 0x1]
	void Server_SetSquadId();// 0x10f07e0
	void OnRep_SetSquadId();// 0x10f0460

--------------------------------
Class: WW3MobileSpawnPointComp.ActorComponent.Object

--------------------------------
Class: WW3VehicleKlaxonComponent.ActorComponent.Object
	WW3Vehicle* VehicleOwner;//[Offset: 0xf0, Size: 0x8]
	bool bIsKlaxonActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	void Server_OnKlaxonReleased();// 0x10f0550
	void Server_OnKlaxonPressed();// 0x10f0500
	void OnRep_IsKlaxonActive();// 0x10f0420

--------------------------------
Class: WW3AssistVehicleHitDataStructure
	WW3ProgressionHitData[] VehicleAssistHitData;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3ProgressionHitData
	int Damage;//[Offset: 0x0, Size: 0x4]
	uint16 ItemId;//[Offset: 0x4, Size: 0x2]

--------------------------------
Class: WW3BreakStation.Actor.Object
	WW3CaptureAreaComponent* OwnerCaptureAreaComponent;//[Offset: 0x350, Size: 0x8]
	WW3AkComponent* AK_SoundComponent;//[Offset: 0x388, Size: 0x8]
	AkAudioEvent* PlantedWarning_Sound;//[Offset: 0x390, Size: 0x8]
	AkAudioEvent* BreakstationAMB_Start_Sound;//[Offset: 0x398, Size: 0x8]
	AkAudioEvent* Breakstation_AMB_Stop_Sound;//[Offset: 0x3a0, Size: 0x8]
	AkAudioEvent* BreakstationRadioStart_Sound;//[Offset: 0x3a8, Size: 0x8]
	AkAudioEvent* BreakstationRadioStop_Sound;//[Offset: 0x3b0, Size: 0x8]
	AkAudioEvent* BreakstationINIT_Start_Sound;//[Offset: 0x3b8, Size: 0x8]
	AkAudioEvent* BreakstationINIT_Stop_Sound;//[Offset: 0x3c0, Size: 0x8]
	AkAudioEvent* BreakstationINIT_Finish_Sound;//[Offset: 0x3c8, Size: 0x8]
	AkAudioEvent* BreakstationINIT_Stop_Destruction_Sound;//[Offset: 0x3d0, Size: 0x8]
	BillboardComponent* RootBillboard;//[Offset: 0x3d8, Size: 0x8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x3e0, Size: 0x8]
	StaticMeshComponent* ChargesStaticMesh;//[Offset: 0x3e8, Size: 0x8]
	StaticMeshComponent* LampStaticMesh;//[Offset: 0x3f0, Size: 0x8]
	MaterialInterface* NoChargesMaterial;//[Offset: 0x3f8, Size: 0x8]
	MaterialInterface* ChargesMaterial;//[Offset: 0x400, Size: 0x8]
	MaterialInterface* LampOnMaterial;//[Offset: 0x408, Size: 0x8]
	MaterialInterface* LampOffMaterial;//[Offset: 0x410, Size: 0x8]
	LightComponent* PlantedWarningLight;//[Offset: 0x418, Size: 0x8]
	float LightIntensityMultiplier;//[Offset: 0x420, Size: 0x4]
	CurveFloat* LightIntensityForPingProgressCurve;//[Offset: 0x428, Size: 0x8]
	float WarningPingLengthMultiplier;//[Offset: 0x430, Size: 0x4]
	CurveFloat* PingSpeedupCurve;//[Offset: 0x438, Size: 0x8]
	float NextWarningPingTime;//[Offset: 0x440, Size: 0x4]
	float LastPingTime;//[Offset: 0x444, Size: 0x4]
	float CurrentPingProgress;//[Offset: 0x448, Size: 0x4]
	int ChargesMaterialIndex;//[Offset: 0x44c, Size: 0x4]
	FName LampMaterialSlotName;//[Offset: 0x450, Size: 0x8]
	int LampMaterialIndex;//[Offset: 0x458, Size: 0x4]
	WW3ProgressableMarkerStation* MarkerStation;//[Offset: 0x460, Size: 0x8]
	float PlacingChargesTime;//[Offset: 0x468, Size: 0x4]
	float RemovingChargesTime;//[Offset: 0x46c, Size: 0x4]
	float PointsForEntireDamaging;//[Offset: 0x470, Size: 0x4]
	float PointsForDestruction;//[Offset: 0x474, Size: 0x4]
	float PointsForSuccessExplosion;//[Offset: 0x478, Size: 0x4]
	float DetonationMaxSeconds;//[Offset: 0x47c, Size: 0x4]
	float MaxHealth;//[Offset: 0x480, Size: 0x4]
	WW3DamageModifier[] DamageModifiers;//[Offset: 0x488, Size: 0x10]
	float ExplosionDamageMultiplier;//[Offset: 0x498, Size: 0x4]
	class ShooterExplosionEffect* ExplosionTemplate;//[Offset: 0x4a0, Size: 0x8]
	Vector ExplosionPositionOffset;//[Offset: 0x4a8, Size: 0xc]
	MaterialInterface* DestroyedMaterial;//[Offset: 0x4b8, Size: 0x8]
	int DamagePercentToTriggerDestroyForPlayer;//[Offset: 0x4c0, Size: 0x4]
	ShooterExplosionEffect* EffectActor;//[Offset: 0x4c8, Size: 0x8]
	Actor* ChargesDamageCauser;//[Offset: 0x4d8, Size: 0x8]
	Controller* ChargesEventInstigator;//[Offset: 0x4e0, Size: 0x8]
	TimerHandle DetonationTimerHandle_T;//[Offset: 0x4e8, Size: 0x8]
	<float,None(None)> PlayersDamageMap;//[Offset: 0x4f0, Size: 0x50]
	byte HealthPercentageReplicated;//[Offset: 0x541, Size: 0x1]
	uint16 DetonationRealTimeSecondsReplicated;//[Offset: 0x542, Size: 0x2]
	float TimeLeftToDetonate;//[Offset: 0x544, Size: 0x4]
	float DeltaTimeBuffer;//[Offset: 0x548, Size: 0x4]
	void OnRep_HealthPercentageReplicated();// 0xf54c10
	void OnRep_DetonationRealTimeSecondsReplicated();// 0xf54bf0
	void Multicast_PlayClientExplosionEffects();// 0xf3d810

--------------------------------
Class: WW3ProgressableMarkerStation.WW3ProgressableMarker.WW3ActorMarker.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	WW3BreakStation* BreakStationOnwer;//[Offset: 0xca0, Size: 0x8]
	WW3CapturePointMarker* RelatedCaptureMarker;//[Offset: 0xca8, Size: 0x8]

--------------------------------
Class: WW3WarzoneOutOfBounds.WW3OutOfBounds.Actor.Object
	MaterialInterface* OwnerMaterial;//[Offset: 0x340, Size: 0x8]
	MaterialInterface* EnemyMaterial;//[Offset: 0x348, Size: 0x8]
	MaterialInterface* NeutralMaterial;//[Offset: 0x350, Size: 0x8]
	FName[] MaterialSlotNames;//[Offset: 0x358, Size: 0x10]
	StaticMeshActor*[] PlaneMeshes;//[Offset: 0x368, Size: 0x10]
	Actor*[] CapturePointActors;//[Offset: 0x378, Size: 0x10]
	enum UsableInGamemode;//[Offset: 0x388, Size: 0x1]
	enum[] ShouldExistInGameAliases;//[Offset: 0x390, Size: 0x10]
	FName MaterialSlotName;//[Offset: 0x3a0, Size: 0x8]
	FName PlaneSlotName;//[Offset: 0x3a8, Size: 0x8]
	int8 OutOfBoundsOwner;//[Offset: 0x3b0, Size: 0x1]

--------------------------------
Class: WW3OutOfBounds.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x338, Size: 0x8]

--------------------------------
Class: WW3StartPointCamera.Actor.Object
	BillboardComponent* Root;//[Offset: 0x330, Size: 0x8]
	SpringArmComponent* SpringArmComponent;//[Offset: 0x338, Size: 0x8]
	CineCameraComponent* CineCameraComponent;//[Offset: 0x340, Size: 0x8]
	LevelSequenceActor* Presentation;//[Offset: 0x348, Size: 0x8]

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x7a0, Size: 0xc]
	CameraLensSettings LensSettings;//[Offset: 0x7ac, Size: 0x18]
	CameraFocusSettings FocusSettings;//[Offset: 0x7c8, Size: 0x38]
	float CurrentFocalLength;//[Offset: 0x800, Size: 0x4]
	float CurrentAperture;//[Offset: 0x804, Size: 0x4]
	float CurrentFocusDistance;//[Offset: 0x808, Size: 0x4]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x818, Size: 0x10]
	NamedLensPreset[] LensPresets;//[Offset: 0x828, Size: 0x10]
	FString DefaultFilmbackPresetName;//[Offset: 0x838, Size: 0x10]
	FString DefaultLensPresetName;//[Offset: 0x848, Size: 0x10]
	float DefaultLensFocalLength;//[Offset: 0x858, Size: 0x4]
	float DefaultLensFStop;//[Offset: 0x85c, Size: 0x4]
	void SetLensPresetByName(FString InPresetName);// 0x1d25ff0
	void SetFilmbackPresetByName(FString InPresetName);// 0x1d25f50
	void GetVerticalFieldOfView(float ReturnValue);// 0x1d25f20
	void GetLensPresetName(FString ReturnValue);// 0x1d25ea0
	void GetHorizontalFieldOfView(float ReturnValue);// 0x1d25e70
	void GetFilmbackPresetName(FString ReturnValue);// 0x1d25df0

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4]
	float SensorHeight;//[Offset: 0x4, Size: 0x4]
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4]
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4]
	float MinFStop;//[Offset: 0x8, Size: 0x4]
	float MaxFStop;//[Offset: 0xc, Size: 0x4]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x18]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	Color DebugFocusPlaneColor;//[Offset: 0x24, Size: 0x4]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x2c, Size: 0x4]
	float FocusOffset;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x8]
	Vector RelativeOffset;//[Offset: 0x8, Size: 0xc]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: LevelSequenceActor.Actor.Object
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x340, Size: 0x40]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x380, Size: 0x8]
	SoftObjectPath LevelSequence;//[Offset: 0x388, Size: 0x18]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x3a0, Size: 0x10]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x3b0, Size: 0x8]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x3b8, Size: 0x8]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	Object* DefaultInstanceData;//[Offset: 0x3c8, Size: 0x8]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x3d0, Size: 0x8]
	void SetSequence(LevelSequence* InSequence);// 0x1ddf020
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x1ddef40
	void SetBinding(MovieSceneObjectBindingID Binding, Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x1ddec90
	void ResetBindings();// 0x1ddec40
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x1ddeb50
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x1ddea10
	void GetSequence(bool bLoad, bool bInitializePlayer, LevelSequence* ReturnValue);// 0x1dde910
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x1dde590

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	int LoopCount;//[Offset: 0x0, Size: 0x4]
	float PlayRate;//[Offset: 0x4, Size: 0x4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float StartTime;//[Offset: 0xc, Size: 0x4]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 0x1]
	Object* InstanceData;//[Offset: 0x18, Size: 0x8]
	interface class None* BindingOverrides;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x7c8, Size: 0x10]
	Object*[] AdditionalEventReceivers;//[Offset: 0x808, Size: 0x10]
	static void CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, LevelSequenceActor* OutActor, LevelSequencePlayer* ReturnValue);// 0x1dde6e0

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x370, Size: 0x10]
	delegate OnPlayReverse;//[Offset: 0x380, Size: 0x10]
	delegate OnStop;//[Offset: 0x390, Size: 0x10]
	delegate OnPause;//[Offset: 0x3a0, Size: 0x10]
	delegate OnFinished;//[Offset: 0x3b0, Size: 0x10]
	byte Status;//[Offset: 0x3c0, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c4, Size: 0x1]
	MovieSceneSequence* Sequence;//[Offset: 0x3d0, Size: 0x8]
	FrameNumber StartTime;//[Offset: 0x3d8, Size: 0x4]
	int DurationFrames;//[Offset: 0x3dc, Size: 0x4]
	int CurrentNumLoops;//[Offset: 0x3e0, Size: 0x4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x3f8, Size: 0x40]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x438, Size: 0x300]
	void Stop();// 0x1bbc230
	void SetTimeRange(float StartTime, float Duration);// 0x1bbc170
	void SetPlayRate(float PlayRate);// 0x1bbbf30
	void SetPlaybackRange(float NewStartTime, float NewEndTime);// 0x1bbc0b0
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x1bbbfb0
	void SetFrameRate(FrameRate FrameRate);// 0x1bbbea0
	void SetFrameRange(int StartFrame, int Duration);// 0x1bbbde0
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x1bbbd60
	void ScrubToSeconds(float TimeInSeconds);// 0x1bbb9c0
	void ScrubToFrame(FrameTime NewPosition);// 0x1bbbcd0
	void Scrub();// 0x1bbbcb0
	void PlayToSeconds(float TimeInSeconds);// 0x1bbbc30
	void PlayToFrame(FrameTime NewPosition);// 0x1bbbba0
	void PlayReverse();// 0x1bbbb80
	void PlayLooping(int NumLoops);// 0x1bbbb00
	void Play();// 0x1bbbae0
	void Pause();// 0x1bbbac0
	void JumpToSeconds(float TimeInSeconds);// 0x1bbba40
	void JumpToPosition(float NewPlaybackPosition);// 0x1bbb9c0
	void JumpToFrame(FrameTime NewPosition);// 0x1bbb930
	void IsReversed(bool ReturnValue);// 0x1bbb900
	void IsPlaying(bool ReturnValue);// 0x1bbb8d0
	void IsPaused(bool ReturnValue);// 0x1bbb8a0
	void GoToEndAndStop();// 0x1bbb880
	void GetStartTime(QualifiedFrameTime ReturnValue);// 0x1bbb830
	void GetPlayRate(float ReturnValue);// 0x1bbb600
	void GetPlaybackStart(float ReturnValue);// 0x1bbb7b0
	void GetPlaybackPosition(float ReturnValue);// 0x1bbb6c0
	void GetPlaybackEnd(float ReturnValue);// 0x1bbb630
	void GetObjectBindings(Object* InObject, MovieSceneObjectBindingID[] ReturnValue);// 0x1bbb520
	void GetLength(float ReturnValue);// 0x1bbb4f0
	void GetFrameRate(FrameRate ReturnValue);// 0x1bbb4d0
	void GetFrameDuration(int ReturnValue);// 0x1bbb4a0
	void GetEndTime(QualifiedFrameTime ReturnValue);// 0x1bbb440
	void GetDuration(QualifiedFrameTime ReturnValue);// 0x1bbb400
	void GetDisableCameraCuts(bool ReturnValue);// 0x1bbb3e0
	void GetCurrentTime(QualifiedFrameTime ReturnValue);// 0x1bbb3a0
	void GetBoundObjects(MovieSceneObjectBindingID ObjectBinding, Object*[] ReturnValue);// 0x1bbb2a0
	void ChangePlaybackDirection();// 0x1bbb280

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	class Object* DirectorClass;//[Offset: 0x350, Size: 0x8]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x358, Size: 0x50]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x3a8, Size: 0xa0]
	<LevelSequenceObject,None(None)> PossessedObjects;//[Offset: 0x448, Size: 0x50]

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<LevelSequenceBindingReferenceArray,None(None)> BindingIdToReferences;//[Offset: 0x0, Size: 0x50]
	<None(None)> AnimSequenceInstances;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18]
	FString ObjectPath;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c]
	FString ComponentName;//[Offset: 0x20, Size: 0x10]
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	<Object*,None(None)> DirectorInstances;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 0x8]
	FrameRate Rate;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 0x4]
	enum Space;//[Offset: 0x4, Size: 0x1]
	Guid Guid;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 0x18]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 0x8]
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x1ddee80

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingId;//[Offset: 0x0, Size: 0x18]
	Object* Object;//[Offset: 0x18, Size: 0x8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x208, Size: 0x88]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x290, Size: 0x8]
	void SetSettings(Object* InSettings);// 0x1395e00
	void GetSettingsClass(class LevelSequenceBurnInInitSettings ReturnValue);// 0x1dde9f0

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 0x10]
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 0x10]
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 0x10]
	FString CurrentShotName;//[Offset: 0x30, Size: 0x10]
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 0x10]
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 0x10]
	FString SourceTimecode;//[Offset: 0x60, Size: 0x10]
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 0x8]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x78, Size: 0xc]
	MovieSceneSequenceID ShotID;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 0x1]
	FrameRate FrameRate;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: WW3PlayerStateField
	WW3PlayerState*[] PlayersStatesInArea;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3CapturePointPanelIcon.UserWidget.Widget.Visual.Object
	WW3CapturePointIcon* FirstCapturePointIcon;//[Offset: 0x208, Size: 0x8]
	WW3CapturePointIcon* SecondCaputrePointIcon;//[Offset: 0x210, Size: 0x8]

--------------------------------
Class: WW3MobileSpawnWidget.UserWidget.Widget.Visual.Object
	WW3RespawnMapWidget* RespawnMapWidget;//[Offset: 0x208, Size: 0x8]
	WW3MobileSpawnEntity* ReservedEntity;//[Offset: 0x210, Size: 0x8]
	class WW3MobileSpawnEntity* MobileSpawnEntityClass;//[Offset: 0x218, Size: 0x8]
	HorizontalBox* HBoxForEntities;//[Offset: 0x220, Size: 0x8]
	WW3Vehicle*[] VehicleArray;//[Offset: 0x228, Size: 0x10]
	LinearColor NeutralColor;//[Offset: 0x238, Size: 0x10]
	LinearColor TakenColor;//[Offset: 0x248, Size: 0x10]
	LinearColor ReservedColor;//[Offset: 0x258, Size: 0x10]
	SlateBrush TakenSeatImage;//[Offset: 0x268, Size: 0x88]
	SlateBrush UntakenSeatImage;//[Offset: 0x2f0, Size: 0x88]
	void PostConstruct();// 0x102c440

--------------------------------
Class: WW3MobileSpawnEntity.UserWidget.Widget.Visual.Object
	Image* ReservedImage;//[Offset: 0x208, Size: 0x8]
	WW3SeatBase* ReservedSeat;//[Offset: 0x210, Size: 0x8]
	WW3SeatManager* SeatManager;//[Offset: 0x218, Size: 0x8]
	WW3Vehicle* BoundVehicle;//[Offset: 0x220, Size: 0x8]
	WW3MobileSpawnWidget* Owner;//[Offset: 0x228, Size: 0x8]
	SlateBrush ArmoredIcon;//[Offset: 0x230, Size: 0x88]
	SlateBrush TransporterIcon;//[Offset: 0x2b8, Size: 0x88]
	TextBlock* VehicleNameText;//[Offset: 0x340, Size: 0x8]
	Image* VehicleImage;//[Offset: 0x348, Size: 0x8]
	GridPanel* SeatsPanel;//[Offset: 0x350, Size: 0x8]
	<Image*,None(None)> SeatsImagesMap;//[Offset: 0x358, Size: 0x50]
	void SetVehicleName(FString InVehicleName);// 0x102c4e0
	void OnClick();// 0x102c290
	void InitializeWidget();// 0x102c230
	void DrawSeats();// 0x102c1f0

--------------------------------
Class: GridPanel.PanelWidget.Widget.Visual.Object
	float[] ColumnFill;//[Offset: 0x118, Size: 0x10]
	float[] RowFill;//[Offset: 0x128, Size: 0x10]
	void SetRowFill(int ColumnIndex, float Coefficient);// 0x1d05450
	void SetColumnFill(int ColumnIndex, float Coefficient);// 0x1d04630
	void AddChildToGrid(Widget* Content, GridSlot* ReturnValue);// 0x1d03280

--------------------------------
Class: GridSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1]
	int Row;//[Offset: 0x4c, Size: 0x4]
	int RowSpan;//[Offset: 0x50, Size: 0x4]
	int Column;//[Offset: 0x54, Size: 0x4]
	int ColumnSpan;//[Offset: 0x58, Size: 0x4]
	int Layer;//[Offset: 0x5c, Size: 0x4]
	Vector2D Nudge;//[Offset: 0x60, Size: 0x8]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x1d05940
	void SetRowSpan(int InRowSpan);// 0x1d05520
	void SetRow(int InRow);// 0x1d053d0
	void SetPadding(Margin InPadding);// 0x1d052b0
	void SetLayer(int InLayer);// 0x1d050f0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x1d04bd0
	void SetColumnSpan(int InColumnSpan);// 0x1d04700
	void SetColumn(int InColumn);// 0x1d045b0

--------------------------------
Class: WW3SwitchTeamsWidget.UserWidget.Widget.Visual.Object
	FText SwitchTeamText;//[Offset: 0x208, Size: 0x18]
	FText SwitchInText;//[Offset: 0x220, Size: 0x18]
	FText HoldLeftMouseButtonText;//[Offset: 0x238, Size: 0x18]
	FText RewardForChangeText;//[Offset: 0x250, Size: 0x18]
	float HoldButtonTime;//[Offset: 0x268, Size: 0x4]
	TimerHandle ButtonHoldHandle_T;//[Offset: 0x270, Size: 0x8]
	void OnSwitchTeamText(FText ReturnValue);// 0x10a8500
	void OnRewardForChangeText(FText ReturnValue);// 0x10a8480
	void OnHoldLeftMouseButtonText(FText ReturnValue);// 0x10a8200
	void OnGetHoldPercentage(float ReturnValue);// 0x10a81d0
	void OnButtonReleased();// 0x10a80d0
	void OnButtonClicked();// 0x10a80b0

--------------------------------
Class: WW3CapturePointsWidget
	WW3CapturePointIcon*[] ArrayOfCapturePointsIcons;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3SquadCompositionWidget.UserWidget.Widget.Visual.Object
	WW3SquadMateEntity* MarkedEntity;//[Offset: 0x208, Size: 0x8]
	WW3RespawnMapWidget* ParentWidget;//[Offset: 0x210, Size: 0x8]
	VerticalBox* MatesContainter;//[Offset: 0x218, Size: 0x8]
	Button* KickButton;//[Offset: 0x220, Size: 0x8]
	Button* PromoteButton;//[Offset: 0x228, Size: 0x8]
	Button* JoinButton;//[Offset: 0x230, Size: 0x8]
	TextBlock* PlaceTextblock;//[Offset: 0x238, Size: 0x8]
	TextBlock* SquadNameTextBlock;//[Offset: 0x240, Size: 0x8]
	TextBlock* NumberOfPlayers;//[Offset: 0x248, Size: 0x8]
	TextBlock* MaxNumberOfPlayers;//[Offset: 0x250, Size: 0x8]
	class WW3SquadMateEntity* SquadMateEntityTemplate;//[Offset: 0x258, Size: 0x8]
	WW3PlayerState* LocalPlayerState;//[Offset: 0x260, Size: 0x8]
	WW3SquadObject* CurrentSquadPreview;//[Offset: 0x270, Size: 0x8]
	void OnSquadManagerReplicated();// 0x5d2c60
	void OnPromoteButtonClicked();// 0x108f8b0
	void OnPlayerSquadReplicated();// 0x5d2c60
	void OnLocalPlayerChangeSquad(WW3PlayerState* InSender, WW3SquadObject* InPrevSquad, WW3SquadObject* InCurrentSquad);// 0x108f7b0
	void OnKickButtonClicked();// 0x5d2c60
	void OnJoinButtonClicked();// 0x108f790

--------------------------------
Class: WW3SquadMateEntity.UserWidget.Widget.Visual.Object
	WW3SquadCompositionWidget* ParentWidget;//[Offset: 0x208, Size: 0x8]
	WW3PlayerState* BoundPlayer;//[Offset: 0x210, Size: 0x8]
	TextBlock* ROLETextBlock;//[Offset: 0x218, Size: 0x8]
	TextBlock* PlayerLevelTextBlock;//[Offset: 0x220, Size: 0x8]
	TextBlock* PlayerNameTextBlock;//[Offset: 0x228, Size: 0x8]
	Image* LeaderStarImage;//[Offset: 0x230, Size: 0x8]
	Image* HoverImage;//[Offset: 0x238, Size: 0x8]
	LinearColor MarkedColor;//[Offset: 0x240, Size: 0x10]
	LinearColor UnMarkedColor;//[Offset: 0x250, Size: 0x10]
	void ShowLeaderButtons();// 0x1395e00
	void OnPromoteButtonClicked();// 0x1093ef0
	void OnKickButtonClicked();// 0x1093e30
	void HideLeaderButtons();// 0x1395e00

--------------------------------
Class: WW3SquasListWidget.UserWidget.Widget.Visual.Object
	VerticalBox* VerticalBoxForSquads;//[Offset: 0x208, Size: 0x8]
	Button* Btn_CreateNewSquad;//[Offset: 0x210, Size: 0x8]
	class WW3SquadListEntity* SquadEntityTemplate;//[Offset: 0x218, Size: 0x8]
	UserWidget* EntityMarked;//[Offset: 0x220, Size: 0x8]
	WW3RespawnMapWidget* ParentWidget;//[Offset: 0x230, Size: 0x8]
	WW3PlayerState* LocalPlayerState;//[Offset: 0x238, Size: 0x8]
	void OnSquadManagerReplicated();// 0x5d2c60
	void OnCreateSquadClicked();// 0x106f910

--------------------------------
Class: WW3SquadListEntity.UserWidget.Widget.Visual.Object
	WW3SquadObject* SquadDataObjectPtr;//[Offset: 0x208, Size: 0x8]
	WW3RespawnMapWidget* SquadScreenWidget;//[Offset: 0x210, Size: 0x8]
	TextBlock* SquadName;//[Offset: 0x218, Size: 0x8]
	TextBlock* NumberOfPlayers;//[Offset: 0x220, Size: 0x8]
	TextBlock* MaxNumberOfPlayers;//[Offset: 0x228, Size: 0x8]
	TextBlock* Place;//[Offset: 0x230, Size: 0x8]
	Image* HoverImage;//[Offset: 0x238, Size: 0x8]
	void OnRankedChanged(WW3SquadObject* InSender, int NewRank);// 0x1093f10
	void OnPlayerChangedSquad(WW3PlayerState* PS);// 0x1093e70

--------------------------------
Class: WW3CurrentSquadStatWidget.UserWidget.Widget.Visual.Object
	TextBlock* TeamScoreTextBlock;//[Offset: 0x208, Size: 0x8]
	TextBlock* ScorePerMinuteTextBlock;//[Offset: 0x210, Size: 0x8]
	TextBlock* OrdersFollowedTextBlock;//[Offset: 0x218, Size: 0x8]
	TextBlock* KillsTextBlock;//[Offset: 0x220, Size: 0x8]
	TextBlock* DeathsTextBlock;//[Offset: 0x228, Size: 0x8]
	WW3SquadObject* CurrentSquadPreview;//[Offset: 0x230, Size: 0x8]

--------------------------------
Class: WW3SquadScreenWidget.UserWidget.Widget.Visual.Object
	Widget* ParentWidget;//[Offset: 0x208, Size: 0x8]
	WW3SquadCompositionWidget* SquadCompositionWidget;//[Offset: 0x210, Size: 0x8]
	WW3SquasListWidget* SquasListWidget;//[Offset: 0x218, Size: 0x8]
	WW3CurrentSquadStatWidget* CurrentSquadStatWidget;//[Offset: 0x220, Size: 0x8]
	Button* DeployButton;//[Offset: 0x228, Size: 0x8]
	Button* BackButton;//[Offset: 0x230, Size: 0x8]
	void OnDeployButtonPerCent(float ReturnValue);// 0x1093de0
	void OnDeployButtonClicked();// 0x1093dc0
	void OnBackButtonClicked();// 0x1093da0

--------------------------------
Class: WW3SquadLeaderIcon.WW3SelectableMapWidget.WW3GameplayMapWidget.UserWidget.Widget.Visual.Object
	Texture* SquadLeaderTexture;//[Offset: 0x2a8, Size: 0x8]
	Texture* SquadLeaderInVehicleTexture;//[Offset: 0x2b0, Size: 0x8]
	Texture* CurrentlyUsedTexture;//[Offset: 0x2b8, Size: 0x8]
	void BP_SetInActive();// 0x1395e00
	void BP_SetActive();// 0x1395e00

--------------------------------
Class: WW3SelectableMapWidget.WW3GameplayMapWidget.UserWidget.Widget.Visual.Object
	Image* IconTexture;//[Offset: 0x240, Size: 0x8]
	WW3IconInteractionAnimationData IconInteractionAnimationData;//[Offset: 0x248, Size: 0x5c]

--------------------------------
Class: WW3IconInteractionAnimationData
	float AnimationSpeed;//[Offset: 0x0, Size: 0x4]
	float DesiredHoverBorderThickness;//[Offset: 0x4, Size: 0x4]
	LinearColor SelectedFontColor;//[Offset: 0x8, Size: 0x10]
	LinearColor DefaultFontColor;//[Offset: 0x18, Size: 0x10]
	LinearColor TargetFontColor;//[Offset: 0x28, Size: 0x10]
	float DefaultBorderThickness;//[Offset: 0x38, Size: 0x4]
	float TargetBorderThickness;//[Offset: 0x3c, Size: 0x4]
	float StartingBorderThickness;//[Offset: 0x40, Size: 0x4]
	float CurrentBorderThickness;//[Offset: 0x44, Size: 0x4]
	float DefaultBodyOpacity;//[Offset: 0x48, Size: 0x4]
	float TargetBodyOpacity;//[Offset: 0x4c, Size: 0x4]
	float StartingBodyOpacity;//[Offset: 0x50, Size: 0x4]
	float CurrentBodyOpacity;//[Offset: 0x54, Size: 0x4]
	bool bIsAnimating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: WW3ScoreStrikeUserWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	TextBlock* ScorePointsText;//[Offset: 0x288, Size: 0x8]
	VerticalBox* StrikesVBox;//[Offset: 0x290, Size: 0x8]
	VerticalBox* PointsVBox;//[Offset: 0x298, Size: 0x8]
	class WW3StrikeWidget* StrikeClass;//[Offset: 0x2a0, Size: 0x8]
	WW3StrikeWidget*[] StrikeWidgetsArray;//[Offset: 0x2a8, Size: 0x10]
	TextBlock* BattlepointsText;//[Offset: 0x2b8, Size: 0x8]
	Margin WidgetsSpacing;//[Offset: 0x2c8, Size: 0x10]
	void PostConstruct();// 0x10820e0
	void OnSubstractBattlePoints(int InBattlePointsToSubstruct);// 0x1395e00
	void OnAddedBattlePoints(int InBattlePointsToAdd);// 0x1395e00

--------------------------------
Class: WW3StrikeWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	WW3KeyTooltip* StrikeKeyTooltip;//[Offset: 0x288, Size: 0x8]
	TextBlock* StrikeCostText;//[Offset: 0x298, Size: 0x8]
	TextBlock* StrikeTypeText;//[Offset: 0x2a0, Size: 0x8]
	ProgressBar* CooldownProgressBar;//[Offset: 0x2a8, Size: 0x8]
	Image* StrikeIcon;//[Offset: 0x2b0, Size: 0x8]
	Image* StrikeGlowIcon;//[Offset: 0x2b8, Size: 0x8]
	WW3InventoryGadgetStrike* BoundStrikeGadget;//[Offset: 0x2c0, Size: 0x8]
	FString[] PrefixesToRemove;//[Offset: 0x2c8, Size: 0x10]
	int LimitTextShownTime;//[Offset: 0x2d8, Size: 0x4]
	Image* VehicleLockImage;//[Offset: 0x2e0, Size: 0x8]
	Image* LockBackgroundImage;//[Offset: 0x2e8, Size: 0x8]
	WW3PlayerStrikesManager* SavedStrikesManager;//[Offset: 0x310, Size: 0x8]
	WW3ScoreStreakPreview* SavedScoreStreakPreview;//[Offset: 0x318, Size: 0x8]
	void OnStrikeIconLoaded(Texture2D* IconTexturePtr);// 0x109d3b0
	void OnStrikeCannotBeVisible();// 0xfa61b0
	void OnStrikeCannotBeUsed();// 0x1062b90
	void OnStrikeCanBeVisible();// 0xfa5cd0
	void OnStrikeCanBeUsed();// 0x109d390
	void OnLimitShown();// 0x1395e00
	void OnGadgetCurrentVehicleChanged(WW3Vehicle* NewCurrentVehicle);// 0x109d2d0
	void OnFailToUse();// 0x1395e00
	void OnColldownShown();// 0x1395e00
	void OnColldownHidden();// 0x1395e00
	void GetProgressBarValue(float ReturnValue);// 0x109d110

--------------------------------
Class: WW3KillListWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	class WW3KillListEntity* EntityClass;//[Offset: 0x288, Size: 0x8]
	ScrollBox* EntitiesContainer;//[Offset: 0x290, Size: 0x8]

--------------------------------
Class: WW3KillListEntity.UserWidget.Widget.Visual.Object
	TextBlock* KillerNameTextBlock;//[Offset: 0x208, Size: 0x8]
	TextBlock* VictimNameTextBlock;//[Offset: 0x210, Size: 0x8]
	Image* KillIcon;//[Offset: 0x218, Size: 0x8]
	Image* HeadshotIcon;//[Offset: 0x220, Size: 0x8]
	void PlayOnShowAnimation();// 0x1395e00

--------------------------------
Class: WW3InteractWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	HorizontalBox* KeyToolTipBox;//[Offset: 0x288, Size: 0x8]
	TextBlock* WeaponCategoryText;//[Offset: 0x290, Size: 0x8]
	TextBlock* WeaponNameText;//[Offset: 0x298, Size: 0x8]
	class WW3InteractionHoldTooltiup* HoldKeyToolTipClass;//[Offset: 0x2a0, Size: 0x8]
	class WW3InteractionTooltiup* KeyToolTipClass;//[Offset: 0x2a8, Size: 0x8]
	float MaxHoldTime;//[Offset: 0x2b0, Size: 0x4]
	float KeyScale;//[Offset: 0x2b4, Size: 0x4]
	void NativeConstruct();// 0xf546c0

--------------------------------
Class: WW3InteractionHoldTooltiup.WW3HoldKeyTooltip.WW3KeyTooltip.WW3SelectableWidget.UserWidget.Widget.Visual.Object
	Image* IconImage;//[Offset: 0x4a0, Size: 0x8]

--------------------------------
Class: WW3HoldKeyTooltip.WW3KeyTooltip.WW3SelectableWidget.UserWidget.Widget.Visual.Object
	ProgressBar* HoldKeyBar;//[Offset: 0x490, Size: 0x8]

--------------------------------
Class: WW3InteractionTooltiup.WW3KeyTooltip.WW3SelectableWidget.UserWidget.Widget.Visual.Object
	Image* IconImage;//[Offset: 0x490, Size: 0x8]
	Image* KeyImage;//[Offset: 0x498, Size: 0x8]
	float KeyImageOpacity;//[Offset: 0x4a0, Size: 0x4]

--------------------------------
Class: WW3HUD_SquadWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	VerticalBox* MainVerticalBox;//[Offset: 0x288, Size: 0x8]
	TextBlock* SquadName;//[Offset: 0x290, Size: 0x8]
	TextBlock* ScoreText;//[Offset: 0x298, Size: 0x8]
	TextBlock* OrdersText;//[Offset: 0x2a0, Size: 0x8]
	TextBlock* KillsText;//[Offset: 0x2a8, Size: 0x8]
	class WW3HUD_SquadEntity* SquadEntityWidgetClass;//[Offset: 0x2b0, Size: 0x8]
	void OnSquadChanged_External(byte NewSquad);// 0x1395e00

--------------------------------
Class: WW3HUD_SquadEntity.WW3UserWidget.UserWidget.Widget.Visual.Object
	TextBlock* NickNameTextBlock;//[Offset: 0x288, Size: 0x8]
	Image* LeaderStarImage;//[Offset: 0x290, Size: 0x8]
	Image* SecondaryGadgetImage;//[Offset: 0x298, Size: 0x8]
	Image* PrimaryGadgetImage;//[Offset: 0x2a0, Size: 0x8]
	Image* KnockdownImage;//[Offset: 0x2a8, Size: 0x8]
	WW3SpeakerWidget* SpeakerWidget;//[Offset: 0x2b0, Size: 0x8]
	Image* PartyMemberIcon;//[Offset: 0x2b8, Size: 0x8]
	Widget* ConnectionContainer;//[Offset: 0x2c0, Size: 0x8]
	WW3SlotObject* BoundPlayerSlot;//[Offset: 0x2c8, Size: 0x8]
	float DeadPlayerOpacity;//[Offset: 0x2d0, Size: 0x4]
	void OnPlayerSecondaryGadgetChanged(enum NewGadget);// 0xfe9970
	void OnPlayerRestart(WW3PlayerState* InPlayerState);// 0xfe98f0
	void OnPlayerPrimaryGadgetChanged(enum NewGadget);// 0xfe9870
	void OnPlayerDied(WW3PlayerState* InPlayerState);// 0xfe97e0

--------------------------------
Class: WW3SpeakerWidget.UserWidget.Widget.Visual.Object
	Image* SpeakerIcon;//[Offset: 0x208, Size: 0x8]
	Texture2D* MutedIconTexture;//[Offset: 0x210, Size: 0x8]
	enum MutedIconVisibility;//[Offset: 0x218, Size: 0x1]
	Texture2D* TalkingIconTexture;//[Offset: 0x220, Size: 0x8]
	enum TalkingIconVisibility;//[Offset: 0x228, Size: 0x1]
	Texture2D* SilentIconTexture;//[Offset: 0x230, Size: 0x8]
	enum SilentIconVisibility;//[Offset: 0x238, Size: 0x1]
	WW3PlayerState* BoundPS;//[Offset: 0x240, Size: 0x8]
	void SetBoundPlayerState(WW3PlayerState* PS);// 0x108f8f0

--------------------------------
Class: WW3WeaponInfoWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	WW3AmmoTypeUIIconInfo[] AmmoTypesTextures;//[Offset: 0x288, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x298, Size: 0x28]
	Texture2D* SingleModeTexture;//[Offset: 0x2c0, Size: 0x8]
	Texture2D* BurstModeTexture;//[Offset: 0x2c8, Size: 0x8]
	Texture2D* AutoModeTexture;//[Offset: 0x2d0, Size: 0x8]
	WW3ThreeNumbersCounter* AmmoInClipNumber;//[Offset: 0x2d8, Size: 0x8]
	WW3ThreeNumbersCounter* TotalAmmoNumber;//[Offset: 0x2e0, Size: 0x8]
	Image* FireModeTypeImage;//[Offset: 0x2e8, Size: 0x8]
	Image* MainSightImage;//[Offset: 0x2f0, Size: 0x8]
	Image* SecondarySightImage;//[Offset: 0x2f8, Size: 0x8]
	Image* BulletTypeImage;//[Offset: 0x300, Size: 0x8]
	Image* FlashLightIcon;//[Offset: 0x308, Size: 0x8]
	Image* LaserIcon;//[Offset: 0x310, Size: 0x8]
	TextBlock* WeaponName;//[Offset: 0x318, Size: 0x8]
	Image* CurrentUsedFireTypeImage;//[Offset: 0x320, Size: 0x8]
	WW3KeyTooltip* FireModeKey;//[Offset: 0x328, Size: 0x8]
	WW3KeyTooltip* SecondSightKey;//[Offset: 0x330, Size: 0x8]
	WW3KeyTooltip* LaserKey;//[Offset: 0x338, Size: 0x8]
	VerticalBox* AmmoBox;//[Offset: 0x340, Size: 0x8]
	VerticalBox* SightBox;//[Offset: 0x348, Size: 0x8]
	VerticalBox* LaserBox;//[Offset: 0x350, Size: 0x8]
	Vector2D IconsDefaultSize;//[Offset: 0x358, Size: 0x8]
	WW3InventoryWeapon*[] TrackedWeapons;//[Offset: 0x360, Size: 0x10]
	WW3InventoryWeapon* CurrentWeapon;//[Offset: 0x370, Size: 0x8]
	WW3FireType* CurrentFireType;//[Offset: 0x378, Size: 0x8]
	void OnWeaponChanged(WW3InventoryItem* NewItem, WW3InventoryItem* PrevItem);// 0x10ff880
	void OnSomeLightChanged(Pawn* PawnWhoChanged, bool NewStatus);// 0x10ff6f0
	void OnPlayerSynchronized();// 0x10ff6b0
	void OnFireTypeChanged();// 0x10ff5f0
	void OnCurrentWeaponAttachmentsSynchronised();// 0x10ff5d0

--------------------------------
Class: WW3AmmoTypeUIIconInfo
	FString KeyWord;//[Offset: 0x0, Size: 0x10]
	Texture2D* Texture;//[Offset: 0x10, Size: 0x28]

--------------------------------
Class: WW3VehicleCompassWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	Vector2D NearFarMarkersThreshold;//[Offset: 0x288, Size: 0x8]
	Vector2D NearFarMarkersPosition;//[Offset: 0x290, Size: 0x8]
	<WW3VehicleCompassMarker*,None(None)> MarkersArray;//[Offset: 0x298, Size: 0x50]
	WW3PlayerController* SavedPlayerController;//[Offset: 0x2e8, Size: 0x8]
	WW3Character* SavedPlayerCharacter;//[Offset: 0x2f0, Size: 0x8]
	Image* CompassImage;//[Offset: 0x2f8, Size: 0x8]
	TextBlock* DirectionNumber;//[Offset: 0x300, Size: 0x8]
	void UpdateMarkerPosition(WW3VehicleCompassMarker* Marker, Vector2D NewPosition);// 0x1395e00
	void UpdateCompassAppearance(float NewAngle, float NewTranslation);// 0x1395e00
	void RemoveMarker(WW3ActorMarker* ForActor);// 0x1395e00
	void OnPoolManagerCreated();// 0x10ec0a0
	void OnPlayerSynchronized();// 0x10ec080
	void OnMarkerAdded(WW3ActorPool* ActorPool);// 0x10ec000
	void AddNewMarker(WW3ActorMarker* ForActor, WW3VehicleCompassMarker* ReturnValue);// 0x1395e00

--------------------------------
Class: WW3VehicleCompassMarker.UserWidget.Widget.Visual.Object
	bool bShouldStayOnEdge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]
	void Show_External(bool bWithAnim);// 0x1395e00
	void SetMarkerScaleModifier_External(float NewValue);// 0x1395e00
	void SetMarkerOpacity_External(float NewOpacity);// 0x1395e00
	void MarkAsNear_External();// 0x1395e00
	void MarkAsFar_External();// 0x1395e00
	void Hide_External(bool bWithAnim);// 0x1395e00

--------------------------------
Class: WW3Minimap_New.WW3GameplayMap.WW3UserWidget.UserWidget.Widget.Visual.Object
	WW3ShowHideAnimData AnimationData;//[Offset: 0x340, Size: 0x18]
	CanvasPanel* MapCanvas;//[Offset: 0x358, Size: 0x8]
	CanvasPanel* LimiterCanvas;//[Offset: 0x360, Size: 0x8]
	CanvasPanel* NonclippingMapCanvasParent;//[Offset: 0x368, Size: 0x8]
	WW3GridOptimizedWidget* DefaultGridWidget;//[Offset: 0x370, Size: 0x8]
	WW3GridOptimizedWidget* FloorGridWidget;//[Offset: 0x378, Size: 0x8]
	CanvasPanel* NonclippingMapCanvas;//[Offset: 0x380, Size: 0x8]
	Image* BorderImage;//[Offset: 0x388, Size: 0x8]
	float CurrentSizeBoxSizeOverride;//[Offset: 0x390, Size: 0x4]
	WW3UAVDestroyedWidget* UAVDestroyedWidget;//[Offset: 0x398, Size: 0x8]
	float TimeToShowUAVDestroyedWidget;//[Offset: 0x3a0, Size: 0x4]
	CanvasPanelSlot* LimiterCanvasPanelSlot;//[Offset: 0x3a8, Size: 0x8]
	WW3GridOptimizedWidget*[] GridWidgets;//[Offset: 0x3b0, Size: 0x10]

--------------------------------
Class: WW3ShowHideAnimData
	CurveFloat* ShowHideAnimationCurve;//[Offset: 0x0, Size: 0x8]
	bool bIsAnimationPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float TargetAnimationCanvasPanelSizeOverride;//[Offset: 0xc, Size: 0x4]
	float AnimationTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WW3GridOptimizedWidget.UserWidget.Widget.Visual.Object
	Texture2D*[] GridTextures;//[Offset: 0x208, Size: 0x10]
	WW3GridImage* GridImage;//[Offset: 0x218, Size: 0x8]
	CanvasPanel* WidgetCanvasPanel;//[Offset: 0x220, Size: 0x8]
	byte NumberOfCellNeighboursToDisplay;//[Offset: 0x238, Size: 0x1]

--------------------------------
Class: WW3GridImage.UserWidget.Widget.Visual.Object
	int NumberOfRows;//[Offset: 0x208, Size: 0x4]
	int NumberOfCols;//[Offset: 0x20c, Size: 0x4]
	Image*[] Images;//[Offset: 0x210, Size: 0x10]

--------------------------------
Class: WW3UAVDestroyedWidget.UserWidget.Widget.Visual.Object
	void SetWidgetSize(Vector2D InWidgetSize);// 0x1395e00
	void OnShown();// 0x1395e00

--------------------------------
Class: HealthStatusUserWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	WW3UnitProgressBar* HealthBar;//[Offset: 0x288, Size: 0x8]
	WW3ThreeNumbersCounter* HealthCounter;//[Offset: 0x290, Size: 0x8]
	RichTextBlock* MobilityTresholdText;//[Offset: 0x298, Size: 0x8]
	Border* MobilityBorder;//[Offset: 0x2a0, Size: 0x8]
	WW3HelmetAndVestStatus* HelmetAndVestStatus;//[Offset: 0x2a8, Size: 0x8]
	WW3PlayerMovementStatusWidget* PlayerMovementStatusWidget;//[Offset: 0x2b0, Size: 0x8]
	float DangerHealthThreshold;//[Offset: 0x2b8, Size: 0x4]
	LinearColor RegularColor;//[Offset: 0x2bc, Size: 0x10]

--------------------------------
Class: WW3UnitProgressBar.WW3UnitBar.UserWidget.Widget.Visual.Object
	float BackgroundOpacity;//[Offset: 0x280, Size: 0x4]
	<SlateBrush,None(None)> BrushesForUnits;//[Offset: 0x288, Size: 0x50]
	void SetProgressBarProcentage(float NewPercentage);// 0x10deec0

--------------------------------
Class: WW3UnitBar.UserWidget.Widget.Visual.Object
	WW3UnitBarRangeInfo[] RangesInfo;//[Offset: 0x208, Size: 0x10]
	LinearColor UnitsColor;//[Offset: 0x218, Size: 0x10]
	LinearColor OverfullUnitsColor;//[Offset: 0x228, Size: 0x10]
	Vector2D UnitsSize;//[Offset: 0x238, Size: 0x8]
	Texture2D* FirstUnitTexture;//[Offset: 0x240, Size: 0x8]
	Texture2D* LastUnitTexture;//[Offset: 0x248, Size: 0x8]
	Texture2D* MidleUnitTexture;//[Offset: 0x250, Size: 0x8]
	HorizontalBox* UnitsContainer;//[Offset: 0x258, Size: 0x8]
	float MarginBetweenUnits;//[Offset: 0x260, Size: 0x4]
	float MarginBetweenGroups;//[Offset: 0x264, Size: 0x4]
	byte UnitsNumber;//[Offset: 0x268, Size: 0x1]
	byte UnitsMaxNumber;//[Offset: 0x269, Size: 0x1]
	enum FirstTextureUsage;//[Offset: 0x26a, Size: 0x1]
	enum LastTextureUsage;//[Offset: 0x26b, Size: 0x1]
	byte[] GroupBy;//[Offset: 0x270, Size: 0x10]
	void SetUnitsNumber(byte NewNumber);// 0x10df040
	void SetUnitsMaxNumber(byte NewNumber);// 0x10defc0
	void SetOverfullColor(LinearColor NewColor);// 0x10dedc0
	void SetColor(LinearColor NewColor);// 0x10ded40

--------------------------------
Class: WW3UnitBarRangeInfo
	LinearColor RangeColor;//[Offset: 0x0, Size: 0x10]
	byte From;//[Offset: 0x10, Size: 0x1]
	byte To;//[Offset: 0x11, Size: 0x1]

--------------------------------
Class: WW3HelmetAndVestStatus.WW3UserWidget.UserWidget.Widget.Visual.Object
	LinearColor RegularColor;//[Offset: 0x288, Size: 0x10]
	LinearColor DangerColor;//[Offset: 0x298, Size: 0x10]
	HorizontalBox* HelmetContainer;//[Offset: 0x2a8, Size: 0x8]
	HorizontalBox* VestContainer;//[Offset: 0x2b0, Size: 0x8]
	WW3UnitProgressBar* HelmetStatusBar;//[Offset: 0x2b8, Size: 0x8]
	WW3UnitProgressBar* VestStatusBar;//[Offset: 0x2c0, Size: 0x8]
	Image* HelmetImage;//[Offset: 0x2c8, Size: 0x8]
	Image* VestImage;//[Offset: 0x2d0, Size: 0x8]
	float EmptyBarOpacity;//[Offset: 0x2d8, Size: 0x4]
	float DangerHelmetHealthThreshold;//[Offset: 0x2dc, Size: 0x4]
	float DangerVestHealthThreshold;//[Offset: 0x2e0, Size: 0x4]
	float IconsOffset;//[Offset: 0x2e4, Size: 0x4]
	float Debug_MaxHelmetHp;//[Offset: 0x2e8, Size: 0x4]
	float Debug_CurrentHelmetHP;//[Offset: 0x2ec, Size: 0x4]
	byte Debug_HelmetBarsNumber;//[Offset: 0x2f0, Size: 0x1]
	float Debug_MaxVestHP;//[Offset: 0x2f4, Size: 0x4]
	float Debug_CurrentVestHP;//[Offset: 0x2f8, Size: 0x4]
	byte Debug_VestBarsNumber;//[Offset: 0x2fc, Size: 0x1]
	bool bDebug_ShouldHelemtBeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 0x1]
	bool bDebug_ShouldVestBeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fe, Size: 0x1]
	bool bDebugHelmetAndVest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ff, Size: 0x1]
	void OnPlayerSynchronized();// 0xfd5360
	void OnHitNotification(enum HitType);// 0xfd52c0

--------------------------------
Class: WW3PlayerMovementStatusWidget.UserWidget.Widget.Visual.Object
	WidgetSwitcher* MoveStatusesWidgetSwitcher;//[Offset: 0x208, Size: 0x8]
	float WidgetVisibilityDuration;//[Offset: 0x210, Size: 0x4]
	void OnShowAnimation(bool bIsHorizontaly);// 0x1395e00
	void OnPlayerSynchronized();// 0x1048720
	void OnPlayerMovementSpeedChanged(enum Prev, enum New);// 0x1048660
	void OnPlayerMovementPosiyionChanged(enum Prev, enum New);// 0x1048660
	void OnHideAnimation(bool bIsHorizontaly);// 0x1395e00

--------------------------------
Class: WW3BoltActionWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	class WW3BoltActionUnit* DefaultUnitWidgetClass;//[Offset: 0x288, Size: 0x8]
	PanelWidget* NotificationContainerWidget;//[Offset: 0x290, Size: 0x8]
	float NotificationShowTime;//[Offset: 0x298, Size: 0x4]
	WW3BoltActionUnit* DefaultUnitWidget;//[Offset: 0x2c0, Size: 0x8]
	void OnNotificationAdded();// 0x1395e00

--------------------------------
Class: WW3ObjectivesLogWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	VerticalBox* ObjectivesContainer;//[Offset: 0x288, Size: 0x8]
	class UserWidget* RestoreObjectiveEntityClass;//[Offset: 0x290, Size: 0x8]
	class UserWidget* StackableRestoreEntityClass;//[Offset: 0x298, Size: 0x8]
	class UserWidget* WaypointObjectiveEntityClass;//[Offset: 0x2a0, Size: 0x8]
	class UserWidget* ObjectiveEntityClass;//[Offset: 0x2a8, Size: 0x8]
	bool bIsQuickMapLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	WW3ObjectivesLogWidgetEntity*[] CachedWidgetEntities;//[Offset: 0x2b8, Size: 0x10]

--------------------------------
Class: WW3ObjectivesLogWidgetEntity.WW3UserWidget.UserWidget.Widget.Visual.Object
	ScrollTextBlock* ObjectiveName;//[Offset: 0x288, Size: 0x8]
	ScrollTextBlock* ObjectiveText;//[Offset: 0x290, Size: 0x8]
	Image* BackgroundImage;//[Offset: 0x298, Size: 0x8]
	LinearColor TextColor;//[Offset: 0x2a0, Size: 0x10]
	Margin EntitySpacing;//[Offset: 0x2b0, Size: 0x10]
	WW3GameObjective*[] CachedGameObjectives;//[Offset: 0x2c0, Size: 0x10]
	void RemoveObjective();// 0xfa5cd0
	void OnShow();// 0x1395e00
	void OnHide();// 0x1395e00

--------------------------------
Class: WW3GasmaskWidget.UserWidget.Widget.Visual.Object
	WW3Gadget_Gasmask* Gasmask;//[Offset: 0x208, Size: 0x8]
	void OnShown();// 0x1395e00
	void OnHidden();// 0x1395e00
	void GetGasmaskState(enum ReturnValue);// 0xfd4980
	void GasmaskRemainingTime(float ReturnValue);// 0xfd4920

--------------------------------
Class: WW3Gadget_Gasmask.WW3InventoryGadget.WW3InventoryItem.Actor.Object
	class WW3CAPreview_Facewear* GasmaskFacewear;//[Offset: 0x920, Size: 0x8]
	float FadeOutTime;//[Offset: 0x928, Size: 0x4]
	float FadeInTime;//[Offset: 0x92c, Size: 0x4]
	float FilterTime;//[Offset: 0x930, Size: 0x4]
	uint16 CachedGasmaskFacewearID;//[Offset: 0x934, Size: 0x2]
	uint16 CachedHeadAttachmentID;//[Offset: 0x936, Size: 0x2]
	uint16 CachedHelmetAttachmentID;//[Offset: 0x938, Size: 0x2]
	byte CachedHelmetHealth;//[Offset: 0x93a, Size: 0x1]
	uint16 CachedHelmetArmorPlateID;//[Offset: 0x93c, Size: 0x2]
	enum CachedHelmetArmorPlateType;//[Offset: 0x93e, Size: 0x1]
	enum GasmaskState;//[Offset: 0x93f, Size: 0x1]
	float VisualStateAccumulator;//[Offset: 0x940, Size: 0x4]
	enum VisualState;//[Offset: 0x944, Size: 0x1]
	TimerHandle GasmaskFilterTimerHandle;//[Offset: 0x948, Size: 0x8]
	void OnRep_GasmaskState();// 0xfbbb20

--------------------------------
Class: WW3CAPreview_Facewear.WW3CharacterAttachmentPreview.WW3AttachmentPreview.Object

--------------------------------
Class: WW3CharacterAttachmentPreview.WW3AttachmentPreview.Object

--------------------------------
Class: WW3AseWidget.UserWidget.Widget.Visual.Object
	WW3Gadget_ASE* Ase;//[Offset: 0x208, Size: 0x8]
	void OnShown();// 0x1395e00
	void OnHidden();// 0x1395e00
	void GetAseState(enum ReturnValue);// 0xf3a450
	void AseRemainingTime(float ReturnValue);// 0xf3a380

--------------------------------
Class: WW3Gadget_ASE.WW3InventoryGadget.WW3InventoryItem.Actor.Object
	class WW3CAPreview_Headwear* ASEHeadwear;//[Offset: 0x920, Size: 0x8]
	float FadeOutTime;//[Offset: 0x928, Size: 0x4]
	float FadeInTime;//[Offset: 0x92c, Size: 0x4]
	float ActiveTime;//[Offset: 0x930, Size: 0x4]
	uint16 CachedASEHeadwearID;//[Offset: 0x934, Size: 0x2]
	uint16 CachedHelmetAttachmentID;//[Offset: 0x936, Size: 0x2]
	byte CachedHelmetHealth;//[Offset: 0x938, Size: 0x1]
	uint16 CachedHelmetArmorPlateID;//[Offset: 0x93a, Size: 0x2]
	enum CachedHelmetArmorPlateType;//[Offset: 0x93c, Size: 0x1]
	enum AseState;//[Offset: 0x93d, Size: 0x1]
	float VisualStateAccumulator;//[Offset: 0x940, Size: 0x4]
	enum VisualState;//[Offset: 0x944, Size: 0x1]
	TimerHandle AseActiveTimerHandle;//[Offset: 0x948, Size: 0x8]
	void OnRep_AseState();// 0xfb8310

--------------------------------
Class: WW3CAPreview_Headwear.WW3CharacterAttachmentPreview.WW3AttachmentPreview.Object
	bool bIsArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]

--------------------------------
Class: WW3CapturePointMarks.WW3UserWidget.UserWidget.Widget.Visual.Object
	class WW3DoubleCapturePointMark* CapturePointDoubleIconClass;//[Offset: 0x288, Size: 0x8]
	class WW3CapturePointMark* CapturePointIconClass;//[Offset: 0x290, Size: 0x8]
	HorizontalBox* HorizontalBoxForCaputrePoints;//[Offset: 0x298, Size: 0x8]
	WW3BreakCapturePointsManager* BreakCapturePointsManagerPointer;//[Offset: 0x2a0, Size: 0x8]
	WW3CapturePoint*[] CachedCapturesPoints;//[Offset: 0x2b0, Size: 0x10]
	WW3DoubleCapturePointMark*[] CachedDoubleCapturePointMarks;//[Offset: 0x2c0, Size: 0x10]
	WW3CapturePointMark*[] CachedCapturePointMarks;//[Offset: 0x2d0, Size: 0x10]
	void UpdateActiveBreackCapturePoint();// 0xf5c470
	void OnPlayerSynchronized();// 0xf5c300

--------------------------------
Class: WW3DoubleCapturePointMark.WW3UserWidget.UserWidget.Widget.Visual.Object
	WW3CapturePointMark* FirstCaptureAreaMarker;//[Offset: 0x288, Size: 0x8]
	WW3CapturePointMark* SecondCaptureAreaMarker;//[Offset: 0x290, Size: 0x8]
	Border* LinkBorder;//[Offset: 0x298, Size: 0x8]
	Image* LinkFlareImage;//[Offset: 0x2a0, Size: 0x8]
	Image* LinkBackgroundImage;//[Offset: 0x2a8, Size: 0x8]
	TextBlock* RemainingScoreText;//[Offset: 0x2b0, Size: 0x8]
	WW3DynamicGameRulesManager* DynamicRules;//[Offset: 0x2c0, Size: 0x8]
	WW3TicketManager* TicketManager;//[Offset: 0x2c8, Size: 0x8]
	void OnLinkDestroyed();// 0x1395e00
	void OnLinkCreated();// 0x1395e00

--------------------------------
Class: WW3BreakCapturePointsManager.Actor.Object
	TimerHandle WaitForInitializationTimerHandle_T;//[Offset: 0x360, Size: 0x8]
	WW3CapturePoint*[] CapturePointsChain;//[Offset: 0x368, Size: 0x10]
	WW3BreakCaptureBattleZonesAtActiveIndex[] BattleZoneVolumesAtStages;//[Offset: 0x378, Size: 0x10]
	enum[] UsableInGamemodes;//[Offset: 0x388, Size: 0x10]
	WW3BreakGameState* BreakGameStatePointer;//[Offset: 0x398, Size: 0x8]
	WW3BreakStation*[] ActiveBreakStations;//[Offset: 0x3a0, Size: 0x10]

--------------------------------
Class: WW3BreakCaptureBattleZonesAtActiveIndex
	WW3BattleZoneVolume*[] ActiveBattleZones;//[Offset: 0x0, Size: 0x10]
	WW3BattleZoneVolume* ReferenceForRetreatBattleZoneVolume;//[Offset: 0x10, Size: 0x8]
	WW3BattleZoneVolume* WaitingForRetreatEndBattleZoneVolume;//[Offset: 0x18, Size: 0x8]
	WW3BattleZoneVolume* WaitingForAttackerRegroupEndBattleZoneVolume;//[Offset: 0x20, Size: 0x8]
	WW3OutOfBounds* ActiveAttackerOutOfBounds;//[Offset: 0x28, Size: 0x8]
	StaticMesh* ActiveDeffenderOutOfBounds;//[Offset: 0x30, Size: 0x8]
	float RetreatTime;//[Offset: 0x38, Size: 0x4]
	float RegroupTime;//[Offset: 0x3c, Size: 0x4]
	float MarkTickRate;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: WW3BreakGameState.WW3GameState.GameState.GameStateBase.Info.Actor.Object
	byte ActivePointIndex;//[Offset: 0x890, Size: 0x1]
	int8 AttackingTeamIndex;//[Offset: 0x891, Size: 0x1]
	int8 DefenderTeamIndex;//[Offset: 0x892, Size: 0x1]
	uint16 RetreatZoneCloseTime;//[Offset: 0x894, Size: 0x2]
	uint16 RegroupTime;//[Offset: 0x896, Size: 0x2]
	byte CurrentlyRetreatingPlayers;//[Offset: 0x898, Size: 0x1]
	byte PlayersRetreatedCounter;//[Offset: 0x899, Size: 0x1]
	WW3BreakGameMode* CachedGameMode;//[Offset: 0x8a0, Size: 0x8]
	WW3BreakCapturePointsManager* CapturePointManagerPointer;//[Offset: 0x8b0, Size: 0x8]
	void OnRep_CurrentlyRetreatingPlayers();// 0xf50960
	void Multicast_OnCapture(enum InCapturePointAsEnum);// 0xf503f0
	void Multicast_NotifyAllClientsAboutTimeChange(int16 NewTime, int16 OldTime);// 0xf50320
	void Multicast_EndRetreat(int PostRetreatBattlePointsBonus);// 0xf50290
	void Multicast_EndRegroup();// 0xf50270
	void Multicast_ActiveZoneChanged(int NewActivePoint);// 0xf501e0

--------------------------------
Class: WW3BreakGameMode.WW3TeamGameMode.WW3GameMode.GameMode.GameModeBase.Info.Actor.Object
	float[] CaptureMultipliers;//[Offset: 0xf90, Size: 0x10]
	float MaxDistanceToKillAsObjective;//[Offset: 0xfa0, Size: 0x4]
	float RequiredTeamScoreAdvantage;//[Offset: 0xfa4, Size: 0x4]
	float SuccessfulRetreatPointsPerSecondLeft;//[Offset: 0xfa8, Size: 0x4]
	WW3SupportCapturePointsManager* SupportCapturePointsManager;//[Offset: 0xfb0, Size: 0x8]
	float PercentOfTimeLeftToLockMatch;//[Offset: 0xfb8, Size: 0x4]
	float PercentOfScoreToLockMatch;//[Offset: 0xfbc, Size: 0x4]
	WW3BreakGameState* BreakGameStatePointer;//[Offset: 0xfc0, Size: 0x8]

--------------------------------
Class: WW3SupportCapturePointsManager.ActorComponent.Object
	WW3UIDataContainer* CachedUIDataContainer;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: WW3PlayerPingInfoWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	Border* ColumnsBorder;//[Offset: 0x288, Size: 0x8]
	HorizontalBox* ColumnsContainer;//[Offset: 0x290, Size: 0x8]
	<WW3ConnectionUIInfo,None(None)> InfoPerConnection;//[Offset: 0x298, Size: 0x50]
	float BadConnectionOpacity;//[Offset: 0x2e8, Size: 0x4]
	float DynamicPingTracingIntervals;//[Offset: 0x2ec, Size: 0x4]
	bool bUseReversedOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	bool bShouldBeVisibleWithGoodConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]
	enum CurrentPlayerConnection;//[Offset: 0x2f2, Size: 0x1]
	WW3SlotObject* BoundPlayerSlot;//[Offset: 0x300, Size: 0x8]
	void SetPlayerToDisplayPing(WW3SlotObject* InBoundPlayerSlot, bool bInShouldTrackDynamically);// 0x10489f0
	void SetCurrentConnectionState(enum InNewConnection);// 0x10488e0

--------------------------------
Class: WW3ConnectionUIInfo
	LinearColor Color;//[Offset: 0x0, Size: 0x10]
	byte ColumnsNumber;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: WW3MatchProgressWidgetWarzone.WW3UserWidget.UserWidget.Widget.Visual.Object
	WW3ThreeNumbersCounter* AllyKillsCounter;//[Offset: 0x288, Size: 0x8]
	WW3ThreeNumbersCounter* EnemyKillsCounter;//[Offset: 0x290, Size: 0x8]
	Image* AllyKillsProgressImage;//[Offset: 0x298, Size: 0x8]
	Image* EnemyKillsProgressImage;//[Offset: 0x2a0, Size: 0x8]
	Border* AllyKillsProgressBackground;//[Offset: 0x2a8, Size: 0x8]
	Border* EnemyKillsProgressBackground;//[Offset: 0x2b0, Size: 0x8]
	WW3TimerWidget* MatchTimer;//[Offset: 0x2b8, Size: 0x8]
	WW3GameState* CachedGameState;//[Offset: 0x2c0, Size: 0x8]
	WW3FreeStrikeDropWidget* FreeStrikeDropWidget;//[Offset: 0x2c8, Size: 0x8]
	MaterialInstanceDynamic* AllyProgressMID;//[Offset: 0x2d8, Size: 0x8]
	MaterialInstanceDynamic* EnemyProgressMID;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: WW3TimerWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	void SetTimeText_External(FText TimeInSeconds, FText Minutes, FText Seconds);// 0x1395e00
	void SetTime_External(int TimeInSeconds, int Minutes, int Seconds);// 0x1395e00

--------------------------------
Class: WW3FreeStrikeDropWidget.UserWidget.Widget.Visual.Object
	PanelWidget* MarkerBase_Border;//[Offset: 0x208, Size: 0x8]
	float StrikeDroppedOpacity;//[Offset: 0x210, Size: 0x4]
	void SetWidgetColor(LinearColor InNewColor);// 0x1395e00
	void OnScoreChanged(int LeftPoints);// 0xfb3820
	void OnMatchStateChanged(WW3GameState* InSender);// 0xfb3380

--------------------------------
Class: WW3ScoreFeedbackWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	TextBlock* TotalScoreTextBlock;//[Offset: 0x288, Size: 0x8]
	VerticalBox* ScoreDescriptionsContainer;//[Offset: 0x290, Size: 0x8]
	class WW3ScoreFeedbackEntity* EntityTemplate;//[Offset: 0x298, Size: 0x8]
	float EntityLifetimeDuration;//[Offset: 0x2a0, Size: 0x4]
	float MinScoreAmountToAdd;//[Offset: 0x2a4, Size: 0x4]
	float IncreasePointsAnimMinTime;//[Offset: 0x2a8, Size: 0x4]
	float TimeToPreserveLowAccumulatedScore;//[Offset: 0x2ac, Size: 0x4]
	<WW3ScoreFeedbackEntity*,None(None)> DisplayedScores;//[Offset: 0x2c0, Size: 0x50]
	WW3ScoreFeedbackEntity*[] CachedScoresWidgets;//[Offset: 0x310, Size: 0x10]
	WW3ScoreManager* ScoreManager;//[Offset: 0x320, Size: 0x8]
	void OnScoreAdded();// 0x1395e00
	void OnMatchStateChanged(WW3GameState* InSender);// 0x107ece0
	void OnHide();// 0x1395e00
	void OnGameStateCreatedOnClient(World* InWorldOwner, WW3GameState* InGameState);// 0x107ec20
	void HideScoreFeedback();// 0x107eaf0
	void HideAfterLastUnit();// 0x107ead0

--------------------------------
Class: WW3ScoreFeedbackEntity.WW3UserWidget.UserWidget.Widget.Visual.Object
	WW3ScoreFeedbackWidget* OwnerScoreContainerWidget;//[Offset: 0x290, Size: 0x8]
	TextBlock* ScoreNameTextBlock;//[Offset: 0x298, Size: 0x8]
	TextBlock* ScoreAmountTextBlock;//[Offset: 0x2a0, Size: 0x8]
	void RemoveScoreFromContainer();// 0x107ee80
	void OnShow();// 0x1395e00
	void OnScoreAdded();// 0x1395e00
	void OnHide();// 0x1395e00

--------------------------------
Class: WW3HVTTransmissionTimerWidget.UserWidget.Widget.Visual.Object
	WW3ThreeNumbersCounter* MinutesCounterWidget;//[Offset: 0x208, Size: 0x8]
	WW3ThreeNumbersCounter* SecondsCounterWidget;//[Offset: 0x210, Size: 0x8]
	Border* BackgroundBorder;//[Offset: 0x218, Size: 0x8]
	void SetBackgroundColor(LinearColor InColor);// 0xff31e0

--------------------------------
Class: InvalidationBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bCanCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool CacheRelativeTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]
	void SetCanCache(bool CanCache);// 0x1d098f0
	void InvalidateCache();// 0x1d09650
	void GetCanCache(bool ReturnValue);// 0x1d09210

--------------------------------
Class: WW3HubConfigModificationData
	enum StageType;//[Offset: 0x0, Size: 0x1]
	enum ObjectType;//[Offset: 0x1, Size: 0x1]
	int ItemId;//[Offset: 0x4, Size: 0x4]
	int ConfigId;//[Offset: 0x8, Size: 0x4]
	WW3HubIntArray AttachmentsIds;//[Offset: 0x10, Size: 0x10]
	int MainSkinId;//[Offset: 0x20, Size: 0x4]
	WW3HubIntArray SkinsAttachmentsIds;//[Offset: 0x28, Size: 0x10]
	WW3HubIntArray AttachmentToSkinTypes;//[Offset: 0x38, Size: 0x10]
	WW3HubIntArray TauntAnimationsIds;//[Offset: 0x48, Size: 0x10]
	int VoiceOverId;//[Offset: 0x58, Size: 0x4]
	int[] ChangedAttachmentId;//[Offset: 0x60, Size: 0x10]
	WW3HubIntArray ItemsIds;//[Offset: 0x70, Size: 0x10]
	bool bIsPartialBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	int PredefinedParentId;//[Offset: 0x84, Size: 0x4]
	int[] ReadOnlySlots;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: WW3MapSublevelsData
	FString[] SublevelsToLoad;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WW3PlayerMap.ActorComponent.Object
	WW3SatelliteMapGenerator* MapGenerator;//[Offset: 0xf0, Size: 0x8]
	WW3MinimapData MinimapData;//[Offset: 0xf8, Size: 0x18]
	CanvasRenderTarget2D* MapTexture;//[Offset: 0x110, Size: 0x8]
	float MapSize;//[Offset: 0x118, Size: 0x4]
	WW3GameplayMap*[] GameplayMaps;//[Offset: 0x120, Size: 0x10]
	WW3MapDrawingComponent*[] ObjectsToDraw;//[Offset: 0x130, Size: 0x10]
	WW3FloorTextureTracker* FloorTextureTracker;//[Offset: 0x140, Size: 0x8]
	WW3PlayerState* ClLocalPlayerState;//[Offset: 0x158, Size: 0x8]
	float WorldToTextureScaleRatio;//[Offset: 0x160, Size: 0x4]
	float SinAlpha;//[Offset: 0x164, Size: 0x4]
	float CosAlpha;//[Offset: 0x168, Size: 0x4]
	void SetInteractiveMode(bool bNewInteractiveMode);// 0x1048960
	void OnMapTextureUpdate(Canvas* Canvas, int Width, int Height);// 0x1048560
	void GenerateMaps();// 0x1048350

--------------------------------
Class: WW3MinimapData
	float MinimapInfantryZoom;//[Offset: 0x0, Size: 0x4]
	float MinimapVehicleZoom;//[Offset: 0x4, Size: 0x4]
	bool bShouldRotateMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	MaterialInstanceDynamic* MinimapMID;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: WW3FloorTextureTracker.ActorComponent.Object
	WW3FloorsStatus* FloorsStatus;//[Offset: 0x108, Size: 0x8]
	Texture2D* CurrentFloorTexture;//[Offset: 0x110, Size: 0x8]
	Texture2D*[] CurrentMinimapFloorTextures;//[Offset: 0x130, Size: 0x10]
	void OnFloorLeft(WW3Floor* floor);// 0xfb3280
	void OnFloorEntered(WW3Floor* floor);// 0xfb3180

--------------------------------
Class: WW3FloorsStatus.ActorComponent.Object
	delegate OnFloorEnteredEvent;//[Offset: 0xf0, Size: 0x10]
	delegate OnFloorLeftEvent;//[Offset: 0x100, Size: 0x10]
	WW3Floor*[] RegisteredFloors;//[Offset: 0x110, Size: 0x10]
	WW3Floor*[] OccupiedFloors;//[Offset: 0x120, Size: 0x10]
	void OnFloorLeft(WW3Floor* floor);// 0xfb3300
	void OnFloorEntered(WW3Floor* floor);// 0xfb3200

--------------------------------
Class: WW3Floor.Actor.Object
	Volume* FloorVolume;//[Offset: 0x330, Size: 0x8]
	delegate OnFloorEntered;//[Offset: 0x338, Size: 0x10]
	delegate OnFloorLeft;//[Offset: 0x348, Size: 0x10]
	<Texture2D*,None(None)> TeamBasedFloorTextures;//[Offset: 0x358, Size: 0x50]
	<WW3TeamBasedMapChunkTextures,None(None)> TeamBasedFloorChunkTextures;//[Offset: 0x3a8, Size: 0x50]
	void OnOverlapEnd(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xfb35f0
	void OnOverlapBegin(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult);// 0xfb3400

--------------------------------
Class: WW3CentralRadio.ActorComponent.Object
	bool bGenerateCentralRadioDatabase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	DataTable* RadioMessagesDataTable;//[Offset: 0xf8, Size: 0x8]
	int8 MessageQueueSize;//[Offset: 0x100, Size: 0x1]
	WW3WiseAudioQueue* RadioCommanderComponent;//[Offset: 0x108, Size: 0x8]

--------------------------------
Class: WW3WiseAudioQueue.ActorComponent.Object
	WW3AudioCommand[] AudioCommandsQueue;//[Offset: 0xf0, Size: 0x10]
	WW3AkComponent* CurrentlyPlayingComponent;//[Offset: 0x100, Size: 0x8]

--------------------------------
Class: WW3AudioCommand
	WW3AkComponent* AkComponentToPlayOn;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: WW3CommandMenu.ActorComponent.Object
	WW3CommandMenuWidget* CommandMenuWidget;//[Offset: 0xf0, Size: 0x8]
	class WW3BaseCommandAction[] StartingActions;//[Offset: 0xf8, Size: 0x10]
	WW3BaseCommandAction* SelectedAction;//[Offset: 0x108, Size: 0x8]
	float AntiFloodPreventTime;//[Offset: 0x110, Size: 0x4]

--------------------------------
Class: WW3CommandMenuWidget.UserWidget.Widget.Visual.Object
	VerticalBox* ActionCommandsBox;//[Offset: 0x210, Size: 0x8]
	MaterialInstanceDynamic* MainKeyBorderMID;//[Offset: 0x218, Size: 0x8]
	class WW3CommandActionWidget* ActionTemplate;//[Offset: 0x220, Size: 0x8]
	void SetMainKeyName(FText NewMainKeyName);// 0x1395e00
	void EnableUsage_BP();// 0x1395e00
	void DisableUsage_BP();// 0x1395e00

--------------------------------
Class: WW3CommandActionWidget.UserWidget.Widget.Visual.Object
	TextBlock* ActionText;//[Offset: 0x208, Size: 0x8]
	TextBlock* ActionNumber;//[Offset: 0x210, Size: 0x8]

--------------------------------
Class: WW3BaseCommandAction.Object
	class WW3BaseCommandAction[] NextActions;//[Offset: 0x28, Size: 0x10]
	bool bIsLeaderCommand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	void Execute(WW3PlayerController* PlayerController, class WW3BaseCommandAction[] ReturnValue);// 0xf45520

--------------------------------
Class: WW3LocalObjectiveSystem.ActorComponent.Object
	class WW3ObjectiveLog* ObjectiveLogClass;//[Offset: 0xf0, Size: 0x8]
	WW3ObjectiveLog* ObjectiveLog;//[Offset: 0xf8, Size: 0x8]
	void AddObjective(class WW3GameObjective GameObjective, Object* ObjectiveTargetActor);// 0x101a1e0

--------------------------------
Class: WW3ObjectiveLog.ActorComponent.Object
	class WW3ObjectiveLogWidget* ObjectiveLogWidgetClass;//[Offset: 0xf0, Size: 0x8]
	WW3ObjectivesLogWidget* ObjectivesLogWidget;//[Offset: 0xf8, Size: 0x8]
	WW3ObjectiveLogWidget*[] ObjectiveLogWidgets;//[Offset: 0x100, Size: 0x10]
	WW3GameObjective*[] PlayersObjectives;//[Offset: 0x110, Size: 0x10]
	WW3GameObjective*[] PlayersWaypointsObjectives;//[Offset: 0x120, Size: 0x10]
	WW3GameObjective*[] PlayersObjectivesAlreadyDeletedOnServer;//[Offset: 0x130, Size: 0x10]

--------------------------------
Class: WW3ObjectiveLogWidget.WW3UserWidget.UserWidget.Widget.Visual.Object
	VerticalBox* ObjectivesList;//[Offset: 0x288, Size: 0x8]
	VerticalBox* WaypointObjectivesList;//[Offset: 0x290, Size: 0x8]
	class WW3ObjectiveWidgetTemplate* ObjectiveTemplate;//[Offset: 0x298, Size: 0x8]
	byte MaxObjectivesDisplayed;//[Offset: 0x2a0, Size: 0x1]
	bool bShouldPlayObjectiveAddedAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1]
	WW3ObjectiveWidgetTemplate*[] ObjectiveWidgetPool;//[Offset: 0x2a8, Size: 0x10]
	void Show();// 0x1395e00
	void Hide();// 0x1395e00

--------------------------------
Class: WW3ObjectiveWidgetTemplate.WW3UserWidget.UserWidget.Widget.Visual.Object
	TextBlock* ObjectiveName;//[Offset: 0x288, Size: 0x8]
	TextBlock* ObjectiveCaller;//[Offset: 0x290, Size: 0x8]
	TextBlock* WaypointObjectiveSuffix;//[Offset: 0x298, Size: 0x8]
	void PlayAddedAnimation();// 0x1395e00

--------------------------------
Class: WW3BarkSystem.ActorComponent.Object
	bool bGenerateBarkDatabase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	DataTable* BarksDataTable;//[Offset: 0xf8, Size: 0x8]
	<int,None(None)> BarksPlayedCounter;//[Offset: 0x150, Size: 0x50]

--------------------------------
Class: WW3ProfilingDataController.ActorComponent.Object
	ActorComponent*[] BlockedCharacterComponentsTicks;//[Offset: 0xf0, Size: 0x10]
	ActorComponent*[] BlockedVehicleComponentsTicks;//[Offset: 0x100, Size: 0x10]
	MeshComponent*[] BlockedVehicleMeshesVisibility;//[Offset: 0x110, Size: 0x10]
	AkAudioBank*[] BlockedAudioBanks;//[Offset: 0x120, Size: 0x10]

--------------------------------
Class: WW3PlayerOptimizationController.ActorComponent.Object
	WW3ActorPool* ActorPool;//[Offset: 0x100, Size: 0x8]
	WW3UserSettings* UserSettings;//[Offset: 0x108, Size: 0x8]
	Actor* RecentViewTarget;//[Offset: 0x148, Size: 0x8]
	float[] CharacterBaseVisibleDistanceFactorThesholds_HighQuality;//[Offset: 0x158, Size: 0x10]
	float[] CharacterBaseVisibleDistanceFactorThesholds_LowQuality;//[Offset: 0x168, Size: 0x10]
	WW3AkComponent*[] ActiveAkComponents;//[Offset: 0x178, Size: 0x10]
	void PreShowLoadingScreen();// 0x5d2c60
	void OnAsyncLoadingFlush();// 0x5d2c60

--------------------------------
Class: WW3CustomOcclusionStreamingController.ActorComponent.Object
	StaticMeshComponent*[] LatestNotRenderedMeshes;//[Offset: 0xf0, Size: 0x10]
	StaticMeshComponent*[] LatestNotRenderedMeshes_Hidden;//[Offset: 0x100, Size: 0x10]

--------------------------------
Class: WW3AdvancedAudioManager.ActorComponent.Object

--------------------------------
Class: WW3AlwaysAwakeRPCActor.Actor.Object
	void Server_UpdateTarget(WW3InventoryGadgetLaserPointer* InInventoryGadgetLaserPointer, Vector Coords);// 0xf30bd0
	void Server_TryToDeployStrike(WW3InventoryGadgetStrikeDeploy* InInventoryGadgetStrikeDeploy, WW3TeamStrikeSpawnPoint* StrikeSpawnPoint);// 0xf30ad0
	void Server_TryToConstructActor(WW3Gadget_ConstructionKit* InConstructionKit, class Actor ActorToSpawn, Vector SpawnLocation, Rotator SpawnRotation);// 0xf30920
	void Server_StopUse(WW3InventoryGadget* InInventoryGadget);// 0xf30860
	void Server_StopAlternativeUse(WW3InventoryGadget* InInventoryGadget);// 0xf307a0
	void Server_StartUse(WW3InventoryGadget* InInventoryGadget);// 0xf306e0
	void Server_StartAlternativeUse(WW3InventoryGadget* InInventoryGadget);// 0xf30620
	void Server_SpawnRadar(WW3InventoryGadgetUAVInsta* InInventoryGadgetUAVInsta);// 0xf30560
	void Server_RequestVehicleSpawn(WW3InventoryGadgetSlotPicker* InInventoryGadgetSlotPickerActor, enum InCapturePoint);// 0xf30460
	void Server_OnUseFinished(WW3InventoryGadget* InInventoryGadget);// 0xf303a0
	void Server_ClientFinishedEquipAnim(WW3Gadget_ConstructionKit* InConstructionKit);// 0xf302e0
	void Server_ActivateGadget(WW3InventoryGadgetMapPicker* InInventoryGadgetMapPicker, Vector2D MapPosition, float YawRotation);// 0xf30160
	void Client_StopRegenerationTimer(WW3InventoryGadget* InInventoryGadget);// 0xf2fe70
	void Client_StartRegenerationTimer(WW3InventoryGadget* InInventoryGadget, float InRemaining);// 0xf2fda0
	void Client_SendStrikeSpawnWarning(WW3InventoryGadgetStrike* InInventoryGadgetStrike, enum CanCreateStrikeResult);// 0xf2fcd0
	void Client_RequestVehicleSpawnResponse(WW3InventoryGadgetSlotPicker* InInventoryGadgetSlotPickerActor, enum InResult);// 0xf2fc00
	void Client_RequestLaserGadgetActivationResponse(WW3InventoryGadgetLaserPointer* InInventoryGadgetLaserPointer, enum Response);// 0xf2fb30
	void Client_RequestGadgetActivationResponse(WW3InventoryGadgetMapPicker* InInventoryGadgetMapPicker, enum Response);// 0xf2fa60
	void Client_OnAmmunitionProjectileSpawned(WW3InventoryGadgetLaserPointer* InInventoryGadgetLaserPointer, WW3ArtilleryProjectile* Projectile);// 0xf2f990
	void Client_LoadTargetPointClass(WW3InventoryGadgetLaserPointer* InInventoryGadgetLaserPointer);// 0xf2f900
	void Client_LoadArtilleryCountdownClass(WW3InventoryGadgetLaserPointer* InInventoryGadgetLaserPointer);// 0xf2f870
	void Client_FinalizeUse(WW3InventoryGadgetSlotPicker* InInventoryGadgetSlotPickerActor);// 0xf2f7e0

--------------------------------
Class: WW3InventoryGadgetLaserPointer.WW3InventoryGadgetStrike.WW3InventoryGadget.WW3InventoryItem.Actor.Object
	class WW3ArtilleryBase* ArtilleryToSpawn;//[Offset: 0x9a8, Size: 0x8]
	class WW3TargetPointWidget* TargetPointWidgetClassLoaded;//[Offset: 0x9b0, Size: 0x8]
	class WW3ArtilleryCountdownWidget* ArtilleryCountdownWidgetClassLoaded;//[Offset: 0x9b8, Size: 0x8]
	class WW3TargetPointWidget* TargetPointWidgetClass;//[Offset: 0x9c0, Size: 0x28]
	class WW3ArtilleryCountdownWidget* ArtilleryCountdownWidgetClass;//[Offset: 0x9e8, Size: 0x28]
	float MaximumTraceDistance;//[Offset: 0xa10, Size: 0x4]
	AkAudioEvent* bepTrackingTick;//[Offset: 0xa18, Size: 0x8]
	float VehicleTrackingSoundInterval;//[Offset: 0xa20, Size: 0x4]
	float TargetingFOV;//[Offset: 0xa24, Size: 0x4]
	float TargetingZoomDelay;//[Offset: 0xa28, Size: 0x4]
	WW3DeployScreenMessagesManager* MessagesManager;//[Offset: 0xa60, Size: 0x8]
	WW3ArtilleryBase* ArtilleryActor;//[Offset: 0xa90, Size: 0x8]
	WW3TargetPointWidget* TargetPointWidget;//[Offset: 0xa98, Size: 0x8]
	WW3ArtilleryCountdownWidget* ArtilleryCountdownWidget;//[Offset: 0xaa0, Size: 0x8]
	ParticleSystemComponent* LaserParticleComponent;//[Offset: 0xaa8, Size: 0x8]
	StaticMeshComponent* LaserEndPointMeshComponent;//[Offset: 0xab0, Size: 0x8]
	void Server_UpdateTarget(Vector Coords);// 0xffcb60
	void OnRep_ArtilleryActor();// 0xffc470
	void Client_RequestLaserGadgetActivationResponse(enum Response);// 0xffbe90
	void Client_RequestGadgetActivationResponse(enum Response);// 0xffbe10
	void Client_OnAmmunitionProjectileSpawned(WW3ArtilleryProjectile* Projectile);// 0xffbcd0
	void Client_LoadTargetPointClass();// 0xffbcb0
	void Client_LoadArtilleryCountdownClass();// 0xffbc90

--------------------------------
Class: WW3ArtilleryBase.WW3ActorStrike.Actor.Object
	enum UsedMapWidgetMode;//[Offset: 0x3e8, Size: 0x1]
	float ArtilleryDuration;//[Offset: 0x3ec, Size: 0x4]
	float ArtilleryDelay;//[Offset: 0x3f0, Size: 0x4]
	float PostFirstVolleyDelay;//[Offset: 0x3f4, Size: 0x4]
	float ArtilleryRange;//[Offset: 0x3f8, Size: 0x4]
	class WW3ArtilleryProjectile* AmmunitionType;//[Offset: 0x400, Size: 0x8]
	uint16 TotalAmmunition;//[Offset: 0x408, Size: 0x2]
	uint16 AmmunitionPerVolley;//[Offset: 0x40a, Size: 0x2]
	float AmmunitionSpawnAltitude;//[Offset: 0x40c, Size: 0x4]
	float AmmunitionSpawnAltitudeChange;//[Offset: 0x410, Size: 0x4]
	bool bDestroyOnArtilleryFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1]
	class WW3MapDrawingComponent* ArtilleryMDCClass;//[Offset: 0x418, Size: 0x8]
	WW3PlayerController* PlayerOwner;//[Offset: 0x430, Size: 0x8]
	bool bHasStartedReplicated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x438, Size: 0x1]
	WW3MapDrawingComponent* ArtilleryMDC;//[Offset: 0x458, Size: 0x8]
	void OnRep_HasStartedReplicated();// 0xf3ab50
	void OnArtilleryDurationFinished();// 0xf3a680
	void DestroyArillery();// 0xf3a430

--------------------------------
Class: WW3ArtilleryProjectile.WW3Projectile_WithMesh.WW3Projectile.Actor.Object
	class WW3ArtilleryProjectileMapDrawing* ArtilleryMapDrawingCompClass;//[Offset: 0x610, Size: 0x8]
	WW3ArtilleryProjectileMapDrawing* ArtilleryMapDrawingComp;//[Offset: 0x618, Size: 0x8]
	WW3ArtilleryBase* StrikeActorSpawner;//[Offset: 0x620, Size: 0x8]
	bool bIsSmokeProjectile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 0x1]
	bool bUseShortSoundEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x629, Size: 0x1]

--------------------------------
Class: WW3Projectile_WithMesh.WW3Projectile.Actor.Object
	StaticMeshComponent* Mesh;//[Offset: 0x5f8, Size: 0x8]
	WW3AkComponent* ProjectileAkComponent;//[Offset: 0x600, Size: 0x8]
	bool bReplicateDestruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	void Multicast_PlayHitEffects(WW3ImpactData ImpactData);// 0x105b490
	void Multicast_Explode(Vector ImpactLocation, Vector ImpactNormal, PrimitiveComponent* HitComponent);// 0x105b340

--------------------------------
Class: WW3ArtilleryProjectileMapDrawing.WW3MapDrawingComponent.ActorComponent.Object
	WW3ArtilleryProjectile* CachedOwner;//[Offset: 0x238, Size: 0x8]

--------------------------------
Class: WW3TargetPointWidget.UserWidget.Widget.Visual.Object
	float Inner;//[Offset: 0x208, Size: 0x4]
	float Outer;//[Offset: 0x20c, Size: 0x4]
	float MinOpacity;//[Offset: 0x210, Size: 0x4]
	float MinRenderScale;//[Offset: 0x214, Size: 0x4]
	PlayerController* LocalPC;//[Offset: 0x228, Size: 0x8]
	Widget* InfoBox;//[Offset: 0x230, Size: 0x8]
	TextBlock* DistanceText;//[Offset: 0x238, Size: 0x8]

--------------------------------
Class: WW3ArtilleryCountdownWidget.UserWidget.Widget.Visual.Object
	TextBlock* CountdownText;//[Offset: 0x208, Size: 0x8]

--------------------------------
Class: WW3InventoryGadgetStrikeDeploy.WW3InventoryGadgetMapPicker.WW3InventoryGadgetStrike.WW3InventoryGadget.WW3InventoryItem.Actor.Object
	WW3CKConstructableActor ConstructableActor;//[Offset: 0xa10, Size: 0x48]
	WW3CustomizationConfig CurrentConfig;//[Offset: 0xa58, Size: 0xd8]
	class Actor* CurrentConstructableActor;//[Offset: 0xb30, Size: 0x8]
	void Server_TryToDeployStrike(WW3TeamStrikeSpawnPoint* StrikeSpawnPoint);// 0xffcaa0

--------------------------------
Class: WW3InventoryGadgetMapPicker.WW3InventoryGadgetStrike.WW3InventoryGadget.WW3InventoryItem.Actor.Object
	float MapVisibilityDurationAfterUse;//[Offset: 0x9a8, Size: 0x4]
	bool bShouldUseUsableMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ac, Size: 0x1]
	enum StrikeUsableMaskToUse;//[Offset: 0x9ad, Size: 0x1]
	bool bUseOverridenMapWidgetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ae, Size: 0x1]
	enum OverridenMapWidgetMode;//[Offset: 0x9af, Size: 0x1]
	class WW3StrikeCursorMDC* StrikeCursorMDCClass;//[Offset: 0x9b8, Size: 0x8]
	WW3StrikeUsableMaskWidget* StrikeUsableMaskWidget;//[Offset: 0x9d0, Size: 0x8]
	WW3StrikeUsableMaskMDC* StrikeUsableMaskMDC;//[Offset: 0x9e0, Size: 0x8]
	RectLightComponent* TabletLight;//[Offset: 0x9e8, Size: 0x8]
	WW3DeployScreenMessagesManager* MessagesManager;//[Offset: 0xa08, Size: 0x8]
	void Server_ActivateGadget(Vector2D MapPosition, float YawRotation);// 0xffc640
	void OnMapLocationPicked(Vector2D MapPosition, float YawRotation);// 0xffc3b0
	void Client_RequestGadgetActivationResponse(enum Response);// 0xffbe10

--------------------------------
Class: WW3StrikeUsableMaskWidget.WW3GameplayMapWidget.UserWidget.Widget.Visual.Object
	class WW3Cursor* UsableAreaCursorClass;//[Offset: 0x240, Size: 0x8]
	class WW3Cursor* NonusableAreaCursorClass;//[Offset: 0x248, Size: 0x8]
	Texture2D* BakedStrikeUsableRegionTexture;//[Offset: 0x250, Size: 0x8]
	WW3Cursor* UsableAreaCursor;//[Offset: 0x258, Size: 0x8]
	WW3Cursor* NonusableAreaCursor;//[Offset: 0x260, Size: 0x8]
	UserWidget* CurrentlyUsedCursorWidget;//[Offset: 0x268, Size: 0x8]
	void Init_BP();// 0x1395e00

--------------------------------
Class: WW3Cursor.UserWidget.Widget.Visual.Object
	Vector2D CursorOffset;//[Offset: 0x208, Size: 0x8]
	Vector2D ScreenPositionToViewportPositionOffset;//[Offset: 0x210, Size: 0x8]
	Texture2D* CursorImageInstance;//[Offset: 0x218, Size: 0x8]
	Image* CursorWidgetInstance;//[Offset: 0x220, Size: 0x8]
	Vector2D CurrentCursorPosition;//[Offset: 0x228, Size: 0x8]
	PlayerController* PC;//[Offset: 0x230, Size: 0x8]
	int ViewportSizeX;//[Offset: 0x238, Size: 0x4]
	int ViewportSizeY;//[Offset: 0x23c, Size: 0x4]
	int BrowserSizeX;//[Offset: 0x240, Size: 0x4]
	int BrowserSizeY;//[Offset: 0x244, Size: 0x4]

--------------------------------
Class: RectLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float SourceWidth;//[Offset: 0x390, Size: 0x4]
	float SourceHeight;//[Offset: 0x394, Size: 0x4]
	Texture* SourceTexture;//[Offset: 0x398, Size: 0x8]
	void SetSourceWidth(float bNewValue);// 0x258ef80
	void SetSourceHeight(float NewValue);// 0x258b970

--------------------------------
Class: WW3InventoryGadgetUAVInsta.WW3InventoryGadgetStrike.WW3InventoryGadget.WW3InventoryItem.Actor.Object
	class WW3UAVBase* UAVToSpawn;//[Offset: 0x9a0, Size: 0x8]
	void Server_SpawnRadar();// 0xffca50

--------------------------------
Class: WW3UAVBase.WW3RadarBase.WW3ActorStrike.Actor.Object
	enum UAVType;//[Offset: 0x438, Size: 0x1]
	enum UAVRadarType;//[Offset: 0x439, Size: 0x1]
	float UAVRange;//[Offset: 0x43c, Size: 0x4]
	float UAVImpulseDuration;//[Offset: 0x440, Size: 0x4]
	float DetectedPointVisibilityDuration;//[Offset: 0x444, Size: 0x4]
	StaticMeshComponent* BodyMesh;//[Offset: 0x448, Size: 0x8]
	BillboardComponent* UAVRoot;//[Offset: 0x450, Size: 0x8]
	SpringArmComponent* SpringArm;//[Offset: 0x458, Size: 0x8]
	bool bUseMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 0x1]
	enum MarkMode;//[Offset: 0x461, Size: 0x1]
	WW3UAVMovementConfig MovementConfig;//[Offset: 0x464, Size: 0x1c]
	WW3ProgressableMarker* UavMarker;//[Offset: 0x480, Size: 0x8]
	CurveFloat* ImpulseSpeedCurve;//[Offset: 0x488, Size: 0x8]
	float UAVTotalDamagePoints;//[Offset: 0x490, Size: 0x4]
	bool bDisableSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 0x1]
	float UAVCreatedTime;//[Offset: 0x498, Size: 0x4]
	float UAVImpulseStartTime;//[Offset: 0x49c, Size: 0x4]
	float UAVImpulseFinishTime;//[Offset: 0x4a0, Size: 0x4]
	float UAVImpulseCurrentLocation;//[Offset: 0x4a4, Size: 0x4]
	class WW3UAVBaseMapDrawingComponent* UAVBaseMDCClass;//[Offset: 0x4a8, Size: 0x8]
	WW3DamageModifier[] DamageTypeModifiers;//[Offset: 0x4b0, Size: 0x10]
	class ShooterExplosionEffect* ExplosionTemplate;//[Offset: 0x4c0, Size: 0x8]
	bool RemoveBodyMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1]
	WW3UAVBaseMapDrawingComponent* UAVBaseMDC;//[Offset: 0x4d0, Size: 0x8]
	WW3NoiseGeneratorManager* NoiseGenerator;//[Offset: 0x4d8, Size: 0x8]
	Actor*[] ActorsMarkedInThisImpulse;//[Offset: 0x4e8, Size: 0x10]
	void Multicast_SpawnExplosionEffects();// 0x429e50

--------------------------------
Class: WW3UAVMovementConfig
	float Radius;//[Offset: 0x0, Size: 0x4]
	float FullCircleTime;//[Offset: 0x4, Size: 0x4]
	float BodyMeshRollRotation;//[Offset: 0x8, Size: 0x4]
	float CurrentRotation;//[Offset: 0xc, Size: 0x4]
	float SpawnHeight;//[Offset: 0x10, Size: 0x4]
	float DepartureTime;//[Offset: 0x14, Size: 0x4]
	float ArrivalTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: WW3UAVBaseMapDrawingComponent.WW3MapDrawingComponent.ActorComponent.Object
	LinearColor ImpulseColor;//[Offset: 0x238, Size: 0x10]
	WW3UAVBase* CachedOwner;//[Offset: 0x258, Size: 0x8]

--------------------------------
Class: WW3InventoryGadgetSlotPicker.WW3InventoryGadgetStrike.WW3InventoryGadget.WW3InventoryItem.Actor.Object
	float HoldDuration;//[Offset: 0x9a8, Size: 0x4]
	WW3CustomizationConfig CurrentConfig;//[Offset: 0x9b0, Size: 0xd8]
	class WW3StrikeSlotPickerWidget* StrikeSlotPickerWidgetClass;//[Offset: 0xa88, Size: 0x8]
	class UserWidget* SuccessfulStrikeRequestMessageClass;//[Offset: 0xa90, Size: 0x8]
	class UserWidget* StrikeRequestFailMessageClass;//[Offset: 0xa98, Size: 0x8]
	enum VehicleSpawnSlotType;//[Offset: 0xaa0, Size: 0x1]
	class WW3Vehicle* AirVehicleToSpawn;//[Offset: 0xaa8, Size: 0x8]
	DataTable* UIStrikesStatsDataTable;//[Offset: 0xab0, Size: 0x8]
	RectLightComponent* TabletLight;//[Offset: 0xab8, Size: 0x8]
	WW3CrateDropingJet* CreatedCrateDropingJet;//[Offset: 0xaf0, Size: 0x8]
	class WW3StrikeSpawnPointMDC* DropPointMapMarkerClass;//[Offset: 0xaf8, Size: 0x8]
	WW3StrikeSpawnPointMDC* DropPointMapMarker;//[Offset: 0xb00, Size: 0x8]
	WidgetComponent* StrikeSlotPickerWidget;//[Offset: 0xb08, Size: 0x8]
	WW3DeployScreenMessagesManager* MessagesManager;//[Offset: 0xb10, Size: 0x8]
	void Server_RequestVehicleSpawn(enum InCapturePoint);// 0xffc9a0
	void OnRep_CreatedCrateDropingJet();// 0xffc4b0
	void Client_RequestVehicleSpawnResponse(enum Response);// 0xffbf10
	void Client_FinalizeUse();// 0xffbc70

--------------------------------
Class: WW3StrikeSlotPickerWidget.UserWidget.Widget.Visual.Object
	WW3InventoryGadgetStrike* GadgetStrikeInUse;//[Offset: 0x208, Size: 0x8]
	void WaitingForResponse();// 0xfa60d0
	void StrikeInfoAcquired(WW3StrikeSlotPickerWidgetContext StrikeInfo);// 0x1395e00
	void StrikeCostCalculated(int NewCost);// 0x1395e00
	void NoSlotsAvailable();// 0xf3df00
	void ItemEquipped();// 0x1395e00
	void DropSuccessfully();// 0xfa6190
	void BattlePointsChanged(int NewAmount);// 0x1395e00

--------------------------------
Class: WW3StrikeSpawnPointMDC.WW3MapDrawingComponent.ActorComponent.Object

--------------------------------
Class: WW3TargetCapturePointLineMDC.WW3MapDrawingComponent.ActorComponent.Object
	float InitialLineOffset;//[Offset: 0x238, Size: 0x4]
	float EndLineOffset;//[Offset: 0x23c, Size: 0x4]

--------------------------------
Class: WW3AudioPrioritySystem.ActorComponent.Object
	WW3ActorPool* ActorPool;//[Offset: 0xf0, Size: 0x8]
	float[] ThreatLevelAtPriority;//[Offset: 0x128, Size: 0x10]
	float ThreatLevel_Ally_Max;//[Offset: 0x138, Size: 0x4]
	float ThreatLevel_Ally_Multiplier;//[Offset: 0x13c, Size: 0x4]
	float ThreatIncreaseSpeed;//[Offset: 0x140, Size: 0x4]
	float ThreatDecreaseSpeed;//[Offset: 0x144, Size: 0x4]
	float EnemyThreatRange;//[Offset: 0x148, Size: 0x4]
	float MinRotationDotProduct;//[Offset: 0x14c, Size: 0x4]
	float SniperThreatMultiplier;//[Offset: 0x150, Size: 0x4]
	<float,None(None)> ScoreElementsWithWeights;//[Offset: 0x158, Size: 0x50]
	float[] ThreatLevelAtPriority_Vehicles;//[Offset: 0x1a8, Size: 0x10]
	float ThreatIncreaseSpeed_Vehicles;//[Offset: 0x1b8, Size: 0x4]
	float ThreatDecreaseSpeed_Vehicles;//[Offset: 0x1bc, Size: 0x4]
	float EnemyThreatRange_Vehicles;//[Offset: 0x1c0, Size: 0x4]
	float MinRotationDotProduct_Vehicles;//[Offset: 0x1c4, Size: 0x4]
	<float,None(None)> ScoreElementsWithWeights_Vehicles;//[Offset: 0x1c8, Size: 0x50]

--------------------------------
Class: WW3WeatherEffectsManager.Actor.Object
	Actor* WeatherPSManager;//[Offset: 0x330, Size: 0x8]
	ParticleSystemComponent* RubbleDustEffect;//[Offset: 0x338, Size: 0x8]

--------------------------------
Class: WW3ScreensManager.ActorComponent.Object
	<interface classNone,None(None)> AvailableScreens;//[Offset: 0xf0, Size: 0x50]

--------------------------------
Class: WW3WorldPositionMarkersPCManager.ActorComponent.Object
	WW3PlayerController* PCPointer;//[Offset: 0xf0, Size: 0x8]
	WW3WorldPositionMarkerData[] PlayerMarkersData;//[Offset: 0xf8, Size: 0x10]
	WW3WorldPositionMarkersPerPlayerReplicatedData[] OtherPlayersMarkersReplicated;//[Offset: 0x108, Size: 0x10]
	WW3WorldPositionMarkersPerPlayerData[] OtherPlayersMarkers;//[Offset: 0x118, Size: 0x10]
	void Server_SendWorldPositionMarkerData(Vector_NetQuantize InPosition, enum InMarkerType);// 0x1103730
	void Server_SendDeregisterMarkerData(enum InMarkerType);// 0x1103680
	void OnRep_OtherPlayersMarkersReplicated();// 0x1103480

--------------------------------
Class: WW3WorldPositionMarkerData
	Vector_NetQuantize WorldSpaceMarkerPosition;//[Offset: 0x0, Size: 0xc]
	enum Type;//[Offset: 0xc, Size: 0x1]
	WW3WorldPositionMarker* MarkerPointer;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: WW3WorldPositionMarker.Actor.Object
	WW3ActorMarkerWorldPosition* MarkerComp;//[Offset: 0x340, Size: 0x8]
	WW3PlayerState* OwningPlayerState;//[Offset: 0x348, Size: 0x8]
	WW3WorldPositionMarkersPCManager* SavedManagerPointer;//[Offset: 0x350, Size: 0x8]
	TimerHandle ExpirationTimerHandle_T;//[Offset: 0x360, Size: 0x8]

--------------------------------
Class: WW3ActorMarkerWorldPosition.WW3ProgressableMarker.WW3ActorMarker.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	WW3WorldPositionMarker* ActorOwner;//[Offset: 0xc98, Size: 0x8]

--------------------------------
Class: WW3WorldPositionMarkersPerPlayerReplicatedData
	WW3PlayerState* PS;//[Offset: 0x0, Size: 0x8]
	WW3WorldPositionMarkerReplicatedData[] Markers;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WW3WorldPositionMarkerReplicatedData
	Vector_NetQuantize WorldSpaceMarkerPosition;//[Offset: 0x0, Size: 0xc]
	enum Type;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: WW3WorldPositionMarkersPerPlayerData
	WW3PlayerState* PS;//[Offset: 0x0, Size: 0x8]
	WW3WorldPositionMarkerData[] Markers;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WW3AntiFloodComponent.ActorComponent.Object

--------------------------------
Class: WW3SquadManagerRequester.ActorComponent.Object
	void Server_TryToPromoteSpecificPlayer(WW3PlayerState* InSquadLeader, WW3PlayerState* InPlayerToPromote);// 0x10948c0
	void Server_TryToCreateNewSquadForPlayer(WW3PlayerState* PlayerState);// 0x1094800
	void Server_ToogleLockSquad(int8 Team, int8 SquadIndex);// 0x1094710
	void Server_RequestKickPlayer(WW3PlayerState* InRequester, WW3PlayerState* InPlayerToKick);// 0x1094610
	void Server_ReplicateSound(SoundCue* SoundCue, Vector Location, WW3PlayerController* RemotePC);// 0x10944d0
	void Server_RemoveSquad(int8 Team, int8 SquadIndex);// 0x10943e0
	void Server_PromoteSpecificPlayer(WW3PlayerState* PlayerState);// 0x1094320
	void Server_CreateSquadAndAssignPlayer(WW3PlayerState* PlayerState);// 0x1094260
	void Server_ChangeTeam(WW3PlayerState* InPlayerState, byte InTeamID);// 0x1094160
	void Server_ChangeSquad(WW3PlayerState* PlayerState, int8 NewSquadIndex);// 0x1094060

--------------------------------
Class: WW3PlayerCustomDepthController.ActorComponent.Object
	WW3PlayerControllerBase* OwningPC;//[Offset: 0xf0, Size: 0x8]
	WW3ActorPool* ActorPool;//[Offset: 0xf8, Size: 0x8]
	WW3CustomDepthRequest[] Requests;//[Offset: 0x100, Size: 0x10]
	Actor*[] SpecificActorsCustomDepthEnabled;//[Offset: 0x110, Size: 0x10]
	void OnVehicleRegistered(WW3Vehicle* InVehicle);// 0x1048860
	void OnTeamableRegistered(interface classNone InTeamable);// 0x10487c0
	void OnRequesterDestroyed(Actor* InActor);// 0x1048740
	void OnCharacterRegistered(WW3Character* InCharacter);// 0x10484e0

--------------------------------
Class: WW3CustomDepthRequest
	Actor* Requester;//[Offset: 0x0, Size: 0x8]
	Actor*[] SpecificActors;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: WW3SuppressAndAdrenalineWidget.UserWidget.Widget.Visual.Object
	ProgressBar* AdrenalineProgressBar;//[Offset: 0x208, Size: 0x8]
	ProgressBar* SuppressProgressBar;//[Offset: 0x210, Size: 0x8]
	ProgressBar* ModifiedSuppressProgressBar;//[Offset: 0x218, Size: 0x8]
	ProgressBar* ConcussionProgressBar;//[Offset: 0x220, Size: 0x8]
	ProgressBar* BlindnessProgressBar;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: WW3AudioMediator.ActorComponent.Object
	WW3PlayerController* OwnerControler;//[Offset: 0xf0, Size: 0x8]
	WW3AudioMediatorData* AudioMediatorData;//[Offset: 0xf8, Size: 0x8]
	WW3EndMatchAudioLoopStrategyBase* EndMatchAudioLoopStrategy;//[Offset: 0x100, Size: 0x8]
	void OnProgressionPlayerLevelUpMessage();// 0xf40a10
	void OnProgressionItemUnlockMessageShown();// 0xf409f0
	void OnHUDTimerUpdate(int RemainingTime);// 0xf40970
	void OnGameMapModeChanged(enum NewMap, enum NewGameMode);// 0xf408b0
	void IsOwnerTeammate(WW3Character* OtherCharacter, bool ReturnValue);// 0xf40820
	void IsOwnerTeam(int8 Team, bool ReturnValue);// 0xf40790
	void IsOwner(WW3PlayerState* PlayerState, bool ReturnValue);// 0xf40700
	void GetOwnerPawn(WW3Character* ReturnValue);// 0xf406d0
	void FireEvent(enum Event);// 0xf40650

--------------------------------
Class: WW3EndMatchAudioLoopStrategyBase.Object

--------------------------------
Class: WW3InGameCustomizationDataManager.ActorComponent.Object
	void Server_SendData(WW3InGameCustomizationData NewInGameCustomizationData, InClientInventoryID(UInt64Property) InClientInventoryID, bool bInWillModifyInventory);// 0xff3010
	void Server_RequestData(enum InWeaponCategory, uint16 InRequestID, uint16 InClientLifeCounter);// 0xff2ee0
	void Client_OnRequestSucceeded(enum InWeaponCategory, uint16 InRequestID, uint16 InLifeCounter, uint16 InReplicatedStructID);// 0xff1be0
	void Client_OnRequestFailed(enum InWeaponCategory, uint16 InRequestID, uint16 InClientLifeCounter, uint16 InServerLifeCounter);// 0xff1aa0

--------------------------------
Class: WW3InGameCustomizationData
	enum WeaponCategory;//[Offset: 0x0, Size: 0x1]
	uint16 RequestID;//[Offset: 0x2, Size: 0x2]
	uint16 LifeCounter;//[Offset: 0x4, Size: 0x2]
	WW3InventoryWeapon* weapon;//[Offset: 0x8, Size: 0x8]
	WW3LoadoutWeaponState WeaponState;//[Offset: 0x10, Size: 0x70]
	WW3InGameCustomizationAttachmentDesc[] NonCustomizableAttachments;//[Offset: 0x80, Size: 0x10]
	WW3InventoryItem* Item;//[Offset: 0x90, Size: 0x8]
	WW3InGameCustomizationGadgetDesc SecondaryGadgetDesc;//[Offset: 0x98, Size: 0x20]
	WW3LoadoutBackpackState BACKPACK;//[Offset: 0xb8, Size: 0x50]

--------------------------------
Class: WW3LoadoutWeaponState.WW3PendingLoadoutWeaponState
	WW3InGameCustomizationAttachmentDesc UpperAttachment;//[Offset: 0x10, Size: 0x18]
	WW3InGameCustomizationAttachmentDesc UpperMinorAttachment;//[Offset: 0x28, Size: 0x18]
	WW3InGameCustomizationAttachmentDesc LowerAttachment;//[Offset: 0x40, Size: 0x18]
	WW3InGameCustomizationAttachmentDesc MuzzleAttachment;//[Offset: 0x58, Size: 0x18]

--------------------------------
Class: WW3PendingLoadoutWeaponState
	uint16 WeaponId;//[Offset: 0x8, Size: 0x2]
	enum ConfigType;//[Offset: 0xa, Size: 0x1]
	int ConfigId;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WW3InGameCustomizationAttachmentDesc.WW3InGameCustomizationBasicDesc
	uint16 DBSkinID;//[Offset: 0x10, Size: 0x2]

--------------------------------
Class: WW3InGameCustomizationBasicDesc
	uint16 DBItemID;//[Offset: 0x8, Size: 0x2]
	enum ItemType;//[Offset: 0xa, Size: 0x1]

--------------------------------
Class: WW3InGameCustomizationGadgetDesc.WW3InGameCustomizationBasicDesc
	int CurrentAmount;//[Offset: 0x10, Size: 0x4]
	int DefaultAmount;//[Offset: 0x14, Size: 0x4]
	enum Origin;//[Offset: 0x18, Size: 0x1]
	float AutoRegenerateRemaining;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: WW3LoadoutBackpackState
	WW3InGameCustomizationAttachmentDesc[] UpperDesciptors;//[Offset: 0x0, Size: 0x10]
	WW3InGameCustomizationAttachmentDesc[] UpperMinorDesciptors;//[Offset: 0x10, Size: 0x10]
	WW3InGameCustomizationAttachmentDesc[] LowerDescriptors;//[Offset: 0x20, Size: 0x10]
	WW3InGameCustomizationAttachmentDesc[] MuzzleDescriptors;//[Offset: 0x30, Size: 0x10]
	WW3InGameCustomizationGadgetDesc[] GadgetDescriptors;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: WW3VoiceChatManagerComponent.ActorComponent.Object
	WW3LocalTalker LocalTalker;//[Offset: 0xf0, Size: 0x18]
	WW3RemoteTalker[] RemoteTalkers;//[Offset: 0x108, Size: 0x10]
	WW3PlayerState* LocalPlayerState;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: WW3LocalTalker
	WW3PlayerState* PlayerState;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: WW3RemoteTalker

--------------------------------
Class: WW3ReplicatedInGameCustomizationData
	WW3PlayerController* PlayerControllerOwner;//[Offset: 0x0, Size: 0x8]
	uint16 StructID;//[Offset: 0x8, Size: 0x2]

--------------------------------
Class: WW3LoadoutsCabinet.Actor.Object
	WW3ProgressableMarker* MarkerComponent;//[Offset: 0x340, Size: 0x8]
	StaticMeshComponent* CabinetMeshComponent;//[Offset: 0x348, Size: 0x8]
	float InteractionTime;//[Offset: 0x350, Size: 0x4]
	int DefaultTeam;//[Offset: 0x354, Size: 0x4]
	float StrikePointsCostToUse;//[Offset: 0x358, Size: 0x4]
	bool bShouldWithdrawCostOnOpening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 0x1]

--------------------------------
Class: WW3AmbientEmittersManager.Actor.Object
	int TickFrameInterval;//[Offset: 0x330, Size: 0x4]
	WW3AmbientEmitter*[] Emitters;//[Offset: 0x340, Size: 0x10]
	void OnChangeLightingScenario(byte RoundPlayed);// 0xf2ffc0

--------------------------------
Class: WW3AmbientEmitter.Actor.Object
	WW3AkComponent* AkComponent;//[Offset: 0x330, Size: 0x8]
	AkAudioEvent* AkLoopSoundEffect;//[Offset: 0x338, Size: 0x8]
	enum SoundPriority;//[Offset: 0x340, Size: 0x1]
	enum AudibleDistance;//[Offset: 0x341, Size: 0x1]
	enum OcclusionRefreshRate;//[Offset: 0x342, Size: 0x1]
	float WorkDistance;//[Offset: 0x344, Size: 0x4]
	Volume*[] Volumes;//[Offset: 0x348, Size: 0x10]
	FName[] VoulumesTags;//[Offset: 0x358, Size: 0x10]
	void SetUpBP();// 0x1395e00

--------------------------------
Class: WW3OptimizationReport
	uint16 Actors;//[Offset: 0x0, Size: 0x2]
	uint16 Ticking_Actors;//[Offset: 0x2, Size: 0x2]
	uint16 AkSpatialAudioVolume_Actors;//[Offset: 0x4, Size: 0x2]
	uint16 AmbientSound_Actors;//[Offset: 0x6, Size: 0x2]
	uint16 Components;//[Offset: 0x8, Size: 0x2]
	uint16 Ticking_Components;//[Offset: 0xa, Size: 0x2]
	uint16 AkComponent_Components;//[Offset: 0xc, Size: 0x2]
	uint16 ParticleSystemComponent_Components;//[Offset: 0xe, Size: 0x2]
	uint16 AudioComponent_Components;//[Offset: 0x10, Size: 0x2]
	uint16 PrimitiveComponents;//[Offset: 0x12, Size: 0x2]
	uint16 GenerateOverlapEvents_PrimitiveComponents;//[Offset: 0x14, Size: 0x2]

--------------------------------
Class: WW3BotsDebugData
	WW3BotDebugData[] Bots;//[Offset: 0x0, Size: 0x10]
	FString[] FailuresHistory;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: WW3BotDebugData
	FString ControllerActorName;//[Offset: 0x0, Size: 0x10]
	FString ControllerRealPlayerOwnerActorName;//[Offset: 0x10, Size: 0x10]
	FString CharacterActorName;//[Offset: 0x20, Size: 0x10]
	FString PlayerStateActorName;//[Offset: 0x30, Size: 0x10]
	int TeamIndex;//[Offset: 0x40, Size: 0x4]
	int DistanceToPlayer;//[Offset: 0x44, Size: 0x4]
	Vector Location;//[Offset: 0x48, Size: 0xc]
	bool bIsAfterFirstSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bIsAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	enum LastDeathType;//[Offset: 0x56, Size: 0x1]
	FString TryToBindPlayerState_UseMasterServerData_Error;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: DateTime

--------------------------------
Class: WW3MarkerWidget.UserWidget.Widget.Visual.Object
	float ShadowOpacity;//[Offset: 0x208, Size: 0x4]
	Texture* NeutralMarkerShadow;//[Offset: 0x210, Size: 0x8]
	Texture* EnemyMarkerShadow;//[Offset: 0x218, Size: 0x8]
	Texture* AllyMarkerShadow;//[Offset: 0x220, Size: 0x8]
	TextBlock* NameTextBlock;//[Offset: 0x228, Size: 0x8]
	TextBlock* DistanceTextBlock;//[Offset: 0x230, Size: 0x8]
	TextBlock* TimeTextBlock;//[Offset: 0x238, Size: 0x8]
	Image* MarkerIcon;//[Offset: 0x240, Size: 0x8]
	Image* MarkerIconReversed;//[Offset: 0x248, Size: 0x8]
	Texture* CurrentIconTexture;//[Offset: 0x250, Size: 0x8]
	Texture* CurrentReversedTexture;//[Offset: 0x258, Size: 0x8]
	LinearColor CurrentColor;//[Offset: 0x260, Size: 0x10]
	Texture* CurrentTexture;//[Offset: 0x270, Size: 0x8]
	MaterialInstance* CurrentMaterialInstance;//[Offset: 0x278, Size: 0x8]
	MaterialInstance* CurrentMapMaterialInstance;//[Offset: 0x280, Size: 0x8]
	MaterialInstanceDynamic* CurrentMID;//[Offset: 0x288, Size: 0x8]
	MaterialInstanceDynamic* CurrentMapMID;//[Offset: 0x290, Size: 0x8]
	float CurrentOutlineProgress;//[Offset: 0x298, Size: 0x4]
	void SetMarkerString(FString NewValue);// 0x1395e00
	void RebuildMarker(PrimitiveComponent* Comp);// 0x10226e0
	void OnLocalPlayerStopsADS();// 0x1395e00
	void OnLocalPlayerStartsADS();// 0x1395e00
	void OnIsBlinkingChanged(bool bInNewIsBlinking, int InBlinksAmount);// 0x1395e00

--------------------------------
Class: WW3MarkerSettingsForRelationship
	bool bAvailableAtAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bRadialMenuAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	class WW3RadialEntityConfig* RadialConfigOverride;//[Offset: 0x8, Size: 0x8]
	float VisibilityDistance;//[Offset: 0x10, Size: 0x4]
	bool bOcclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float OcclusionIgnoreDistance;//[Offset: 0x18, Size: 0x4]
	float AlphaIncreaseSpeed;//[Offset: 0x1c, Size: 0x4]
	float AlphaDecreaseSpeed;//[Offset: 0x20, Size: 0x4]
	bool bAlwaysMarked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool bOverrideMarkedTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	float MarkedTimeOverride;//[Offset: 0x28, Size: 0x4]
	bool bShowOnCompass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bStayOnScreenEdge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	class WW3VehicleCompassMarker* CompassMarkerWidgetClassOverrie;//[Offset: 0x30, Size: 0x8]
	bool bUseStaticColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	LinearColor StaticColor;//[Offset: 0x3c, Size: 0x10]
	bool bShowDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bShowDistanceWhileLaser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool bShowName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]
	bool bShowNameEvenWhenNoFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f, Size: 0x1]
	float NameVisibilityDistance;//[Offset: 0x50, Size: 0x4]
	bool bShowOnMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bShowOnQuickMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	bool bShowOnStrikeMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1]
	bool bShowOnDeployMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57, Size: 0x1]
	bool bShouldPulseOnMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bShowProgressBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bWorldSpaceInteractable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	float WorldSpaceInteractMaxDistanceOverride;//[Offset: 0x5c, Size: 0x4]
	Vector2D WorldInteractionMarkerSurfaceScale;//[Offset: 0x60, Size: 0x8]
	bool bQuickMapInteractable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bStrikeMapInteractable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	bool bDeployMapInteractable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 0x1]
	bool bOverrideDefaultInteractName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b, Size: 0x1]
	bool bShouldBeHiddenIfLocalPlayerDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	FText DefaultInteractNameOverride;//[Offset: 0x70, Size: 0x18]
	Texture* TextureOverride;//[Offset: 0x88, Size: 0x28]
	Texture2D* IconTextureOverride;//[Offset: 0xb0, Size: 0x28]
	class WW3AdditionalMarkerSettings* AdditionalRelationsSettings;//[Offset: 0xd8, Size: 0x8]

--------------------------------
Class: WW3AdditionalMarkerSettings.Object

--------------------------------
Class: WW3MarkedForData
	int8 Team;//[Offset: 0x0, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	WW3PlayerController* MarkingPC;//[Offset: 0x8, Size: 0x8]
	bool bWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	enum MarkedType;//[Offset: 0x11, Size: 0x1]

--------------------------------
Class: WW3MarkersSingleton.Object
	class WW3MarkerConfig* DefaultMarkerConfig;//[Offset: 0x28, Size: 0x28]
	<class WW3MarkerConfig,None(None)> MarkersConfigs;//[Offset: 0x50, Size: 0x50]
	<Texture2D*,None(None)> CapturePoints;//[Offset: 0xa0, Size: 0x50]
	<Texture2D*,None(None)> GadgetsIcons;//[Offset: 0xf0, Size: 0x50]
	<Texture2D*,None(None)> GadgetsIconsInverted;//[Offset: 0x140, Size: 0x50]
	<WW3WorldMarkerSettings,None(None)> MarkerTypesSettings;//[Offset: 0x190, Size: 0x50]
	<Texture*,None(None)> MarkersShapesVersions;//[Offset: 0x1e0, Size: 0x50]
	<Texture2D*,None(None)> ArmorTypesIcons;//[Offset: 0x230, Size: 0x50]
	<Texture2D*,None(None)> HelpRequestsIcons;//[Offset: 0x280, Size: 0x50]
	<Texture2D*,None(None)> HelpRequestsIconsReversed;//[Offset: 0x2d0, Size: 0x50]
	class WW3ActorMarkerMDC* DefaultMarkerMapDrawingComponentClass;//[Offset: 0x320, Size: 0x28]
	Texture2D* RepairIcon;//[Offset: 0x348, Size: 0x8]
	Texture2D* AttackerRoleIcon;//[Offset: 0x350, Size: 0x28]
	Texture2D* DefenderRoleIcon;//[Offset: 0x378, Size: 0x28]
	Texture2D* BaseCapturePointIcon;//[Offset: 0x3a0, Size: 0x8]
	Texture2D* SuportCapturePointIcon;//[Offset: 0x3a8, Size: 0x8]
	Texture2D* MobileSpawnPointIcon;//[Offset: 0x3b0, Size: 0x8]
	Vector2D CapturingPointSize;//[Offset: 0x3b8, Size: 0x8]
	float CapturingPointYPosition;//[Offset: 0x3c0, Size: 0x4]
	<CurveFloat*,None(None)> PlayerMarkerOpacityOverDistanceCurvePerGM;//[Offset: 0x3c8, Size: 0x50]
	float PlayerMarkerTurnIntoDotDistanceThreshold;//[Offset: 0x418, Size: 0x4]
	float VehicleMarkerTurnIntoTriangleDistanceThreshold;//[Offset: 0x41c, Size: 0x4]
	float ScreenEdgeMarkerOffset;//[Offset: 0x420, Size: 0x4]
	float MarkersCircleTrajectoryRadius;//[Offset: 0x424, Size: 0x4]
	float MarkersScaleModifierOnCircle;//[Offset: 0x428, Size: 0x4]
	CurveFloat* MarkerSizeMultiplierOverFOVCurve;//[Offset: 0x430, Size: 0x8]
	float ReconCapturingPointYPosition;//[Offset: 0x438, Size: 0x4]
	class WW3WorldPositionMarker* WorldPositionMarkerClass;//[Offset: 0x440, Size: 0x8]
	MaterialInterface* ScopesWorldMarkersDistortion;//[Offset: 0x448, Size: 0x8]

--------------------------------
Class: WW3WorldMarkerSettings
	Texture2D* MarkerIcon;//[Offset: 0x0, Size: 0x28]
	enum DefaultMarkerConfigType;//[Offset: 0x28, Size: 0x1]
	<enum,None(None)> MarkerConfigTypePerGameMode;//[Offset: 0x30, Size: 0x50]
	FString WrapPlayerStringFront;//[Offset: 0x80, Size: 0x10]
	FString WrapPlayerStringBack;//[Offset: 0x90, Size: 0x10]
	FText MarkerString;//[Offset: 0xa0, Size: 0x18]
	float MarkerTime;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: BP_TSK_CaptureA2_C.BP_BaseTask_C.WW3TutorialTask.Actor.Object

--------------------------------
Class: BP_BaseTask_C.WW3TutorialTask.Actor.Object

--------------------------------
Class: WW3RecastNavMesh.RecastNavMesh.NavigationData.Actor.Object
	bool bForceRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 0x1]
	bool bDrawWalkPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a9, Size: 0x1]
	bool bDrawStandardJumpPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5aa, Size: 0x1]
	bool bDrawSpecialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ab, Size: 0x1]
	CapsuleSize[] SizeSteps;//[Offset: 0x5b0, Size: 0x10]
	class WW3Character* CharacterClass;//[Offset: 0x5c0, Size: 0x8]
	WW3PathNode*[] PathNodes;//[Offset: 0x5c8, Size: 0x10]

--------------------------------
Class: RecastNavMesh.NavigationData.Actor.Object
	bool bDrawTriangleEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4f0, Size: 0x1]
	bool bDrawPolyEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4f0, Size: 0x1]
	bool bDrawFilledPolys;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4f0, Size: 0x1]
	bool bDrawNavMeshEdges;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4f0, Size: 0x1]
	bool bDrawTileBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4f0, Size: 0x1]
	bool bDrawPathCollidingGeometry;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4f0, Size: 0x1]
	bool bDrawTileLabels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4f0, Size: 0x1]
	bool bDrawPolygonLabels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4f0, Size: 0x1]
	bool bDrawDefaultPolygonCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4f1, Size: 0x1]
	bool bDrawLabelsOnPathNodes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4f1, Size: 0x1]
	bool bDrawNavLinks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4f1, Size: 0x1]
	bool bDrawFailedNavLinks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4f1, Size: 0x1]
	bool bDrawClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4f1, Size: 0x1]
	bool bDrawOctree;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4f1, Size: 0x1]
	bool bDrawOctreeDetails;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4f1, Size: 0x1]
	bool bDistinctlyDrawTilesBeingBuilt;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4f1, Size: 0x1]
	bool bDrawNavMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4f2, Size: 0x1]
	float DrawOffset;//[Offset: 0x4f4, Size: 0x4]
	bool bFixedTilePoolSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4f8, Size: 0x1]
	int TilePoolSize;//[Offset: 0x4fc, Size: 0x4]
	float TileSizeUU;//[Offset: 0x500, Size: 0x4]
	float CellSize;//[Offset: 0x504, Size: 0x4]
	float CellHeight;//[Offset: 0x508, Size: 0x4]
	float AgentRadius;//[Offset: 0x50c, Size: 0x4]
	float AgentHeight;//[Offset: 0x510, Size: 0x4]
	float AgentMaxHeight;//[Offset: 0x514, Size: 0x4]
	float AgentMaxSlope;//[Offset: 0x518, Size: 0x4]
	float AgentMaxStepHeight;//[Offset: 0x51c, Size: 0x4]
	float MinRegionArea;//[Offset: 0x520, Size: 0x4]
	float MergeRegionSize;//[Offset: 0x524, Size: 0x4]
	float MaxSimplificationError;//[Offset: 0x528, Size: 0x4]
	int MaxSimultaneousTileGenerationJobsCount;//[Offset: 0x52c, Size: 0x4]
	int TileNumberHardLimit;//[Offset: 0x530, Size: 0x4]
	int PolyRefTileBits;//[Offset: 0x534, Size: 0x4]
	int PolyRefNavPolyBits;//[Offset: 0x538, Size: 0x4]
	int PolyRefSaltBits;//[Offset: 0x53c, Size: 0x4]
	Vector NavMeshOriginOffset;//[Offset: 0x540, Size: 0xc]
	float DefaultDrawDistance;//[Offset: 0x54c, Size: 0x4]
	float DefaultMaxSearchNodes;//[Offset: 0x550, Size: 0x4]
	float DefaultMaxHierarchicalSearchNodes;//[Offset: 0x554, Size: 0x4]
	byte RegionPartitioning;//[Offset: 0x558, Size: 0x1]
	byte LayerPartitioning;//[Offset: 0x559, Size: 0x1]
	int RegionChunkSplits;//[Offset: 0x55c, Size: 0x4]
	int LayerChunkSplits;//[Offset: 0x560, Size: 0x4]
	bool bSortNavigationAreasByCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x564, Size: 0x1]
	bool bPerformVoxelFiltering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x564, Size: 0x1]
	bool bMarkLowHeightAreas;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x564, Size: 0x1]
	bool bFilterLowSpanSequences;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x564, Size: 0x1]
	bool bFilterLowSpanFromTileCache;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x564, Size: 0x1]
	bool bDoFullyAsyncNavDataGathering;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x564, Size: 0x1]
	bool bUseBetterOffsetsFromCorners;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x564, Size: 0x1]
	bool bStoreEmptyTileLayers;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x564, Size: 0x1]
	bool bUseVirtualFilters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x565, Size: 0x1]
	bool bAllowNavLinkAsPathEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x565, Size: 0x1]
	bool bUseVoxelCache;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x565, Size: 0x1]
	float TileSetUpdateInterval;//[Offset: 0x568, Size: 0x4]
	float HeuristicScale;//[Offset: 0x56c, Size: 0x4]
	float VerticalDeviationFromGroundCompensation;//[Offset: 0x570, Size: 0x4]

--------------------------------
Class: CapsuleSize
	int Radius;//[Offset: 0x0, Size: 0x4]
	int Height;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WW3PathNode.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0x28, Size: 0x8]
	CapsuleSize MinPolyEdgeSize;//[Offset: 0x30, Size: 0x8]
	Polys(UInt64Property)[] Polys;//[Offset: 0x38, Size: 0x10]
	WW3PathLink[] Paths;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: WW3PathLink
	WW3PathNode* Start;//[Offset: 0x0, Size: 0x8]
	UInt64Property StartEdgePoly;//[Size: 0x8]
	WW3PathNode* End;//[Offset: 0x10, Size: 0x8]
	UInt64Property EndEdgePoly;//[Size: 0x8]
	AdditionalEdgePolys(UInt64Property)[] AdditionalEdgePolys;//[Offset: 0x20, Size: 0x10]
	int CollisionRadius;//[Offset: 0x30, Size: 0x4]
	int CollisionHeight;//[Offset: 0x34, Size: 0x4]
	int[] Distances;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: WW3_Tutorial_P_C.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x338, Size: 0x8]
	void ReceiveBeginPlay();// 0x1395e00
	void ExecuteUbergraph_WW3_Tutorial_P(int EntryPoint);// 0x1395e00

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: BP_TutorialGameMode_C.WW3TutorialGameMode.WW3TeamGameMode.WW3GameMode.GameMode.GameModeBase.Info.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0xf98, Size: 0x8]

--------------------------------
Class: WW3TutorialGameMode.WW3TeamGameMode.WW3GameMode.GameMode.GameModeBase.Info.Actor.Object
	float CaptureMultiplier;//[Offset: 0xf90, Size: 0x4]

--------------------------------
Class: BP_TutorialGameState_C.WW3TutorialGameState.WW3GameState.GameState.GameStateBase.Info.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x7d0, Size: 0x8]

--------------------------------
Class: WW3TutorialGameState.WW3GameState.GameState.GameStateBase.Info.Actor.Object

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: BP_TutorialPlayerController_01_C.WW3TutorialPlayerController.WW3GamePlayerController.WW3PlayerController.WW3PlayerControllerBase.ShooterPlayerController.PlayerController.Controller.Actor.Object
	void CreateSuppressAndAdrenalineWidget(WW3SuppressAndAdrenalineWidget* ReturnValue, BP_SuppressAndAdrenalineWidget_C* CallFunc_Create_ReturnValue);// 0x1395e00
	void UserConstructionScript();// 0x1395e00
	Rotator CharacterBaseRot;//[Offset: 0x16f0, Size: 0xc]

--------------------------------
Class: WW3TutorialPlayerController.WW3GamePlayerController.WW3PlayerController.WW3PlayerControllerBase.ShooterPlayerController.PlayerController.Controller.Actor.Object
	class WW3TutorialInfoWidget* TutoriaInfoWidgetClass;//[Offset: 0x16d8, Size: 0x8]
	WW3TutorialInfoWidget* TutorialInfoWidget;//[Offset: 0x16e0, Size: 0x8]

--------------------------------
Class: WW3TutorialInfoWidget.UserWidget.Widget.Visual.Object
	delegate EventOnSubtaskStarted;//[Offset: 0x208, Size: 0x10]
	delegate EventOnSubtaskCompleted;//[Offset: 0x218, Size: 0x10]

--------------------------------
Class: BP_SuppressAndAdrenalineWidget_C.WW3SuppressAndAdrenalineWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x230, Size: 0x8]
	void PreConstruct(bool IsDesignTime);// 0x1395e00
	void ExecuteUbergraph_BP_SuppressAndAdrenalineWidget(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x1395e00
	ProgressBar* ProgressBar;//[Offset: 0x238, Size: 0x8]
	ProgressBar* ProgressBar;//[Offset: 0x240, Size: 0x8]
	ProgressBar* ProgressBar;//[Offset: 0x248, Size: 0x8]
	ProgressBar* ProgressBar;//[Offset: 0x250, Size: 0x8]
	ProgressBar* ProgressBar;//[Offset: 0x258, Size: 0x8]

--------------------------------
Class: BP_WW3TutorialPlayerState_C.WW3TutorialPlayerState.WW3PlayerState.WW3PlayerStateBase.ShooterPlayerState.PlayerState.Info.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x9c8, Size: 0x8]

--------------------------------
Class: WW3TutorialPlayerState.WW3PlayerState.WW3PlayerStateBase.ShooterPlayerState.PlayerState.Info.Actor.Object

--------------------------------
Class: BP_TutorialHUD_C.BP_WW3DominationHUD_C.WW3DominationHUD.WW3HUD.HUD.Actor.Object

--------------------------------
Class: BP_WW3DominationHUD_C.WW3DominationHUD.WW3HUD.HUD.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0xbd8, Size: 0x8]

--------------------------------
Class: WW3DominationHUD.WW3HUD.HUD.Actor.Object

--------------------------------
Class: BP_PlayerPawn_01_C.WW3Character.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1630, Size: 0x8]
	void UserConstructionScript();// 0x1395e00
	void ReceiveTick(float DeltaSeconds);// 0x1395e00
	void ExecuteUbergraph_BP_PlayerPawn_01(int EntryPoint, float K2Node_Event_DeltaSeconds);// 0x1395e00
	WW3CrowdComponent* WW3Crowd;//[Offset: 0x1638, Size: 0x8]

--------------------------------
Class: WW3CrowdComponent.PathFollowingComponent.ActorComponent.Object
	float DefaultCylinderRadius;//[Offset: 0x2a0, Size: 0x4]
	float DefaultCylinderHalfHeight;//[Offset: 0x2a4, Size: 0x4]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x2a8, Size: 0x8]
	Vector CrowdAgentMoveDirection;//[Offset: 0x2b0, Size: 0xc]
	void SuspendCrowdSteering(bool bSuspend);// 0xf8c580

--------------------------------
Class: WW3SlimHubManager.WW3HubManagerBase.Actor.Object

--------------------------------
Class: BP_SatelliteCharacter_01_01_C.WW3SatelliteObject_Character.WW3SatelliteObject.Actor.Object

--------------------------------
Class: BP_M4_01_C.WW3InventoryWeapon.WW3InventoryItem.Actor.Object

--------------------------------
Class: BP_Glock17_01_C.WW3InventoryWeapon.WW3InventoryItem.Actor.Object

--------------------------------
Class: WW3PooledSound.Actor.Object
	WW3AkComponent* AudioComponent;//[Offset: 0x330, Size: 0x8]

--------------------------------
Class: BP_MedKit_01_C.WW3Gadget_MedKit.WW3GadgetThrowableRestore.WW3GadgetThrowable.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x540, Size: 0x8]
	void UserConstructionScript();// 0x1395e00
	void ReceiveBeginPlay();// 0x1395e00
	void ExecuteUbergraph_BP_MedKit_01(int EntryPoint, DateTime CallFunc_Today_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, DateTime CallFunc_GetDate_ReturnValue, int CallFunc_BreakDateTime_Year, int CallFunc_BreakDateTime_Month, int CallFunc_BreakDateTime_Day, int CallFunc_BreakDateTime_Hour, int CallFunc_BreakDateTime_Minute, int CallFunc_BreakDateTime_Second, int CallFunc_BreakDateTime_Millisecond, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue);// 0x1395e00
	StaticMesh* NewMeshMedKit;//[Offset: 0x548, Size: 0x8]
	MaterialInterface* NewMeshMaterial;//[Offset: 0x550, Size: 0x8]

--------------------------------
Class: WW3Gadget_MedKit.WW3GadgetThrowableRestore.WW3GadgetThrowable.Actor.Object
	WW3HealthRestoreComponentNew* HealthRestore;//[Offset: 0x530, Size: 0x8]

--------------------------------
Class: WW3HealthRestoreComponentNew.WW3RestoreComponentNew.SceneComponent.ActorComponent.Object

--------------------------------
Class: BP_AmmoPack_01_C.WW3Gadget_AmmoPack.WW3GadgetThrowableRestore.WW3GadgetThrowable.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x540, Size: 0x8]
	void UserConstructionScript();// 0x1395e00
	void ReceiveBeginPlay();// 0x1395e00
	void ExecuteUbergraph_BP_AmmoPack_01(int EntryPoint, DateTime CallFunc_Today_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, DateTime CallFunc_GetDate_ReturnValue, int CallFunc_BreakDateTime_Year, int CallFunc_BreakDateTime_Month, int CallFunc_BreakDateTime_Day, int CallFunc_BreakDateTime_Hour, int CallFunc_BreakDateTime_Minute, int CallFunc_BreakDateTime_Second, int CallFunc_BreakDateTime_Millisecond, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue);// 0x1395e00

--------------------------------
Class: WW3Gadget_AmmoPack.WW3GadgetThrowableRestore.WW3GadgetThrowable.Actor.Object
	WW3AmmoRestoreComponentNew* AmmoRestoreComponent;//[Offset: 0x530, Size: 0x8]

--------------------------------
Class: WW3AmmoRestoreComponentNew.WW3RestoreComponentNew.SceneComponent.ActorComponent.Object

--------------------------------
Class: BP_EquipmentPack_01_C.WW3Gadget_EquipmentPack.WW3GadgetThrowableRestore.WW3GadgetThrowable.Actor.Object

--------------------------------
Class: WW3Gadget_EquipmentPack.WW3GadgetThrowableRestore.WW3GadgetThrowable.Actor.Object
	WW3EquipmentRestoreComponentNew* EquipmentRestoreComponent;//[Offset: 0x530, Size: 0x8]
	FString CantInteractTeammateText;//[Offset: 0x538, Size: 0x10]

--------------------------------
Class: WW3EquipmentRestoreComponentNew.WW3RestoreComponentNew.SceneComponent.ActorComponent.Object
	enum[] EquipmentRestorationOrder;//[Offset: 0x290, Size: 0x10]

--------------------------------
Class: BP_UAVInventoryFlyEye_Insta_C.WW3InventoryGadgetUAVInsta.WW3InventoryGadgetStrike.WW3InventoryGadget.WW3InventoryItem.Actor.Object

--------------------------------
Class: BP_ArtilleryInventory_01_C.WW3InventoryGadgetArtillery.WW3InventoryGadgetMapPicker.WW3InventoryGadgetStrike.WW3InventoryGadget.WW3InventoryItem.Actor.Object

--------------------------------
Class: WW3InventoryGadgetArtillery.WW3InventoryGadgetMapPicker.WW3InventoryGadgetStrike.WW3InventoryGadget.WW3InventoryItem.Actor.Object
	class WW3ArtilleryBase* ArtilleryToSpawn;//[Offset: 0xa10, Size: 0x8]

--------------------------------
Class: BP_InventoryGadgetLandSlotPicker_01_C.BP_InventoryGadgetSlotPicker_01_C.WW3InventoryGadgetSlotPicker.WW3InventoryGadgetStrike.WW3InventoryGadget.WW3InventoryItem.Actor.Object

--------------------------------
Class: BP_InventoryGadgetSlotPicker_01_C.WW3InventoryGadgetSlotPicker.WW3InventoryGadgetStrike.WW3InventoryGadget.WW3InventoryItem.Actor.Object

--------------------------------
Class: BP_VH_Commando_02_C.BP_VH_LandVehicleWheeled_IFV_Default_01_C.WW3LandVehicleWheeledNEW.WW3LandVehicle.WW3Vehicle.WW3PawnStrike.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x17e8, Size: 0x8]
	void UserConstructionScript(SuspensionPhysics_Component*[] K2Node_MakeArray_Array, SuspensionPhysics_Component*[] K2Node_MakeArray_Array1, SuspensionPhysics_Component*[] K2Node_MakeArray_Array2);// 0x1395e00
	void ReceiveBeginPlay();// 0x1395e00
	void ExecuteUbergraph_BP_VH_Commando_02(int EntryPoint);// 0x1395e00
	WW3SeatExit* WW3SeatExitTop;//[Offset: 0x17f0, Size: 0x8]
	WW3SeatExit* WW3SeatExitDown;//[Offset: 0x17f8, Size: 0x8]
	WW3SeatExit* WW3SeatExitRightRear;//[Offset: 0x1800, Size: 0x8]
	WW3SeatExit* WW3SeatExitLeftRear;//[Offset: 0x1808, Size: 0x8]
	WW3SeatExit* WW3SeatExitRear;//[Offset: 0x1810, Size: 0x8]
	WW3SeatExit* WW3SeatExitRightFront;//[Offset: 0x1818, Size: 0x8]
	WW3SeatExit* WW3SeatExitLeftFront;//[Offset: 0x1820, Size: 0x8]
	WW3SeatExit* WW3SeatExitFront;//[Offset: 0x1828, Size: 0x8]
	WW3SeatExit* WW3SeatExitRightMiddle2;//[Offset: 0x1830, Size: 0x8]
	WW3SeatExit* WW3SeatExitRightMiddle1;//[Offset: 0x1838, Size: 0x8]
	WW3SeatExit* WW3SeatExitRightMiddle;//[Offset: 0x1840, Size: 0x8]
	WW3SeatExit* WW3SeatExitLeftMiddle2;//[Offset: 0x1848, Size: 0x8]
	WW3SeatExit* WW3SeatExitLeftMiddle1;//[Offset: 0x1850, Size: 0x8]
	WW3SeatExit* WW3SeatExitLeftMiddle;//[Offset: 0x1858, Size: 0x8]
	WW3SeatPossessable* WW3SeatPossessableRCWS;//[Offset: 0x1860, Size: 0x8]
	WW3SeatSticky* WW3SeatTowerAsSticky;//[Offset: 0x1868, Size: 0x8]
	WW3SeatSticky* WW3SeatSticky5;//[Offset: 0x1870, Size: 0x8]
	WW3SeatSticky* WW3SeatSticky4;//[Offset: 0x1878, Size: 0x8]
	WW3SeatSticky* WW3SeatSticky3;//[Offset: 0x1880, Size: 0x8]
	LandVehicle_EngineComponent* LandVehicle_Engine;//[Offset: 0x1888, Size: 0x8]
	WheelManager_Component* WheelManager_;//[Offset: 0x1890, Size: 0x8]
	LandVehicle_DragComponent* LandVehicle_Drag;//[Offset: 0x1898, Size: 0x8]
	SuspensionPhysics_Component* R2;//[Offset: 0x18a0, Size: 0x8]
	SuspensionPhysics_Component* R1;//[Offset: 0x18a8, Size: 0x8]
	SuspensionPhysics_Component* L2;//[Offset: 0x18b0, Size: 0x8]
	SuspensionPhysics_Component* L1;//[Offset: 0x18b8, Size: 0x8]
	WW3SeatPossessable* WW3SeatPossessableDriver;//[Offset: 0x18c0, Size: 0x8]
	float ForwardForce;//[Offset: 0x18c8, Size: 0x4]
	float Speed;//[Offset: 0x18cc, Size: 0x4]
	float WheelRadius;//[Offset: 0x18d0, Size: 0x4]
	float DownForce;//[Offset: 0x18d4, Size: 0x4]

--------------------------------
Class: BP_VH_LandVehicleWheeled_IFV_Default_01_C.WW3LandVehicleWheeledNEW.WW3LandVehicle.WW3Vehicle.WW3PawnStrike.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x17d0, Size: 0x8]
	void UserConstructionScript();// 0x1395e00
	void ReceiveBeginPlay();// 0x1395e00
	void ExecuteUbergraph_BP_VH_LandVehicleWheeled_IFV_Default_01(int EntryPoint);// 0x1395e00
	float SpeedAccumulator;//[Offset: 0x17d8, Size: 0x4]
	int ExamplesCounter;//[Offset: 0x17dc, Size: 0x4]
	float finalSpeed;//[Offset: 0x17e0, Size: 0x4]
	float NewSpeed;//[Offset: 0x17e4, Size: 0x4]

--------------------------------
Class: WW3LandVehicleWheeledNEW.WW3LandVehicle.WW3Vehicle.WW3PawnStrike.Pawn.Actor.Object
	WW3LandVehicleWheeledSM* SoundManager;//[Offset: 0x1708, Size: 0x8]
	LandVehicle_EngineComponent* ServerEngineComponent;//[Offset: 0x1720, Size: 0x8]
	WheelManager_Component* ServerWheelManager;//[Offset: 0x1728, Size: 0x8]
	bool bRotateWheelsSideways;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1740, Size: 0x1]
	float VisualsUpdateFrequency;//[Offset: 0x1760, Size: 0x4]
	float LastVisualsUpdateTime;//[Offset: 0x1764, Size: 0x4]
	float MaxSteeringWheelHalfAngle;//[Offset: 0x1768, Size: 0x4]
	float SteeringSensitivity;//[Offset: 0x176c, Size: 0x4]
	float CurrentSteeringAngleInterpolated;//[Offset: 0x1770, Size: 0x4]
	float CurrentSteeringWheelDeviation;//[Offset: 0x1774, Size: 0x4]
	ClientSidePrediction_Component* StoredPredictionComponent;//[Offset: 0x1778, Size: 0x8]
	LandVehicle_DragComponent* StoredDragComponent;//[Offset: 0x1780, Size: 0x8]
	PrimitiveComponent* MeshComponent;//[Offset: 0x1788, Size: 0x8]
	WheelManager_Component* StoredWheelManager;//[Offset: 0x1790, Size: 0x8]
	LandVehicle_EngineComponent* StoredEngineComponent;//[Offset: 0x1798, Size: 0x8]
	enum MovementReplicationMethod;//[Offset: 0x17a0, Size: 0x1]
	WW3LandVehicleWheeledData* LandVehicleWheeledDataPointer;//[Offset: 0x17a8, Size: 0x8]
	WW3LandVehicleWheeledSimComp* LandVehicleWheeledSimCompPointer;//[Offset: 0x17b0, Size: 0x8]
	void UpdateComponents(LandVehicle_EngineComponent* Engine, WheelManager_Component* Manager);// 0x1014ea0
	void SetSteering(float Steering);// 0x1014920
	void SetHandbrake(bool Handbrake);// 0x10147c0
	void SetEngineThrottle(float ThrottleInput);// 0x1014740
	void InitializeAllSystems();// 0x1014370

--------------------------------
Class: WW3LandVehicle.WW3Vehicle.WW3PawnStrike.Pawn.Actor.Object
	SkeletalMeshComponent* VisualSkeletalMesh;//[Offset: 0x12d8, Size: 0x8]
	StaticMeshComponent* VisualStaticMesh;//[Offset: 0x12e0, Size: 0x8]
	StaticMesh* VisualStaticMeshBaked;//[Offset: 0x12e8, Size: 0x28]
	WW3LandVehicleData* LandVehicleDataPointer;//[Offset: 0x1320, Size: 0x8]
	WW3LandVehicleEM* EffectsManager;//[Offset: 0x1328, Size: 0x8]
	WW3LandVehicleAxisEffectsData AxisEffectsDataL;//[Offset: 0x1330, Size: 0x48]
	WW3LandVehicleAxisEffectsData AxisEffectsDataR;//[Offset: 0x1378, Size: 0x48]
	StaticMeshComponent*[] WheelsLookL;//[Offset: 0x13c0, Size: 0x10]
	StaticMeshComponent*[] WheelsLookR;//[Offset: 0x13d0, Size: 0x10]
	VehicleDrivingParams LeftAxisDrivingParams;//[Offset: 0x13e0, Size: 0x4]
	VehicleDrivingParams RightAxisDrivingParams;//[Offset: 0x13e4, Size: 0x4]
	WW3PhysicalMaterialWrapper* LeftAxisWrapper;//[Offset: 0x13e8, Size: 0x8]
	WW3PhysicalMaterialWrapper* RightAxisWrapper;//[Offset: 0x13f0, Size: 0x8]
	float SuspensionDisplacementL;//[Offset: 0x13f8, Size: 0x4]
	float SuspensionDisplacementR;//[Offset: 0x13fc, Size: 0x4]
	WW3BoneProxyData[] AnimWheelsData;//[Offset: 0x1400, Size: 0x10]
	WW3BoneProxyData[] AnimSuspensionData;//[Offset: 0x1410, Size: 0x10]
	WW3BoneProxyData AnimSteeringWheelData;//[Offset: 0x1420, Size: 0x30]
	WW3BoneProxyRotation[] WheelsRotation;//[Offset: 0x1450, Size: 0x10]
	float InterpSpeedL;//[Offset: 0x1460, Size: 0x4]
	float InterpSpeedR;//[Offset: 0x1464, Size: 0x4]
	float LastInterpSpeedL;//[Offset: 0x1468, Size: 0x4]
	float LastInterpSpeedR;//[Offset: 0x146c, Size: 0x4]
	WW3WheelAndSuspensionSave[] WheelAndSuspensionSaveL;//[Offset: 0x1478, Size: 0x10]
	WW3WheelAndSuspensionSave[] WheelAndSuspensionSaveR;//[Offset: 0x1488, Size: 0x10]
	bool bIsUsingAsyncWheelSnapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a0, Size: 0x1]
	float[] TargetSuspensionHeights;//[Offset: 0x14a8, Size: 0x10]
	bool bCreateCapsuleMovementComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c8, Size: 0x1]
	CapsuleMovementComponent* CapsuleMovementComponent;//[Offset: 0x14d0, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x14d8, Size: 0x8]
	void Server_PerformJump();// 0x10112f0
	void RotateWheels(float InSpeed, float RotationSpeedModifier, StaticMeshComponent*[] InWheelsToRotate, bool[] InWheelsDestroyed);// 0x1011150
	void OnVisualStaticMeshLoaded();// 0x1011130

--------------------------------
Class: WW3LandVehicleWheeledSM.WW3LandVehicleSM.WW3VehicleSM.ActorComponent.Object

--------------------------------
Class: WW3LandVehicleSM.WW3VehicleSM.ActorComponent.Object
	WW3LandVehicleSMData* LandVehicleSMDataPointer;//[Offset: 0x1b8, Size: 0x8]
	WW3LandVehicle* LandVehicle;//[Offset: 0x1c0, Size: 0x8]
	WW3PhysicalMaterialWrapper* LatestPMW;//[Offset: 0x268, Size: 0x8]
	AkAudioEvent* LatestAdvancedEngineSurfaceAkEvent;//[Offset: 0x270, Size: 0x8]

--------------------------------
Class: WW3LandVehicleSMData.WW3VehicleSMData.Object
	AkAudioEvent* AxisSoundAk;//[Offset: 0x210, Size: 0x8]
	AkAudioEvent* HornSoundAk;//[Offset: 0x218, Size: 0x8]
	AkAudioEvent* InviteSoundAk;//[Offset: 0x220, Size: 0x8]
	AkAudioEvent* SuspensionSmallImpactEvent;//[Offset: 0x228, Size: 0x8]
	AkAudioEvent* SuspensionBigImpactEvent;//[Offset: 0x230, Size: 0x8]
	AkAudioEvent* SuspensionImpactAkEvent_Small_Advanced;//[Offset: 0x238, Size: 0x8]
	AkAudioEvent* SuspensionImpactAkEvent_Big_Advanced;//[Offset: 0x240, Size: 0x8]
	float EngineUsage_SpeedProportion;//[Offset: 0x248, Size: 0x4]
	float EngineUsage_ClimbingProportion;//[Offset: 0x24c, Size: 0x4]
	float EngineUsage_SlidingProportion;//[Offset: 0x250, Size: 0x4]
	float MaxClimbingAngle;//[Offset: 0x254, Size: 0x4]
	float MaxSlidingAngle;//[Offset: 0x258, Size: 0x4]
	float VehicleTypeMaxSpeedAbsolute;//[Offset: 0x25c, Size: 0x4]
	float VehicleTypeMaxSpeedAbsolute_ClimbingProportion;//[Offset: 0x260, Size: 0x4]
	float VehicleTypeSpeedAbsolute_IncreaseForSteeringInput;//[Offset: 0x264, Size: 0x4]
	float EngineUsage_MinUsageForRightInput;//[Offset: 0x268, Size: 0x4]
	float PropertyVariance_EngineUsage_Min;//[Offset: 0x26c, Size: 0x4]
	float PropertyVariance_EngineUsage_Max;//[Offset: 0x270, Size: 0x4]
	float PropertyVariance_VehicleTypeMaxSpeedPercentage_Min;//[Offset: 0x274, Size: 0x4]
	float PropertyVariance_VehicleTypeMaxSpeedPercentage_Max;//[Offset: 0x278, Size: 0x4]
	float SuspensionMovement_ForwardRotation_ChangePerSecond_Max;//[Offset: 0x27c, Size: 0x4]
	float SuspensionMovement_SideRotation_ChangePerSecond_Max;//[Offset: 0x280, Size: 0x4]
	float SuspensionMovement_Handbrake_Max;//[Offset: 0x284, Size: 0x4]
	float SuspensionMovement_Percentage_InterpolationSpeed_Increase;//[Offset: 0x288, Size: 0x4]
	float SuspensionMovement_Percentage_InterpolationSpeed_Decrease;//[Offset: 0x28c, Size: 0x4]
	float Rotating_Turret_InterpolationSpeed_Increase;//[Offset: 0x290, Size: 0x4]
	float Rotating_Turret_InterpolationSpeed_Decrease;//[Offset: 0x294, Size: 0x4]
	float Rotating_Turret_MinRequiredRotationTime;//[Offset: 0x298, Size: 0x4]
	float Rotating_Turret_DotProductErrorTolerance;//[Offset: 0x29c, Size: 0x4]
	float Rotating_Cannon_InterpolationSpeed_Increase;//[Offset: 0x2a0, Size: 0x4]
	float Rotating_Cannon_InterpolationSpeed_Decrease;//[Offset: 0x2a4, Size: 0x4]
	float Rotating_Cannon_MinRequiredRotationTime;//[Offset: 0x2a8, Size: 0x4]
	float Rotating_Cannon_DotProductErrorTolerance;//[Offset: 0x2ac, Size: 0x4]
	float Rotating_RCWS_InterpolationSpeed_Increase;//[Offset: 0x2b0, Size: 0x4]
	float Rotating_RCWS_InterpolationSpeed_Decrease;//[Offset: 0x2b4, Size: 0x4]
	float Rotating_RCWS_MinRequiredRotationTime;//[Offset: 0x2b8, Size: 0x4]
	float Rotating_RCWS_DotProductErrorTolerance;//[Offset: 0x2bc, Size: 0x4]
	float Rotating_Periscope_InterpolationSpeed_Increase;//[Offset: 0x2c0, Size: 0x4]
	float Rotating_Periscope_InterpolationSpeed_Decrease;//[Offset: 0x2c4, Size: 0x4]
	float Rotating_Periscope_MinRequiredRotationTime;//[Offset: 0x2c8, Size: 0x4]
	float Rotating_Periscope_DotProductErrorTolerance;//[Offset: 0x2cc, Size: 0x4]
	float RTPC_SuspensionDisplacement_Multiplier;//[Offset: 0x2d0, Size: 0x4]
	bool bHasGearbox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	WW3EnginePitchCalculator EnginePitchCalculator;//[Offset: 0x2d8, Size: 0x50]

--------------------------------
Class: LandVehicle_EngineComponent.ActorComponent.Object
	delegate GearChangeStarted;//[Offset: 0x100, Size: 0x10]
	delegate GearChangeCompleted;//[Offset: 0x110, Size: 0x10]
	bool bApplyRPMFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1]
	bool bShowDebugValues;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x120, Size: 0x1]
	PrimitiveComponent* Mesh;//[Offset: 0x128, Size: 0x8]
	CurveFloat* TorqueCurve;//[Offset: 0x130, Size: 0x8]
	bool AutomaticGearbox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	float ReverseSpeed;//[Offset: 0x13c, Size: 0x4]
	float MaxSpeedInReverse;//[Offset: 0x140, Size: 0x4]
	float MaxForwardSpeed;//[Offset: 0x144, Size: 0x4]
	float MaxRPM;//[Offset: 0x148, Size: 0x4]
	float RPMMultiplier;//[Offset: 0x14c, Size: 0x4]
	float EngineNeutralRevTime;//[Offset: 0x150, Size: 0x4]
	float TransmissionEfficiency;//[Offset: 0x154, Size: 0x4]
	float DifferentialRatio;//[Offset: 0x158, Size: 0x4]
	float EngineShaft_SlowdownMultiplier;//[Offset: 0x15c, Size: 0x4]
	float GearChangeTime;//[Offset: 0x160, Size: 0x4]
	float ThrottleSensitivity;//[Offset: 0x164, Size: 0x4]
	Gears[] Gears;//[Offset: 0x168, Size: 0x10]
	SuspensionPhysics_Component*[] DriveWheels;//[Offset: 0x178, Size: 0x10]
	SuspensionPhysics_Component*[] Allwheels;//[Offset: 0x188, Size: 0x10]
	float RPM;//[Offset: 0x198, Size: 0x4]
	Gears CurrentGear;//[Offset: 0x1a0, Size: 0x28]
	float Speed;//[Offset: 0x1d4, Size: 0x4]
	float SpeedKPH;//[Offset: 0x1d8, Size: 0x4]
	void SetGearNumber(int GearNumber);// 0x3be9d0
	void SetEngineThrottleInput(float ThrottleInput, float SteeringInput);// 0x3be910
	void GearUp();// 0x3be5d0
	void GearDown();// 0x3be5b0

--------------------------------
Class: Gears
	float GearRatio;//[Offset: 0x0, Size: 0x4]
	float GearUpRatio;//[Offset: 0x4, Size: 0x4]
	float GearDownRatio;//[Offset: 0x8, Size: 0x4]
	FString GearName;//[Offset: 0x10, Size: 0x10]
	int GearNumber;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: SuspensionPhysics_Component.SceneComponent.ActorComponent.Object
	enum CurrentVehicleWheelsMode;//[Offset: 0x248, Size: 0x1]
	HitResult GroundHitResult;//[Offset: 0x250, Size: 0x88]
	bool Debug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool bDebugShowForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	bool bDebugDisableOutsideWidthIgnoreCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1]
	Vector DrawForcesOffset;//[Offset: 0x2dc, Size: 0xc]
	bool AffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	float ForwardRotationMultiplier;//[Offset: 0x2f0, Size: 0x4]
	FrictionData FrictionData;//[Offset: 0x2f4, Size: 0x18]
	StaticMesh* WheelMeshComponent;//[Offset: 0x318, Size: 0x8]
	StaticMesh* CollisionMesh;//[Offset: 0x320, Size: 0x8]
	float Scale;//[Offset: 0x334, Size: 0x4]
	Vector WheelOffset;//[Offset: 0x338, Size: 0xc]
	bool IsDriveWheel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1]
	bool bPivotTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 0x1]
	float PivotFactor;//[Offset: 0x348, Size: 0x4]
	float InAirWheelRotationMultiplier;//[Offset: 0x34c, Size: 0x4]
	float AckermanRatio;//[Offset: 0x350, Size: 0x4]
	float TireWidth;//[Offset: 0x354, Size: 0x4]
	bool InvertAckermanSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	bool DoNotUseRestPositionAsCamberNeautralPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 0x1]
	float NormalSteeringAngle;//[Offset: 0x35c, Size: 0x4]
	CurveFloat* SteeringCurve;//[Offset: 0x360, Size: 0x8]
	CurveFloat* GripCurve_Speed;//[Offset: 0x378, Size: 0x8]
	bool SpeedGrip_IgnoreSteeringAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	bool UseHandbrakeGripCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 0x1]
	CurveFloat* HandbrakeGripCurve;//[Offset: 0x388, Size: 0x8]
	bool Handbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	float Handbrake_Multiplier;//[Offset: 0x394, Size: 0x4]
	float Handbrake_Grip;//[Offset: 0x398, Size: 0x4]
	float Handbrake_GripLimit;//[Offset: 0x39c, Size: 0x4]
	float BrakingForce;//[Offset: 0x3a0, Size: 0x4]
	float BrakingForce_Multiplier;//[Offset: 0x3a4, Size: 0x4]
	float MaxBrakingForce;//[Offset: 0x3a8, Size: 0x4]
	float SuspensionStiffness;//[Offset: 0x3ac, Size: 0x4]
	float Multiplier;//[Offset: 0x3b0, Size: 0x4]
	float Damping;//[Offset: 0x3b4, Size: 0x4]
	float TireRadius;//[Offset: 0x3b8, Size: 0x4]
	float SuspensionLength;//[Offset: 0x3bc, Size: 0x4]
	float RestPosition;//[Offset: 0x3c0, Size: 0x4]
	float StickyTiresSpeedMultiplier;//[Offset: 0x3c4, Size: 0x4]
	float StickyTiresMaxForceMultiplier;//[Offset: 0x3c8, Size: 0x4]
	float StickyTiresRollingResistanceMultiplier;//[Offset: 0x3cc, Size: 0x4]
	float CorneringStiffness;//[Offset: 0x3d0, Size: 0x4]
	float MaxLat;//[Offset: 0x3d4, Size: 0x4]
	float SeeringSensitivity;//[Offset: 0x3d8, Size: 0x4]
	float SeeringFrictionMultiplier;//[Offset: 0x3dc, Size: 0x4]
	float MinGrip;//[Offset: 0x3e0, Size: 0x4]
	float FullThrottleSlipRatio;//[Offset: 0x3e4, Size: 0x4]
	float FullThrottleSlipRatioReverse;//[Offset: 0x3e8, Size: 0x4]
	float FullThrottleSlipLimit;//[Offset: 0x3ec, Size: 0x4]
	bool ApplyForceAtContactPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 0x1]
	float ForceOffset;//[Offset: 0x3f4, Size: 0x4]
	float SlipMultiplier;//[Offset: 0x3f8, Size: 0x4]
	float CompressionGripRatioMax;//[Offset: 0x3fc, Size: 0x4]
	float CompressionGripRatioMin;//[Offset: 0x400, Size: 0x4]
	float EngineForce;//[Offset: 0x404, Size: 0x4]
	float WheelRollingResistance;//[Offset: 0x408, Size: 0x4]
	float MinDrivewheelGrip;//[Offset: 0x40c, Size: 0x4]
	float Roll;//[Offset: 0x410, Size: 0x4]
	float RollB;//[Offset: 0x414, Size: 0x4]
	float MaxSpring;//[Offset: 0x418, Size: 0x4]
	SuspensionPhysics_Component* RightSuspensionComponent;//[Offset: 0x420, Size: 0x8]
	SuspensionPhysics_Component* OtherSuspensionComponent;//[Offset: 0x428, Size: 0x8]
	bool HasEngineComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 0x1]
	HitResult Hit;//[Offset: 0x438, Size: 0x88]
	bool bCanCharacterStepUpOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 0x1]
	float LastWheelRelativePositionZ;//[Offset: 0x4c4, Size: 0x4]
	float CurrentWheelRelativePositionZ;//[Offset: 0x4c8, Size: 0x4]
	float WheelRelativePositionZChange;//[Offset: 0x4cc, Size: 0x4]
	float ForceMultiplierFromParent;//[Offset: 0x4d0, Size: 0x4]
	Pawn* Owner;//[Offset: 0x4d8, Size: 0x8]
	float Compression;//[Offset: 0x52c, Size: 0x4]
	float Angle;//[Offset: 0x540, Size: 0x4]
	float CamberCompression;//[Offset: 0x568, Size: 0x4]
	Vector SuspensionLocation;//[Offset: 0x578, Size: 0xc]
	float AckermanLeftSide;//[Offset: 0x590, Size: 0x4]
	float AckermanRightSide;//[Offset: 0x594, Size: 0x4]
	StaticMeshComponent* WheelCollision;//[Offset: 0x598, Size: 0x8]
	PrimitiveComponent* Mesh;//[Offset: 0x5a0, Size: 0x8]
	HitResult AsyncTraceHit;//[Offset: 0x5a8, Size: 0x88]
	World* TraceWorld;//[Offset: 0x648, Size: 0x8]
	void SetWheelData(WheelDataStruct Data);// 0x3becf0
	void SetSteering(float Steering);// 0x3bebf0
	void SetMesh(PrimitiveComponent* Mesh_Input);// 0x3beb70
	void SetHandbrake(bool HandbrakeInput);// 0x3bea50
	void SetDriveForce(float ForceInput);// 0x3be890
	void SetBrakingForce(float ForceInput);// 0x3be810
	void GetWheelSuspensionOffset(float ReturnValue);// 0x3be6e0
	void GetWheelLocation(Vector ReturnValue);// 0x3be6a0
	void GetWheelData(WheelDataStruct ReturnValue);// 0x3be5f0
	void DestroyWheel();// 0x3be590
	void CreateConstraint();// 0x3be570

--------------------------------
Class: FrictionData
	float SidewaysSlip;//[Offset: 0x0, Size: 0x4]
	float SidewaysForceApplied;//[Offset: 0x4, Size: 0x4]
	float BrakingForceApplied;//[Offset: 0x8, Size: 0x4]
	float WheelSpin;//[Offset: 0xc, Size: 0x4]
	float WheelTorque;//[Offset: 0x10, Size: 0x4]
	bool HandbrakeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: WheelDataStruct
	Vector VisualWheelOffset;//[Offset: 0x0, Size: 0xc]
	bool DoNotUseRestPositionAsCamberNeautralPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool UseHandbrakeGripCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	CurveFloat* HandbrakeGripCurve;//[Offset: 0x10, Size: 0x8]
	Vector WheelOffset;//[Offset: 0x18, Size: 0xc]
	bool Debug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool AffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	StaticMesh* WheelMeshComponent;//[Offset: 0x28, Size: 0x8]
	float Scale;//[Offset: 0x30, Size: 0x4]
	bool IsDriveWheel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	float AckermanRatio;//[Offset: 0x38, Size: 0x4]
	bool InvertAckermanSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	float NormalSteeringAngle;//[Offset: 0x40, Size: 0x4]
	CurveFloat* SteeringCurve;//[Offset: 0x48, Size: 0x8]
	bool Handbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	float Handbrake_Multiplier;//[Offset: 0x54, Size: 0x4]
	float Handbrake_Grip;//[Offset: 0x58, Size: 0x4]
	float Handbrake_GripLimit;//[Offset: 0x5c, Size: 0x4]
	float BrakingForce;//[Offset: 0x60, Size: 0x4]
	float BrakingForce_Multiplier;//[Offset: 0x64, Size: 0x4]
	float MaxBrakingForce;//[Offset: 0x68, Size: 0x4]
	float SuspensionStiffness;//[Offset: 0x6c, Size: 0x4]
	float Multiplier;//[Offset: 0x70, Size: 0x4]
	float Damping;//[Offset: 0x74, Size: 0x4]
	float TireRadius;//[Offset: 0x78, Size: 0x4]
	float SuspensionLength;//[Offset: 0x7c, Size: 0x4]
	float RestPosition;//[Offset: 0x80, Size: 0x4]
	float StickyTiresActivationSpeed;//[Offset: 0x84, Size: 0x4]
	float StickyTiresSpeedMultiplier;//[Offset: 0x88, Size: 0x4]
	float StickyTiresMaxForceMultiplier;//[Offset: 0x8c, Size: 0x4]
	float StickyTiresRollingResistanceMultiplier;//[Offset: 0x90, Size: 0x4]
	float CorneringStiffness;//[Offset: 0x94, Size: 0x4]
	float MaxLat;//[Offset: 0x98, Size: 0x4]
	float SeeringSensitivity;//[Offset: 0x9c, Size: 0x4]
	float SeeringFrictionMultiplier;//[Offset: 0xa0, Size: 0x4]
	float MinGrip;//[Offset: 0xa4, Size: 0x4]
	bool ApplyForceAtContactPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	float SlipMultiplier;//[Offset: 0xac, Size: 0x4]
	float CompressionGripRatioMax;//[Offset: 0xb0, Size: 0x4]
	float CompressionGripRatioMin;//[Offset: 0xb4, Size: 0x4]
	float EngineForce;//[Offset: 0xb8, Size: 0x4]
	float WheelRollingResistance;//[Offset: 0xbc, Size: 0x4]
	float MinDrivewheelGrip;//[Offset: 0xc0, Size: 0x4]
	float Roll;//[Offset: 0xc4, Size: 0x4]
	float RollB;//[Offset: 0xc8, Size: 0x4]
	float MaxSpring;//[Offset: 0xcc, Size: 0x4]
	float FullThrottleSlipRatio;//[Offset: 0xd0, Size: 0x4]
	float FullThrottleSlipRatioReverse;//[Offset: 0xd4, Size: 0x4]
	float FullThrottleSlipLimit;//[Offset: 0xd8, Size: 0x4]
	bool HasEngineComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]

--------------------------------
Class: WheelManager_Component.ActorComponent.Object
	float StickyTiresMultiplier;//[Offset: 0xf0, Size: 0x4]
	float StickyTiresActivationSpeed;//[Offset: 0xf4, Size: 0x4]
	float StickyTiresHandbrakeMultiplier;//[Offset: 0xf8, Size: 0x4]
	float LockdownActivationSpeed;//[Offset: 0xfc, Size: 0x4]
	float LockdownMultiplier;//[Offset: 0x100, Size: 0x4]
	SuspensionPhysics_Component*[] SteeringWheels;//[Offset: 0x108, Size: 0x10]
	SuspensionPhysics_Component*[] HandbrakeWheels;//[Offset: 0x118, Size: 0x10]
	SuspensionPhysics_Component*[] Wheels;//[Offset: 0x128, Size: 0x10]
	SuspensionPhysics_Component*[] LeftSide;//[Offset: 0x138, Size: 0x10]
	SuspensionPhysics_Component*[] RightSide;//[Offset: 0x148, Size: 0x10]
	PrimitiveComponent* Mesh;//[Offset: 0x178, Size: 0x8]
	void SetSteering(float SteeringInput);// 0x3bec70
	void SetHandbrake(bool HandbrakeInput);// 0x3beae0
	void AddWheel(WheelDataStruct WheelData, SuspensionPhysics_Component* ReturnValue);// 0x3be1f0

--------------------------------
Class: ClientSidePrediction_Component.ActorComponent.Object
	PrimitiveComponent* BPMesh;//[Offset: 0xf0, Size: 0x8]
	WheelManager_Component* WheelManager;//[Offset: 0xf8, Size: 0x8]
	SuspensionPhysics_Component*[] Allwheels;//[Offset: 0x100, Size: 0x10]
	LandVehicle_EngineComponent* EngineComponent;//[Offset: 0x110, Size: 0x8]
	int AverageContainerSize;//[Offset: 0x118, Size: 0x4]
	int AverageErrorTolerance;//[Offset: 0x11c, Size: 0x4]
	int ErrorLimit;//[Offset: 0x120, Size: 0x4]
	float NetUpdates;//[Offset: 0x124, Size: 0x4]
	float RoundTripMultiplier;//[Offset: 0x128, Size: 0x4]
	float AllowedError;//[Offset: 0x12c, Size: 0x4]
	float ErrorCorrection;//[Offset: 0x130, Size: 0x4]
	float ErrorCorrectionHigh;//[Offset: 0x134, Size: 0x4]
	float AllowedError_Rotation;//[Offset: 0x138, Size: 0x4]
	float ErrorCorrection_Rotation;//[Offset: 0x13c, Size: 0x4]
	float ErrorCorrectionHigh_Rotation;//[Offset: 0x140, Size: 0x4]
	bool Wait;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	bool Debug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 0x1]
	bool Draw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146, Size: 0x1]
	bool Persistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147, Size: 0x1]
	bool Red;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	bool Green;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1]
	bool Blue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 0x1]
	delegate ClientUpdate;//[Offset: 0x150, Size: 0x10]
	Pawn* Pawn;//[Offset: 0x170, Size: 0x8]
	World* SuspensionTraceWorld;//[Offset: 0x1e8, Size: 0x8]
	void SendServerTimeRequest(float SentTime, PrimitiveComponent* Comp);// 0x3be710
	void ClientReceiveTimeRequest(float ReceivedServerTime, float SentTime, HistoryBufferMinimum Correction);// 0x3be400
	void AllReceiveTimeRequest(HistoryBufferMinimum Correction);// 0x3be310

--------------------------------
Class: HistoryBufferMinimum
	Vector StoredLocation;//[Offset: 0x0, Size: 0xc]
	Vector StoredLinearVelocity;//[Offset: 0xc, Size: 0xc]
	Vector StoredAngularVelocity;//[Offset: 0x18, Size: 0xc]
	Rotator StoredRotation;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: LandVehicle_DragComponent.ActorComponent.Object
	bool Debug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	float AirResistanceMultiplier;//[Offset: 0xf4, Size: 0x4]
	PrimitiveComponent* Mesh;//[Offset: 0xf8, Size: 0x8]

--------------------------------
Class: WW3LandVehicleWheeledData.WW3LandVehicleData.WW3VehicleData.WW3StrikeData.Object
	CurveFloat* V_MaxWheelsAngleAtSpeed;//[Offset: 0x4a0, Size: 0x8]
	CurveFloat* MinForceAtAngleCurve;//[Offset: 0x4a8, Size: 0x8]
	CurveFloat* MinForceAtAngleSpeedMultiplierCurve;//[Offset: 0x4b0, Size: 0x8]
	bool bRotateWheelsSideways;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]

--------------------------------
Class: WW3LandVehicleData.WW3VehicleData.WW3StrikeData.Object
	CurveFloat* MaxSpeedAtClimbingAngle;//[Offset: 0x3e0, Size: 0x8]
	float MaxForwardSpeed;//[Offset: 0x3e8, Size: 0x4]
	float MaxBackwardSpeed;//[Offset: 0x3ec, Size: 0x4]
	float MaxSpeedInterpolation;//[Offset: 0x3f0, Size: 0x4]
	WW3WheelsAndSuspensionsConfig WheelsAndSusupensionsConfig;//[Offset: 0x3f8, Size: 0x38]
	bool bCreateParticlesUnderWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 0x1]
	float CustomSuspensionSnappingSpeed;//[Offset: 0x434, Size: 0x4]
	float SideAngleToApplyDamage;//[Offset: 0x438, Size: 0x4]
	bool bTriggerAntiTankMine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 0x1]
	float OverloadWheel;//[Offset: 0x440, Size: 0x4]
	float OverloadBody;//[Offset: 0x444, Size: 0x4]
	float CustomForwardForceMultiplier;//[Offset: 0x448, Size: 0x4]
	CurveFloat* SideVelocityReductionCurve;//[Offset: 0x450, Size: 0x8]
	CurveFloat* SideVelocityReductionAtRollCurve;//[Offset: 0x458, Size: 0x8]
	float ClimbingMaxAngle;//[Offset: 0x460, Size: 0x4]
	float AntiCapsizingForcePower;//[Offset: 0x464, Size: 0x4]
	float AntiCapsizingDampingPower;//[Offset: 0x468, Size: 0x4]
	float AntiCapsizingMinAngle;//[Offset: 0x46c, Size: 0x4]
	float AntiCapsizingSteeringRollingPower;//[Offset: 0x470, Size: 0x4]
	float AntiCapsizingLiftingPower;//[Offset: 0x474, Size: 0x4]
	float AntiCapsizingStartSteeringAngle;//[Offset: 0x478, Size: 0x4]
	float AntiCapsizingEndSteeringAngle;//[Offset: 0x47c, Size: 0x4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1]
	float JumpImpulseStrength;//[Offset: 0x484, Size: 0x4]
	float JumpImpulseForwardStrength;//[Offset: 0x488, Size: 0x4]
	float HandBrakeSpeed;//[Offset: 0x48c, Size: 0x4]
	float HandBrakeStrength;//[Offset: 0x490, Size: 0x4]
	float HandBrakeDelay;//[Offset: 0x494, Size: 0x4]
	bool bCanPossessRCWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1]
	float SpawnedStrikeLifeSpan;//[Offset: 0x49c, Size: 0x4]

--------------------------------
Class: WW3WheelsAndSuspensionsConfig
	WW3WheelAndSuspensionConfig[] WheelAndSuspension;//[Offset: 0x0, Size: 0x10]
	float WheelsRotationMultiplier;//[Offset: 0x10, Size: 0x4]
	float MaxUpDistance;//[Offset: 0x14, Size: 0x4]
	float MaxDownDistance;//[Offset: 0x18, Size: 0x4]
	float DistanceFromSuspensionToGroundTouchPoint;//[Offset: 0x1c, Size: 0x4]
	float TraceYOffsetFromCenter;//[Offset: 0x20, Size: 0x4]
	float TrackOffsetMultiplier;//[Offset: 0x24, Size: 0x4]
	FName HandlebarSocketName;//[Offset: 0x28, Size: 0x8]
	bool bRotateHandlebarInX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float HandlebarRotationMultiplier;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: WW3WheelAndSuspensionConfig
	FName SuspensionSocketName;//[Offset: 0x0, Size: 0x8]
	FName WheelSocketName;//[Offset: 0x8, Size: 0x8]
	FName TrackSocketName;//[Offset: 0x10, Size: 0x8]
	float WheelRadius;//[Offset: 0x18, Size: 0x4]
	float WheelRotationMultiplier;//[Offset: 0x1c, Size: 0x4]
	FName WheelSocketNamesRL;//[Offset: 0x20, Size: 0x8]
	FName SuspensionSocketNamesRL;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: WW3LandVehicleWheeledSimComp.WW3LandVehicleSimComp.WW3VehicleSimComp.ActorComponent.Object
	WW3LandVehicleWheeledNEW* LandVehicleWheeledOwner;//[Offset: 0x1c0, Size: 0x8]

--------------------------------
Class: WW3LandVehicleSimComp.WW3VehicleSimComp.ActorComponent.Object
	WW3LandVehicle* LandVehicleOwner;//[Offset: 0x128, Size: 0x8]
	PhysicsConstraintComponent*[] ConstraintsL;//[Offset: 0x140, Size: 0x10]
	PhysicsConstraintComponent*[] ConstraintsR;//[Offset: 0x150, Size: 0x10]
	PhysicsConstraintComponent*[] Constraints;//[Offset: 0x160, Size: 0x10]
	PrimitiveComponent*[] WheelsCollidingL;//[Offset: 0x170, Size: 0x10]
	PrimitiveComponent*[] WheelsCollidingR;//[Offset: 0x180, Size: 0x10]
	PrimitiveComponent*[] WheelsColliding;//[Offset: 0x190, Size: 0x10]
	WW3DetachedSceneComponentCache[] DetachedWheelsAndSuspensionsCache;//[Offset: 0x1a0, Size: 0x10]

--------------------------------
Class: WW3DetachedSceneComponentCache
	SceneComponent* Component;//[Offset: 0x0, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WW3LandVehicleEM.WW3VehicleEM.ActorComponent.Object
	ParticleSystemComponent* ParticleUnderWheelL1;//[Offset: 0x158, Size: 0x8]
	ParticleSystemComponent* ParticleUnderWheelL2;//[Offset: 0x160, Size: 0x8]
	ParticleSystemComponent* ParticleUnderWheelR1;//[Offset: 0x168, Size: 0x8]
	ParticleSystemComponent* ParticleUnderWheelR2;//[Offset: 0x170, Size: 0x8]
	ParticleSystemComponent* LowHealthParticleComponent;//[Offset: 0x180, Size: 0x8]
	WW3LandVehicleEMData* LandVehicleEMDataPointer;//[Offset: 0x188, Size: 0x8]
	WW3LandVehicle* LandVehicle;//[Offset: 0x190, Size: 0x8]

--------------------------------
Class: WW3LandVehicleEMData.WW3VehicleEMData.Object
	float HealthPercentageToActivateParticle;//[Offset: 0x240, Size: 0x4]
	ParticleSystem* LowHealthParticle;//[Offset: 0x248, Size: 0x8]
	float HandbrakeShakeStrength;//[Offset: 0x250, Size: 0x4]
	class CameraShake* HandbrakeShake;//[Offset: 0x258, Size: 0x8]
	class CameraShake* SuspensionDisplacementShake;//[Offset: 0x260, Size: 0x8]
	CurveFloat* SuspensionDisplacementCurve;//[Offset: 0x268, Size: 0x8]
	float SmokeSpawnCount;//[Offset: 0x270, Size: 0x4]
	float UpSmokeSpawnCount;//[Offset: 0x274, Size: 0x4]
	Vector2D SmokeLifetime;//[Offset: 0x278, Size: 0x8]
	Vector2D WheelsSmokeAlpha;//[Offset: 0x280, Size: 0x8]
	Vector SmokeSize1Min;//[Offset: 0x288, Size: 0xc]
	Vector SmokeSize1Max;//[Offset: 0x294, Size: 0xc]
	Vector SmokeSize2Min;//[Offset: 0x2a0, Size: 0xc]
	Vector SmokeSize2Max;//[Offset: 0x2ac, Size: 0xc]
	float DebrisSpawnCount;//[Offset: 0x2b8, Size: 0x4]
	Vector DebrisSizeMin;//[Offset: 0x2bc, Size: 0xc]
	Vector DebrisSizeMax;//[Offset: 0x2c8, Size: 0xc]

--------------------------------
Class: WW3LandVehicleAxisEffectsData
	Vector SpawnLocation_Vector;//[Offset: 0x0, Size: 0xc]
	Vector SpawnLocation_Vector_Low;//[Offset: 0xc, Size: 0xc]
	Vector SpawnOffset_Vector;//[Offset: 0x18, Size: 0xc]
	Vector RelativeLocation;//[Offset: 0x24, Size: 0xc]
	Vector DirtLocationBack_Vector;//[Offset: 0x30, Size: 0xc]
	Vector DirtLocationFront_Vector;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: WW3BoneProxyData

--------------------------------
Class: WW3BoneProxyRotation

--------------------------------
Class: WW3WheelAndSuspensionSave
	Vector DefaultSuspensionLocation;//[Offset: 0x0, Size: 0xc]
	float CurrentWheelSuspensionHeight;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: CapsuleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float GravityScale;//[Offset: 0x178, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x17c, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x180, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x184, Size: 0x4]
	byte MovementMode;//[Offset: 0x188, Size: 0x1]
	float GroundFriction;//[Offset: 0x18c, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x1ac, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x1b0, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x1b4, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x1b8, Size: 0x4]
	float BrakingFriction;//[Offset: 0x1bc, Size: 0x4]
	float BrakingSubStepTime;//[Offset: 0x1c0, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x1c4, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x1c8, Size: 0x4]
	float AirControl;//[Offset: 0x1cc, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x1d0, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1d4, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x1d8, Size: 0x4]
	float OutOfWorldFallingTime;//[Offset: 0x1dc, Size: 0x4]
	float OutOfWorldMinZCoord;//[Offset: 0x1e0, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x1e4, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x1e8, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x1ec, Size: 0xc]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f9, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f9, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f9, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f9, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f9, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f9, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f9, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f9, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x200, Size: 0x8]
	float Mass;//[Offset: 0x208, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x20c, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x210, Size: 0x4]
	float PushForceFactor;//[Offset: 0x214, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x218, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x21c, Size: 0x4]
	float MinTouchForce;//[Offset: 0x220, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x224, Size: 0x4]
	float RepulsionForce;//[Offset: 0x228, Size: 0x4]
	Vector Acceleration;//[Offset: 0x22c, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 0x10]
	Vector LastUpdateLocation;//[Offset: 0x250, Size: 0xc]
	Vector LastUpdateVelocity;//[Offset: 0x25c, Size: 0xc]
	Vector PendingImpulseToApply;//[Offset: 0x268, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x274, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x280, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x284, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x288, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x28c, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x290, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x294, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x298, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x29c, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x2a0, Size: 0x98]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x338, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x338, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x338, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x338, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x338, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x338, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x339, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x339, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x339, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x339, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x339, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x339, Size: 0x1]
	Vector RequestedVelocity;//[Offset: 0x33c, Size: 0xc]
	CapsuleComponent* PawnCapsuleComponent;//[Offset: 0x350, Size: 0x8]
	delegate OnFallenOutOfWorld;//[Offset: 0x368, Size: 0x10]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0xf1e220
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0xf1e1a0
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0xf1de40
	void SetCapsuleComponent(CapsuleComponent* Capsule);// 0xf1db40
	void K2_GetWalkableFloorZ(float ReturnValue);// 0xf1d790
	void K2_GetWalkableFloorAngle(float ReturnValue);// 0xf1d760
	void K2_FindFloor(Vector CapsuleLocation, FindFloorResult FloorResult);// 0xf1d620
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, FindFloorResult FloorResult);// 0xf1d430
	void IsWalking(bool ReturnValue);// 0xf1d400
	void IsWalkable(HitResult Hit, bool ReturnValue);// 0xf1d330
	void GetValidPerchRadius(float ReturnValue);// 0xf1d300
	void GetPerchRadiusThreshold(float ReturnValue);// 0xf1d2a0
	void GetMovementBase(PrimitiveComponent* ReturnValue);// 0xf1d270
	void GetMinAnalogSpeed(float ReturnValue);// 0xf1d230
	void GetMaxBrakingDeceleration(float ReturnValue);// 0xf1d1f0
	void GetMaxAcceleration(float ReturnValue);// 0xf1d1b0
	void GetLastUpdateVelocity(Vector ReturnValue);// 0xf1d180
	void GetLastUpdateRotation(Rotator ReturnValue);// 0xf1d130
	void GetLastUpdateLocation(Vector ReturnValue);// 0xf1d100
	void GetCurrentAcceleration(Vector ReturnValue);// 0xf1d060
	void GetAnalogInputModifier(float ReturnValue);// 0xf1d030
	void DisableMovement();// 0xf1d010
	void ClearAccumulatedForces();// 0x45e170
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult);// 0xf1ce20
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0xf1ccc0
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0xf1cbe0
	void AddForce(Vector Force);// 0xf1cb50

--------------------------------
Class: WW3SeatExit.SceneComponent.ActorComponent.Object
	int ExitPriority;//[Offset: 0x248, Size: 0x4]

--------------------------------
Class: WW3SeatSticky.WW3SeatBase.SceneComponent.ActorComponent.Object

--------------------------------
Class: BP_SatelliteVehicle_01_01_C.WW3SatelliteObject_Vehicle.WW3SatelliteObject.Actor.Object

--------------------------------
Class: BP_VH_Bumerang_01_C.BP_VH_LandVehicleWheeled_IFV_Default_01_C.WW3LandVehicleWheeledNEW.WW3LandVehicle.WW3Vehicle.WW3PawnStrike.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x17e8, Size: 0x8]
	void UserConstructionScript(SuspensionPhysics_Component*[] K2Node_MakeArray_Array, SuspensionPhysics_Component*[] K2Node_MakeArray_Array1, SuspensionPhysics_Component*[] K2Node_MakeArray_Array2);// 0x1395e00
	void ReceiveBeginPlay();// 0x1395e00
	void ExecuteUbergraph_BP_VH_Bumerang_01(int EntryPoint);// 0x1395e00
	WW3SeatSticky* WW3SeatSticky09;//[Offset: 0x17f0, Size: 0x8]
	WW3SeatExit* WW3SeatExitTop;//[Offset: 0x17f8, Size: 0x8]
	WW3SeatExit* WW3SeatExitDown;//[Offset: 0x1800, Size: 0x8]
	WW3SeatExit* WW3SeatExitRightRear;//[Offset: 0x1808, Size: 0x8]
	WW3SeatExit* WW3SeatExitLeftRear;//[Offset: 0x1810, Size: 0x8]
	WW3SeatExit* WW3SeatExitRear;//[Offset: 0x1818, Size: 0x8]
	WW3SeatExit* WW3SeatExitRightFront;//[Offset: 0x1820, Size: 0x8]
	WW3SeatExit* WW3SeatExitLeftFront;//[Offset: 0x1828, Size: 0x8]
	WW3SeatExit* WW3SeatExitFront;//[Offset: 0x1830, Size: 0x8]
	WW3SeatExit* WW3SeatExitRightMiddle3;//[Offset: 0x1838, Size: 0x8]
	WW3SeatExit* WW3SeatExitRightMiddle2;//[Offset: 0x1840, Size: 0x8]
	WW3SeatExit* WW3SeatExitRightMiddle1;//[Offset: 0x1848, Size: 0x8]
	WW3SeatExit* WW3SeatExitRightMiddle;//[Offset: 0x1850, Size: 0x8]
	WW3SeatExit* WW3SeatExitLeftMiddle3;//[Offset: 0x1858, Size: 0x8]
	WW3SeatExit* WW3SeatExitLeftMiddle2;//[Offset: 0x1860, Size: 0x8]
	WW3SeatExit* WW3SeatExitLeftMiddle1;//[Offset: 0x1868, Size: 0x8]
	WW3SeatExit* WW3SeatExitLeftMiddle;//[Offset: 0x1870, Size: 0x8]
	WW3SeatSticky* WW3SeatTowerAsSticky;//[Offset: 0x1878, Size: 0x8]
	WW3SeatPossessable* WW3SeatTower;//[Offset: 0x1880, Size: 0x8]
	WW3SeatSticky* WW3SeatSticky08;//[Offset: 0x1888, Size: 0x8]
	WW3SeatSticky* WW3SeatSticky07;//[Offset: 0x1890, Size: 0x8]
	WW3SeatSticky* WW3SeatSticky06;//[Offset: 0x1898, Size: 0x8]
	WW3SeatSticky* WW3SeatSticky05;//[Offset: 0x18a0, Size: 0x8]
	WW3SeatSticky* WW3SeatSticky04;//[Offset: 0x18a8, Size: 0x8]
	WW3SeatSticky* WW3SeatSticky03;//[Offset: 0x18b0, Size: 0x8]
	LandVehicle_EngineComponent* LandVehicle_Engine;//[Offset: 0x18b8, Size: 0x8]
	WheelManager_Component* WheelManager_;//[Offset: 0x18c0, Size: 0x8]
	LandVehicle_DragComponent* LandVehicle_Drag;//[Offset: 0x18c8, Size: 0x8]
	SuspensionPhysics_Component* R4;//[Offset: 0x18d0, Size: 0x8]
	SuspensionPhysics_Component* R3;//[Offset: 0x18d8, Size: 0x8]
	SuspensionPhysics_Component* R2;//[Offset: 0x18e0, Size: 0x8]
	SuspensionPhysics_Component* R1;//[Offset: 0x18e8, Size: 0x8]
	SuspensionPhysics_Component* L4;//[Offset: 0x18f0, Size: 0x8]
	SuspensionPhysics_Component* L3;//[Offset: 0x18f8, Size: 0x8]
	SuspensionPhysics_Component* L2;//[Offset: 0x1900, Size: 0x8]
	SuspensionPhysics_Component* L1;//[Offset: 0x1908, Size: 0x8]
	WW3SeatPossessable* WW3SeatPossessableDriver;//[Offset: 0x1910, Size: 0x8]
	float ForwardForce;//[Offset: 0x1918, Size: 0x4]
	float Speed;//[Offset: 0x191c, Size: 0x4]
	float WheelRadius;//[Offset: 0x1920, Size: 0x4]
	float DownForce;//[Offset: 0x1924, Size: 0x4]

--------------------------------
Class: BP_VH_BCVMobileSpawn_01_C.BP_VH_LandVehicleWheeled_IFV_Default_01_C.WW3LandVehicleWheeledNEW.WW3LandVehicle.WW3Vehicle.WW3PawnStrike.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x17e8, Size: 0x8]
	void UserConstructionScript(SuspensionPhysics_Component*[] K2Node_MakeArray_Array, SuspensionPhysics_Component*[] K2Node_MakeArray_Array1, SuspensionPhysics_Component*[] K2Node_MakeArray_Array2);// 0x1395e00
	void ReceiveBeginPlay();// 0x1395e00
	void ExecuteUbergraph_BP_VH_BCVMobileSpawn_01(int EntryPoint);// 0x1395e00
	WW3VehicleCameraComponent* WW3VehicleCamera;//[Offset: 0x17f0, Size: 0x8]
	SpringArmComponent* SpringArm;//[Offset: 0x17f8, Size: 0x8]
	WW3SeatExit* WW3SeatExitTop;//[Offset: 0x1800, Size: 0x8]
	WW3SeatExit* WW3SeatExitDown;//[Offset: 0x1808, Size: 0x8]
	WW3SeatExit* WW3SeatExitRightRear;//[Offset: 0x1810, Size: 0x8]
	WW3SeatExit* WW3SeatExitLeftRear;//[Offset: 0x1818, Size: 0x8]
	WW3SeatExit* WW3SeatExitRear;//[Offset: 0x1820, Size: 0x8]
	WW3SeatExit* WW3SeatExitRightFront;//[Offset: 0x1828, Size: 0x8]
	WW3SeatExit* WW3SeatExitLeftFront;//[Offset: 0x1830, Size: 0x8]
	WW3SeatExit* WW3SeatExitFront;//[Offset: 0x1838, Size: 0x8]
	WW3SeatExit* WW3SeatExitRightMiddle3;//[Offset: 0x1840, Size: 0x8]
	WW3SeatExit* WW3SeatExitRightMiddle2;//[Offset: 0x1848, Size: 0x8]
	WW3SeatExit* WW3SeatExitRightMiddle;//[Offset: 0x1850, Size: 0x8]
	WW3SeatExit* WW3SeatExitLeftMiddle2;//[Offset: 0x1858, Size: 0x8]
	WW3SeatExit* WW3SeatExitLeftMiddle1;//[Offset: 0x1860, Size: 0x8]
	WW3SeatExit* WW3SeatExitLeftMiddle;//[Offset: 0x1868, Size: 0x8]
	WW3SeatPossessable* WW3SeatTower;//[Offset: 0x1870, Size: 0x8]
	WW3SeatSticky* WW3SeatTowerAsSticky;//[Offset: 0x1878, Size: 0x8]
	WW3VehicleKlaxonComponent* WW3VehicleKlaxon;//[Offset: 0x1880, Size: 0x8]
	WW3VehicleMobileSpawnPointComp* WW3VehicleMobileSpawnPointComp;//[Offset: 0x1888, Size: 0x8]
	WW3SeatSticky* WW3SeatSticky8;//[Offset: 0x1890, Size: 0x8]
	WW3SeatSticky* WW3SeatSticky7;//[Offset: 0x1898, Size: 0x8]
	WW3SeatSticky* WW3SeatSticky6;//[Offset: 0x18a0, Size: 0x8]
	WW3SeatSticky* WW3SeatSticky5;//[Offset: 0x18a8, Size: 0x8]
	WW3SeatSticky* WW3SeatSticky4;//[Offset: 0x18b0, Size: 0x8]
	WW3SeatSticky* WW3SeatSticky3;//[Offset: 0x18b8, Size: 0x8]
	LandVehicle_EngineComponent* LandVehicle_Engine;//[Offset: 0x18c0, Size: 0x8]
	WheelManager_Component* WheelManager_;//[Offset: 0x18c8, Size: 0x8]
	LandVehicle_DragComponent* LandVehicle_Drag;//[Offset: 0x18d0, Size: 0x8]
	SuspensionPhysics_Component* R3;//[Offset: 0x18d8, Size: 0x8]
	SuspensionPhysics_Component* R2;//[Offset: 0x18e0, Size: 0x8]
	SuspensionPhysics_Component* R1;//[Offset: 0x18e8, Size: 0x8]
	SuspensionPhysics_Component* L3;//[Offset: 0x18f0, Size: 0x8]
	SuspensionPhysics_Component* L2;//[Offset: 0x18f8, Size: 0x8]
	SuspensionPhysics_Component* L1;//[Offset: 0x1900, Size: 0x8]
	WW3SeatPossessable* WW3SeatPossessableDriver;//[Offset: 0x1908, Size: 0x8]
	float ForwardForce;//[Offset: 0x1910, Size: 0x4]
	float Speed;//[Offset: 0x1914, Size: 0x4]
	float WheelRadius;//[Offset: 0x1918, Size: 0x4]
	float DownForce;//[Offset: 0x191c, Size: 0x4]

--------------------------------
Class: BP_MedKitInventory_01_C.WW3InventoryGadgetThrowablePack.WW3InventoryGadgetThrowable.WW3InventoryGadget.WW3InventoryItem.Actor.Object

--------------------------------
Class: WW3InventoryGadgetThrowablePack.WW3InventoryGadgetThrowable.WW3InventoryGadget.WW3InventoryItem.Actor.Object

--------------------------------
Class: WW3InventoryGadgetThrowable.WW3InventoryGadget.WW3InventoryItem.Actor.Object
	class WW3GadgetThrowable* GadgetToSpawn;//[Offset: 0x920, Size: 0x8]
	class WW3GadgetThrowable* GadgetToSpawnServerSide;//[Offset: 0x928, Size: 0x8]
	float ThrowForce;//[Offset: 0x930, Size: 0x4]
	Rotator SpawnRotation;//[Offset: 0x934, Size: 0xc]
	Vector SpawnRelativeLocation;//[Offset: 0x940, Size: 0xc]
	bool bShouldUseLocalCurrentAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94c, Size: 0x1]
	void Server_OnUsed(Vector_NetQuantize100 InLocation, Vector_NetQuantizeNormal InDirection, float InVelocityMagnitude, Rotator InRotation, float InRoundTripTime, InPackID(UInt64Property) InPackID);// 0xffc730
	void Client_OnPackSpawnFailed(InPackID(UInt64Property) InPackID);// 0xffbd80

--------------------------------
Class: BP_InventoryFragGrenade_01_C.WW3InventoryGrenade.WW3InventoryItem.Actor.Object

--------------------------------
Class: BP_VH_RcwsMachineGun_TowerPawn_01_C.BP_VH_TowerPawnDefault_01_C.WW3VehicleTower.WW3PawnStrike.Pawn.Actor.Object

--------------------------------
Class: BP_VH_TowerPawnDefault_01_C.WW3VehicleTower.WW3PawnStrike.Pawn.Actor.Object

--------------------------------
